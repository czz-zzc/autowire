//  ------------------------------------------------------------------------
//
//                    (C) COPYRIGHT 2002 - 2016 SYNOPSYS, INC.
//                            ALL RIGHTS RESERVED
//
//  This software and the associated documentation are confidential and
//  proprietary to Synopsys, Inc.  Your use or disclosure of this
//  software is subject to the terms and conditions of a written
//  license agreement between you, or your company, and Synopsys, Inc.
//
// The entire notice above must be reproduced on all authorized copies.
//
//  ------------------------------------------------------------------------

// -------------------------------------------------------------------------
// ---  RCS information: ARCT generated file. Do not manually edit. (generator -> process_rtl.sh)
// ---    $DateTime: 2015/10/01 07:18:15 $
// ---    $Revision: #35 $
// ---    $Id: //dwh/pcie_iip/main/DWC_pcie/DWC_pcie_dm/src/DWC_pcie_dm_cc_constants.v#35 $
// -------------------------------------------------------------------------

// Parameter used in license check (file has_pcie_license.tcl) to tell it what type of pcie device it is : EP, RC, DM, SW

`define CC_DEVICE_TYPE 2


`define CC_EP 0


`define CC_RC 1


`define CC_DM 2


`define CC_SW 3


// `define CX_IS_EP


// `define CX_IS_RC


`define CX_IS_DM


// `define CX_IS_SW


`define CX_IS_DM_OR_RC


`define CX_IS_DM_OR_SW


`define CX_IS_DM_OR_EP


// `define CX_IS_EP_OR_RC


// Name:         CX_DEVICE_TYPE
// Default:      PCIE_EP
// Values:       PCIE_EP (0x0), PCIE_EP_LEGACY (0x1), PCIE_RC (0x4)
// 
// Device Type, EP/EP_LEGACY/RC
`define CX_DEVICE_TYPE 4'h0

// -/ =================================================================
// -/ General Configuration
// -/ =================================================================


// Name:         RC_INTERFACE_ACTIVATED
// Default:      1
// Values:       0, 1
// 
// This will be active for all device types that have an RC mode, 
//  including DM cores. It influences RADM header field queue structures.
`define RC_INTERFACE_ACTIVATED


// Name:         EP_INTERFACE_ACTIVATED
// Default:      1
// Values:       0, 1
// 
// This will be active for all device types that have an EP mode, 
//  including DM cores. It influences RADM header field queue structures.
`define EP_INTERFACE_ACTIVATED


// Name:         FLT_Q_IN_MEMBAR_RANGE_WIDTH
// Default:      3 ([calc_membar_range_width (1) ])
// Values:       -2147483648, ..., 2147483647
// 
// number of bits for Filter field FLT_Q_IN_MEMBAR_RANGE
`define FLT_Q_IN_MEMBAR_RANGE_WIDTH 3


// Name:         FLT_Q_ROM_IN_RANGE_WIDTH
// Default:      1 ((1)==1)
// Values:       -2147483648, ..., 2147483647
// 
// number of bits for Filter field FLT_Q_ROM_IN_RANGE
`define FLT_Q_ROM_IN_RANGE_WIDTH 1


// Name:         CX_RC_ELBI
// Default:      0
// Values:       0, 1
// 
// Enables the ELBI Interface for RC Mode
// `define CX_RC_ELBI
//  ------------------------------------------------------------------------
//
//                    (C) COPYRIGHT 2002 - 2016 SYNOPSYS, INC.
//                            ALL RIGHTS RESERVED
//
//  This software and the associated documentation are confidential and
//  proprietary to Synopsys, Inc.  Your use or disclosure of this
//  software is subject to the terms and conditions of a written
//  license agreement between you, or your company, and Synopsys, Inc.
//
// The entire notice above must be reproduced on all authorized copies.
//
//  ------------------------------------------------------------------------

//-------------------------------------------------------------------------
//---  RCS information:
//---    $DateTime: 2016/06/30 09:50:44 $
//---    $Revision: #5 $
//---    $Id: //dwh/pcie_iip/main/DWC_pcie/DWC_pcie_common/src/DWC_pcie_mpcie_cc_constants.v#5 $
//-------------------------------------------------------------------------


//-/ =================================================================
//-/ Assigned value
//-/ =================================================================


`define SINGLE_CPCIE 0


`define SINGLE_MPCIE 1


`define DUAL_CMPCIE 2


`define SPEED_DF 0


`define SPEED_DW 1


`define SPEED_DISABLED 2


`define MPCIE_FREQ_31_2 3


`define MPCIE_FREQ_62_4 2


`define MPCIE_FREQ_124_8 1

//-/ =================================================================
//-/ MAC Mode
//-/ =================================================================


// Name:           CX_PCIE_MODE
// Default:        Single Conventional PCIe
// Values:         Single Conventional PCIe (0), Single M-PCIe (1), Selectable PHY (2)
// Parameter Type: Feature Setting
// 
// You can configure the controller to support Conventional PCIe or M-PCIe. 
// You can also configure the controller to support both Conventional PCIe and M-PCIe modes by choosing the Selectable PHY 
// setting.
`define CX_PCIE_MODE 0


// Name:         CX_S_CPCIE_MODE
// Default:      1 (CX_PCIE_MODE == SINGLE_CPCIE)
// Values:       0, 1
// 
// Indicates controller is Single Conventional PCIe Mode.
`define CX_S_CPCIE_MODE


// Name:         CX_S_MPCIE_MODE
// Default:      0 (CX_PCIE_MODE == SINGLE_MPCIE)
// Values:       0, 1
// 
// Indicates controller is Single M-PCIe Mode.
// `define CX_S_MPCIE_MODE


// Name:         CX_SEL_PHY_MODE
// Default:      0 (CX_PCIE_MODE == DUAL_CMPCIE)
// Values:       0, 1
// 
// Indicates controller is Selectable PHY Mode.
// `define CX_SEL_PHY_MODE


// Name:         CX_MPCIE_ENABLE
// Default:      0 (CX_S_MPCIE_MODE || CX_SEL_PHY_MODE)
// Values:       0, 1
// 
// Indicates controller have M-PCIe function. Set when M-PCIe is enabled (Both Single M-PCIe and Selectable PHY Mode).
// `define CX_MPCIE_ENABLE


// Name:         CX_CPCIE_ENABLE
// Default:      1 (CX_S_CPCIE_MODE || CX_SEL_PHY_MODE)
// Values:       0, 1
// 
// Indicates controller have Conventional PCIe function. Set when C-PCIe is enabled (Both Single C-PCIe and Selectable PHY 
// Mode).
`define CX_CPCIE_ENABLE


// Name:         CX_PHY_TYPE
// Default:      0x0 ((CX_PCIE_MODE == SINGLE_CPCIE) ? 0 : 1)
// Values:       0x0, 0x1
// 
// This parameter is used to decide mac_type value when Single Mac Mode. 
// When Single C-PCIe Mode : 0  / When Single M-PCIe Mode : 1 
// This parameter isn't used when Selectable PHY Mode.
`define CX_PHY_TYPE 1'h0


// Name:         CX_PHYIF_PIPE
// Default:      1 ((CX_S_CPCIE_MODE || CX_SEL_PHY_MODE))
// Values:       0, 1
// 
// Indicates MAC-PHY I/F is PIPE (not RMMI)
`define CX_PHYIF_PIPE


// Name:         CX_PHYIF_RMMI
// Default:      0 ((CX_S_MPCIE_MODE || CX_SEL_PHY_MODE))
// Values:       0, 1
// 
// Indicates MAC-PHY I/F is RMMI (not PIPE)
// `define CX_PHYIF_RMMI

//-/ =================================================================
//-/ Selectable PHY Mode feature setting
//-/ =================================================================


// Name:           CX_MAX_CPCIE_SPEED
// Default:        Gen1
// Values:         Gen1 (1), Gen2 (2), Gen3 (3)
// Enabled:        CX_PCIE_MODE == DUAL_CMPCIE
// Parameter Type: Feature Setting
// 
// Maximum supported link speed that the controller supports when operating under Conventional PCIe. This parameter is for 
// Selectable PHY mode only. CX_GEN2_MODE and CX_GEN3_MODE are used in single Conventional PCIe mode.
`define CX_MAX_CPCIE_SPEED 1


// Name:           CX_MAX_MPCIE_SPEED
// Default:        HS-Gear1
// Values:         HS-Gear1 (1), HS-Gear2 (2), HS-Gear3 (3)
// Enabled:        CX_PCIE_MODE == DUAL_CMPCIE
// Parameter Type: Feature Setting
// 
// Maximum supported link speed that the controller supports when operating under M-PCIe. This parameter is for Selectable 
// PHY mode only. CM_GEAR2_MODE and CM_GEAR3_MODE are used in Single M-PCIe mode.
`define CX_MAX_MPCIE_SPEED 1


// Name:           CX_2ND_SPD_MODE
// Default:        Disabled
// Values:         Dynamic Frequency (0), Dynamic Width (1), Disabled (2)
// Enabled:        CX_PCIE_MODE == DUAL_CMPCIE
// Parameter Type: Feature Setting
// 
// Specifies if Gen2 or HS-Gear2 is supported by the controller and how the data rate scale to Gen2 and HS-Gear2 is 
// performed by the core. This parameter is for Selectable PHY mode only. CX_GEN2_MODE is used for Single Conventional PCIe Mode and 
// CM_GEAR2_MODE is used for Single M-PCIe Mode. The PHY and controller can be set up differently if required. For example, 
// one can be Dynamic Width and the other one Dynamic Frequency. For more details, see the CX_PHY_GEN2_MODE and 
// CM_PHY_GEAR2_MODE parameters.
`define CX_2ND_SPD_MODE 2


// Name:           CX_3RD_SPD_MODE
// Default:        Disabled
// Values:         Dynamic Frequency (0), Dynamic Width (1), Disabled (2)
// Enabled:        CX_PCIE_MODE == DUAL_CMPCIE
// Parameter Type: Feature Setting
// 
// Specifies if Gen3 or HS-Gear3 is supported by the controller and how the data rate scale to Gen3 and HS-Gear3 is 
// performed by the core. This parameter is for Selectable PHY mode only. CX_GEN3_MODE is used for Single Conventional PCIe Mode and 
// CM_GEAR3_MODE is used for Single M-PCIe Mode. The PHY and controller can be set up differently if required. For example, 
// one can be Dynamic Width and the other one Dynamic Frequency. For more details, see the CX_PHY_GEN3_MODE and 
// CM_PHY_GEAR3_MODE parameters.
`define CX_3RD_SPD_MODE 2


// Name:           CX_4TH_SPD_MODE
// Default:        Disabled
// Values:         Dynamic Frequency (0), Dynamic Width (1), Disabled (2)
// Enabled:        CX_PCIE_MODE == DUAL_CMPCIE
// Parameter Type: Feature Setting
// 
// Specifies if Gen4 is supported by the controller and how the data rate scale to Gen4 is performed by the core. This 
// parameter is for Selectable PHY mode only. CX_GEN4_MODE is used for Single Conventional PCIe Mode. The PHY and controller can 
// be set up differently if required. For example, one can be Dynamic Width and the other one Dynamic Frequency. For more 
// details, see the CX_PHY_GEN4_MODE parameter. Note that only Conventional PCIe can support Gen4 and M-PCIe does not support 
// Gear4.
`define CX_4TH_SPD_MODE 2

//-/ =================================================================
//-/ M-PCIe Main feature setting
//-/ =================================================================


// Name:           MPHY_TYPE
// Default:        Example RMMI M-PHY (parallel IF)
// Values:         Example RMMI M-PHY (serial IF) (9), Example RMMI M-PHY (parallel 
//                 IF) (8), Custom M-PHY (external) (7)
// Parameter Type: Feature Setting
// 
// Select the type of M-PHY you are using. The M-PHY is instantiated outside the core, interfacing through the standard 
// RMMI I/F. You must use select the "Custom M-PHY (external)" option and use the appropriate Synopsys custom wrapper to 
// manually instantiate the M-PHY module from your vendor. For more details, see "Integrating the controller with the PHY" in the 
// User Guide. 
//  
// A digital RMMI M-PHY simulation module is supplied by Synopsys. This block is provided as example code for generic VTB 
// simulation purposes. You might use temporarily use this for simulation purposes until you receive a simulation model from 
// your PHY vendor. 
//  
// This parameter is for Single M-PCIe or Selectable PHY modes. Use the PHY_TYPE parameter for Single Conventional PCIe 
// mode.
`define MPHY_TYPE 8


// Name:           CM_FREQ
// Default:        124.8 MHz ((CX_PCIE_MODE == SINGLE_MPCIE) ? 2 : 1)
// Values:         31.2 MHz (3), 62.4 MHz (2), 124.8 MHz (1)
// Enabled:        CX_S_MPCIE_MODE || CX_SEL_PHY_MODE
// Parameter Type: Feature Setting
// 
// The operating frequency of the controller in RATE A and HS-Gear1 mode. This parameter is not used and invisible in 
// Single Conventional PCIe mode. 
//  - If the controller is configured for HS-Gear2 Dynamic Frequency, then the frequency will be doubled (x2) when 
//  operating at Gen2 (HS-Gear2) speed. 
//  - If the controller is configured for HS-Gear3 Dynamic Frequency, then the frequency will be quadrupled (x4) when 
//  operating at Gen3 (HS-Gear3) speed.
`define CM_FREQ 1


// Name:           CM_PHY_FREQ
// Default:        124.8 MHz (CM_FREQ)
// Values:         31.2 MHz (3), 62.4 MHz (2), 124.8 MHz (1)
// Enabled:        CX_S_MPCIE_MODE || CX_SEL_PHY_MODE
// Parameter Type: Feature Setting
// 
// The operating frequency of the PHY in RATE A and HS-Gear1mode. (RATE A and HS-Gear1 mode if M-PCIe). This parameter is 
// not used and is invisible in Single Conventional PCIe mode. 
//  - If the controller is configured for HS-Gear2 Dynamic Frequency, then the frequency will be doubled (x2) when 
//  operating at Gen2 (HS-Gear2) speed. 
//  - If the controller is configured for HS-Gear3 Dynamic Frequency, then the frequency will be quadrupled (x4) when 
//  operating at Gen3 (HS-Gear3) speed.
`define CM_PHY_FREQ 1


// Name:           CM_GEAR2_MODE
// Default:        Disabled ((CX_MAX_MPCIE_SPEED >= 2) ? CX_2ND_SPD_MODE : 2)
// Values:         Dynamic Frequency (0), Dynamic Width (1), Disabled (2)
// Enabled:        CX_PCIE_MODE == SINGLE_MPCIE
// Parameter Type: Feature Setting
// 
// Indicates controller HS-Gear2 Mode. This parameter is read-only and set automatically from CX_MAX_MPCIE_SPEED and 
// CX_2ND_SPD_MODE in Selectable PHY mode. This parameter is not used and is invisible in Single Conventional PCIe mode.
`define CM_GEAR2_MODE 2


// Name:         CM_HSGEAR1_SPEED
// Default:      1
// Values:       0, 1
// 
// When enabled, controller operates with HS-Gear1 features enabled.
`define CM_HSGEAR1_SPEED


`define CM_HSGEAR1_SPEED_VALUE 1


// Name:         CM_HSGEAR2_SPEED
// Default:      0 (CM_GEAR2_MODE != SPEED_DISABLED)
// Values:       0, 1
// 
// When enabled, controller operates with HS-Gear2 features enabled.
// `define CM_HSGEAR2_SPEED


`define CM_HSGEAR2_SPEED_VALUE 0


// Name:           CM_PHY_GEAR2_MODE
// Default:        Disabled (CM_GEAR2_MODE)
// Values:         Dynamic Frequency (0), Dynamic Width (1), Disabled (2)
// Enabled:        CX_S_MPCIE_MODE || CX_SEL_PHY_MODE
// Parameter Type: Feature Setting
// 
// Indicates PHY HS-Gear2 Mode in Single M-PCIe mode. This parameter is not used and is invisible in Single Conventional 
// PCIe mode.
`define CM_PHY_GEAR2_MODE 2


// Name:         MPHY_GEAR2_DYNAMIC_FREQ
// Default:      0 (CM_PHY_GEAR2_MODE == SPEED_DF)
// Values:       0, 1
// 
// M-PHY is Gear2 dynamic frequency.
// `define MPHY_GEAR2_DYNAMIC_FREQ


// Name:         MPHY_GEAR2_DYNAMIC_WIDTH
// Default:      0 (CM_PHY_GEAR2_MODE == SPEED_DW)
// Values:       0, 1
// 
// M-PHY is Gear2 dynamic width.
// `define MPHY_GEAR2_DYNAMIC_WIDTH


// Name:           CM_GEAR3_MODE
// Default:        Disabled ((CX_MAX_MPCIE_SPEED >= 3) ? CX_3RD_SPD_MODE : 2)
// Values:         Dynamic Frequency (0), Dynamic Width (1), Disabled (2)
// Enabled:        CX_PCIE_MODE == SINGLE_MPCIE
// Parameter Type: Feature Setting
// 
// Indicates controller HS-Gear3 Mode. This parameter is read only and set automatically from CX_MAX_MPCIE_SPEED and 
// CX_3RD_SPD_MODE when Selectable PHY Mode. This parameter is not used and invisible when Single Conventional PCIe Mode.
`define CM_GEAR3_MODE 2


// Name:         CM_HSGEAR3_SPEED
// Default:      0 (CM_GEAR3_MODE != SPEED_DISABLED)
// Values:       0, 1
// 
// When enabled, controller operates with HS-Gear3 features enabled.
// `define CM_HSGEAR3_SPEED


`define CM_HSGEAR3_SPEED_VALUE 0


// Name:           CM_PHY_GEAR3_MODE
// Default:        Disabled (CM_GEAR3_MODE)
// Values:         Dynamic Frequency (0), Dynamic Width (1), Disabled (2)
// Enabled:        CX_S_MPCIE_MODE || CX_SEL_PHY_MODE
// Parameter Type: Feature Setting
// 
// Indicates PHY HS-Gear3 Mode. This parameter is not used and is invisible in Single Conventional PCIe mode.
`define CM_PHY_GEAR3_MODE 2


// Name:         MPHY_GEAR3_DYNAMIC_FREQ
// Default:      0 (CM_PHY_GEAR3_MODE == SPEED_DF)
// Values:       0, 1
// 
// M-PHY is Gear3 dynamic frequency.
// `define MPHY_GEAR3_DYNAMIC_FREQ


// Name:         MPHY_GEAR3_DYNAMIC_WIDTH
// Default:      0 (CM_PHY_GEAR3_MODE == SPEED_DW)
// Values:       0, 1
// 
// M-PHY is Gear3 dynamic width.
// `define MPHY_GEAR3_DYNAMIC_WIDTH


`define CM_GEAR1_NB 1


// Name:         CM_NB
// Default:      1 ((CM_GEAR3_MODE == SPEED_DW) ? (CM_GEAR1_NB * 4) : (CM_GEAR2_MODE 
//               == SPEED_DW) ? (CM_GEAR1_NB * 2) : CM_GEAR1_NB)
// Values:       -2147483648, ..., 2147483647
// 
// Specifies the maximum number of symbols that are handled per each <tx/rx>_symbolclk cycle by the PHY.
`define CM_NB 1


// Name:         CM_NB_GTR_1
// Default:      0 ((((CM_GEAR3_MODE == SPEED_DW) ? (CM_GEAR1_NB * 4) : 
//               (CM_GEAR2_MODE == SPEED_DW) ? (CM_GEAR1_NB * 2) : CM_GEAR1_NB) > 1) ? 1 : 0)
// Values:       0, 1
// 
// Specifies mac has more than 1 symbol per clock in RMMI
// `define CM_NB_GTR_1


// Name:         CM_NB_GTR_2
// Default:      0 ((((CM_GEAR3_MODE == SPEED_DW) ? (CM_GEAR1_NB * 4) : 
//               (CM_GEAR2_MODE == SPEED_DW) ? (CM_GEAR1_NB * 2) : CM_GEAR1_NB) > 2) ? 1 : 0)
// Values:       0, 1
// 
// Specifies mac has more than 1 symbol per clock in RMMI
// `define CM_NB_GTR_2


// Name:         CM_NB_GTR_4
// Default:      0 ((((CM_GEAR3_MODE == SPEED_DW) ? (CM_GEAR1_NB * 4) : 
//               (CM_GEAR2_MODE == SPEED_DW) ? (CM_GEAR1_NB * 2) : CM_GEAR1_NB) > 4) ? 1 : 0)
// Values:       0, 1
// 
// Specifies mac has more than 1 symbol per clock in RMMI
// `define CM_NB_GTR_4


// Name:           CM_RMMI_WIDTH_
// Default:        10-bit(1s) (10 * (((CM_GEAR3_MODE == SPEED_DW) ? (CM_GEAR1_NB * 4) 
//                 : (CM_GEAR2_MODE == SPEED_DW) ? (CM_GEAR1_NB * 2) : CM_GEAR1_NB)))
// Values:         10-bit(1s) (10), 20-bit(2s) (20), 40-bit(4s) (40)
// Parameter Type: Feature Setting
// 
// Specifies the lane width (in bits) of the controller interface before the freq_step module is added (if necessary). 
// Equivalent to 10*CM_NB where CM_NB is the controller width (bytes) per lane. CM_NB is calculated automatically from CM_FREQ, 
// CM_GEAR2_MODE, and CM_GEAR3_MODE. CM_NB is the maximum number of "active" symbols (bytes) processed by the controller per 
// clock cycle per lane at the controller RMMI interface. For more details, see Table 1-1 in the "Frequency, Speed, and Width 
// Support" section in the Product Overview chapter of the Databook.
`define CM_RMMI_WIDTH_ 10


`define CM_PHY_GEAR1_NB 1


// Name:         CM_PHY_NB
// Default:      1 (MPHY_GEAR3_DYNAMIC_WIDTH ? (CM_PHY_GEAR1_NB * 4) : 
//               MPHY_GEAR2_DYNAMIC_WIDTH ? (CM_PHY_GEAR1_NB * 2) : CM_PHY_GEAR1_NB)
// Values:       -2147483648, ..., 2147483647
// 
// Specifies the maximum number of symbols that are handled per each <tx/rx>_symbolclk cycle by the PHY.
`define CM_PHY_NB 1

`define MPHY_NB_1


// Name:         CM_PHY_NB_GTR_1
// Default:      0 ((CM_PHY_NB > 1) ? 1 : 0)
// Values:       0, 1
// 
// Specifies mM-PHYac has more than 1 symbol per clock in RMMI
// `define CM_PHY_NB_GTR_1


// Name:         CM_PHY_NB_GTR_2
// Default:      0 ((CM_PHY_NB > 2) ? 1 : 0)
// Values:       0, 1
// 
// Specifies M-PHY has more than 1 symbol per clock in RMMI
// `define CM_PHY_NB_GTR_2


// Name:         CM_PHY_NB_GTR_4
// Default:      0 ((CM_PHY_NB > 4) ? 1 : 0)
// Values:       0, 1
// 
// Specifies M-PHY has more than 1 symbol per clock in RMMI
// `define CM_PHY_NB_GTR_4


// Name:           CM_PHY_RMMI_WIDTH_
// Default:        10-bit(1s) (10 * (CM_PHY_NB))
// Values:         10-bit(1s) (10), 20-bit(2s) (20), 40-bit(4s) (40)
// Parameter Type: Feature Setting
// 
// Specifies the lane width (in bits) of the PHY RMMI interface before the freq_step module is added (if necessary). 
// Equivalent to 10*CM_PHY_NB where CM_PHY_NB is the PHY RMMI width (bytes) per lane. CM_PHY_NB is calculated automatically from 
// CM_MPHY_FREQ, CM_PHY_GEAR2_MODE, and CM_PHY_GEAR3_MODE. CM_PHY_NB is the maximum number of "active" symbols (bytes) 
// processed by the PHY per clock cycle per lane at the PHY RMMI interface. For more details, see Table 1-1 in the "Frequency, Speed, 
// and Width Support" section in the Product Overview chapter of the Databook.
`define CM_PHY_RMMI_WIDTH_ 10


// Name:           CM_LSG1_NB
// Default:        1-byte ((CM_FREQ == 1) ? 1 : (CM_FREQ == 2) ? 2 : 4)
// Values:         1-byte (1), 2-byte (2), 4-byte (4)
// Enabled:        0
// Parameter Type: Feature Setting
// 
// RMMI Data width of each lane when LS-Gear1 mode. You must set this value to be equal to or less than CM_NB (the maximum 
// number of symbols).
`define CM_LSG1_NB 1

`define LSG1_NB_1


// Name:         CM_LSG1_NB_GTR_1
// Default:      0 ((CM_LSG1_NB > 1) ? 1 : 0)
// Values:       0, 1
// 
// Specifies device has more than 1 symbol per clock when LS-Gear1
// `define CM_LSG1_NB_GTR_1


// Name:         CM_LSG1_NB_GTR_2
// Default:      0 ((CM_LSG1_NB > 2) ? 1 : 0)
// Values:       0, 1
// 
// Specifies device has more than 2 symbol per clock when LS-Gear1
// `define CM_LSG1_NB_GTR_2


// Name:           CM_PHY_LSG1_NB
// Default:        1-byte ((CM_PHY_FREQ == 1) ? 1 : (CM_PHY_FREQ == 2) ? 2 : 4)
// Values:         1-byte (1), 2-byte (2), 4-byte (4)
// Enabled:        0
// Parameter Type: Feature Setting
// 
// RMMI Data width of each lane when LS-Gear1 mode. You must set this value to be equal to or less than CM_PHY_NB (the 
// maximum number of symbols).
`define CM_PHY_LSG1_NB 1

`define MPHY_LSG1_NB_1


// Name:         CM_PHY_LSG1_NB_GTR_1
// Default:      0 ((CM_PHY_LSG1_NB > 1) ? 1 : 0)
// Values:       0, 1
// 
// Specifies device has more than 1 symbol per clock on PHY when LS-Gear1
// `define CM_PHY_LSG1_NB_GTR_1


// Name:         CM_PHY_LSG1_NB_GTR_2
// Default:      0 ((CM_PHY_LSG1_NB > 2) ? 1 : 0)
// Values:       0, 1
// 
// Specifies device has more than 2 symbol per clock on PHY when LS-Gear1
// `define CM_PHY_LSG1_NB_GTR_2


// Name:           CM_TXNL_GUI
// Default:        x4
// Values:         x1 (1), x2 (2), x4 (4), x8 (8), x16 (16)
// Enabled:        CX_S_MPCIE_MODE || CX_SEL_PHY_MODE
// Parameter Type: Feature Setting
// 
// Maximum number of Tx Lanes that the controller supports for M-PCIe. For full details of what combinations of modes, 
// frequencies and link widths are supported for each core, see Table 1-1 in the "Frequency, Speed, and Width Support" section in 
// the M-PCIe chapter of the Databook.
`define CM_TXNL_GUI 4


// Name:           CM_RXNL_GUI
// Default:        x4 (CM_TXNL_GUI)
// Values:         x1 (1), x2 (2), x4 (4), x8 (8), x16 (16)
// Enabled:        0
// Parameter Type: Feature Setting
// 
// Maximum number of Rx lanes that the controller supports for M-PCIe.  For full details of what combinations of modes, 
// frequencies and link widths are supported for each core, see Table 1-1 in the "Frequency, Speed, and Width Support" section 
// in the M-PCIe chapter of the Databook. The controller does not currently support static asymmetric link widths. The Rx link 
// width is automatically sized to be the same as the Tx link width.
`define CM_RXNL_GUI 4


// Name:           CM_FREQ_STEP_DOWN_EN
// Default:        No ((CM_PHY_NB != CM_NB) || (CM_GEAR2_MODE != CM_PHY_GEAR2_MODE))
// Values:         No (0), Yes (1)
// Parameter Type: Feature Setting
// 
// If this automatically-derived parameter is defined, then a module called freq_step (workspace/src/common/freq_step.v) is 
// placed in between the RMMI I/O and the core's internal RMMI interface. This module steps up/down the signals to/from the 
// RMMI interface. For example, the controller can run at 31.2MHz (4 symbols per clock) and the pipe can run at 124.8 MHz (1 
// symbol per clock). This read only parameter is derived automatically and is Read- Only. For more details, see "Frequency, 
// Speed and Width Support" in the M-PCIE chapter of Databook.
// `define CM_FREQ_STEP_DOWN_EN


// Name:         CX_RMMI_LOOPBACK_EN
// Default:      0 (CX_S_MPCIE_MODE || CX_SEL_PHY_MODE)
// Values:       0, 1
// 
// Allows local Loopback from the RMMI TX to RMMI TX in the absence of a link partner.
// `define CX_RMMI_LOOPBACK_EN


// Name:           CM_MPCIE_CFG_RDATA_LATENCY
// Default:        1
// Values:         1, ..., 16
// Enabled:        CX_S_MPCIE_MODE || CX_SEL_PHY_MODE
// Parameter Type: Performance Setting
// 
// M-PHY CFG Read Data Latency in CFG clock cycles. This must be specified by your M-PHY provider. It is the (worst case) 
// latency in tx_cfgclk/rx_cfgclk cycles from the RMMI interface to the core. RMMI Standard value is '1'.
`define CM_MPCIE_CFG_RDATA_LATENCY 1


// Name:           CM_MPCIE_CFG_RDYN_LATENCY
// Default:        1
// Values:         1, ..., 16
// Enabled:        CX_S_MPCIE_MODE || CX_SEL_PHY_MODE
// Parameter Type: Performance Setting
// 
// M-PHY CFG Ready_n Latency in CFG clock cycles. This must be specified by your M-PHY provider. It is the (worst case) 
// latency in tx_cfgclk/rx_cfgclk cycles from the RMMI interface to the core. RMMI Standard value is '1'.
`define CM_MPCIE_CFG_RDYN_LATENCY 1


// Name:           CM_RMMI_RETIMING_MAC_PHY
// Default:        Disabled
// Values:         Disabled (0), Enabled (1)
// Enabled:        CX_S_MPCIE_MODE || CX_SEL_PHY_MODE
// Parameter Type: Performance Setting
// 
// Specifies insertion of a register pipeline on the RMMI output signals. If you use the retiming circuit between MAC and 
// PHY, you must set this parameter to '1'.
`define CM_RMMI_RETIMING_MAC_PHY 0


// Name:           CM_RMMI_RETIMING_PHY_MAC
// Default:        Disabled
// Values:         Disabled (0), Enabled (1)
// Enabled:        CX_S_MPCIE_MODE || CX_SEL_PHY_MODE
// Parameter Type: Performance Setting
// 
// Specifies insertion of a register pipeline on the RMMI input signals. The phy_mac_rx_hibern8exit_type1 signal is not 
// pipelined because it is asynchronous. If you use the retiming circuit between PHY and MAC, you must set this parameter to 
// '1'.
`define CM_RMMI_RETIMING_PHY_MAC 0

//-/ =================================================================
//-/ The default value of Port Logic register for M-PCIe
//-/ =================================================================


// Name:           MPCIE_CAP_ENABLE
// Default:        0x0 (CX_S_MPCIE_MODE || CX_SEL_PHY_MODE)
// Values:         0x0, 0x1
// Parameter Type: Feature Setting
// 
// Secondary M-PCIe Extended Capability Structure Enable
`define MPCIE_CAP_ENABLE 1'h0


// Name:           DEFAULT_PMCLK_PLCY
// Default:        Remove Nothing
// Values:         Remove Nothing (0x0), Remove cfgclk group (0x1), Remove cfgclk 
//                 group + core_clk (0x2), Remove cfgclk group + core_clk + REFCLK (0x3)
// Enabled:        CX_S_MPCIE_MODE || CX_SEL_PHY_MODE
// Parameter Type: Register Default Setting
// 
// Clock policy of M-PCIe power management in L1/L2.  This parameter is used to set the default value of "Power Management 
// Clock Policy" (PM_CLOCK_POLICY) field in the M-PCIe Control (PL_MPCIE_CTRL_REG) Port Logic Register.
`define DEFAULT_PMCLK_PLCY 2'h0


// Name:           DEFAULT_PMANLOG_PLCY
// Default:        Not remove
// Values:         Not remove (0x0), Remove analog power (0x1)
// Enabled:        CX_S_MPCIE_MODE || CX_SEL_PHY_MODE
// Parameter Type: Register Default Setting
// 
// Analog power policy of power management in L1/L2. 
//  This parameter is used to set the default value of Power Management Analog Policy in Port Logic Register. This 
//  register is only for the Synopsys M-PHY.
`define DEFAULT_PMANLOG_PLCY 1'h0


//-/ =================================================================
//-/ Advanced M-PHY Feature Configuration
//-/ =================================================================


// Name:           CM_SNPS_MPHY_ENABLE
// Default:        Enabled
// Values:         Disabled (0), Enabled (1)
// Enabled:        CX_S_MPCIE_MODE || CX_SEL_PHY_MODE
// Parameter Type: Feature Setting
// 
// Specifies that the Synopsys M-PHY original application I/F signals are enabled. If you use the Synopsys M-PHY, then you 
// must set this parameter to '1'.
`define CM_SNPS_MPHY_ENABLE


// `define CM_OTHER_SNPS_MPHY_ENABLE


// Name:           MPHY_PPM_2K_RQD
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_S_MPCIE_MODE || CX_SEL_PHY_MODE
// Parameter Type: Feature Setting
// 
// Default value for 2K PPM Required bit in the M-PCIe Attribute Capability. A value of "1" indicates 2K PPM Clock 
// Compensation is required.
`define MPHY_PPM_2K_RQD 1'h1


// Name:           MPHY_CFG_RETRAIN_CAP
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_S_MPCIE_MODE || CX_SEL_PHY_MODE
// Parameter Type: Feature Setting
// 
// Default value for LINK_CFG_RETAINED_CAPABILITY bit in the M-PCIe Attribute Capability.  A value of '1' indicates that 
// the LINK supports retaining M-PHY configuration registers through D3cold.
`define MPHY_CFG_RETRAIN_CAP 1'h0


// Name:           MPHY_RATE_CAP
// Default:        RateA and RateB
// Values:         RateA Only (0x1), RateB Only (0x2), RateA and RateB (0x3)
// Enabled:        CX_S_MPCIE_MODE || CX_SEL_PHY_MODE
// Parameter Type: Feature Setting
// 
// Default value for Rate_Series_Capability bit in the M-PCIe Attribute Capability. 
//  - Bit[0]: Rate A supported (1 = supported) 
//  - Bit[1]: Rate B supported
`define MPHY_RATE_CAP 2'h3


// Name:           MPHY_C_HSG1_SYNC_LENGTH
// Default:        0xa ((MPHY_TYPE==9) ? 0x03 : 0x0A)
// Values:         0x0, ..., 0x7f
// Enabled:        CX_S_MPCIE_MODE || CX_SEL_PHY_MODE
// Parameter Type: Feature Setting
// 
// Default value for C_REFCLK_RX_HS_G1_SYNC_LENGTH_CAPABILITY bit in the M-PCIe Attribute Capability. Indicates SYNC Length 
// for HS-Gear1 Common Clock. 
//  - [7:6]: Sync Range (00=Fine, 01=Coarse) 
//  - [5:0]: Sync Length (0-15) 
// If (Sync Range = Fine) 
//  
//   TSYNC = Sync Length (SI) 
//  
// Else  
//  
//   TSYNC = 2^Sync Length (SI)
`define MPHY_C_HSG1_SYNC_LENGTH 8'ha


// Name:           MPHY_C_HSG2_SYNC_LENGTH
// Default:        0x0 (CM_HSGEAR2_SPEED ? ((MPHY_TYPE==9) ? 0x03 : 0x0A) : 0x00)
// Values:         0x0, ..., 0x7f
// Enabled:        CX_MPCIE_ENABLE && CM_HSGEAR2_SPEED
// Parameter Type: Feature Setting
// 
// Default value for C_REFCLK_RX_HS_G2_SYNC_LENGTH_CAPABILITY bit in the M-PCIe Attribute Capability. 
// Indicates SYNC Length for HS-Gear2 Common Clock. 
//  - [7:6]: Sync Range (00=Fine, 01=Coarse) 
//  - [5:0]: Sync Length (0-15) 
// If (Sync Range = Fine) 
//  
//   TSYNC = Sync Length (SI) 
//  
// Else  
//  
//   TSYNC = 2^Sync Length (SI)
`define MPHY_C_HSG2_SYNC_LENGTH 8'h0


// Name:           MPHY_C_HSG3_SYNC_LENGTH
// Default:        0x0 (CM_HSGEAR3_SPEED ? ((MPHY_TYPE==9) ? 0x03 : 0x0A) : 0x00)
// Values:         0x0, ..., 0x7f
// Enabled:        CX_MPCIE_ENABLE && CM_HSGEAR3_SPEED
// Parameter Type: Feature Setting
// 
// Default value for C_REFCLK_RX_HS_G3_SYNC_LENGTH_CAPABILITY bit in the M-PCIe Attribute Capability. 
// Indicates SYNC Length for HS-Gear3 Common Clock. 
//  - [7:6]: Sync Range (00=Fine, 01=Coarse) 
//  - [5:0]: Sync Length (0-15) 
// If (Sync Range = Fine) 
//  
//   TSYNC = Sync Length (SI) 
//  
// Else  
//  
//   TSYNC = 2^Sync Length (SI)
`define MPHY_C_HSG3_SYNC_LENGTH 8'h0


// Name:           MPHY_NC_HSG1_SYNC_LENGTH
// Default:        0xa ((MPHY_TYPE==9) ? 0x03 : 0x0A)
// Values:         0x0, ..., 0x7f
// Enabled:        CX_S_MPCIE_MODE || CX_SEL_PHY_MODE
// Parameter Type: Feature Setting
// 
// Default value for NC_REFCLK_RX_HS_G1_SYNC_LENGTH_CAPABILITY bit in the M-PCIe Attribute Capability. 
// Indicates SYNC Length for HS-Gear1 Non-Common Clock. 
//  - [7:6]: Sync Range (00=Fine, 01=Coarse) 
//  - [5:0]: Sync Length (0-15) 
// If (Sync Range = Fine) 
//  
//   TSYNC = Sync Length (SI) 
//  
// Else  
//  
//   TSYNC = 2^Sync Length (SI)
`define MPHY_NC_HSG1_SYNC_LENGTH 8'ha


// Name:           MPHY_NC_HSG2_SYNC_LENGTH
// Default:        0x0 (CM_HSGEAR2_SPEED ? ((MPHY_TYPE==9) ? 0x03 : 0x0A) : 0x00)
// Values:         0x0, ..., 0x7f
// Enabled:        CX_MPCIE_ENABLE && CM_HSGEAR2_SPEED
// Parameter Type: Feature Setting
// 
// Default value for NC_REFCLK_RX_HS_G2_SYNC_LENGTH_CAPABILITY bit in the M-PCIe Attribute Capability. 
// Indicates SYNC Length for HS-Gear2 Non-Common Clock. 
//  - [7:6]: Sync Range (00=Fine, 01=Coarse) 
//  - [5:0]: Sync Length (0-15) 
// If (Sync Range = Fine) 
//  
//   TSYNC = Sync Length (SI) 
//  
// Else  
//  
//   TSYNC = 2^Sync Length (SI)
`define MPHY_NC_HSG2_SYNC_LENGTH 8'h0


// Name:           MPHY_NC_HSG3_SYNC_LENGTH
// Default:        0x0 (CM_HSGEAR3_SPEED ? ((MPHY_TYPE==9) ? 0x03 : 0x0A) : 0x00)
// Values:         0x0, ..., 0x7f
// Enabled:        CX_MPCIE_ENABLE && CM_HSGEAR3_SPEED
// Parameter Type: Feature Setting
// 
// Default value for NC_REFCLK_RX_HS_G3_SYNC_LENGTH_CAPABILITY bit in the M-PCIe Attribute Capability. 
// Indicates SYNC Length for HS-Gear3 Non-Common Clock. 
// / - [7:6]: Sync Range (00=Fine, 01=Coarse) 
//  - [5:0]: Sync Length (0-15) 
// If (Sync Range = Fine) 
//  
//   TSYNC = Sync Length (SI) 
//  
// Else  
//  
//   TSYNC = 2^Sync Length (SI)
`define MPHY_NC_HSG3_SYNC_LENGTH 8'h0


// Name:           MPHY_HSG1_PREPARE_LENGTH
// Default:        0x1 ((MPHY_TYPE==9) ? 0xA : 0x1)
// Values:         0x0, ..., 0xf
// Enabled:        CX_S_MPCIE_MODE || CX_SEL_PHY_MODE
// Parameter Type: Feature Setting
// 
// Default value for LINK_RX_HS_G1_PREPARE_LENGTH_CAPABILITY bit in the M-PCIe Attribute Capability. 
// Indicates PREPARE Length for HS-Gear1.  
//  
// T_HS_PREPARE = HS_PREPARE_length * 2^(GEAR-1)
`define MPHY_HSG1_PREPARE_LENGTH 4'h1


// Name:           MPHY_HSG2_PREPARE_LENGTH
// Default:        0x0 (CM_HSGEAR2_SPEED ? ((MPHY_TYPE==9) ? 0xA : 0x1) : 0x0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_MPCIE_ENABLE && CM_HSGEAR2_SPEED
// Parameter Type: Feature Setting
// 
// Default value for LINK_RX_HS_G2_PREPARE_LENGTH_CAPABILITY bit in the M-PCIe Attribute Capability. 
// Indicates PREPARE Length for HS-Gear2.  
//  
// T_HS_PREPARE = HS_PREPARE_length * 2^(GEAR-1)
`define MPHY_HSG2_PREPARE_LENGTH 4'h0


// Name:           MPHY_HSG3_PREPARE_LENGTH
// Default:        0x0 (CM_HSGEAR3_SPEED ? ((MPHY_TYPE==9) ? 0xA : 0x1) : 0x0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_MPCIE_ENABLE && CM_HSGEAR3_SPEED
// Parameter Type: Feature Setting
// 
// Default value for LINK_RX_HS_G3_PREPARE_LENGTH_CAPABILITY bit in the M-PCIe Attribute Capability. 
// Indicates PREPARE Length for HS-Gear3.  
//  
// T_HS_PREPARE = HS_PREPARE_length * 2^(GEAR-1)
`define MPHY_HSG3_PREPARE_LENGTH 4'h0


// Name:           MPHY_BURST_CLOSE_LENGTH
// Default:        0x1 ((MPHY_TYPE==9) ? (CM_NB==1) ? 8 : (CM_NB==2) ? 10 : 16 : 1)
// Values:         0x0, ..., 0x1f
// Enabled:        CX_S_MPCIE_MODE || CX_SEL_PHY_MODE
// Parameter Type: Feature Setting
// 
// Default value for LINK_RX_PWM_BURST_CLOSURE_LENGTH_CAPABILITY bit in the M-PCIe Attribute Capability. 
//  Indicates burst closure time (in SI).
`define MPHY_BURST_CLOSE_LENGTH 5'h1


// Name:           MPHY_H8_TIME_CAP
// Default:        0x64 ((MPHY_TYPE==9) ? 16 : 100)
// Values:         0x1, ..., 0x64
// Enabled:        CX_S_MPCIE_MODE || CX_SEL_PHY_MODE
// Parameter Type: Feature Setting
// 
// Default value for LINK_HIBERN8_TIME_CAPABILITY bit in the M-PCIe Attribute Capability.  Indicates to the controller that 
// it is required to remain in the HIBERN8 state for Local LINK (in 1us). Permitted values are from 1 to 100 (1us to 100us).
`define MPHY_H8_TIME_CAP 8'h64


// Name:           MPHY_MIN_ACT_TIME
// Default:        0x64 ((MPHY_TYPE==9) ? 26 : 100)
// Values:         0x1, ..., 0x64
// Enabled:        CX_S_MPCIE_MODE || CX_SEL_PHY_MODE
// Parameter Type: Feature Setting
// 
// Default value for LINK_MIN_ACTIVATETIME bit in the M-PCIe Attribute Capability.  Indicates the required minimum activate 
// time for Local LINK (in 1us). Permitted values are from 1 to 100 (1us to 100us).
`define MPHY_MIN_ACT_TIME 8'h64


// Name:           MPHY_VDRSPC_REG_VID
// Default:        0x16c3 (CM_SNPS_MPHY_ENABLE ? 0x16C3 : 0)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_MPCIE_ENABLE & !CM_SNPS_MPHY_ENABLE
// Parameter Type: Feature Setting
// 
// Specifies PCI-SIG (MIPI) Vendor ID that represents the organization defining the Vendor specific registers located at 
// M-PCIe Vendor Specific Phy Register Lower Address.  The value 0x0000 indicates that the Phy doesn't have a Vendor Specific 
// Phy Register. This parameter is the default value of the M-PCIe Phy Register Vendor ID. If the PHY is a Synopsys M-PHY then 
// this parameter is set to 0x16C3.
`define MPHY_VDRSPC_REG_VID 16'h16c3


// Name:           MPHY_VDRSPC_REG_LADDR
// Default:        0xb9 (CM_SNPS_MPHY_ENABLE ? 0xB9 : 0)
// Values:         0x0, ..., 0xff
// Enabled:        CX_MPCIE_ENABLE & !CM_SNPS_MPHY_ENABLE & (MPHY_VDRSPC_REG_VID != 
//                 0x0000)
// Parameter Type: Feature Setting
// 
// Specifies the starting Lower Address for the M-PCIE Vendor Specific Phy Registers. This parameter is the default value 
// of the M-PCIe Vendor Specific Phy Register Lower Address.  If MPHY_VDRSPC_REG_VID is 0x0000 (indicates that Phy doesn't 
// have a Vendor Specific Register), then this parameter is read-only and the value is 0x00. If the PHY is a Synopsys M-PHY then 
// this parameter is set to 0xB9.
`define MPHY_VDRSPC_REG_LADDR 8'hb9


// Name:           MPHY_VDRSPC_REG_VID_ISUR
// Default:        PCI-SIG (CM_SNPS_MPHY_ENABLE ? 1 : 0)
// Values:         No Vendor Specific Registers (0x0), PCI-SIG (0x1), MIPI Alliance 
//                 (0x2)
// Enabled:        CX_MPCIE_ENABLE & !CM_SNPS_MPHY_ENABLE & (MPHY_VDRSPC_REG_VID != 
//                 0x0000)
// Parameter Type: Feature Setting
// 
// Indicates the organization that issued the ID contained in M-PCIe Phy Register Vendor ID. This parameter is default 
// value of M-PCIe Phy Register Vendor ID Issuer.  If MPHY_VDRSPC_REG_VID is 0x0000(means Phy doesn't have Vendor Specific 
// Register), this parameter is read-only and the value is 0x00. If PHY is Synopsys M-PHY this parameter is set to 'PCI-SIG1'.
`define MPHY_VDRSPC_REG_VID_ISUR 8'h1


// Name:           CM_PHY_TX_DELAY_PHY
// Default:        5 ((MPHY_TYPE==9) ? (CM_NB==1) ? 14 : (CM_NB==2) ? 7 : 5 : 5)
// Values:         0, ..., 500
// Enabled:        CX_S_MPCIE_MODE || CX_SEL_PHY_MODE
// Parameter Type: Feature Setting
// 
// PHY Transmitter delay in clock cycles.This must be specified by your PHY provider and is the (worst case) delay in 
// tx_symbolclk cycles from the RMMI interface to the TX Phy serial pins. This parameter in conjunction with "PHY Rx Delay" is 
// used to calculate the delay in getting an ACK DLLP back from the link partner, for a TLP sent by your core. It is then used 
// to calculate the size of the Retry Buffer. This parameter is for M-PCIe mode only.
`define CM_PHY_TX_DELAY_PHY 5


// Name:           CM_PHY_RX_DELAY_PHY
// Default:        6 ((MPHY_TYPE==9) ? (CM_NB==1) ? 13 : (CM_NB==2) ? 8 : 5 : 6)
// Values:         0, ..., 500
// Enabled:        CX_S_MPCIE_MODE || CX_SEL_PHY_MODE
// Parameter Type: Feature Setting
// 
// PHY Receiver delay in clock cycles. This must be specified by your PHY provider and is the (worst case) delay in 
// rx_symbolclk  cycles from the RX Phy serial pins to the RMMI interface. This parameter in conjunction with "PHY Tx Delay" is used 
// to calculate the delay in getting an ACK DLLP back from the link partner, for a TLP sent by your core. It is then used to 
// calculate the size of the Retry Buffer. This parameter is for M-PCIe mode only.
`define CM_PHY_RX_DELAY_PHY 6


//-/ =================================================================
//-/ Calculate STALL exit time
//-/ =================================================================


`define C_G1_SYNC_SI 10


`define C_G2_SYNC_SI 0


`define C_G3_SYNC_SI 0


`define NC_G1_SYNC_SI 10


`define NC_G2_SYNC_SI 0


`define NC_G3_SYNC_SI 0


`define G1_PREPARE_SI 1


`define G2_PREPARE_SI 0


`define G3_PREPARE_SI 0


`define LONGER_LENGTH_C_G1_G2 11


`define CM_MAX_SYNC_TIME_CMN 11


`define LONGER_LENGTH_NC_G1_G2 11


`define CM_MAX_SYNC_TIME_NONCMN 11


`define CM_MAX_SYNC_TIME 11


`define CM_MAX_SYNC_TIME_D4 2


//-/ =================================================================
//-/ Calculate Latency
//-/ =================================================================


// Name:           CM_PHY_TX_DELAY_MAC
// Default:        5
// Values:         0, ..., 500
// Parameter Type: Feature Setting
// 
// Transmit delay through the MAC layer of the PCIe controller in clock cycles, used for retry buffer auto-size 
// calculation. You normally do not need to change the value of this parameter.
`define CM_PHY_TX_DELAY_MAC 5


// Name:           CM_PHY_RX_DELAY_MAC
// Default:        9 ( ((CX_MPCIE_ENABLE && (CM_NB == 1)) ? 34 
//                  :(CX_MPCIE_ENABLE && (CM_NB == 2)) ? 16 
//                                                       :  9 ))
// Values:         0, ..., 500
// Parameter Type: Feature Setting
// 
// Receive delay through the MAC layer of the PCIe controller in clock cycles, used for retry buffer auto-size calculation. 
// You normally do not need to change the value of this parameter.
`define CM_PHY_RX_DELAY_MAC 9


// Name:           CM_MPCIE_INTERNAL_DELAY
// Default:        25 (CM_PHY_TX_DELAY_MAC + CM_PHY_TX_DELAY_PHY + CM_PHY_RX_DELAY_MAC 
//                 + CM_PHY_RX_DELAY_PHY + CM_RMMI_RETIMING_MAC_PHY + 
//                 CM_RMMI_RETIMING_PHY_MAC)
// Values:         0, ..., 2048
// Parameter Type: Feature Setting
// 
// Read-only parameter that indicates the sum of the MAC/PHY delays of M-PCIe, used for retry buffer auto-sizing, AckNak 
// Timer adjustment and replay timer adjustment.
`define CM_MPCIE_INTERNAL_DELAY 25


//-/ =================================================================
//-/ Configuration register daualt value setting
//-/ =================================================================


// Name:           MPCIE_DEFAULT_L1_EXIT_LATENCY
// Default:        32us to 64us
// Values:         Less than 1us (0x0), 1us to less than 2us (0x1), 2us to less than 
//                 4us (0x2), 4us to less than 8us (0x3), 8us to less than 16us (0x4), 
//                 16us to less than 32us (0x5), 32us to 64us (0x6), More than 64us (0x7)
// Enabled:        ((CX_S_MPCIE_MODE || CX_SEL_PHY_MODE))
// Parameter Type: Register Default Setting
// 
// Default value for the L1 Exit Latency field in the 'Link Capabilities Register'. This parameter represents a 
// characteristic of the PHY being used. It measures the total time from when the controller initiates a transition from Hibern8 to 
// Burst until the PHY begins providing valid receive data to the core. This parameter is for M-PCIe mode only.
`define MPCIE_DEFAULT_L1_EXIT_LATENCY 3'h6


// Name:           MPCIE_DEFAULT_COMM_L1_EXIT_LATENCY
// Default:        32us to 64us (MPCIE_DEFAULT_L1_EXIT_LATENCY)
// Values:         Less than 1us (0x0), 1us to less than 2us (0x1), 2us to less than 
//                 4us (0x2), 4us to less than 8us (0x3), 8us to less than 16us (0x4), 
//                 16us to less than 32us (0x5), 32us to 64us (0x6), More than 64us (0x7)
// Enabled:        ((CX_S_MPCIE_MODE || CX_SEL_PHY_MODE))
// Parameter Type: Register Default Setting
// 
// Default value for the L1 Exit Latency field in the 'Link Capabilities Register', when common clock is used. It measures 
// the total time from when the controller initiates a transition from Hibern8 to Burst until the PHY begins providing valid 
// receive data to the core. This parameter is for M-PCIe mode only.
`define MPCIE_DEFAULT_COMM_L1_EXIT_LATENCY 3'h6


// Name:           MPCIE_DEFAULT_EP_L1_ACCPT_LATENCY
// Default:        More than 64us
// Values:         Less than 1us (0x0), 1us to less than 2us (0x1), 2us to less than 
//                 4us (0x2), 4us to less than 8us (0x3), 8us to less than 16us (0x4), 
//                 16us to less than 32us (0x5), 32us to 64us (0x6), More than 64us (0x7)
// Enabled:        ((CX_S_MPCIE_MODE || CX_SEL_PHY_MODE))
// Parameter Type: Register Default Setting
// 
// Indicates Default value for the Endpoint L1 Acceptable Latency field in the 'Device Capabilities Register.' This should 
// be >= MPCIE_DEFAULT_L1_EXIT_LATENCY (or MPCIE_DEFAULT_COMM_L1_EXIT_LATENCY), and you must ensure that there is sufficient 
// buffering in your EP for this latency setting. This parameter is for M-PCIe mode only.
`define MPCIE_DEFAULT_EP_L1_ACCPT_LATENCY 3'h7


// Name:           DEFAULT_CONFIG
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_S_MPCIE_MODE || CX_SEL_PHY_MODE))
// Parameter Type: Register Default Setting
// 
// Default Value for "Config" in M-PCIe Extended Capability. A value of "1" indicates LTSSM will stay in the 
// Configuration.Software state. A value of "0" indicates LTSSM will exit the Configuration.Software state.  
//  When controller is Upstream port, this field is debug purpose only. If you don't need this field for debug, you should 
//  set to "0".
`define DEFAULT_CONFIG 1'h0

//-/ =================================================================
//-/ M-PCIe Device-Wide Optional Non-PCIe Configuration Parameters
//-/ =================================================================


// Name:           MPCIE_DEFAULT_REPLAY_ADJ
// Default:        0x2 ((((CM_MAX_SYNC_TIME/CM_NB)+(CM_MPCIE_INTERNAL_DELAY*3))/64) >= 
//                 0x1F) ? 0x1F : 
//                 (((CM_MAX_SYNC_TIME/CM_NB)+(CM_MPCIE_INTERNAL_DELAY*3))/64) + ((((CM_MAX_SYNC_TIME/CM_NB)+(CM_MPCIE_INTERNAL_DELAY*3))%64) 
//                 ? 1 : 0)
// Values:         0x0, ..., 0x1f
// Enabled:        ((CX_S_MPCIE_MODE || CX_SEL_PHY_MODE))
// Parameter Type: Register Default Setting
// 
// Default value for the 'Timer Modifier for Replay Timer' field in the 'Timer Control and Max Function Number' register. 
// Each increment in this value increases the replay timer by 64. For more details, see the 'Transmit Retry' section of the 
// 'Controller Operations' chapter in the Databook.This parameter is for M-PCIe mode.
`define MPCIE_DEFAULT_REPLAY_ADJ 5'h2

//-/ =================================================================
//-/ Internal Defines
//-/ =================================================================



//  ------------------------------------------------------------------------
//
//                    (C) COPYRIGHT 2002 - 2016 SYNOPSYS, INC.
//                            ALL RIGHTS RESERVED
//
//  This software and the associated documentation are confidential and
//  proprietary to Synopsys, Inc.  Your use or disclosure of this
//  software is subject to the terms and conditions of a written
//  license agreement between you, or your company, and Synopsys, Inc.
//
// The entire notice above must be reproduced on all authorized copies.
//
//  ------------------------------------------------------------------------

//-------------------------------------------------------------------------
//---  RCS information:
//---    $DateTime: 2016/07/01 11:52:39 $
//---    $Revision: #276 $
//---    $Id: //dwh/pcie_iip/main/DWC_pcie/DWC_pcie_common/src/DWC_pcie_common_cc_constants.v#276 $
//-------------------------------------------------------------------------


// Name:         TIMESCALE_RESOLUTION
// Default:      3
// Values:       0 1 2 3 4 5
// 
// Defines the timescale resolution for simulations.
`define TIMESCALE_RESOLUTION 3


`ifndef SYNTHESIS
`timescale 1ns/1ps
`endif // SYNTHESIS

`define CX_PCIE_REV1_0 1'b0


`define CC_CUSTOM_PHY 7


`define CC_GENERIC_PHY 8


//-/ =================================================================
//-/ General Configuration
//-/ =================================================================


// Name:         PCIE_SE
// Default:      0
// Values:       0, 1
// 
// Specifies PCI Express Easy Core
// `define PCIE_SE


// Name:           CX_P2P_ENABLE
// Default:        0
// Values:         0, 1
// Enabled:        ((AMBA_INTERFACE==0) && (CC_DMA_ENABLE==0))
// Parameter Type: Feature Setting
// 
// Support peer-to-peer transactions in RC. For more details, see 'Peer-to-Peer Support (P2P)' in the Databook.
// `define CX_P2P_ENABLE


// Name:           CX_CROSSLINK_ENABLE
// Default:        false
// Values:         false (0), true (1)
// Enabled:        ((CX_S_CPCIE_MODE || CX_SEL_PHY_MODE))
// Parameter Type: Feature Setting
// 
// Enables support for the controller to negotiate a crosslink, with a switch from EP to RC and RC to EP. When a port 
// negotiates a crosslink connection, the port changes its behavior from a downstream port to an upstream port and visa versa. 
// Crosslink is supported only in DM and SW cores because these products support both upstream and downstream ports. For more 
// details, see Databook. M-PCIe doesn't support this feature.
// `define CX_CROSSLINK_ENABLE



`define FREQ_62_5 3


`define FREQ_125 2


`define FREQ_250 1


`define FREQ_500 0


`define FREQ_31_2 3


`define FREQ_62_4 2


`define FREQ_124_8 1


`define GEN2_DF 0


`define GEN2_DW 1


`define GEN2_DISABLED 2


`define GEN2_DP 3


// Name:           CX_GEN2_MODE
// Default:        Disabled ((CX_MAX_CPCIE_SPEED >= 2) ? CX_2ND_SPD_MODE : 
//                 CX_MPCIE_ENABLE ? CM_GEAR2_MODE : 2)
// Values:         Dynamic Frequency (0), Dynamic Width (1), Disabled (2), Dynamic 
//                 Pacing (3)
// Enabled:        ((CX_PCIE_MODE == SINGLE_CPCIE))
// Parameter Type: Feature Setting
// 
// Specifies if the controller supports Gen2 and how it performs the data rate scale to Gen2. You can set up the PHY and 
// controller differently. For example, one can be Dynamic Width and the other one Dynamic Frequency. For more details, see the 
// 'Gen2 5.0 GT/s Operation' section of the Databook. 
// This parameter becomes a read-only parameter and takes the same value as CM_GEAR2_MODE if Single M-PCIe or Selectable 
// PHY modes are enabled. 
//  - Dynamic Pacing: the core's Gen2 mode is enabled, the core's clock frequency and data width do not change, the same 
//  as Gen1 mode.
`define CX_GEN2_MODE 0


// Name:         GEN2_RESTRICT_TO_GEN1
// Default:      0
// Values:       0, 1
// 
// Specifies PCI Express Generation I operation
// `define GEN2_RESTRICT_TO_GEN1


// Name:         CX_GEN2_SPEED
// Default:      1 (CX_SEL_PHY_MODE  ? (CX_MAX_CPCIE_SPEED >= 2) : CX_S_CPCIE_MODE ? 
//               (CX_GEN2_MODE != GEN2_DISABLED) : 0)
// Values:       0, 1
// 
// When enabled, controller operates with gen2(not included HS-Gear2 when M-PCIe) features enabled.
`define CX_GEN2_SPEED


`define CX_GEN2_SPEED_VALUE 1


// Name:         CX_2ND_SPEED
// Default:      1 (CX_GEN2_SPEED || CM_HSGEAR2_SPEED)
// Values:       0, 1
// 
// When enabled, controller operates with gen2 or HS-Gear2 or both features enabled.
`define CX_2ND_SPEED


`define CX_2ND_SPEED_VALUE 1


`define CX_GEN2_DYNAMIC_FREQ


// Name:         CX_GEN2_DYNAMIC_FREQ_VALUE
// Default:      1 (CX_GEN2_MODE == GEN2_DF)
// Values:       0, 1
// 
// Specifies the value of CX_GEN2_DYNAMIC_FREQ
`define CX_GEN2_DYNAMIC_FREQ_VALUE 1


// `define CX_GEN2_DYNAMIC_WIDTH


// Name:         CX_GEN2_DYNAMIC_WIDTH_VALUE
// Default:      0 (CX_GEN2_MODE == GEN2_DW)
// Values:       0, 1
// 
// Specifies the value of CX_GEN2_DYNAMIC_WIDTH
`define CX_GEN2_DYNAMIC_WIDTH_VALUE 0


// Name:           CX_PHY_GEN2_MODE
// Default:        Dynamic Frequency (CX_GEN2_SPEED ? CX_GEN2_MODE : 2)
// Values:         Dynamic Frequency (0), Dynamic Width (1), Disabled (2), Dynamic 
//                 Pacing (3)
// Enabled:        (CX_CPCIE_ENABLE && CX_GEN2_SPEED && (CX_GEN2_MODE != 
//                 GEN2_DISABLED))
// Parameter Type: Feature Setting
// 
// Specifies if the PHY supports Gen2 and how it performs the data rate scale to Gen2. You can set up the PHY and 
// controller differently. For example, one can be Dynamic Width and the other one Dynamic Frequency. For more details, see the 'Gen2 
// 5.0 GT/s Operation' section of the Databook. 
// CX_PHY_GEN2_MODE and CM_PHY_GEAR2_MODE can be set up differently (if required) in Selectable PHY mode (CX_PCIE_MODE 
// =2). 
//  - Dynamic Pacing: the Phy's Gen2 mode is enabled, the PIPE clock frequency and data width do not change, the same as 
//  Gen1 mode.
`define CX_PHY_GEN2_MODE 0


// Name:         CX_PHY_INT_GEN2_MODE
// Default:      0 ((CX_PHY_GEN2_MODE == GEN2_DW) ? GEN2_DF :  CX_PHY_GEN2_MODE)
// Values:       -2147483648, ..., 2147483647
// Enabled:      (CX_GEN2_SPEED && (CX_GEN2_MODE != GEN2_DISABLED))
// 
// Specifies the Gen 2 operating mode of the PCIe PHY. The PHY and PCIe Digital. Controller controller can be set up 
// differently if required. For example, one can be Dynamic Width and the other one Dynamic Frequency. (internal to sample phy)
`define CX_PHY_INT_GEN2_MODE 0


// Name:         PHY_GEN2_DYNAMIC_WIDTH
// Default:      0 (CX_PHY_GEN2_MODE == GEN2_DW)
// Values:       0, 1
// 
// PHY is Gen2 dynamic width PHY
// `define PHY_GEN2_DYNAMIC_WIDTH


// Name:         PHY_GEN2_DYNAMIC_FREQ
// Default:      1 (CX_PHY_GEN2_MODE == GEN2_DF)
// Values:       0, 1
// 
// PHY is Gen2 Frequency PHY
`define PHY_GEN2_DYNAMIC_FREQ


// `define CX_CORE_DWIDTH_PHY_DFREQ


`define GEN3_DF 0


`define GEN3_DW 1


`define GEN3_DISABLED 2


`define GEN3_DP 3


`define GEN4_DF 0


`define GEN4_DW 1


`define GEN4_DISABLED 2


`define GEN4_DP 3


`define PIPE_INTERFACE 1


`define V7_INTERFACE 2


`define FULL_SWING 0

//Transmit an EIEOS after GEN3_TS1_NUM_FOR_RESET_EIEOS sent during a request to reset EIEOS count.
//This number is for test purpose if it is less than 65535
//This parameter is shared for Gen3/4 mode.

`define GEN3_TS1_NUM_FOR_RESET_EIEOS 65535


// Name:           CX_GEN3_MODE
// Default:        Disabled ((CX_MAX_CPCIE_SPEED >= 3) ? CX_3RD_SPD_MODE : 
//                 CX_MPCIE_ENABLE ? CM_GEAR3_MODE : 2)
// Values:         Dynamic Frequency (0), Dynamic Width (1), Disabled (2), Dynamic 
//                 Pacing (3)
// Enabled:        CX_S_CPCIE_MODE && CX_GEN2_MODE!=GEN2_DISABLED
// Parameter Type: Feature Setting
// 
// Specifies if the controller supports Gen3 and how it performs the data rate scale to Gen3. You can set up the PHY and 
// controller differently. For example, one can be Dynamic Width and the other one Dynamic Frequency. For more details, see the 
// 'Gen3 8.0 GT/s Operation' section of the Databook. 
// This parameter becomes a read-only parameter and takes the same value as CM_GEAR3_MODE if Single M-PCIe or Selectable 
// PHY mode are enabled. 
//  - Dynamic Pacing: the core's Gen3 mode is enabled, the core's clock frequency and data width do not change, the same 
//  as Gen2 mode.
`define CX_GEN3_MODE 2


// Name:         CX_GEN3_SPEED
// Default:      0 (CX_SEL_PHY_MODE  ? (CX_MAX_CPCIE_SPEED >= 3) : CX_S_CPCIE_MODE ? 
//               (CX_GEN3_MODE != GEN3_DISABLED) : 0)
// Values:       0, 1
// 
// When enabled, controller operates with gen3(not included HS-Gear3 when M-PCIe) features enabled.
// `define CX_GEN3_SPEED


`define CX_GEN3_SPEED_VALUE 0




// Name:           CX_GEN4_MODE
// Default:        Disabled ((CX_MAX_CPCIE_SPEED >= 4) ? CX_4TH_SPD_MODE : 2)
// Values:         Dynamic Frequency (0), Dynamic Width (1), Disabled (2), Dynamic 
//                 Pacing (3)
// Enabled:        CX_S_CPCIE_MODE && CX_GEN3_MODE!=GEN3_DISABLED
// Parameter Type: Feature Setting
// 
// Specifies if the controller supports Gen4 and how it performs the data rate scale to Gen4. You can set up the PHY and 
// controller differently. For example, one can be Dynamic Width and the other one Dynamic Frequency. For more details, see the 
// 'Gen4 16.0 GT/s Operation' section of the Databook. 
// This parameter becomes a read-only parameter and takes the same value as CX_4TH_SPD_MODE if Selectable PHY mode is 
// enabled. This parameter is always disabled if Single M-PCIe mode is enabled because M-PCIe does not support Gear4. 
//  - Dynamic Pacing: the core's Gen4 mode is enabled, the core's clock frequency and data width do not change, the same 
//  as Gen3 mode.
`define CX_GEN4_MODE 2


// Name:         CX_GEN4_SPEC07
// Default:      0
// Values:       0, 1
// Enabled:      ((CX_GEN4_MODE != GEN4_DISABLED))
// 
// Enables the following PCIe Base Spec 4.0 v0.7 features. 
//  - EIEOS Format change 
//  - LTSSM change for Retimer 
//  - Fault isolation 
//  - SKP OS format change 
//  - Compliance Pattern Update 
//  - Physical Layer 16GT/s Capability register 
//  
// Note: Contact SYNOPSYS if you need Lane Margining feature
// `define CX_GEN4_SPEC07


// Name:         CX_GEN4_SPEC07_PLCAP
// Default:      0 (CX_GEN4_SPEC07)
// Values:       0, 1
// Enabled:      ((CX_GEN4_MODE != GEN4_DISABLED))
// 
// Gen4 0.7 Physical Layer 16 GT/s Capability feature
// `define CX_GEN4_SPEC07_PLCAP


// Name:         CX_PL16G_ENABLE
// Default:      0 (CX_GEN4_SPEC07_PLCAP)
// Values:       0, 1
// Enabled:      ((CX_GEN4_MODE != GEN4_DISABLED))
// 
// Physical Layer 16.0 GT/s Extended Capability feature
// `define CX_PL16G_ENABLE


`define CX_PL16G_ENABLE_VALUE 0




`define CX_PL16GM_ENABLE_VALUE 0



// `define REV4_ADDED_LOGIC_1_REJECT


// `define REV4_ADDED_LOGIC_2_RXOS_DEC



// `define REV3_ADDED_LOGIC_1_QUI


// `define REV3_ADDED_LOGIC_2_TX_MAX_RATE


// `define REV3_ADDED_LOGIC_3_LOCK_TO_EQ


// Name:         CX_GEN4_SPEED
// Default:      0 (CX_GEN4_MODE != GEN4_DISABLED)
// Values:       0, 1
// 
// When enabled, controller operates with gen4 features enabled.
// `define CX_GEN4_SPEED


`define CX_GEN4_SPEED_VALUE 0


// `define CX_GEN4_DYNAMIC_FREQ


// Name:         CX_GEN4_DYNAMIC_FREQ_VALUE
// Default:      0 (CX_GEN4_SPEED ? (CX_GEN4_MODE == GEN4_DF) : 0)
// Values:       0, 1
// 
// Specifies the value of CX_GEN4_DYNAMIC_FREQ
`define CX_GEN4_DYNAMIC_FREQ_VALUE 0


// `define CX_GEN4_DYNAMIC_WIDTH


// Name:         CX_GEN4_DYNAMIC_WIDTH_VALUE
// Default:      0 (CX_GEN4_SPEED ? (CX_GEN4_MODE == GEN4_DW) : 0)
// Values:       0, 1
// 
// Specifies the value of CX_GEN4_DYNAMIC_WIDTH
`define CX_GEN4_DYNAMIC_WIDTH_VALUE 0


// `define CX_GEN1_SPEED


`define CX_GEN1_SPEED_VALUE 0


// `define CX_GEN3_DYNAMIC_FREQ


// Name:         CX_GEN3_DYNAMIC_FREQ_VALUE
// Default:      0 (CX_GEN3_MODE == GEN3_DF)
// Values:       0, 1
// 
// Specifies the value of CX_GEN3_DYNAMIC_FREQ
`define CX_GEN3_DYNAMIC_FREQ_VALUE 0


// `define CX_GEN3_DYNAMIC_WIDTH


// Name:         CX_GEN3_DYNAMIC_WIDTH_VALUE
// Default:      0 (CX_GEN3_MODE == GEN3_DW)
// Values:       0, 1
// 
// Specifies the value of CX_GEN3_DYNAMIC_WIDTH
`define CX_GEN3_DYNAMIC_WIDTH_VALUE 0


// Name:           CX_PHY_GEN3_MODE
// Default:        Disabled ((CX_MAX_CPCIE_SPEED >= 3) ? CX_GEN3_MODE : 
//                 CX_MPCIE_ENABLE ? 2 : CX_GEN3_MODE)
// Values:         Dynamic Frequency (0), Dynamic Width (1), Disabled (2), Dynamic 
//                 Pacing (3)
// Enabled:        (CX_CPCIE_ENABLE && (CX_GEN3_MODE != GEN3_DISABLED) && 
//                 !(CX_SEL_PHY_MODE && (CX_MAX_CPCIE_SPEED < 3) ))
// Parameter Type: Feature Setting
// 
// Specifies if the PHY supports Gen3 and how it performs the data rate scale to Gen3. You can set up the PHY and 
// controller differently. For example, one can be Dynamic Width and the other one Dynamic Frequency. For more details, see the 'Gen3 
// 8.0 GT/s Operation' section of the Databook. 
// CX_PHY_GEN3_MODE and CM_PHY_GEAR3_MODE can be set up differently (if required) in Selectable PHY mode (CX_PCIE_MODE 
// =2). 
//  - Dynamic Pacing: the Phy's Gen3 mode is enabled, the PIPE clock frequency and data width do not change, the same as 
//  Gen2 mode.
`define CX_PHY_GEN3_MODE 2


// Name:         CX_PHY_INT_GEN3_MODE
// Default:      2 ((CX_PHY_GEN3_MODE == GEN3_DW) ? GEN3_DF :  CX_PHY_GEN3_MODE)
// Values:       -2147483648, ..., 2147483647
// Enabled:      ((CX_GEN3_MODE != GEN3_DISABLED))
// 
// Specifies the Gen 3 operating mode of the PCIe PHY. The PHY and PCIe Digital 
// Controller Core can be set up differently if required. For example, one can be 
// Dynamic Width and the other one Dynamic Frequency. (interal to sample phy)
`define CX_PHY_INT_GEN3_MODE 2


// Name:         PHY_GEN3_DYNAMIC_WIDTH
// Default:      0 (CX_PHY_GEN3_MODE == GEN3_DW)
// Values:       0, 1
// 
// PHY is Gen3(HS-Gear3 if M-PCIe) dynamic width PHY
// `define PHY_GEN3_DYNAMIC_WIDTH


// Name:         PHY_GEN3_DYNAMIC_FREQ
// Default:      0 (CX_PHY_GEN3_MODE == GEN3_DF)
// Values:       0, 1
// 
// PHY is Gen3(HS-Gear3 if M-PCIe) dynamic width PHY
// `define PHY_GEN3_DYNAMIC_FREQ


// Name:           CX_PHY_GEN4_MODE
// Default:        Disabled (CX_GEN4_MODE)
// Values:         Dynamic Frequency (0), Dynamic Width (1), Disabled (2), Dynamic 
//                 Pacing (3)
// Enabled:        CX_GEN4_MODE != GEN4_DISABLED
// Parameter Type: Feature Setting
// 
// Specifies if the PHY supports Gen4 and how it performs the data rate scale to Gen4. You can set up the PHY and core 
// differently. For example, one can be Dynamic Width and the other one Dynamic Frequency. For more details, see the 'Gen4 16.0 
// GT/s Operation' section of the Databook. 
//  - Dynamic Pacing: the Phy's Gen4 mode is enabled, the PIPE clock frequency and data width do not change, the same as 
//  Gen3 mode.
`define CX_PHY_GEN4_MODE 2


// Name:         CX_PHY_INT_GEN4_MODE
// Default:      2 ((CX_PHY_GEN4_MODE == GEN4_DW) ? GEN4_DF :  CX_PHY_GEN4_MODE)
// Values:       -2147483648, ..., 2147483647
// Enabled:      ((CX_GEN4_MODE != GEN4_DISABLED))
// 
// Specifies the Gen4 operating mode of the PCIe PHY. The PHY and PCIe Digital 
// Controller Core can be set up differently if required. For example, one can be 
// Dynamic Width and the other one Dynamic Frequency. (interal to sample phy)
`define CX_PHY_INT_GEN4_MODE 2


// Name:         PHY_GEN4_DYNAMIC_WIDTH
// Default:      0 (CX_PHY_GEN4_MODE == GEN4_DW)
// Values:       0, 1
// 
// PHY is Gen4 dynamic width PHY
// `define PHY_GEN4_DYNAMIC_WIDTH


// Name:         PHY_GEN4_DYNAMIC_FREQ
// Default:      0 (CX_PHY_GEN4_MODE == GEN4_DF)
// Values:       0, 1
// 
// PHY is Gen4 dynamic frequency PHY
// `define PHY_GEN4_DYNAMIC_FREQ


// Name:         CX_GENX_VALUE
// Default:      2 (CX_GEN4_SPEED?4:(CX_GEN3_SPEED?3:(CX_GEN2_SPEED?2:1)))
// Values:       -2147483648, ..., 2147483647
// 
// Decode the currently configured CPCIe mode
`define CX_GENX_VALUE 2


// Name:           CX_FREQ
// Default:        250MHz (CM_FREQ)
// Values:         62.5MHz (3), 125MHz (2), 250MHz (1)
// Enabled:        CX_PCIE_MODE == SINGLE_CPCIE
// Parameter Type: Feature Setting
// 
// The operating frequency of the controller in Gen1 mode. 
//  - If the controller is configured for Gen2 Dynamic Frequency, then the frequency will be doubled (x2) when operating 
//  at Gen2 speed. 
//  - If the controller is configured for Gen3 Dynamic Frequency, then the frequency will be quadrupled (x4) when 
//  operating at Gen3 speed. 
// For more details on clocking, see 'Frequency, Speed and Width Support' in the 'Product Overview' chapter, and 'Clock 
// Requirements' in the Architecture chapter of the Databook. 
// This parameter becomes a read-only parameter and takes the same value as CM_FREQ if Single M-PCIe or Selectable PHY 
// modes are enabled.
`define CX_FREQ 3


// Name:           CX_PHY_FREQ
// Default:        250MHz ((CX_S_MPCIE_MODE) ? CM_PHY_FREQ : (CX_FREQ == FREQ_62_5) ? 
//                 FREQ_250 : CX_FREQ)
// Values:         62.5MHz (3), 125MHz (2), 250MHz (1), 500MHz (0)
// Enabled:        CX_S_CPCIE_MODE || CX_SEL_PHY_MODE
// Parameter Type: Feature Setting
// 
// The operating frequency of the PHY in Gen1 mode. 
//  - If the PHY is configured for Gen2 Dynamic Frequency, then the frequency will be doubled (x2) when operating at Gen2 
//  speed. 
//  - If the PHY is configured for Gen3 Dynamic Frequency, then the frequency will be quadrupled (x4) when operating at 
//  Gen3 speed. 
// For more details on clocking, see 'Frequency, Speed and Width Support' in the 'Product Overview' chapter, and 'Clock 
// Requirements' in the Architecture chapter of the Databook. 
// CX_PHY_FREQ and CM_PHY_FREQ can be set up differently (if required) in Selectable PHY mode (CX_PCIE_MODE =2).
`define CX_PHY_FREQ 3


// Name:         CX_FREQ_1
// Default:      0 (CX_FREQ == FREQ_250)
// Values:       0, 1
// 
// Specifies Frequency = 250MHz(124.8MHz if M-PCIe)
// `define CX_FREQ_1


// Name:         CX_FREQ_2
// Default:      0 (CX_FREQ == FREQ_125)
// Values:       0, 1
// 
// Specifies Frequency = 125MHz(62.4MHz if M-PCIe)
// `define CX_FREQ_2


// Name:         CX_FREQ_3
// Default:      1 (CX_FREQ == FREQ_62_5)
// Values:       0, 1
// 
// Specifies Frequency = 62.5MHz(31.2MHz if M-PCIe)
`define CX_FREQ_3


// Name:         CX_FREQ_VALUE
// Default:      2 (CX_FREQ - 1)
// Values:       -2147483648, ..., 2147483647
// 
// Specifies the Maximum operating frequency of the core.
`define CX_FREQ_VALUE 2


// Name:         CX_FREQ_MULTIPLIER
// Default:      4 ((CX_FREQ_VALUE == 0) ? 1 : 
//               (CX_FREQ_VALUE == 1) ? 2 : 4)
// Values:       -2147483648, ..., 2147483647
// 
// Specifies the operating  frequency of the core.
`define CX_FREQ_MULTIPLIER 4


// Name:           FPGA
// Default:        0
// Values:         0, 1
// Enabled:        !(CX_S_MPCIE_MODE || CX_SEL_PHY_MODE)
// Parameter Type: Feature Setting
// 
// Select this option if you are implementing the controller in an FPGA. This will add the required pipelining (and 
// corresponding logic to control pipelined logic) to enable the synthesis tool to meet FPGA timing. For more details, see the 
// 'Synthesizing the Core for an FPGA' section of the User Guide for details on FPGA implementation.
// `define FPGA


// Name:           CX_TECHNOLOGY
// Default:        FAST (FPGA ? 0 : 2)
// Values:         SLOW (0x0), FAST (0x2)
// Enabled:        !FPGA || (CX_CUSTOM_PIPELINING==0)
// Parameter Type: Performance Setting
// 
// The speed of the target technology relative to the clock frequency and architecture. Possible values are SLOW or FAST. 
// When you have selected "Individual Pipeline Control" (CX_CUSTOM_PIPELINING set to "1"), then this parameter sets the 
// default for many of the individual inter-module pipeline enabling parameters to "1" when CX_TECHNOLOGY is SLOW. This parameter 
// is forced to SLOW when you are using an FPGA (FPGA parameter set to "1"). An ASIC technology might be FAST if running at 
// 125 MHz, but the SLOW setting might be needed to meet timing at 250 MHz in an x8/x16 architecture.
`define CX_TECHNOLOGY 2'h2


// `define CX_TECHNOLOGY_SLOW


// `define CX_TECHNOLOGY_MEDIUM


`define CX_TECHNOLOGY_FAST


// Name:           CX_RAM_AT_TOP_IF
// Default:        true (FPGA ? 0 :1)
// Values:         false (0), true (1)
// Parameter Type: Feature Setting
// 
// Determines if RAMs are instantiated internally, or RAM top-level interface is added for connection of external RAM 
// modules. External RAM might be preferable if you are doing RAM layout separately. For more details, see the 'RAM Requirements' 
// section in the Architecture chapter of the Databook.
`define CX_RAM_AT_TOP_IF


// Name:           CX_RAM_TYPE
// Default:        Simple (FPGA ? 2 : 0)
// Values:         Simple (0), DesignWare (1), FPGA RAM (2)
// Enabled:        !FPGA && !CX_RAM_AT_TOP_IF
// Parameter Type: Feature Setting
// 
// Selects the type of RAM when internal RAM is used. 
//  - Simple: Customer-supplied simple synchronous RAM. 
//  - DesignWare: Synopsys DesignWare Library Synthesizable flip-flop based SRAM for sizes up to 256 X 256. 
//  - FPGA RAM: FPGA RAM resources. 
// For details on RAM locations and how to integrate the RAM modules, see the 'RAM Requirements' section in the 
// Architecture chapter of the Databook. 
//  - Only applicable when CX_RAM_AT_TOP_IF is 0 (Internal) 
//  - Forced to FPGA RAM when FPGA is 1
`define CX_RAM_TYPE 0


// Name:         USE_DWARE_RAMS
// Default:      0 (CX_RAM_TYPE==1)
// Values:       0, 1
// 
// Specifies use of DesignWare RAMs
// `define USE_DWARE_RAMS


// Name:         USE_SIMPLE_RAM_MODELS
// Default:      1 (CX_RAM_TYPE==0)
// Values:       0, 1
// 
// Specifies use of Simple Ram Models
`define USE_SIMPLE_RAM_MODELS


// Name:           CX_SRIOV_ENABLE
// Default:        false
// Values:         false (0), true (1)
// Enabled:        Always
// Parameter Type: Feature Setting
// 
// SR-IOV Capability enable. For more details, see the Databook.
// `define CX_SRIOV_ENABLE


`define CX_SRIOV_ENABLE_VALUE 0



// Name:           CX_EXTENSIBLE_VFUNC
// Default:        false
// Values:         false (0), true (1)
// Enabled:        CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Enables the Extensible Virtual function which allows you to implement VFs capability registers in your application 
// logic. 
// For more details, see the SRIOV section in the Controller Operations chapter of the Databook.
// `define CX_EXTENSIBLE_VFUNC


// Name:         CX_VF_PACKING_SUPPORT
// Default:      true
// Values:       false (0), true (1)
// Enabled:      CX_SRIOV_ENABLE
// 
// This option allows packing VFs from same PF into contiguous RIDs. 
// This is obtained by adding the capability to support a VF stride that is any power of 2, without the 
// restriction of the power of 2 being >= CX_NFUNC. In particular stride == 1 will be supported. 
// The application will take advantage of this new capability by re-programming via DBI the stride in each PF. 
// It will be responsibility of the application to re-program the VF offsets each time there is a change in 
// the programming of the stride, or in the programming of the VF allocation to the various PFs, or both.
`define CX_VF_PACKING_SUPPORT


// Name:           CX_VF_STRIDE_ALWAYS_ONE
// Default:        false
// Values:         false (0), true (1)
// Enabled:        CX_SRIOV_ENABLE
// Parameter Type: Performance Setting
// 
// Enable logic optimization when you never use a VF stride greater than one. For more details, see the Single Root I/O 
// Virtualization (SR-IOV) section in the Databook. You should enable this parameter when possible to save gates and ease timing 
// closure.
// `define CX_VF_STRIDE_ALWAYS_ONE


// Name:           CX_ARI_ENABLE
// Default:        false (CX_SRIOV_ENABLE)
// Values:         false (0), true (1)
// Enabled:        !CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Alternate Routing ID (ARI) Capability enable. For more details, see the Databook.
`define CX_ARI_ENABLE


`define CX_ARI_ENABLE_VALUE 1'h1


// Name:           CX_SRIOV_RAM_ENABLE
// Default:        0
// Values:         0, 1
// Parameter Type: Feature Setting
// 
// Enable SR-IOV Capability. 
// For more details, see Databook.
// `define CX_SRIOV_RAM_ENABLE


// Name:           CX_FLR_ENABLE
// Default:        false (CX_SRIOV_ENABLE)
// Values:         false (0), true (1)
// Enabled:        !CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Enables controller support for Function Level Reset (FLR). For more details, see the Databook.
`define CX_FLR_ENABLE


`define CX_FLR_ENABLE_VALUE 1


// =============================================================================
// AHB feature hidden
// =============================================================================


// Name:           AMBA_INTERFACE
// Default:        None
// Values:         None (0), Rsvd (1), AXI3 (2), AXI4 (3)
// Enabled:        Always
// Parameter Type: Feature Setting
// 
// Use the AXI bridge to interface to your application. For more details, see the Databook. Additional configuration panes 
// will become visible when you set the AMBA_INTERFACE configuration parameter.
`define AMBA_INTERFACE 2


`define AXI_POPULATED


// `define AHB_POPULATED


`define AMBA_POPULATED


// Name:           CC_SLV_WRAP_ENABLE
// Default:        0
// Values:         0, 1
// Enabled:        AMBA_INTERFACE>=2
// Parameter Type: Feature Setting
// 
// Enable support of wrapping bursts at the AXI bridge slave. For more details, see the "Supported AXI Burst Operations" 
// section in the "AXI Bridge Module" chapter of the Databook.
// `define CC_SLV_WRAP_ENABLE

// =============================================================================
// DMA Native Config hidden
// =============================================================================

//-/ =================================================================
//-/ DMA Section
//-/ =================================================================

// Name:           CC_DMA_ENABLE
// Default:        false
// Values:         false (0), true (1)
// Enabled:        Always
// Parameter Type: Feature Setting
// 
// Enable the embedded DMA controller. For more information, see the 'DMA' chapter of the Databook. An additional 
// configuration pane will become visible when you set the CC_DMA_ENABLE configuration parameter.
`define CC_DMA_ENABLE


`define CC_DMA_ENABLE_VALUE 1


// Name:           CX_ATS_ENABLE
// Default:        false
// Values:         false (0), true (1)
// Enabled:        Always
// Parameter Type: Feature Setting
// 
// Support PCI-SIG ATS (address translation services) and allow your application to use/set the Address Type (AT) field and 
// No Write (NW) fields of the TLP header. For more details, see the 'PCI-SIG Address Translation Services (ATS)' section of 
// the Databook. For generic application<->system address translation, see the 'Address Translation' section of the 
// Databook.
// `define CX_ATS_ENABLE


`define CX_ATS_ENABLE_VALUE 1'h0


// Name:           ATS_RX_ENABLE
// Default:        0 (CX_ATS_ENABLE && (1 || AMBA_POPULATED))
// Values:         0, 1
// Enabled:        !AMBA_POPULATED && CX_ATS_ENABLE
// Parameter Type: Feature Setting
// 
// When set, controller supports RX address translation services. Provides support of PCI-SIG ATS specification and allows 
// the application to use the Address Type (AT) field and the No Write (NW) field of the TLP header. This parameter is 
// enabled by CX_ATS_ENABLE.
// `define ATS_RX_ENABLE


`define ATS_RX_ENABLE_VALUE 0


// Name:           ATS_TX_ENABLE
// Default:        0 (CX_ATS_ENABLE && (1 || AMBA_POPULATED))
// Values:         0, 1
// Enabled:        !AMBA_POPULATED && CX_ATS_ENABLE
// Parameter Type: Feature Setting
// 
// When set, controller supports TX address translation services. Provides support of PCI-SIG ATS specification and allows 
// the application to set the Address Type (AT) field and No Write (NW) field of the TLP header. This parameter is enabled by 
// CX_ATS_ENABLE.
// `define ATS_TX_ENABLE


`define ATS_TX_ENABLE_VALUE 0


// Name:           CX_PRS_ENABLE
// Default:        false
// Values:         false (0), true (1)
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// Support PCI-SIG PRS (page request services) and allow your EP application to use/set the memory page request mechanism, 
// and allow your RC application to receive PRS messages.  
// For more details, see the Controller Operations chapter of the Databook. 
// Support PCI-SIG PRS (page request services) and allow your EP application to use/set the memory page request mechanism. 
// For more details, see the Controller Operations chapter of the Databook. 
// Support PCI-SIG PRS (page request services) and allow your RC application to receive PRS messages.
// `define CX_PRS_ENABLE


// Name:           CX_TPH_ENABLE
// Default:        false
// Values:         false (0), true (1)
// Enabled:        Always
// Parameter Type: Feature Setting.
// 
// Support TLP Processing Hints. For more details, see the TLP Processing Hints section in the Core Operations chapter of 
// the Databook.
// `define CX_TPH_ENABLE


`define CX_TPH_ENABLE_VALUE 1'h0


// Name:           CX_IDO_ENABLE
// Default:        false
// Values:         false (0), true (1)
// Enabled:        !(AMBA_INTERFACE==1)
// Parameter Type: Feature Setting.
// 
// Support ID Based Ordering (IDO). The controller does not perform any additional ordering when ID-based ordering (IDO) is 
// enabled. Your application is expected to do any IDO.
`define CX_IDO_ENABLE


`define CX_IDO_ENABLE_VALUE 1'h1


// Name:           CX_OBFF_SUPPORT
// Default:        Not Supported
// Values:         Not Supported (0), OBFF Messages Only (1), WAKE# Signalling Only 
//                 (2), WAKE# Signalling and OBFF Messages (3)
// Parameter Type: Feature Setting
// 
// Indicates if the device supports Optimized Buffer Flush/Fill (OBFF) using the WAKE# signal, messages or both.
`define CX_OBFF_SUPPORT 0


// Name:         CX_OBFF_ENABLE
// Default:      0 ((CX_OBFF_SUPPORT > 0) ? 1 : 0)
// Values:       0, 1
// 
// When enabled, controller supports Optimized Buffer Flush/Fill (OBFF)
// `define CX_OBFF_ENABLE


// Name:           CX_ATOMIC_ENABLE
// Default:        false
// Values:         false (0), true (1)
// Enabled:        !AMBA_POPULATED && !CC_DMA_ENABLE
// Parameter Type: Feature Setting.
// 
// Support Atomic Ops. Not supported in AXI bridge.
// `define CX_ATOMIC_ENABLE


`define CX_ATOMIC_ENABLE_VALUE 1'h0


// Name:           CX_ATOMIC_ROUTING_EN
// Default:        false (CX_ATOMIC_ENABLE)
// Values:         false (0x0), true (0x1)
// Enabled:        !AMBA_POPULATED  && CX_ATOMIC_ENABLE
// Parameter Type: Feature Setting.
// 
// Support routing of Atomic Ops. Applicable to DSP. Not supported in AXI bridge.
`define CX_ATOMIC_ROUTING_EN 1'h0


// `define ATOMIC_ROUTING_SUP


// Name:           CX_ATOMIC_32_CPL_EN
// Default:        false (CX_ATOMIC_ENABLE)
// Values:         false (0x0), true (0x1)
// Enabled:        !AMBA_POPULATED && CX_ATOMIC_ENABLE
// Parameter Type: Feature Setting.
// 
// Support Completion of Atomic Ops with a 32-bit operand size. Not supported in AXI bridge.
`define CX_ATOMIC_32_CPL_EN 1'h0


// Name:           CX_ATOMIC_64_CPL_EN
// Default:        false (CX_ATOMIC_ENABLE)
// Values:         false (0x0), true (0x1)
// Enabled:        !AMBA_POPULATED && CX_ATOMIC_ENABLE
// Parameter Type: Feature Setting.
// 
// Support Completion of Atomic Ops with a 64-bit operand size. Not supported in AXI bridge.
`define CX_ATOMIC_64_CPL_EN 1'h0


// Name:           CX_ATOMIC_128_CAS_EN
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        !AMBA_POPULATED && CX_ATOMIC_ENABLE
// Parameter Type: Feature Setting.
// 
// Support Completion of Compare and Swap Atomic Ops with a 128-bit operand size. Not supported in AXI bridge.
`define CX_ATOMIC_128_CAS_EN 1'h0


// Name:           CX_INTERNAL_ERR_REPORTING_EN
// Default:        true
// Values:         false (0x0), true (0x1)
// Parameter Type: Feature Setting.
// 
// Support internal error reporting
`define CX_INTERNAL_ERR_REPORTING_EN 1'h1


`define CX_INTERNAL_ERR_REPORTING



// Name:           CX_CPL_TO_RANGES_ENABLE
// Default:        false
// Values:         false (0), true (1)
// Enabled:        Always
// Parameter Type: Feature Setting
// 
// Support  Completion Timeout Ranges. For more details, see 'Completion Timeout Range' section in the 'Controller 
// Operations' chapter of the Databook.
`define CX_CPL_TO_RANGES_ENABLE



// Name:           CX_LTR_M_ENABLE
// Default:        false
// Values:         false (0), true (1)
// Parameter Type: Feature Setting.
// 
// Support the Latency Tolerance Reporting Mechanism. For more details see the "Messages" section in the "Controller 
// Operations" chapter of the Databook.
// `define CX_LTR_M_ENABLE


`define CX_LTR_M_ENABLE_VALUE 1'h0


// Name:           PHY_TYPE
// Default:        Example PIPE PHY
// Values:         Example PIPE PHY (8), Custom PHY (7)
// Enabled:        (!(CX_PCIE_MODE == SINGLE_MPCIE))
// Parameter Type: Feature Setting
// 
// Select the type of PHY you are using. PHYs are instantiated outside the core, interfacing through the standard PIPE I/F. 
// You must select the "Custom PHY" option and follow the configuration guidelines presented in the section "Integrating the 
// controller with the PHY" in the User Guide. 
//  
// A PHY simulation-only model is also supplied by Synopsys. This block cannot be implemented and it is provided for 
// simulation purposes only. You might temporarily use this for simulation purposes until you receive a simulation model from your 
// PHY vendor. Note that different PHY models may have different configuration requirements. Please review your 
// configuration settings when switching between the example PHY and the PHY model provided by your PHY vendor.
`define PHY_TYPE 8


// Name:         CX_PHY_INTERFACE
// Default:      NATIVE ((CX_GEN3_SPEED) == 1)
// Values:       NATIVE (0), PIPE (1), V7 (2)
// Enabled:      ((CX_GEN3_SPEED) == 1)
// 
// Select PHY interface among Native, PIPE, or V7
`define CX_PHY_INTERFACE 0


// Name:         GEN3_PIPE_DYN_PACE_EN
// Default:      0
// Values:       0, 1
// 
// Enable Dynamic pacing at gen3 rates on PIPE interface 
// This parameter is shared for Gen3/4 mode.
// `define GEN3_PIPE_DYN_PACE_EN


// `define PHY_IS_PIPE


// `define PHY_IS_V7


// Name:         PHY_TXCLK
// Default:      0
// Values:       0, 1
// 
// PHY uses source synchronous clock for data
// `define PHY_TXCLK


// Name:         GENERIC_PHY
// Default:      1 (PHY_TYPE == CC_GENERIC_PHY)
// Values:       0, 1
// 
// This parameter indicates that GENERIC_PHY is present
`define GENERIC_PHY


// Name:         RIO_POPULATED
// Default:      0
// Values:       0, 1
// 
// FPGA design using Xilinx RocketIO PHY
// `define RIO_POPULATED



// Name:           CX_NB_GEN1
// Default:        4 ((CX_FREQ == FREQ_250)  ? 1 : 
//                 (CX_FREQ == FREQ_125)  ? 2 : 4)
// Values:         1, ..., 8
// Enabled:        0
// Parameter Type: Feature Setting
// 
// Specifies the maximum number of symbols that are 
// handled each core_clk cycle, or the S-ness of the core. for Gen1 
// For more details on symbols, see 'Frequency, Speed and Width Support' in the 'Product Overview' chapter, and 'Clock 
// Requirements' in the Architecture chapter of the Databook.
`define CX_NB_GEN1 4


// Name:         CX_NB_GEN2
// Default:      4 ((CX_GEN2_MODE == GEN2_DW) ?  (CX_NB_GEN1*2) : CX_NB_GEN1)
// Values:       1, ..., 8
// 
// Specifies the maximum number of symbols that are 
// handled each core_clk cycle, or the S-ness of the core. for Gen2
`define CX_NB_GEN2 4


// Name:         CX_NB_GEN3
// Default:      4 ((CX_GEN3_MODE == GEN3_DW) ?  (CX_NB_GEN2*2) : CX_NB_GEN2)
// Values:       1, ..., 8
// 
// Specifies the maximum number of symbols that are 
// handled each core_clk cycle, or the S-ness of the core. for Gen3
`define CX_NB_GEN3 4


// Name:         CX_NB_GEN4
// Default:      4 ((CX_GEN4_MODE == GEN4_DW) ?  (CX_NB_GEN3*2) : CX_NB_GEN3)
// Values:       1, ..., (((CX_GEN4_MODE == GEN4_DW) && (CX_NB_GEN3 == 8)) ? 16 : 8)
// 
// Specifies the maximum number of symbols that are 
// handled each core_clk cycle, or the S-ness of the core. for Gen4
`define CX_NB_GEN4 4


// Name:         CX_NB
// Default:      4 ((CX_GEN4_MODE == GEN4_DW) ?  (CX_NB_GEN3*2) : CX_NB_GEN3)
// Values:       1, ..., (((CX_GEN4_MODE == GEN4_DW) && (CX_NB_GEN3 == 8)) ? 16 : 8)
// 
// Specifies the maximum number of symbols that are 
// handled each core_clk cycle, or the S-ness of the core.
`define CX_NB 4


// Name:           CX_PHY_NB_GEN1
// Default:        4s ((CX_PHY_FREQ == FREQ_500)  ? 1 : 
//                 (CX_PHY_FREQ == FREQ_250)  ? 1 : 
//                 (CX_PHY_FREQ == FREQ_125)  ? 2 : 4)
// Values:         1s (1), 2s (2), 4s (4), 8s (8)
// Enabled:        CX_S_CPCIE_MODE || CX_SEL_PHY_MODE
// Parameter Type: Feature Setting
// 
// Specifies the maximum number of symbols that are 
// handled per each pclk cycle by the PHY for GEN1 
// For more details on symbols, see 'Frequency, Speed and Width Support' in the 'Product Overview' chapter, and 'Clock 
// Requirements' in the Architecture chapter of the Databook.
`define CX_PHY_NB_GEN1 1


`define CX_PHY_2S_DYN_PACE 0


`define CX_PHY_GEN1_DP 0


`define CX_PHY_GEN2_DP 0


// Name:         CX_PHY_NB_GEN2
// Default:      1 ((CX_PHY_FREQ      == FREQ_500) ? 1 : 
//               (CX_PHY_GEN2_MODE == GEN2_DW) ?  (CX_PHY_NB_GEN1*2) : CX_PHY_NB_GEN1)
// Values:       1, ..., 8
// 
// Specifies the maximum number of symbols that are 
// handled per each pclk cycle by the PHY for GEN2
`define CX_PHY_NB_GEN2 1


// Name:         CX_PHY_NB_GEN3
// Default:      1 ((CX_PHY_FREQ      == FREQ_500) ? 2                   : 
//               (CX_PHY_GEN3_MODE == GEN3_DW) ?  (CX_PHY_NB_GEN2*2) : CX_PHY_NB_GEN2)
// Values:       1, ..., 8
// 
// Specifies the maximum number of symbols that are 
// handled per each pclk cycle by the PHY for GEN3
`define CX_PHY_NB_GEN3 1


// Name:         CX_PHY_NB_GEN4
// Default:      1 ((CX_PHY_FREQ      == FREQ_500) ? 4                   : 
//               (CX_PHY_GEN4_MODE == GEN4_DW) ?  (CX_PHY_NB_GEN3*2) : CX_PHY_NB_GEN3)
// Values:       1, ..., 8
// 
// Specifies the maximum number of symbols that are 
// handled per each pclk cycle by the PHY for GEN4
`define CX_PHY_NB_GEN4 1


// Name:         CX_PHY_NB
// Default:      1 ((CX_PHY_GEN4_MODE == GEN4_DW) ? (CX_PHY_NB_GEN3*2) : 
//               CX_PHY_NB_GEN3)
// Values:       1, ..., 8
// 
// Specifies the maximum number of symbols that are 
// handled per each pclk cycle by the PHY
`define CX_PHY_NB 1

`define NB_4

`define PHY_NB_1



// Name:           CX_NL
// Default:        x4 ((CX_S_CPCIE_MODE) ? 4 : (CM_TXNL_GUI > CM_RXNL_GUI) ? 
//                 CM_TXNL_GUI : CM_RXNL_GUI)
// Values:         x1 (1), x2 (2), x4 (4), x8 (8), x16 (16)
// Enabled:        ((CX_PCIE_MODE == SINGLE_CPCIE))
// Parameter Type: Feature Setting
// 
// Maximum number of lanes that the controller supports. 
// For full details of what combinations of modes, frequencies and link widths are supported for each core, see Table 1-1 
// in the "Frequency, Speed, and Width Support" section in the Product Overview chapter of the Databook. 
// This parameter becomes a read-only parameter and takes the same value as the maximum of {CM_TXNL, CM_RXNL} if Single 
// M-PCIe or Selectable PHY modes are enabled.
`define CX_NL 4


// Name:         CX_NL_M_1
// Default:      3 (CX_NL-1)
// Values:       -2147483648, ..., 2147483647
// 
// Set the value of CX_NL - 1
`define CX_NL_M_1 3


// Name:         CX_PHY_PDOWN_WD
// Default:      4
// Values:       -2147483648, ..., 2147483647
// 
// width of mac_phy_powerdown
`define CX_PHY_PDOWN_WD 4


// Name:         CX_PHY_RATE_WD
// Default:      1 (((CX_SEL_PHY_MODE  ? (CX_MAX_CPCIE_SPEED >= 3) : CX_S_CPCIE_MODE 
//               ? (CX_GEN3_MODE != GEN3_DISABLED) : 0)==1) ? 2 : 1)
// Values:       -2147483648, ..., 2147483647
// 
// width of mac_phy_rate
`define CX_PHY_RATE_WD 1


// Name:         CX_PHY_TXDEEMPH_WD
// Default:      2 ((PHY_IS_PIPE==1 && CX_GEN3_SPEED==1) ? (CX_NL*18) : 2)
// Values:       -2147483648, ..., 2147483647
// 
// width of mac_phy_txdeemph
`define CX_PHY_TXDEEMPH_WD 2


// Name:         CX_PHY_RXSB_WD
// Default:      1 ((((CX_PHY_FREQ == FREQ_125) && (CX_PHY_GEN2_MODE == GEN2_DF) && 
//               (CX_PHY_GEN3_MODE == GEN3_DW) && (CX_PHY_GEN4_MODE == GEN4_DW) && 
//               (CX_PHY_INTERFACE == V7_INTERFACE)) ? 1 : 0) ? 2 : 1)
// Values:       -2147483648, ..., 2147483647
// 
// width of phy_mac_rxstartblock per lane
`define CX_PHY_RXSB_WD 1

// =====================================
//    for MPCIe parameters
// =====================================


`define CM_TXNL 4


`define CM_RXNL 4

`define TXNL_4

`define RXNL_4


// Name:         CM_TXNL_GTR_1
// Default:      1 (((CX_S_CPCIE_MODE) ? CX_NL : CM_TXNL_GUI > 1) ? 1 : 0)
// Values:       0, 1
// 
// Specifies device has more than 1 TX lane
`define CM_TXNL_GTR_1


// Name:         CM_TXNL_GTR_2
// Default:      1 (((CX_S_CPCIE_MODE) ? CX_NL : CM_TXNL_GUI > 2) ? 1 : 0)
// Values:       0, 1
// 
// Specifies device has more than 2 TX lanes
`define CM_TXNL_GTR_2


// Name:         CM_TXNL_GTR_4
// Default:      0 (((CX_S_CPCIE_MODE) ? CX_NL : CM_TXNL_GUI > 4) ? 1 : 0)
// Values:       0, 1
// 
// Specifies device has more than 4 TX lanes
// `define CM_TXNL_GTR_4


// Name:         CM_TXNL_GTR_8
// Default:      0 (((CX_S_CPCIE_MODE) ? CX_NL : CM_TXNL_GUI > 8) ? 1 : 0)
// Values:       0, 1
// 
// Specifies device has more than 8 TX lanes
// `define CM_TXNL_GTR_8


// Name:         CM_RXNL_GTR_1
// Default:      1 (((CX_S_CPCIE_MODE) ? CX_NL : CM_RXNL_GUI > 1) ? 1 : 0)
// Values:       0, 1
// 
// Specifies device has more than 1 RX lane
`define CM_RXNL_GTR_1


// Name:         CM_RXNL_GTR_2
// Default:      1 (((CX_S_CPCIE_MODE) ? CX_NL : CM_RXNL_GUI > 2) ? 1 : 0)
// Values:       0, 1
// 
// Specifies device has more than 2 RX lanes
`define CM_RXNL_GTR_2


// Name:         CM_RXNL_GTR_4
// Default:      0 (((CX_S_CPCIE_MODE) ? CX_NL : CM_RXNL_GUI > 4) ? 1 : 0)
// Values:       0, 1
// 
// Specifies device has more than 4 RX lanes
// `define CM_RXNL_GTR_4


// Name:         CM_RXNL_GTR_8
// Default:      0 (((CX_S_CPCIE_MODE) ? CX_NL : CM_RXNL_GUI > 8) ? 1 : 0)
// Values:       0, 1
// 
// Specifies device has more than 8 RX lanes
// `define CM_RXNL_GTR_8

//This parameter informs the controller the configuration type in
//terms of S-ness and  number of lanes.   The  parameter is
//derived from the CM_TXNL and CM_NB parameters. This is used
//to instantiate the correct configuration of the CXPL module.
`define CFG_1TX4

//This parameter informs the controller the configuration type in
//terms of S-ness and  number of lanes.   The  parameter is
//derived from the CM_RXNL and CM_NB parameters. This is used
//to instantiate the correct configuration of the CXPL module.
`define CFG_1RX4

// =====================================
//    for MPCIe parameters (end)
// =====================================

`define NL_4


// Name:         CX_NL_GTR_1
// Default:      1 ((CX_NL > 1) ? 1 : 0)
// Values:       0, 1
// 
// Specifies device has more than 1 lane in Tx or Rx
`define CX_NL_GTR_1


// Name:         CX_NL_GTR_2
// Default:      1 ((CX_NL > 2) ? 1 : 0)
// Values:       0, 1
// 
// Specifies device has more than 2 lanes in Tx or Rx
`define CX_NL_GTR_2


// Name:         CX_NL_GTR_4
// Default:      0 ((CX_NL > 4) ? 1 : 0)
// Values:       0, 1
// 
// Specifies device has more than 4 lanes in Tx or Rx
// `define CX_NL_GTR_4


// Name:         CX_NL_GTR_8
// Default:      0 ((CX_NL > 8) ? 1 : 0)
// Values:       0, 1
// 
// Specifies device has more than 8 lanes in Tx or Rx
// `define CX_NL_GTR_8


// Name:         CX_NB_GTR_1
// Default:      1 ((((CX_GEN4_MODE == GEN4_DW) ?  (CX_NB_GEN3*2) : CX_NB_GEN3) > 1) 
//               ? 1 : 0)
// Values:       0, 1
// 
// Specifies device has more than 1 symbol per clock
`define CX_NB_GTR_1


// Name:         CX_NB_GTR_2
// Default:      1 ((((CX_GEN4_MODE == GEN4_DW) ?  (CX_NB_GEN3*2) : CX_NB_GEN3) > 2) 
//               ? 1 : 0)
// Values:       0, 1
// 
// Specifies device has more than 2 symbols per clock
`define CX_NB_GTR_2


// Name:         CX_NB_GTR_4
// Default:      0 ((((CX_GEN4_MODE == GEN4_DW) ?  (CX_NB_GEN3*2) : CX_NB_GEN3) > 4) 
//               ? 1 : 0)
// Values:       0, 1
// 
// Specifies device has more than 4 symbols per clock
// `define CX_NB_GTR_4


// Name:         CX_NB_GTR_8
// Default:      0 ((((CX_GEN4_MODE == GEN4_DW) ?  (CX_NB_GEN3*2) : CX_NB_GEN3) > 8) 
//               ? 1 : 0)
// Values:       0, 1
// 
// Specifies the width of the datapath in dwords. Displayed in bits. This read-only parameter is derived automatically as 
// CX_NL * CX_NB , rounded up to 1, 2, 4, or 8. For more details, see the "Frequency, Speed, and Width Support" section in the 
// Product Overview chapter of the Databook. For the definition of CX_NB, see the description of "Core PIPE Lane Width" 
// (CX_PIPE_WIDTH_).
// `define CX_NB_GTR_8


// Name:         CX_NW
// Default:      128-bit ([calc_get_datapath CX_NB CX_NL])
// Values:       32-bit (1), 64-bit (2), 128-bit (4), 256-bit (8), 512-bit (16)
// 
// Specifies the width of the datapath in dwords. Displayed in bits. This read-only parameter is derived automatically as 
// CX_NL * CX_NB , rounded up to 1, 2, 4, or 8. For more details, see the "Frequency, Speed, and Width Support" section in the 
// Product Overview chapter of the Databook. For the definition of CX_NB, see the description of "Core PIPE Lane Width" 
// (CX_PIPE_WIDTH_).
`define CX_NW 4

`define NW_4


`define CX_NW_GTR_1


`define CX_NW_GTR_2


// Name:         CX_ANB_WD
// Default:      4 ((((CX_GEN4_MODE == GEN4_DW) ?  (CX_NB_GEN3*2) : CX_NB_GEN3)==16) 
//               ?  5 : 4)
// Values:       -2147483648, ..., 2147483647
// 
// Width of the active number of bytes
`define CX_ANB_WD 4


// `define CX_NW_GTR_4


// `define CX_NW_GTR_8

//These parameters inform the controller of the specified DataPath size
//The value is derived from the CX_NW parameter
`define ARC_128



`define ARC_WIDTH 128


`define ARC_GTR_64


// `define ARC_GTR_128


// `define ARC_GTR_256



// Name:           CX_RADMQ_MODE
// Default:        Segmented-Buffer ((CX_P2P_ENABLE==1 || CX_NW==16) ? 2 : 0==1 ? 0 : 
//                 2)
// Values:         Single-Buffer (0), Multiple-Buffer (1), Segmented-Buffer (2)
// Enabled:        !(CX_P2P_ENABLE==1 || CX_NW==16)
// Parameter Type: Feature Setting
// 
// Specifies the queue architecture for the receive queues. For more information, refer to the 'Receive Queues' section in 
// the 'Architecture' chapter of the Databook. 
//  - Single-Buffer 
//  - Multiple-Buffer 
//  - Segmented-Buffer 
// For a full list of restrictions regarding queue modes, see the "Advanced Receive Queue Information" chapter in the 
// Databook. Additional configuration panes ('Multiple-Buffer Options Configuration Parameters' and 'Segmented-Buffer Options 
// Configuration Parameters') will become visible when you set the CX_RADMQ_MODE configuration parameter to Multiple-Buffer or 
// Segmented-Buffer. 
//  
// Note: Only the Segmented-Buffer is supported when CX_P2P_ENABLE=1.
`define CX_RADMQ_MODE 2


// Name:         ARC_256_P2
// Default:      256b-Phase1-Architecture (CX_NW==8)
// Values:       256b-Phase1-Architecture (0), 256b-Phase2-Architecture (1)
// Enabled:      CX_NW==8
// 
// select the receive TLP processing Architecture for 256b datapath. 
// 0: selects the "Phase1" 256b architecture and this architecture supports a receive processing rate of one TLP per clock 
// cycle. 
// 1: selects the "Phase2" 256b architecture and this architecture supports a receive processing rate of two TLPs per 
// clock cycle. 
// Phase2 is enabled only when the Queue Architecture is Single or Multi. When Phase2 is selected 
// the number of header/data queues per-VC is doubled, the width of each sub-queue is exactly 
// one credit, as a result the minimum depth of each sub-queue must be one half the credits 
// advertised. Queue depths can be set manually when RADM_DEPTH_DECOUPLE_VC0=1, otherwise 
// the depths for P/NP queues are calculated from the credits, for CPL queues with infinite 
// credits the depth is calculated differently, see the CX_APP_RD_REQ_SIZE parameter description.
// `define ARC_256_P2

//The number of header queues per VC in single/multi queue architecture

`define CX_NHQ 1

//The number of data queues per VC in single/multi queue architecture

`define CX_NDQ 1

//The number of TLPs that can be written into the Radm queues in a single clock cycle.

`define CX_RX_TLP 1

//This parameter informs the controller the configuration type in
//terms of S-ness and  number of lanes.   The  parameter is
//derived from the CX_NL and CX_NB parameters. This is used
//to instantiate the correct configuration of the CXPL module.
`define CFG_4X4


// `define USE_CXPL_01F


`define USE_CXPL_08F


// Name:           CX_NFUNC
// Default:        1
// Values:         1, ..., 32
// Enabled:        Always
// Parameter Type: Feature Setting
// 
// Number of (physical) functions to support (in EP mode). There is a complete set of all of the 'Function/BAR 
// Configuration Parameters' parameters for each of the CX_NFUNC functions. The additional configuration panes for each additional 
// function will become visible when you set the CX_NFUNC configuration parameter to a value greater than 1. CX_ARI_ENABLE must be 
// 1 when you have more than 8 functions.
`define CX_NFUNC 6'd2




`define NFUNC_GREATER_THAN_1


// `define NFUNC_GREATER_THAN_8


// Name:         CX_NFUNC_WD
// Default:      1 ((CX_ARI_ENABLE) ? [calc_log2 CX_NFUNC] : 3)
// Values:       0, ..., 31
// 
// This is the width needed to communicate the number of functions.
`define CX_NFUNC_WD 5'd1


`define CX_MAX_FUNC_NUM 5'h1





// Name:           CX_MAX_VF_0
// Default:        0x2
// Values:         0x0, ..., CX_MAX_TOTAL_VFS
// Enabled:        CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Number of virtual functions supported for this physical function. Default value of the InitialVFs field in the SR-IOV 
// Capability registers. 
// When Extensible Virtual Function (CX_EXTENSIBLE_VFUNC) is enabled, this parameter indicates the total of both internal 
// VFs and external VFs.
`define CX_MAX_VF_0 16'h2


// Name:           CX_MAX_VF_1
// Default:        0x0
// Values:         0x0, ..., CX_MAX_TOTAL_VFS
// Enabled:        (CX_NFUNC > 1) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Number of virtual functions supported for physical function 1. Default value of the InitialVFs field in the SR-IOV 
// Capability registers. 
// When Extensible Virtual Function (CX_EXTENSIBLE_VFUNC) is enabled, this parameter indicates the total of both internal 
// VFs and external VFs.
`define CX_MAX_VF_1 16'h0


// Name:           CX_MAX_VF_2
// Default:        0x0
// Values:         0x0, ..., CX_MAX_TOTAL_VFS
// Enabled:        (CX_NFUNC > 2) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Number of virtual functions supported for physical function 2. Default value of the InitialVFs field in the SR-IOV 
// Capability registers. 
// When Extensible Virtual Function (CX_EXTENSIBLE_VFUNC) is enabled, this parameter indicates the total of both internal 
// VFs and external VFs.
`define CX_MAX_VF_2 16'h0


// Name:           CX_MAX_VF_3
// Default:        0x0
// Values:         0x0, ..., CX_MAX_TOTAL_VFS
// Enabled:        (CX_NFUNC > 3) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Number of virtual functions supported for physical function 3. Default value of the InitialVFs field in the SR-IOV 
// Capability registers. 
// When Extensible Virtual Function (CX_EXTENSIBLE_VFUNC) is enabled, this parameter indicates the total of both internal 
// VFs and external VFs.
`define CX_MAX_VF_3 16'h0


// Name:           CX_MAX_VF_4
// Default:        0x0
// Values:         0x0, ..., CX_MAX_TOTAL_VFS
// Enabled:        (CX_NFUNC > 4) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Number of virtual functions supported for physical function 4. Default value of the InitialVFs field in the SR-IOV 
// Capability registers. 
// When Extensible Virtual Function (CX_EXTENSIBLE_VFUNC) is enabled, this parameter indicates the total of both internal 
// VFs and external VFs.
`define CX_MAX_VF_4 16'h0


// Name:           CX_MAX_VF_5
// Default:        0x0
// Values:         0x0, ..., CX_MAX_TOTAL_VFS
// Enabled:        (CX_NFUNC > 5) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Number of virtual functions supported for physical function 5. Default value of the InitialVFs field in the SR-IOV 
// Capability registers. 
// When Extensible Virtual Function (CX_EXTENSIBLE_VFUNC) is enabled, this parameter indicates the total of both internal 
// VFs and external VFs.
`define CX_MAX_VF_5 16'h0


// Name:           CX_MAX_VF_6
// Default:        0x0
// Values:         0x0, ..., CX_MAX_TOTAL_VFS
// Enabled:        (CX_NFUNC > 6) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Number of virtual functions supported for physical function 6. Default value of the InitialVFs field in the SR-IOV 
// Capability registers. 
// When Extensible Virtual Function (CX_EXTENSIBLE_VFUNC) is enabled, this parameter indicates the total of both internal 
// VFs and external VFs.
`define CX_MAX_VF_6 16'h0


// Name:           CX_MAX_VF_7
// Default:        0x0
// Values:         0x0, ..., CX_MAX_TOTAL_VFS
// Enabled:        (CX_NFUNC > 7) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Number of virtual functions supported for physical function 7. Default value of the InitialVFs field in the SR-IOV 
// Capability registers. 
// When Extensible Virtual Function (CX_EXTENSIBLE_VFUNC) is enabled, this parameter indicates the total of both internal 
// VFs and external VFs.
`define CX_MAX_VF_7 16'h0


// Name:           CX_MAX_VF_8
// Default:        0x0
// Values:         0x0, ..., CX_MAX_TOTAL_VFS
// Enabled:        (CX_NFUNC > 8) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Number of virtual functions supported for physical function 8. Default value of the InitialVFs field in the SR-IOV 
// Capability registers. 
// When Extensible Virtual Function (CX_EXTENSIBLE_VFUNC) is enabled, this parameter indicates the total of both internal 
// VFs and external VFs.
`define CX_MAX_VF_8 16'h0


// Name:           CX_MAX_VF_9
// Default:        0x0
// Values:         0x0, ..., CX_MAX_TOTAL_VFS
// Enabled:        (CX_NFUNC > 9) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Number of virtual functions supported for physical function 9. Default value of the InitialVFs field in the SR-IOV 
// Capability registers. 
// When Extensible Virtual Function (CX_EXTENSIBLE_VFUNC) is enabled, this parameter indicates the total of both internal 
// VFs and external VFs.
`define CX_MAX_VF_9 16'h0


// Name:           CX_MAX_VF_10
// Default:        0x0
// Values:         0x0, ..., CX_MAX_TOTAL_VFS
// Enabled:        (CX_NFUNC > 10) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Number of virtual functions supported for physical function 10. Default value of the InitialVFs field in the SR-IOV 
// Capability registers. 
// When Extensible Virtual Function (CX_EXTENSIBLE_VFUNC) is enabled, this parameter indicates the total of both internal 
// VFs and external VFs.
`define CX_MAX_VF_10 16'h0


// Name:           CX_MAX_VF_11
// Default:        0x0
// Values:         0x0, ..., CX_MAX_TOTAL_VFS
// Enabled:        (CX_NFUNC > 11) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Number of virtual functions supported for physical function 11. Default value of the InitialVFs field in the SR-IOV 
// Capability registers. 
// When Extensible Virtual Function (CX_EXTENSIBLE_VFUNC) is enabled, this parameter indicates the total of both internal 
// VFs and external VFs.
`define CX_MAX_VF_11 16'h0


// Name:           CX_MAX_VF_12
// Default:        0x0
// Values:         0x0, ..., CX_MAX_TOTAL_VFS
// Enabled:        (CX_NFUNC > 12) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Number of virtual functions supported for physical function 12. Default value of the InitialVFs field in the SR-IOV 
// Capability registers. 
// When Extensible Virtual Function (CX_EXTENSIBLE_VFUNC) is enabled, this parameter indicates the total of both internal 
// VFs and external VFs.
`define CX_MAX_VF_12 16'h0


// Name:           CX_MAX_VF_13
// Default:        0x0
// Values:         0x0, ..., CX_MAX_TOTAL_VFS
// Enabled:        (CX_NFUNC > 13) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Number of virtual functions supported for physical function 13. Default value of the InitialVFs field in the SR-IOV 
// Capability registers. 
// When Extensible Virtual Function (CX_EXTENSIBLE_VFUNC) is enabled, this parameter indicates the total of both internal 
// VFs and external VFs.
`define CX_MAX_VF_13 16'h0


// Name:           CX_MAX_VF_14
// Default:        0x0
// Values:         0x0, ..., CX_MAX_TOTAL_VFS
// Enabled:        (CX_NFUNC > 14) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Number of virtual functions supported for physical function 14. Default value of the InitialVFs field in the SR-IOV 
// Capability registers. 
// When Extensible Virtual Function (CX_EXTENSIBLE_VFUNC) is enabled, this parameter indicates the total of both internal 
// VFs and external VFs.
`define CX_MAX_VF_14 16'h0


// Name:           CX_MAX_VF_15
// Default:        0x0
// Values:         0x0, ..., CX_MAX_TOTAL_VFS
// Enabled:        (CX_NFUNC > 15) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Number of virtual functions supported for physical function 15. Default value of the InitialVFs field in the SR-IOV 
// Capability registers. 
// When Extensible Virtual Function (CX_EXTENSIBLE_VFUNC) is enabled, this parameter indicates the total of both internal 
// VFs and external VFs.
`define CX_MAX_VF_15 16'h0


// Name:           CX_MAX_VF_16
// Default:        0x0
// Values:         0x0, ..., CX_MAX_TOTAL_VFS
// Enabled:        (CX_NFUNC > 16) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Number of virtual functions supported for physical function 16. Default value of the InitialVFs field in the SR-IOV 
// Capability registers. 
// When Extensible Virtual Function (CX_EXTENSIBLE_VFUNC) is enabled, this parameter indicates the total of both internal 
// VFs and external VFs.
`define CX_MAX_VF_16 16'h0


// Name:           CX_MAX_VF_17
// Default:        0x0
// Values:         0x0, ..., CX_MAX_TOTAL_VFS
// Enabled:        (CX_NFUNC > 17) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Number of virtual functions supported for physical function 17. Default value of the InitialVFs field in the SR-IOV 
// Capability registers. 
// When Extensible Virtual Function (CX_EXTENSIBLE_VFUNC) is enabled, this parameter indicates the total of both internal 
// VFs and external VFs.
`define CX_MAX_VF_17 16'h0


// Name:           CX_MAX_VF_18
// Default:        0x0
// Values:         0x0, ..., CX_MAX_TOTAL_VFS
// Enabled:        (CX_NFUNC > 18) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Number of virtual functions supported for physical function 18. Default value of the InitialVFs field in the SR-IOV 
// Capability registers. 
// When Extensible Virtual Function (CX_EXTENSIBLE_VFUNC) is enabled, this parameter indicates the total of both internal 
// VFs and external VFs.
`define CX_MAX_VF_18 16'h0


// Name:           CX_MAX_VF_19
// Default:        0x0
// Values:         0x0, ..., CX_MAX_TOTAL_VFS
// Enabled:        (CX_NFUNC > 19) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Number of virtual functions supported for physical function 19. Default value of the InitialVFs field in the SR-IOV 
// Capability registers. 
// When Extensible Virtual Function (CX_EXTENSIBLE_VFUNC) is enabled, this parameter indicates the total of both internal 
// VFs and external VFs.
`define CX_MAX_VF_19 16'h0


// Name:           CX_MAX_VF_20
// Default:        0x0
// Values:         0x0, ..., CX_MAX_TOTAL_VFS
// Enabled:        (CX_NFUNC > 20) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Number of virtual functions supported for physical function 20. Default value of the InitialVFs field in the SR-IOV 
// Capability registers. 
// When Extensible Virtual Function (CX_EXTENSIBLE_VFUNC) is enabled, this parameter indicates the total of both internal 
// VFs and external VFs.
`define CX_MAX_VF_20 16'h0


// Name:           CX_MAX_VF_21
// Default:        0x0
// Values:         0x0, ..., CX_MAX_TOTAL_VFS
// Enabled:        (CX_NFUNC > 21) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Number of virtual functions supported for physical function 21. Default value of the InitialVFs field in the SR-IOV 
// Capability registers. 
// When Extensible Virtual Function (CX_EXTENSIBLE_VFUNC) is enabled, this parameter indicates the total of both internal 
// VFs and external VFs.
`define CX_MAX_VF_21 16'h0


// Name:           CX_MAX_VF_22
// Default:        0x0
// Values:         0x0, ..., CX_MAX_TOTAL_VFS
// Enabled:        (CX_NFUNC > 22) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Number of virtual functions supported for physical function 22. Default value of the InitialVFs field in the SR-IOV 
// Capability registers. 
// When Extensible Virtual Function (CX_EXTENSIBLE_VFUNC) is enabled, this parameter indicates the total of both internal 
// VFs and external VFs.
`define CX_MAX_VF_22 16'h0


// Name:           CX_MAX_VF_23
// Default:        0x0
// Values:         0x0, ..., CX_MAX_TOTAL_VFS
// Enabled:        (CX_NFUNC > 23) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Number of virtual functions supported for physical function 23. Default value of the InitialVFs field in the SR-IOV 
// Capability registers. 
// When Extensible Virtual Function (CX_EXTENSIBLE_VFUNC) is enabled, this parameter indicates the total of both internal 
// VFs and external VFs.
`define CX_MAX_VF_23 16'h0


// Name:           CX_MAX_VF_24
// Default:        0x0
// Values:         0x0, ..., CX_MAX_TOTAL_VFS
// Enabled:        (CX_NFUNC > 24) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Number of virtual functions supported for physical function 24. Default value of the InitialVFs field in the SR-IOV 
// Capability registers. 
// When Extensible Virtual Function (CX_EXTENSIBLE_VFUNC) is enabled, this parameter indicates the total of both internal 
// VFs and external VFs.
`define CX_MAX_VF_24 16'h0


// Name:           CX_MAX_VF_25
// Default:        0x0
// Values:         0x0, ..., CX_MAX_TOTAL_VFS
// Enabled:        (CX_NFUNC > 25) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Number of virtual functions supported for physical function 25. Default value of the InitialVFs field in the SR-IOV 
// Capability registers. 
// When Extensible Virtual Function (CX_EXTENSIBLE_VFUNC) is enabled, this parameter indicates the total of both internal 
// VFs and external VFs.
`define CX_MAX_VF_25 16'h0


// Name:           CX_MAX_VF_26
// Default:        0x0
// Values:         0x0, ..., CX_MAX_TOTAL_VFS
// Enabled:        (CX_NFUNC > 26) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Number of virtual functions supported for physical function 26. Default value of the InitialVFs field in the SR-IOV 
// Capability registers. 
// When Extensible Virtual Function (CX_EXTENSIBLE_VFUNC) is enabled, this parameter indicates the total of both internal 
// VFs and external VFs.
`define CX_MAX_VF_26 16'h0


// Name:           CX_MAX_VF_27
// Default:        0x0
// Values:         0x0, ..., CX_MAX_TOTAL_VFS
// Enabled:        (CX_NFUNC > 27) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Number of virtual functions supported for physical function 27. Default value of the InitialVFs field in the SR-IOV 
// Capability registers. 
// When Extensible Virtual Function (CX_EXTENSIBLE_VFUNC) is enabled, this parameter indicates the total of both internal 
// VFs and external VFs.
`define CX_MAX_VF_27 16'h0


// Name:           CX_MAX_VF_28
// Default:        0x0
// Values:         0x0, ..., CX_MAX_TOTAL_VFS
// Enabled:        (CX_NFUNC > 28) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Number of virtual functions supported for physical function 28. Default value of the InitialVFs field in the SR-IOV 
// Capability registers. 
// When Extensible Virtual Function (CX_EXTENSIBLE_VFUNC) is enabled, this parameter indicates the total of both internal 
// VFs and external VFs.
`define CX_MAX_VF_28 16'h0


// Name:           CX_MAX_VF_29
// Default:        0x0
// Values:         0x0, ..., CX_MAX_TOTAL_VFS
// Enabled:        (CX_NFUNC > 29) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Number of virtual functions supported for physical function 29. Default value of the InitialVFs field in the SR-IOV 
// Capability registers. 
// When Extensible Virtual Function (CX_EXTENSIBLE_VFUNC) is enabled, this parameter indicates the total of both internal 
// VFs and external VFs.
`define CX_MAX_VF_29 16'h0


// Name:           CX_MAX_VF_30
// Default:        0x0
// Values:         0x0, ..., CX_MAX_TOTAL_VFS
// Enabled:        (CX_NFUNC > 30) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Number of virtual functions supported for physical function 30. Default value of the InitialVFs field in the SR-IOV 
// Capability registers. 
// When Extensible Virtual Function (CX_EXTENSIBLE_VFUNC) is enabled, this parameter indicates the total of both internal 
// VFs and external VFs.
`define CX_MAX_VF_30 16'h0


// Name:           CX_MAX_VF_31
// Default:        0x0
// Values:         0x0, ..., CX_MAX_TOTAL_VFS
// Enabled:        (CX_NFUNC > 31) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Number of virtual functions supported for physical function 31. Default value of the InitialVFs field in the SR-IOV 
// Capability registers. 
// When Extensible Virtual Function (CX_EXTENSIBLE_VFUNC) is enabled, this parameter indicates the total of both internal 
// VFs and external VFs.
`define CX_MAX_VF_31 16'h0



// Name:         CX_NVFUNC
// Default:      2 (CX_MAX_VF_0 + CX_MAX_VF_1 + CX_MAX_VF_2 + CX_MAX_VF_3 + 
//               CX_MAX_VF_4 + CX_MAX_VF_5 + CX_MAX_VF_6 + CX_MAX_VF_7 + CX_MAX_VF_8 + 
//               CX_MAX_VF_9 + CX_MAX_VF_10 + CX_MAX_VF_11 + CX_MAX_VF_12 + CX_MAX_VF_13 + 
//               CX_MAX_VF_14 + CX_MAX_VF_15 + CX_MAX_VF_16 + CX_MAX_VF_17 + 
//               CX_MAX_VF_18 + CX_MAX_VF_19 + CX_MAX_VF_20 + CX_MAX_VF_21 + CX_MAX_VF_22 + 
//               CX_MAX_VF_23 + CX_MAX_VF_24 + CX_MAX_VF_25 + CX_MAX_VF_26 + CX_MAX_VF_27 + 
//               CX_MAX_VF_28 + CX_MAX_VF_29 + CX_MAX_VF_30 + CX_MAX_VF_31)
// Values:       -2147483648, ..., 2147483647
// 
// Read-only parameter that specifies the total number of virtual functions supported by the controller. 
// When CX_EXTENSIBLE_VFUNC=1, it is the total of both internal VFs and external VFs.
`define CX_NVFUNC 2


// Name:         CX_NVFUNC_WD
// Default:      2 ([calc_log2 CX_NVFUNC] + 1)
// Values:       -2147483648, ..., 2147483647
// 
// Specifies the number of bits (plus one) needed to count the total number of virtual functions supported. 
// This width is used for the "vf_index" variables. The extra bit is needed to indicate if the vf_index is 
// valid (access is for a VF) or not (access is for a PF).
`define CX_NVFUNC_WD 2


// Name:         CX_NVFUNC_EWD
// Default:      1 ([calc_log2 CX_NVFUNC])
// Values:       -2147483648, ..., 2147483647
// 
// This is exactly (E) the with of CX_NVFUNC
`define CX_NVFUNC_EWD 1


// Name:         CX_NVFUNC_NUM
// Default:      2 (CX_NVFUNC)
// Values:       -2147483648, ..., 2147483647
// 
// Note: this parameter is not necessary any more after the dynamic vf allocation enhancement and will be soon removed. It 
// is maintained only because some tcl packaging scripts rely on it. 
// Specifies the highest number of virtual functions supported by a physical function.
`define CX_NVFUNC_NUM 2


// Name:         CX_NVFUNC_NUM_WD
// Default:      2 ([calc_log2 CX_NVFUNC] + 1)
// Values:       -2147483648, ..., 2147483647
// 
// Note: this parameter is not necessary any more after the dynamic vf allocation enhancement and will be soon removed. It 
// is maintained only because some tcl packaging scripts rely on it. 
// Specifies the number of bits (plus one) needed to count the virtual functions in a PF. 
// This width is used for the "vf" variables. The extra bit is needed to indicate if the "vf" 
// number is valid (access is for a VF) or not (access is for a PF).
`define CX_NVFUNC_NUM_WD 2


// Name:           CX_INTERNAL_NVFUNC
// Default:        2 (CX_EXTENSIBLE_VFUNC ? 0 : CX_NVFUNC)
// Values:         0, ..., CX_MAX_TOTAL_INTERNAL_VFS
// Enabled:        0
// Parameter Type: Feature Setting
// 
// The total number of VF registers implemented internally in the controller. 
//  - Normally, this is a read-only parameter that specifies the total number of virtual functions supported by the 
//  controller. 
//  - When CX_EXTENSIBLE_VFUNC=1, it is a writable parameter that specifies the total number of virtual functions 
//  implemented internally in the controller. Internal VFs are mapped from the lowest function number; that is, PF0_VF1. 
//  For more details, see the SR-IOV section in the Controller Operations chapter of the Databook.
`define CX_INTERNAL_NVFUNC 2



// Name:         CX_INTERNAL_NVFUNC_WD
// Default:      2 ([calc_log2 CX_INTERNAL_NVFUNC] + 1)
// Values:       -2147483648, ..., 2147483647
// 
// Specifies the number of bits (plus one) needed to count the total number of internal virtual functions supported.
`define CX_INTERNAL_NVFUNC_WD 2


// Name:         INTERNAL_VF_ENABLE
// Default:      0 (CX_SRIOV_ENABLE && (CX_INTERNAL_NVFUNC != 0))
// Values:       0, 1
// 
// Specifies the controller has VF configuration registers.
// `define INTERNAL_VF_ENABLE


// Name:           MULTI_DEVICE_AND_BUS_PER_FUNC_EN
// Default:        false
// Values:         false (0), true (1)
// Enabled:        ((CX_ARI_ENABLE!=1 && CX_NW<8))
// Parameter Type: Feature Setting
// 
// Determines if all functions use the same bus number (of function #0) or if they use the individual bus numbers assigned 
// to them by host software. Determines the size of the cfg_pbus_num and cfg_pbus_dev_num buses: one set of bits for all 
// functions or separate bit-fields for each configured function. Not applicable when CX_ARI_ENABLE=1. 
//  - True: Use individual bus numbers 
//  - False: Use same bus number
// `define MULTI_DEVICE_AND_BUS_PER_FUNC_EN


`define MULTI_DEVICE_AND_BUS_PER_FUNC_EN_VALUE 0


// Name:         CX_BUSNUM_WD
// Default:      8 (MULTI_DEVICE_AND_BUS_PER_FUNC_EN == 0) ?  8 : (CX_NFUNC*8)
// Values:       8, ..., 64
// 
// Bus number width
`define CX_BUSNUM_WD 8


// Name:         CX_SNOOP_VPD_WD
// Default:      1 (MULTI_DEVICE_AND_BUS_PER_FUNC_EN == 0) ?  1 : (CX_NFUNC*1)
// Values:       1, ..., 8
// 
// radm snoop bus width
`define CX_SNOOP_VPD_WD 1


// Name:         CX_DEVNUM_WD
// Default:      5 (MULTI_DEVICE_AND_BUS_PER_FUNC_EN == 0) ?  5 : (CX_NFUNC*5)
// Values:       5, ..., 64
// 
// device number width
`define CX_DEVNUM_WD 5


// Name:           CX_NVC
// Default:        1
// Values:         1 2 3 4 5 6 7 8
// Parameter Type: Feature Setting
// 
// The number of Virtual Channels (VCs) to be supported. 
// The controller supports up to eight VCs.
`define CX_NVC 4'd1


// Name:         DC_MULTI_VC
// Default:      0 (CX_NVC > 1)
// Values:       0, 1
// 
// We have > 1 VC (multi-vc)
// `define DC_MULTI_VC


`define DC_MULTI_VC_VALUE 0


// Name:         CX_NVC_LOG2
// Default:      1 ([calc_log2 CX_NVC])
// Values:       -2147483648, ..., 2147483647
// 
// log2 (CX_NVC)
`define CX_NVC_LOG2 1


// Name:         VC_0
// Default:      1
// Values:       0, 1
// 
// This parameter indicates that Virtual Channel 0 is present
`define VC_0


// Name:         VC_1
// Default:      0 ((CX_NVC > 1) ? 1 : 0)
// Values:       0, 1
// 
// This parameter indicates that Virtual Channel 1 is present
// `define VC_1


// Name:         VC_2
// Default:      0 ((CX_NVC > 2) ? 1 : 0)
// Values:       0, 1
// 
// This parameter indicates that Virtual Channel 2 is present
// `define VC_2


// Name:         VC_3
// Default:      0 ((CX_NVC > 3) ? 1 : 0)
// Values:       0, 1
// 
// This parameter indicates that Virtual Channel 3 is present
// `define VC_3


// Name:         VC_4
// Default:      0 ((CX_NVC > 4) ? 1 : 0)
// Values:       0, 1
// 
// This parameter indicates that Virtual Channel 4 is present
// `define VC_4


// Name:         VC_5
// Default:      0 ((CX_NVC > 5) ? 1 : 0)
// Values:       0, 1
// 
// This parameter indicates that Virtual Channel 5 is present
// `define VC_5


// Name:         VC_6
// Default:      0 ((CX_NVC > 6) ? 1 : 0)
// Values:       0, 1
// 
// This parameter indicates that Virtual Channel 6 is present
// `define VC_6


// Name:         VC_7
// Default:      0 ((CX_NVC > 7) ? 1 : 0)
// Values:       0, 1
// 
// This parameter indicates that Virtual Channel 7 is present
// `define VC_7


// Name:         CX_NP
// Default:      1
// Values:       1 2 3 4 5 6 7 8
// 
// Specifies the number of port (port logic cores) in the 
// design
`define CX_NP 1



// Name:           TRGT1_POPULATE
// Default:        true
// Values:         false (0), true (1)
// Enabled:        (0 && CX_RADMQ_MODE!=2 && !(CC_DMA_ENABLE))
// Parameter Type: Feature Setting
// 
// Include or exclude the receive Target 1 interface (RTRGT1) from the design. For more details, see the 'Architecture' 
// chapter of the Databook. 
//  
// Note: This parameter is read-only when the receive queue architecture (CX_RADMQ_MODE) is "Segmented Buffer" or when the 
// DMA is present.
`define TRGT1_POPULATE


// Name:           CX_INTERNAL_ATU_ENABLE
// Default:        false
// Values:         false (0x0), true (0x1)
// Parameter Type: Feature Setting
// 
// Enables the instantiation of the internal address translation unit (iATU). Refer to 'Internal Address Translation 
// (iATU)' section of the Databook.
`define CX_INTERNAL_ATU_ENABLE 1'h1


// Name:           ADDR_TRANSLATION_SUPPORT_EN
// Default:        true (CX_INTERNAL_ATU_ENABLE)
// Values:         false (0), true (1)
// Enabled:        !CX_INTERNAL_ATU_ENABLE
// Parameter Type: Feature Setting
// 
// When set, the controller supports local (application <-> system) address translation services. Address translation is 
// used for mapping different address ranges between different memory spaces comprehended by the application. The address 
// translation unit (ATU) is internal or external (supplied by user) depending on the value of the CX_INTERNAL_ATU_ENABLE 
// parameter. Setting the CX_INTERNAL_ATU_ENABLE parameter forces ADDR_TRANSLATION_SUPPORT_EN to be '1'. Refer to 'Address 
// Translation' in the the Databook. 
//  
// Note: The external ATU feature is deprecated - you should use the Internal Address Translation Unit (iATU) 
// as it is the easiest, most flexible and recommended method of implementing address/type translation. 
// The external address translation interface has numerous limitations in connection with the translation of MWr to 
// Msg/IOWr/CfgWr.
`define ADDR_TRANSLATION_SUPPORT_EN


// Name:           CX_AUTOMOTIVE_ENABLE
// Default:        0
// Values:         0, 1
// Enabled:        Always
// Parameter Type: Register Default Setting
// 
// Automotive safety package
// `define CX_AUTOMOTIVE_ENABLE


// Name:         CC_UNROLL_EN
// Default:      Enable ((CC_DMA_ENABLE || CX_INTERNAL_ATU_ENABLE) && 
//               !AHB_POPULATED)
// Values:       Disable (0), Enable (1)
// Enabled:      (CC_DMA_ENABLE || CX_INTERNAL_ATU_ENABLE) && !AHB_POPULATED
// 
// UNROLL (ATU and DMA) Enable
`define CC_UNROLL_EN 1


// Name:         CC_UNROLL_ENABLE
// Default:      1 ((CC_UNROLL_EN==0)? 0: 1)
// Values:       0, 1
// 
// UNROLL (ATU and DMA) Enable
`define CC_UNROLL_ENABLE


// Name:         CX_RASDP
// Default:      None ((CX_AUTOMOTIVE_ENABLE==1)? 2: 0)
// Values:       None (0), Parity (8-bit Even) (1), Parity (8-bit Odd) (2), ECC: 
//               With Error Correction (3), ECC: No Error Correction (4)
// Enabled:      CX_RADMQ_MODE==2
// 
// Select datapath protection features.
`define CX_RASDP 0


// Name:         CX_RASDP_RAM_PROT
// Default:      0 ((CX_RASDP==0)? 0: 1)
// Values:       0, 1
// Enabled:      (CX_RADMQ_MODE==2)? ((CX_RASDP==0 && AMBA_INTERFACE==0 && 
//               CC_DMA_ENABLE==0)? 1: 0): 0
// 
// Select RAM ECC protection. 
//  
// RAM ECC protection is always selected when you have enabled datapath protection (CX_RASDP >0). 
//  
// Single-bit RAM ECC correction is always enabled unless you disable single-bit datapath ECC correction (CX_RASDP =4).
// `define CX_RASDP_RAM_PROT


// Name:         CX_RAS_EN
// Default:      0 (((CX_RASDP==0)&&(CX_RASDP_RAM_PROT==0))? 0: 1)
// Values:       0, 1
// 
// Select RASDP - data path protection features
// `define CX_RAS_EN


// Name:         CX_RASDP_EN
// Default:      0 ((CX_RASDP==0)? 0: 1)
// Values:       0, 1
// 
// When defined, data path protection is included
// `define CX_RASDP_EN


// Name:         CX_RAS_EXT_IF
// Default:      0
// Values:       0, 1
// Enabled:      CX_RASDP ==3
// 
// Select RASDP extended RAMs interface
// `define CX_RAS_EXT_IF


// Name:         CX_RAS_EXT_RAM_IF
// Default:      0 (CX_RAS_EXT_IF && CX_RAM_AT_TOP_IF)
// Values:       0, 1
// Enabled:      (((CX_RASDP==0)&&(CX_RASDP_RAM_PROT==0))? 0: 1)
// 
// Select RASDP extended external RAMs interface
// `define CX_RAS_EXT_RAM_IF


// Name:         RAS_DEFAULT_NULLIFY_EN
// Default:      1
// Values:       -2147483648, ..., 2147483647
// 
// Control the default value of the enable signal of RASDP error mode
`define RAS_DEFAULT_NULLIFY_EN 1


// Name:         RAS_DMA_OR_BRIDGE
// Default:      0 ((CX_RAS_EN==1)? ((CC_DMA_ENABLE || AXI_POPULATED)? 1: 0): 0)
// Values:       0, 1
// 
// This constant is set when AXI or DMA are used - used to set the top level pins used by DMA or bridge
// `define RAS_DMA_OR_BRIDGE


// Name:         RAS_APP_CORR_DISABLE_WD
// Default:      1 ((RAS_DMA_OR_BRIDGE==1)? ((CC_DMA_ENABLE && AXI_POPULATED)? 8: 
//               CC_DMA_ENABLE? 4: 6): 1)
// Values:       -2147483648, ..., 2147483647
// 
// This constant determines the width of the bus used to convey the signals to disable error correction in the BRIGE and 
// DMA
`define RAS_APP_CORR_DISABLE_WD 1


// Name:         CX_RAS_PROT_TYPE
// Default:      ECC ((CX_RASDP ==1) || (CX_RASDP ==2))
// Values:       ECC (0), Parity (1)
// 
// Select the RASDP protection type: ECC or Parity
`define CX_RAS_PROT_TYPE 0


// Name:         RAS_PROT_TYPE_IS_PAR
// Default:      0 (((CX_RASDP ==1) || (CX_RASDP ==2))==1)
// Values:       0, 1
// 
// This constant determines the width of the bus used to convey the signals to disable error correction in the BRIGE and 
// DMA
// `define RAS_PROT_TYPE_IS_PAR


// Name:         CX_RAS_PROT_RANGE
// Default:      64-bits ((CX_RAS_PROT_TYPE==0)? ((CX_NW>1)? 64: 32): 8)
// Values:       8-bits (8), 32-bits (32), 64-bits (64)
// Enabled:      (((CX_RASDP==0)&&(CX_RASDP_RAM_PROT==0))? 0: 1==1)
// 
// Select how many bits are protected by a single ECC code or parity bit
`define CX_RAS_PROT_RANGE 64


// Name:         CX_RAS_RAM_PROT_RANGE
// Default:      64-bits ((CX_NW>1)? 64: 32)
// Values:       32-bits (32), 64-bits (64)
// Enabled:      0
// 
// Controls how many bits are protected by a single ECC code for protecting RAM data
`define CX_RAS_RAM_PROT_RANGE 64


// Name:         ECC_PROTECTION_EN
// Default:      false ((CX_RASDP_EN==1) && (CX_RAS_PROT_TYPE==0))
// Values:       false (0), true (1)
// 
// Provide ECC error detection/correction on address and data paths when RASDP is selected.
// `define ECC_PROTECTION_EN


// Name:           CX_CLIENT_PAR_MODE
// Default:        None ((((CX_RASDP==0)&&(CX_RASDP_RAM_PROT==0))? 0: 1==1) ? 8 : 0)
// Values:         None (0), 32-bit parity (32), 16-bit parity (16), 8-bit parity (8)
// Enabled:        (((CC_DMA_ENABLE_VALUE==1)) ? 0 : (AMBA_INTERFACE!=1))
// Parameter Type: Feature Setting
// 
// Determines how to generate and check parity on the transmit client interface address and data buses,  and internal 
// datapaths, and the bus widths on which to calculate parity. If you select 8, 16, or 32-bit parity checking, the controller 
// implements parity checking (even) parity on the transmit and receive datapath segments that are not covered by ECRC. If a 
// parity error occurs, the controller asserts a pulse on the associated bit of app_parity_errs[2:0], but does not drop the 
// associated packet. For more details, see the 'Data Integrity (Wire, Datapath, and RAM Protection)' section in the 'Controller 
// Operations' chapter of the Databook. 
//  - Only "0" and "8" are supported for AXI. 
//  - AHB supports only "0" (None). 
//  - Parity mode is disabled when DMA is enabled.
`define CX_CLIENT_PAR_MODE 0


// Name:         ADDR_BUS_PAR_CALC_WIDTH
// Default:      0 ((CX_RAS_EN==1)? CX_RAS_PROT_RANGE: 0)
// Values:       -2147483648, ..., 2147483647
// 
// Number of Address bits covered by a single parity bit
`define ADDR_BUS_PAR_CALC_WIDTH 0


// Name:           DEFAULT_TARGET
// Default:        Drop
// Values:         Drop (0x0), Forward (0x1)
// Enabled:        TRGT1_POPULATE==1
// Parameter Type: Register Default Setting
// 
// Forward application all incoming I/O or MEM requests with UR/CA/CRS status to your application. By default, all such 
// requests are dropped in store-and-forward mode (after corresponding error reporting). A completion with UR status will be 
// generated for non-posted requests.  
// For more details, see the description of the DEFAULT_TARGET port logic register. See also the "ECRC Handling" and 
// "Request TLP Routing Rules" in the "Receive Routing" sections in the "Controller Operations" chapter of the Databook. 
//  - When you set this parameter, you should also set CX_MASK_UR_CA_4_TRGT1 
//  - This parameter sets the default value of the DEFAULT_TARGET field in the MISC_CONTROL_1_OFF port logic register.
`define DEFAULT_TARGET 1'h0


// Name:           VENDOR_MESSAGE_SUPPORT
// Default:        false
// Values:         false (0), true (1)
// Parameter Type: Feature Setting
// 
// When you want to route the third header dword of received messages to your application interface (RRTRGT1 or AXI bridge 
// master interface), then you must manually set FLT_Q_ADDR_WIDTH to 64 bits, or set this parameter to "1". Setting this 
// parameter to "1" forces FLT_Q_ADDR_WIDTH to 64 bits. This adds gates and makes some RAMs wider. The complete message header is 
// always routed to the SII interface regardless of this parameter setting.
// `define VENDOR_MESSAGE_SUPPORT


// Name:           FLT_Q_ADDR_WIDTH
// Default:        64 ((VENDOR_MESSAGE_SUPPORT || DEFAULT_TARGET || 1 || 
//                 ADDR_TRANSLATION_SUPPORT_EN && (CX_CLIENT_PAR_MODE!=0 || ECC_PROTECTION_EN!=0)) ? 
//                 64 : 32)
// Values:         26, ..., 64
// Enabled:        !(VENDOR_MESSAGE_SUPPORT || DEFAULT_TARGET  || 
//                 ADDR_TRANSLATION_SUPPORT_EN && (CX_CLIENT_PAR_MODE!=0 || ECC_PROTECTION_EN!=0))
// Parameter Type: Feature Setting
// 
// Indicates the number of address bits that are passed through the receive queues and are sent to the application on the 
// RTRGT1 interface (radm_trgt1_addr). 
//  - DM/RC: The default is 64. the minimum number of bits allowed is normally 32. 
//  - SW: The default is 64 and the parameter is read-only. 
//  - EP: The default is 64 when VENDOR_MESSAGE_SUPPORT | DEFAULT_TARGET | ((CX_INTERNAL_ATU_ENABLE | 
//  ADDR_TRANSLATION_SUPPORT_EN) & CX_CLIENT_PAR_MODE !=0 ), otherwise 32. The minimum number of bits allowed is normally 32.
`define FLT_Q_ADDR_WIDTH 64


// Name:           CX_ECRC_ENABLE
// Default:        true
// Values:         false (0), true (1)
// Enabled:        (TRGT1_POPULATE && !(AMBA_POPULATED) && !(CC_DMA_ENABLE))
// Parameter Type: Feature Setting
// 
// Include the ECRC generation and checking hardware. This is distinct from the software control that may be used to enable 
// or disable ECRC.When disabled, ECRC checking and insertion logic will not be included in the controller in order to 
// reduce gates. This is especially important for large architectures, in which these blocks can consume timing margin as well as 
// area. May be disabled for smaller gate size if the controller is placed in a system where it's guaranteed that received 
// TLPs don't contain ECRC and your application does not transmit ECRC from the application (client) interfaces. 
//  
// Note: This parameter is always '1' when the DMA controller is selected or when the AXI Bridge is used.
`define CX_ECRC_ENABLE


// Name:           CX_RAM_PROTECTION_MODE
// Default:        None
// Values:         None (0), Parity (1), ECC (2)
// Enabled:        0
// Parameter Type: Feature Setting
// 
// Selects the RAM protection mode: parity, error checking and correction (ECC), or none. The RAMs must be internal to the 
// controller (CX_RAM_AT_TOP_IF=0), before you can change the value of this parameter. For more information, see the 'Data 
// Integrity (Wire, Datapath, and RAM Protection)' section in the 'Controller Operations' chapter of the Databook.
`define CX_RAM_PROTECTION_MODE 0


// Name:           CX_PAR_MODE
// Default:        None (CX_RAM_PROTECTION_MODE==1 ? 32 : 0)
// Values:         None (0), 32-bit (32), 16-bit (16), 8-bit (8)
// Enabled:        CX_RAM_PROTECTION_MODE==1
// Parameter Type: Feature Setting
// 
// Determines the number of bits over which one RAM parity bit is calculated and checked when CX_RAM_PROTECTION_MODE is set 
// for Parity Checking. For more information, see the 'Data Integrity (Wire, Datapath, and RAM Protection)' section in the 
// 'Controller Operations' chapter of the Databook.
`define CX_PAR_MODE 0


// `define CX_ECC_MODE


// Name:           CX_ECC_PIPE_EN
// Default:        false
// Values:         false (0), true (1)
// Enabled:        0
// Parameter Type: Feature Setting
// 
// This feature provides extra ECC protection on the critical control fields (tlp_eot, tlp_abort, dlp_abort, ecrc_err) in 
// the receive queue header and data RAMs. For example, a missing end delimiter (EOT) can cause your application's receive 
// buffer to overflow if your application does not implement some EOT timeout detect logic.
// `define CX_ECC_PIPE_EN


// Name:         CX_RAM_PIPE_EN
// Default:      true
// Values:       false (0), true (1)
// 
// Enable RAM pipeline for Retrybuf/SOTbuf
`define CX_RAM_PIPE_EN


`define RETRY_PIPE_EN


`define CX_RAM_NO_PROTECTION


// `define CX_HEADER_RSVD_ENABLE


// `define CX_HEADER_PASS_THROUGH


// Name:           CX_PL_REG_DISABLE
// Default:        false
// Values:         false (0), true (1)
// Enabled:        !CX_INTERNAL_ATU_ENABLE && !CX_LTR_M_ENABLE && !CX_PIPE_LOOPBACK_EN
// Parameter Type: Feature Setting
// 
// The Port Logic registers are implemented by default, but they can be optionally be removed from the controller to save 
// gates. This will hard code the values of the registers and you are not able to change these values in your final hardware. 
// Refer to 'Port Logic (PL) Registers (in CDM)' in the 'Local Bus Controller (LBC)' section in the 'Architecture' chapter of 
// the 'Databook'.
// `define CX_PL_REG_DISABLE


// Name:           CX_DBI_RO_WR_EN
// Default:        false
// Values:         false (0x0), true (0x1)
// Parameter Type: Register Default Setting
// 
// Default value of the DBI Read-Only Write Enable port logic register. For more details, see the "Register Configuration 
// Space" chapter of the Databook.
`define CX_DBI_RO_WR_EN 1'h0


// Name:         TRGT0_POPULATE
// Default:      true
// Values:       false (0), true (1)
// 
// Specifies the inclusion or omission of the Target 
// interface 0.
`define TRGT0_POPULATE



// Name:           CX_RAM_ADDR_COMP
// Default:        0
// Values:         0, 1
// Parameter Type: Feature Setting
// 
// Inhibits the FIFO RAM's read enable or modifies the read address 
// when the FIFO is empty, that is, when the read and write addresses 
// are equal. The RTL does not write to and read from the same address 
// in the same cycle. 
// CX_RAM_ADDR_COMP has an effect only when the FIFOs are empty. 
// It acts to modify either the read address or the enable to the RAMs 
// depending on whether the RAMs are external to the controller or not. 
// The controller only requires that the write data be written to the RAM in 
// this situation. The read data is not used and can be Xs. 
// Turning this option off will improve timing, but may not be 
// supported by some 2-port RAM implementations.
// `define CX_RAM_ADDR_COMP


// Name:         CLIENT1_POPULATED
// Default:      true
// Values:       false (0), true (1)
// Enabled:      (!(AMBA_INTERFACE!=0))
// 
// Determines whether to include top-level ports for the 
// optional third application transmit client interface 
// (XALI1).
`define CLIENT1_POPULATED


// Name:           CLIENT2_POPULATED
// Default:        true (((AMBA_INTERFACE==2) || (AMBA_INTERFACE==3)) ? 1 : 0)
// Values:         false (0), true (1)
// Enabled:        (!(AMBA_INTERFACE!=0))
// Parameter Type: Feature Setting
// 
// Determines whether to include top-level ports for the optional third application transmit client interface (XALI2). 
// Enabled for AXI configurations.
`define CLIENT2_POPULATED

//this parameter should be removed later. keep for customer batch file now

//this parameter should be removed later. keep for customer batch file now


// Name:           APP_RETURN_ERR_EN
// Default:        false
// Values:         false (0), true (1)
// Parameter Type: Feature Setting
// 
// Determines whether to include input ports for application-detected error reporting. For more details, see the 
// "Application Error Reporting Interface" section on the " Advanced Error Handling For Received TLPs" chapter of the Databook.
// `define APP_RETURN_ERR_EN


// Name:           CPL_TIMEOUT_ERR_MASK
// Default:        false
// Values:         false (0), true (1)
// Enabled:        APP_RETURN_ERR_EN==1
// Parameter Type: Feature Setting
// 
// Mask detection of completion timeout errors. When selected, the controller will not automatically report completion 
// timeout errors. Your application must check for completion timeouts and report them using the app_err_bus input signal on the 
// application error return interface. The 'Application Error Reporting' (APP_RETURN_ERR_EN) parameter must be enabled to 
// activate the application error return interface.
// `define CPL_TIMEOUT_ERR_MASK


// Name:           GLOB_ADDR_ALIGN_EN
// Default:        false
// Values:         false (0), true (1)
// Enabled:        !AMBA_POPULATED && CX_P2P_ENABLE==0
// Parameter Type: Feature Setting
// 
// When enabled (and input client*_addr_align_en input is asserted), the controller supports address alignment and 
// generates the first and last byte enables (FBE, LBE) based on the address and number of bytes of the TLP requested from the client 
// interface. When CX_ECRC_EN is not set, GLOB_ADDR_ALIGN_EN should normally be disabled. However, if your application 
// requires this to be enabled, then the address alignment pin (client0/1/2_addr_align_en) should only be high for those TLPs 
// without ECRC. For TLPs with ECRC that are being transmitted by the Application, the address alignment pin 
// (client0/1/2_addr_align_en) should be de-asserted for that TLP. 
//   
// Note: This parameter cannot be changed to True if the AXI Bridge is present or if Peer2Peer (P2P) support is enabled 
// (CX_P2P_ENABLE=1). 
// For more information, see 'Transmit Address Alignment' section in the "Signal Descriptions" chapter of the Databook.
// `define GLOB_ADDR_ALIGN_EN


// Name:         CX_1S_EN
// Default:      0 (CX_GEN4_DYNAMIC_WIDTH ? (CX_NB==8) : CX_GEN3_DYNAMIC_WIDTH ? 
//               (CX_NB==4) : (CX_GEN2_DYNAMIC_WIDTH ? (CX_NB==2) : (CX_FREQ == 
//               FREQ_250)))
// Values:       0, 1
// 
// Specifies if controller supports 1s operation
// `define CX_1S_EN


// Name:         CX_2S_EN
// Default:      1 (CX_GEN2_DYNAMIC_WIDTH ? (CX_NB>=2) : (CX_FREQ >= FREQ_125))
// Values:       0, 1
// 
// Specifies if controller supports 2s operation
`define CX_2S_EN


// Name:         CX_4S_EN
// Default:      1 (CX_GEN2_DYNAMIC_WIDTH ? (CX_NB>=4) : (CX_FREQ == FREQ_62_5))
// Values:       0, 1
// 
// Specifies if controller supports 4s operation
`define CX_4S_EN


// Name:         CX_8S_EN
// Default:      0 ((CX_GEN3_DYNAMIC_WIDTH || CX_GEN4_DYNAMIC_WIDTH) ? (CX_NB>=8) : 
//               0)
// Values:       0, 1
// 
// Specifies if controller supports 8s operation
// `define CX_8S_EN


// Name:         CX_16S_EN
// Default:      0 ((CX_GEN4_DYNAMIC_WIDTH) ? (CX_NB==16) : 0)
// Values:       0, 1
// 
// Specifies if controller supports 16s operation
// `define CX_16S_EN


// Name:         CX_1S_EN_GEN34
// Default:      0 (CX_GEN3_DYNAMIC_FREQ && CX_GEN2_DYNAMIC_FREQ && (CX_FREQ == 
//               FREQ_250))
// Values:       0, 1
// 
// Specifies if controller supports 1s operation in 128b130b encoding(gen3/gen4)
// `define CX_1S_EN_GEN34


// Name:         CX_2S_EN_GEN34
// Default:      0 (CX_GEN3_DYNAMIC_FREQ && (CX_FREQ == FREQ_125))
// Values:       0, 1
// 
// Specifies if controller supports 2s operation in 128b130b encoding(gen3/gen4)
// `define CX_2S_EN_GEN34


// Name:         CX_4S_EN_GEN34
// Default:      0 ((CX_GEN3_DYNAMIC_WIDTH && (CX_FREQ == FREQ_250)) || 
//               (CX_GEN3_DYNAMIC_FREQ && (CX_FREQ == FREQ_62_5)))
// Values:       0, 1
// 
// Specifies if controller supports 4s operation in 128b130b encoding(gen3/gen4). Note : When CX_GEN4_DYNAMIC_WIDTH, both 
// CX_128B_4S_EN and CX_128B_8S_EN is enabled.
// `define CX_4S_EN_GEN34


// Name:         CX_8S_EN_GEN34
// Default:      0 ((CX_GEN3_DYNAMIC_WIDTH && (CX_FREQ == FREQ_125)) || 
//               (CX_GEN4_DYNAMIC_WIDTH && (CX_FREQ == FREQ_250)))
// Values:       0, 1
// 
// Specifies if controller supports 8s operation in 128b130b encoding(gen3/gen4)
// `define CX_8S_EN_GEN34




`define CX_TS_DATARATE_BITS 2


// Name:           CX_NFTS
// Default:        15
// Values:         1, ..., 255
// Enabled:        CX_S_CPCIE_MODE || CX_SEL_PHY_MODE
// Parameter Type: Register Default Setting
// 
// Specifies the number of Fast Training Sequences the controller advertises during link training. This is used to inform 
// the link partner of the cores ability to recover synchronization after a low power state. This number should come from your 
// PHY vendor. This parameter sets the default value of the N_FTS field of the 'Ack Frequency and L0-L1 ASPM Control 
// Register' in the Register section of the Databook. M-PCIe doesn't use this parameter.
`define CX_NFTS 8'd15


// Name:           DEFAULT_GEN2_N_FTS
// Default:        15 (CX_NFTS)
// Values:         0, ..., 255
// Enabled:        (CX_CPCIE_ENABLE && (CX_GEN2_SPEED == 1))
// Parameter Type: Feature Setting
// 
// Specifies the number of Fast Training Sequences (NFTS) the controller advertises during link training when running at 
// Gen 2 speed. This is used to inform the link partner the cores ability to recover synchronization after a low power state. 
// This number should come from your PHY vendor. This parameter is for Conventional PCIe mode only; M-PCIe doesn't use this 
// parameter.
`define DEFAULT_GEN2_N_FTS 8'd15


// Name:           CX_COMM_NFTS
// Default:        15 (CX_NFTS)
// Values:         1, ..., 255
// Enabled:        CX_CPCIE_ENABLE && SLOT_CLK_CONFIG
// Parameter Type: Register Default Setting
// 
// Specifies the number of Fast Training Sequences (NFTS) the controller advertises during link training, when common clock 
// configuration is set. 
//  
// This parameter sets the default value of the 'Common Clock N_FTS' field of the 'Ack Frequency and L0-L1 ASPM Control 
// Register' in the Register section of the Databook. Common Clock operation cannot be fully enabled (through the Common Clock 
// Configuration field of the Link Control register) unless you observe the following configuration parameter relationships: 
//  - CX_NFTS != CX_COMM_NFTS 
//  - DEFAULT_L0S_EXIT_LATENCY != DEFAULT_COMM_L0S_EXIT_LATENCY 
//  - DEFAULT_L1_EXIT_LATENCY != DEFAULT_COMM_L1_EXIT_LATENCY 
// Default value is set automatically unless Custom PHY or Sample PHY is used. M-PCIe doesn't use this parameter.
`define CX_COMM_NFTS 8'd15


`define CX_MAX_NFTS_TMP 15


`define CX_MAX_NFTS 15


// Name:         CX_MAX_L0S_LTIME
// Default:      15 (   (CX_S_CPCIE_MODE)                    ? CX_MAX_NFTS 
//                : (CX_S_MPCIE_MODE)                    ? CM_MAX_SYNC_TIME_D4 
//                : (CX_MAX_NFTS > CM_MAX_SYNC_TIME_D4) ? CX_MAX_NFTS 
//                :  CM_MAX_SYNC_TIME_D4)
// Values:       -2147483648, ..., 2147483647
// 
// Indicates max time to exit L0s(STALL when M-PCIe) (unit 4byte). 
// In C-PCIe case , the maximum value of  all NFTS (Already exits). In M-PCIe case , the maximum value of  all Sync length 
// plus Prepare length. When Selectable PHY Mode, this parameter is the bigger value of above two values. This parameter is 
// used for a lot of parameters that need calculate.
`define CX_MAX_L0S_LTIME 15


// Name:         CX_5GTS_SPEED
// Default:      1 ((CX_CPCIE_ENABLE && CX_GEN2_SPEED) || (CX_MPCIE_ENABLE && 
//               CM_HSGEAR3_SPEED))
// Values:       0, 1
// 
// Indicates controller support 5GTs. It means Gen2 support when C-PCIE, HS-Gear3 support when M-PCIe. This parameter is 
// used for a lot of parameters that need calculate.
`define CX_5GTS_SPEED


// Name:           DEFAULT_L0S_EXIT_LATENCY
// Default:        256ns to less than 512ns ([calc_cal_nfts ((CX_GEN2_SPEED==1) ? 
//                 ((DEFAULT_GEN2_N_FTS > CX_MAX_NFTS_TMP) ? DEFAULT_GEN2_N_FTS : 
//                 CX_MAX_NFTS_TMP) : CX_MAX_NFTS_TMP) ])
// Values:         Less than 64ns (0x0), 64ns to less than 128ns (0x1), 128ns to less 
//                 than 256ns (0x2), 256ns to less than 512ns (0x3), 512ns to less than 
//                 1us (0x4), 1us to less than 2us (0x5), 2us to 4us (0x6), More than 
//                 4us (0x7)
// Enabled:        ((CX_S_CPCIE_MODE || CX_SEL_PHY_MODE))
// Parameter Type: Register Default Setting
// 
// Default value for the L0s Exit Latency field in the 'Link Capabilities Register'. M-PCIe doesn't use this parameter.
`define DEFAULT_L0S_EXIT_LATENCY 3'h3


// Name:           DEFAULT_COMM_L0S_EXIT_LATENCY
// Default:        256ns to less than 512ns ([calc_cal_nfts CX_COMM_NFTS ])
// Values:         Less than 64ns (0x0), 64ns to less than 128ns (0x1), 128ns to less 
//                 than 256ns (0x2), 256ns to less than 512ns (0x3), 512ns to less than 
//                 1us (0x4), 1us to less than 2us (0x5), 2us to 4us (0x6), More than 
//                 4us (0x7)
// Enabled:        SLOT_CLK_CONFIG && CX_CPCIE_ENABLE
// Parameter Type: Register Default Setting
// 
// Default value for the L0s Exit Latency field in the 'Link Capabilities Register', when common clock is used. Common 
// Clock operation cannot be fully enabled (through the Common Clock Configuration field of the Link Control register) unless you 
// observe the following configuration parameter relationships: 
//  - CX_NFTS != CX_COMM_NFTS 
//  - DEFAULT_L0S_EXIT_LATENCY != DEFAULT_COMM_L0S_EXIT_LATENCY 
//  - DEFAULT_L1_EXIT_LATENCY != DEFAULT_COMM_L1_EXIT_LATENCY 
// M-PCIe doesn't use this parameter.
`define DEFAULT_COMM_L0S_EXIT_LATENCY 3'h3


// Name:           DEFAULT_L1_EXIT_LATENCY
// Default:        32us to 64us
// Values:         Less than 1us (0x0), 1us to less than 2us (0x1), 2us to less than 
//                 4us (0x2), 4us to less than 8us (0x3), 8us to less than 16us (0x4), 
//                 16us to less than 32us (0x5), 32us to 64us (0x6), More than 64us (0x7)
// Enabled:        CX_S_CPCIE_MODE || CX_SEL_PHY_MODE
// Parameter Type: Register Default Setting
// 
// Default value for the L1 Exit Latency field in the 'Link Capabilities Register'. This parameter represents a 
// characteristic of the PHY being used. It measures the total time from when the controller initiates a transition from P1 to P0 until 
// the PHY begins providing valid receive data to the core. This parameter is for conventional PCIe mode only.
`define DEFAULT_L1_EXIT_LATENCY 3'h6


// Name:           DEFAULT_COMM_L1_EXIT_LATENCY
// Default:        32us to 64us
// Values:         Less than 1us (0x0), 1us to less than 2us (0x1), 2us to less than 
//                 4us (0x2), 4us to less than 8us (0x3), 8us to less than 16us (0x4), 
//                 16us to less than 32us (0x5), 32us to 64us (0x6), More than 64us (0x7)
// Enabled:        CX_CPCIE_ENABLE && SLOT_CLK_CONFIG
// Parameter Type: Register Default Setting
// 
// Default value for the L1 Exit Latency field in the 'Link Capabilities Register', when common clock is used. It measures 
// the total time from when the controller initiates a transition from P1 to P0 until the PHY begins providing valid receive 
// data to the core. Common Clock operation cannot be fully enabled (through the Common Clock Configuration field of the Link 
// Control register) unless you observe the following configuration parameter relationships: 
//  - CX_NFTS != CX_COMM_NFTS 
//  - DEFAULT_L0S_EXIT_LATENCY != DEFAULT_COMM_L0S_EXIT_LATENCY 
//  - DEFAULT_L1_EXIT_LATENCY != DEFAULT_COMM_L1_EXIT_LATENCY 
// This parameter is for Conventional PCIe mode only.
`define DEFAULT_COMM_L1_EXIT_LATENCY 3'h6


`define DEFAULT_GEN2_TXSWING 0


// Name:           DEFAULT_GEN2_SPEED_CHANGE
// Default:        0
// Values:         0, 1
// Enabled:        ((CX_S_MPCIE_MODE) ? 0 : CX_GEN2_SPEED)
// Parameter Type: Register Default Setting
// 
// Enables the controller to initiate a Gen1 -> Gen2 and Gen2 -> Gen3 speed change after the link is initialized. Only 
// applicable for Gen2 or Gen3 configured cores. This is the default value of the "Directed Speed Change" field of the "Link 
// width and Speed Change Control" register. M-PCIe doesn't support this feature.
`define DEFAULT_GEN2_SPEED_CHANGE 0


// Name:           DEFAULT_FC_WATCH_DOG_DISABLE
// Default:        0
// Values:         0, 1
// Parameter Type: Feature Setting
// 
// Default value of the Disable FC Watchdog Timer bit of the 'Symbol Timer Register and Filter Mask 1' Register, in the 
// 'Registers' section of the Databook.
`define DEFAULT_FC_WATCH_DOG_DISABLE 1'd0


// Name:           CX_DESKEW_DISABLE
// Default:        false (CX_NL == 1)
// Values:         false (0x0), true (0x1)
// Enabled:        ((CX_NL > 1))
// Parameter Type: Feature Setting
// 
// Disable the deskewing mechanism. Disable the deskewing mechanism only if connecting to a multi-Lane PHY that implements 
// Lane-to-Lane deskewing. For more details, see the "Lane Deskew" chapter of the Databook.
`define CX_DESKEW_DISABLE 1'h0



// Name:           CX_WIRE_SKEW_GEN1_NS
// Default:        20
// Values:         0, ..., 60
// Enabled:        0
// Parameter Type: Feature Setting
// 
// This is read-only parameter to indicate how much wire skew for Gen1 speed your deskew buffer setting 
// (CX_DESKEW_DEPTH_CPCIE) ensures. For more details, see the "Lane Deskew" chapter of the Databook.
`define CX_WIRE_SKEW_GEN1_NS 20


// Name:           CX_WIRE_SKEW_GEN2_NS
// Default:        8 (((CX_SEL_PHY_MODE  ? (CX_MAX_CPCIE_SPEED >= 2) : CX_S_CPCIE_MODE 
//                 ? (CX_GEN2_MODE != GEN2_DISABLED) : 0)==1) ? 8 : 0)
// Values:         0, ..., 60
// Enabled:        0
// Parameter Type: Feature Setting
// 
// This is read-only parameter to indicate how much wire skew for Gen2 speed your deskew buffer setting 
// (CX_DESKEW_DEPTH_CPCIE) ensures. For more details, see the "Lane Deskew" chapter of the Databook.
`define CX_WIRE_SKEW_GEN2_NS 8


// Name:           CX_WIRE_SKEW_GEN3_NS
// Default:        0 (((CX_SEL_PHY_MODE  ? (CX_MAX_CPCIE_SPEED >= 3) : CX_S_CPCIE_MODE 
//                 ? (CX_GEN3_MODE != GEN3_DISABLED) : 0)==1) ? 6 : 0)
// Values:         0, ..., 60
// Enabled:        CX_GEN3_SPEED==1 && CX_SKEW_CUSTOM==1
// Parameter Type: Feature Setting
// 
// This is read-only parameter to indicate how much wire skew for Gen3 speed your deskew buffer setting 
// (CX_DESKEW_DEPTH_CPCIE) ensures. For more details, see the "Lane Deskew" chapter of the Databook.
`define CX_WIRE_SKEW_GEN3_NS 0


// Name:           CX_WIRE_SKEW_GEN4_NS
// Default:        0 (((CX_GEN4_MODE != GEN4_DISABLED)==1) ? 5 : 0)
// Values:         0, ..., 60
// Enabled:        0
// Parameter Type: Feature Setting
// 
// This is read-only parameter to indicate how much wire skew for Gen4 speed your deskew buffer setting 
// (CX_DESKEW_DEPTH_CPCIE) ensures. For more details, see the "Lane Deskew" chapter of the Databook.
`define CX_WIRE_SKEW_GEN4_NS 0


`define CX_WIRE_SKEW_GEN1_PCLK 5


`define CX_WIRE_SKEW_GEN2_PCLK 4


`define CX_WIRE_SKEW_GEN3_PCLK 0


`define CX_WIRE_SKEW_GEN4_PCLK 0


// Name:           CX_MAX_SKEW_NUM
// Default:        Deep
// Values:         Shallow (5), Deep (8)
// Parameter Type: Feature Setting
// 
// Indicates if a shallow or deep deskew buffer is to be used.
`define CX_MAX_SKEW_NUM 8


// Name:           CX_DESKEW_DEPTH_CPCIE
// Default:        11 ((CX_GEN4_DYNAMIC_WIDTH == 1)     && (CX_NB == 16) ? 12 : 
//                 (CX_GEN4_DYNAMIC_WIDTH == 1)     && (CX_NB == 8 ) ? 14 : 
//                 (CX_GEN4_DYNAMIC_FREQ  == 1)     && (CX_NB == 4 ) ? 12 : 
//                 (CX_GEN4_DYNAMIC_FREQ  == 1)     && (CX_NB == 2 ) ? 20 : 
//                 (CX_GEN3_DYNAMIC_WIDTH == 1)     && (CX_NB == 8 ) ? 12 : 
//                 (CX_GEN3_DYNAMIC_WIDTH == 1)     && (CX_NB == 4 ) ? 14 : 
//                 (CX_GEN3_DYNAMIC_FREQ  == 1)     && (CX_NB == 4 ) ? 11 : 
//                 (CX_GEN3_DYNAMIC_FREQ  == 1)     && (CX_NB == 2 ) ? 12 : 
//                 (CX_GEN3_DYNAMIC_FREQ  == 1)     && (CX_NB == 1 ) ? 19 : 
//                 (CX_GEN2_DYNAMIC_WIDTH == 1)     && (CX_NB == 4 ) ? 12 : 
//                 (CX_GEN2_DYNAMIC_WIDTH == 1)     && (CX_NB == 2 ) ? 14 : 
//                 (CX_GEN2_DYNAMIC_FREQ  == 1)     && (CX_NB == 4 ) ? 11 : 
//                 (CX_GEN2_DYNAMIC_FREQ  == 1)     && (CX_NB == 2 ) ? 12 : 
//                 (CX_GEN2_DYNAMIC_FREQ  == 1)     && (CX_NB == 1 ) ? 14 : 
//                 (CX_GEN2_MODE == GEN2_DISABLED) && (CX_NB == 4 ) ? 11 : 
//                 (CX_GEN2_MODE == GEN2_DISABLED) && (CX_NB == 2 ) ? 12 : 
//                 (CX_GEN2_MODE == GEN2_DISABLED) && (CX_NB == 1 ) ? 14 : 14)
// Values:         2, ..., 20
// Enabled:        (!(CX_PCIE_MODE == SINGLE_MPCIE))
// Parameter Type: Feature Setting
// 
// Specifies the depth of fifos used in the deskew logic for C-PCIe. For more details, see the "Lane Deskew" chapter of the 
// Databook.
`define CX_DESKEW_DEPTH_CPCIE 14


`define CX_SKEW_MAC_IMPLE_GEN1_CORECLK 3


`define CX_SKEW_MAC_IMPLE_GEN2_CORECLK 3


`define CX_SKEW_MAC_IMPLE_GEN3_CORECLK 2


`define CX_SKEW_MAC_IMPLE_GEN4_CORECLK 2


// Name:           CX_SKEW_MAC_MARGIN_CORECLK
// Default:        1
// Values:         0, ..., 10
// Enabled:        0
// Parameter Type: Feature Setting
// 
// This is read-only parameter to indicate how much margin your deskew buffer setting (CX_DESKEW_DEPTH_CPCIE) has. For more 
// details, see the "Lane Deskew" chapter of the Databook.
`define CX_SKEW_MAC_MARGIN_CORECLK 1


`define CX_SKEW_PIPEIF_GEN1_CORECLK 10


`define CX_SKEW_PIPEIF_GEN2_CORECLK 10


`define CX_SKEW_PIPEIF_GEN3_CORECLK 11


`define CX_SKEW_PIPEIF_GEN4_CORECLK 11


`define CX_SKEW_PIPEIF_GEN1_PCLK 40


`define CX_SKEW_PIPEIF_GEN2_PCLK 40


`define CX_SKEW_PIPEIF_GEN3_PCLK 44


`define CX_SKEW_PIPEIF_GEN4_PCLK 44


// Name:           CX_PHY_SKEW_GEN1_PCLK
// Default:        35 (CX_DESKEW_DISABLE==1 || CX_NL==1) ? 0 : 
//                 (CX_SKEW_PIPEIF_GEN1_PCLK - CX_WIRE_SKEW_GEN1_PCLK)
// Values:         -2147483648, ..., 2147483647
// Enabled:        0
// Parameter Type: Feature Setting
// 
// This is read-only parameter to indicate how much PHY skew for Gen1 speed your deskew buffer setting 
// (CX_DESKEW_DEPTH_CPCIE) ensures. For more details, see the "Lane Deskew" chapter of the Databook.
`define CX_PHY_SKEW_GEN1_PCLK 35


// Name:           CX_PHY_SKEW_GEN2_PCLK
// Default:        36 (CX_DESKEW_DISABLE==1 || CX_NL==1 || CX_GEN2_SPEED==0) ? 0 : 
//                 (CX_SKEW_PIPEIF_GEN2_PCLK - CX_WIRE_SKEW_GEN2_PCLK)
// Values:         -2147483648, ..., 2147483647
// Enabled:        0
// Parameter Type: Feature Setting
// 
// This is read-only parameter to indicate how much PHY skew for Gen2 speed your deskew buffer setting 
// (CX_DESKEW_DEPTH_CPCIE) ensures. For more details, see the "Lane Deskew" chapter of the Databook.
`define CX_PHY_SKEW_GEN2_PCLK 36


// Name:           CX_PHY_SKEW_GEN3_PCLK
// Default:        0 (CX_DESKEW_DISABLE==1 || CX_NL==1 || CX_GEN3_SPEED==0) ? 0 : 
//                 (CX_SKEW_PIPEIF_GEN3_PCLK - CX_WIRE_SKEW_GEN3_PCLK)
// Values:         -2147483648, ..., 2147483647
// Enabled:        0
// Parameter Type: Feature Setting
// 
// This is read-only parameter to indicate how much PHY skew for Gen3 speed your deskew buffer setting 
// (CX_DESKEW_DEPTH_CPCIE) ensures. For more details, see the "Lane Deskew" chapter of the Databook.
`define CX_PHY_SKEW_GEN3_PCLK 0


// Name:           CX_PHY_SKEW_GEN4_PCLK
// Default:        0 (CX_DESKEW_DISABLE==1 || CX_NL==1 || CX_GEN4_SPEED==0) ? 0 : 
//                 (CX_SKEW_PIPEIF_GEN4_PCLK - CX_WIRE_SKEW_GEN4_PCLK)
// Values:         -2147483648, ..., 2147483647
// Enabled:        0
// Parameter Type: Feature Setting
// 
// This is read-only parameter to indicate how much PHY skew for Gen4 speed your deskew buffer setting 
// (CX_DESKEW_DEPTH_CPCIE) ensures. For more details, see the "Lane Deskew" chapter of the Databook.
`define CX_PHY_SKEW_GEN4_PCLK 0


// Name:           CM_DESKEW_DEPTH_MPCIE
// Default:        9 ((CX_MAX_SKEW_NUM == 5) && (CM_NB == 4) && (CX_GEN2_DYNAMIC_WIDTH == 1) && (CX_GEN3_DYNAMIC_WIDTH == 1) ? 6  : 
//                 (CX_MAX_SKEW_NUM == 5) && (CM_NB == 4) && (CX_GEN2_DYNAMIC_WIDTH == 1)                                  ? 6  : 
//                 (CX_MAX_SKEW_NUM == 5) && (CM_NB == 4) && (CM_HSGEAR3_SPEED)                                            ? 6  : 
//                 (CX_MAX_SKEW_NUM == 5) && (CM_NB == 4) && (CM_HSGEAR2_SPEED)                                            ? 6  : 
//                 (CX_MAX_SKEW_NUM == 5) && (CM_NB == 4)                                                                   ? 6  : 
//                 (CX_MAX_SKEW_NUM == 5) && (CM_NB == 2) && (CX_GEN2_DYNAMIC_WIDTH == 1)                                  ? 6  : 
//                 (CX_MAX_SKEW_NUM == 5) && (CM_NB == 2) && (CM_HSGEAR3_SPEED)                                            ? 7  : 
//                 (CX_MAX_SKEW_NUM == 5) && (CM_NB == 2) && (CM_HSGEAR2_SPEED)                                            ? 6  : 
//                 (CX_MAX_SKEW_NUM == 5) && (CM_NB == 2)                                                                   ? 6  : 
//                 (CX_MAX_SKEW_NUM == 5) && (CM_NB == 1) && (CM_HSGEAR3_SPEED)                                            ? 8  : 
//                 (CX_MAX_SKEW_NUM == 5) && (CM_NB == 1) && (CM_HSGEAR2_SPEED)                                            ? 7  : 
//                 (CX_MAX_SKEW_NUM == 5) && (CM_NB == 1)                                                                   ? 6  : 
//                 (CX_MAX_SKEW_NUM == 8) && (CM_NB == 4) && (CX_GEN2_DYNAMIC_WIDTH == 1) && (CX_GEN3_DYNAMIC_WIDTH == 1) ? 9  : 
//                 (CX_MAX_SKEW_NUM == 8) && (CM_NB == 4) && (CX_GEN2_DYNAMIC_WIDTH == 1)                                  ? 7  : 
//                 (CX_MAX_SKEW_NUM == 8) && (CM_NB == 4) && (CM_HSGEAR3_SPEED)                                            ? 7  : 
//                 (CX_MAX_SKEW_NUM == 8) && (CM_NB == 4) && (CM_HSGEAR2_SPEED)                                            ? 7  : 
//                 (CX_MAX_SKEW_NUM == 8) && (CM_NB == 4)                                                                   ? 6  : 
//                 (CX_MAX_SKEW_NUM == 8) && (CM_NB == 2) && (CX_GEN2_DYNAMIC_WIDTH == 1)                                  ? 9  : 
//                 (CX_MAX_SKEW_NUM == 8) && (CM_NB == 2) && (CM_HSGEAR3_SPEED)                                            ? 8  : 
//                 (CX_MAX_SKEW_NUM == 8) && (CM_NB == 2) && (CM_HSGEAR2_SPEED)                                            ? 8  : 
//                 (CX_MAX_SKEW_NUM == 8) && (CM_NB == 2)                                                                   ? 7  : 
//                 (CX_MAX_SKEW_NUM == 8) && (CM_NB == 1) && (CM_HSGEAR3_SPEED)                                            ? 11 : 
//                 (CX_MAX_SKEW_NUM == 8) && (CM_NB == 1) && (CM_HSGEAR2_SPEED)                                            ? 10 : 
//                 9)
// Values:         2, ..., 20
// Enabled:        (!(CX_PCIE_MODE == SINGLE_CPCIE))
// Parameter Type: Feature Setting
// 
// Specifies the depth of fifos used in the deskew logic for M-PCIe. For more details, see the "Lane Deskew" chapter of the 
// Databook.
`define CM_DESKEW_DEPTH_MPCIE 9

`define CM_DESKEW_DEPTH_MPCIE_DEFAULT 9


// Name:         CX_DESKEW_DEPTH
// Default:      14 (   (CX_S_CPCIE_MODE)                                ? CX_DESKEW_DEPTH_CPCIE 
//                : (CX_S_MPCIE_MODE)                                ? CM_DESKEW_DEPTH_MPCIE 
//                : (CX_DESKEW_DEPTH_CPCIE > CM_DESKEW_DEPTH_MPCIE) ? CX_DESKEW_DEPTH_CPCIE 
//                :  CM_DESKEW_DEPTH_MPCIE)
// Values:       -2147483648, ..., 2147483647
// 
// Specifies the depth of fifos used in the deskew logic
`define CX_DESKEW_DEPTH 14


// Name:         CX_DESKEW_ADDR_WIDTH
// Default:      4 (((CX_DESKEW_DEPTH == 2) || (CX_DESKEW_DEPTH == 4) || 
//               (CX_DESKEW_DEPTH == 8) || (CX_DESKEW_DEPTH == 16)) ? ([calc_log2 
//               CX_DESKEW_DEPTH] + 1) : ([calc_log2 CX_DESKEW_DEPTH]))
// Values:       -2147483648, ..., 2147483647
// 
// This is the address width of the Deskew Fifos.
`define CX_DESKEW_ADDR_WIDTH 4


`define CX_AF_DESKEW_DEPTH_CPCIE 14


`define CM_AF_DESKEW_DEPTH_MPCIE 9


// Name:         CX_AF_DESKEW_DEPTH
// Default:      14 (   (CX_S_CPCIE_MODE)                                ? CX_AF_DESKEW_DEPTH_CPCIE 
//                : (CX_S_MPCIE_MODE)                                ? CM_AF_DESKEW_DEPTH_MPCIE 
//                : (CX_DESKEW_DEPTH_CPCIE > CM_DESKEW_DEPTH_MPCIE) ? CX_AF_DESKEW_DEPTH_CPCIE 
//                :  CM_AF_DESKEW_DEPTH_MPCIE)
// Values:       -2147483648, ..., 2147483647
// 
// Specifies the depth of the almost full flag for fifos used in the deskew logic
`define CX_AF_DESKEW_DEPTH 14


// Name:           CX_CUSTOM_PIPELINING
// Default:        Disable
// Values:         Disable (0), Enable (1)
// Parameter Type: Performance Setting
// 
// Enable independent control of inter-module pipelines to trade-off latency and gates for ease of timing closure. 
// Additional configuration panes will become visible when you set this parameter.
`define CX_CUSTOM_PIPELINING 0


// Name:         RADM_TAG_PORT_EN
// Default:      0 (CX_EXTENSIBLE_VFUNC)
// Values:       0, 1
// Enabled:      (!(AMBA_INTERFACE!=0))
// 
// VTB test environment enable 
// This parameter ports out the radm_cpl_lut_valid 
// vector.
// `define RADM_TAG_PORT_EN


// Name:         CX_L1SUB_EXIT_40NS_SUPPRESS_ENABLE
// Default:      1
// Values:       0, 1
// Enabled:      CX_L1_SUBSTATES_ENABLE
// 
// When enabled, 40ns timeout is true when in any L1 substates
`define CX_L1SUB_EXIT_40NS_SUPPRESS_ENABLE


// Name:           DEFAULT_UPCONFIGURE_SUPPORT
// Default:        0x1 ((CX_CPCIE_ENABLE && (CX_NL > 1)) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        ((CX_S_MPCIE_MODE) ? 0 : (CX_NL > 1))
// Parameter Type: Feature Setting
// 
// Default value for the UPCONFIGURE_SUPPORT field in the MULTI_LANE_CONTROL_OFF register. 
// You must set the UPCONFIGURE_SUPPORT field in MULTI_LANE_CONTROL_OFF so that the controller advertises '1' in the 
// Upconfigure Capability bit of the TS2 OS. 
// This allows you to upsize or downsize the link width through Configuration state without bringing the link down. 
//  
// For more details, see the "Link Establishment" section in the "Controller Operations" chapter of the Databook.
`define DEFAULT_UPCONFIGURE_SUPPORT 1'h1


// Name:           CX_LANE_REVERSE
// Default:        true (((CX_PCIE_MODE == SINGLE_MPCIE)) ? 0 : 1)
// Values:         false (0x0), true (0x1)
// Enabled:        ((CX_S_MPCIE_MODE) ? 0 : (CX_NL > 1))
// Parameter Type: Feature Setting
// 
// Include support for automatic lane reversal. For more information, see the 'Lane Reversal' chapter in the Databook. 
// M-PCIe doesn't support this feature.
`define CX_LANE_REVERSE 1'h1


// Name:           CX_LANE_FLIP_CTRL_EN
// Default:        true ((CX_LANE_REVERSE && CX_NL > 1) ? 1 : 0)
// Values:         false (0), true (1)
// Enabled:        (!(CX_PCIE_MODE == SINGLE_MPCIE))
// Parameter Type: Feature Setting
// 
// Include support for manual lane flip. For more information, see the 'Lane Reversal' chapter in the Databook. 
// Include the tx_lane_flip_en and rx_lane_flip_en inputs to manually control TX/RX Lane Reversal. M-PCIe doesn't support 
// this feature.
`define CX_LANE_FLIP_CTRL_EN


// Name:           CX_AUTO_LANE_FLIP_CTRL_EN
// Default:        true ((CX_LANE_FLIP_CTRL_EN) ? 1 : 0)
// Values:         false (0), true (1)
// Enabled:        CX_LANE_FLIP_CTRL_EN
// Parameter Type: Feature Setting
// 
// Include support for auto lane flip and reversal. When you set this parameter, the controller implements logic to: 
//  - flip the lanes autonomously in Detect LTSSM state when lane0 is not detected, and 
//  - reverse the lanes autonomously in Configuration LTSSM state when logical lane0 receives TS ordered sets with lane 
//  number different from '0'. 
//  For more information, see the description of the AUTO_LANE_FLIP_CTRL_EN register in the Register Descriptions document 
//  and 'Lane Reversal' chapter in the Databook.
`define CX_AUTO_LANE_FLIP_CTRL_EN


// Name:           CX_AUTO_LANE_FLIP_MUX_ARCH
// Default:        Full and Partial ((CX_LANE_REVERSE) ? 2 : 1)
// Values:         Full (0), Full or Partial (1), Full and Partial (2)
// Enabled:        CX_AUTO_LANE_FLIP_CTRL_EN
// Parameter Type: Feature Setting
// 
// Enables support for partial auto flipping or reversal of the lanes. 
//  - Full flip or reversal: Lane0 is connected to Lane NL-1. 
//  - Partial flip or reversal: Lane0 is connected to either Lane NL/2-1 or Lane NL/4-1 or Lane NL/8-1 etc. 
// For more information, see the 'Lane Reversal' chapter in the Databook.
`define CX_AUTO_LANE_FLIP_MUX_ARCH 2


// `define CX_AUTO_LANE_FLIP_MUX_ARCH_1STAGE_FULL_ONLY


// `define CX_AUTO_LANE_FLIP_MUX_ARCH_1STAGE_FULL_OR_PARTIAL


`define CX_AUTO_LANE_FLIP_MUX_ARCH_2STAGES_FULL_AND_PARTIAL


// Name:           CX_ASPM_TIMEOUT_ENTR_L1_EN
// Default:        true
// Values:         false (0x0), true (0x1)
// Parameter Type: Feature Setting
// 
// Enable the ASPM L1 timer so that the controller will automatically go to L1 when the timer expires and the conditions in 
// the PCI Express 3.1 Specification are met. If you disable the APSM L1 timer, the application can request L1 entry by 
// asserting app_req_entr_l1. The ASPM L1 timer should be larger than the L0s timer. Otherwise, ASPM L0s and L1 timeout may not 
// function properly.
`define CX_ASPM_TIMEOUT_ENTR_L1_EN 1'h1

//Use Combo Box

// Name:           CX_MAX_TAG
// Default:        32
// Values:         2 4 8 16 32 64 128 256 512 768
// Parameter Type: Performance Setting
// 
// Specifies the maximum number of simultaneous outbound PCIe non-posted requests in total for all functions. The default 
// value is sufficient for typical endpoint applications. This is used to size: 
//  - the Receive 'Completion Timeout Look-Up Table' 
//  - the completion Header Queue RAM when you configure completions in store-and-forward or cut-through modes 
//  - the tag Manager memories in the AXI bridge slave 
// The controller can always accept 8-bit tags (IDs 0 to 255) from the PCIe wire or your application, regardless of the 
// value of this parameter. 
//  
// Note: The value range in the GUI is displayed as CX_MAX_TAG+1. The actual parameter value in the RTL represents the 
// maximum tag number because the tags are numbered 0 to CX_MAX_TAG 
//  
// If you enable the DMA controller then: 
//  - CC_NUM_DMA_RD_TAG tags are reserved for use by the DMA controller. 
//  - The minimum value of CX_MAX_TAG allowed is 3
`define CX_MAX_TAG 31

`define CX_MAX_TAG_31



// Name:         CX_MAX_TAG_GTR_1
// Default:      1 ((CX_MAX_TAG > 1) ? 1 : 0)
// Values:       0, 1
// 
// Specifies device has more than 1 tag
`define CX_MAX_TAG_GTR_1


// Name:         CX_MAX_TAG_GTR_3
// Default:      1 ((CX_MAX_TAG > 3) ? 1 : 0)
// Values:       0, 1
// 
// Specifies device has more than 3 tags
`define CX_MAX_TAG_GTR_3


// Name:         CX_MAX_TAG_GTR_7
// Default:      1 ((CX_MAX_TAG > 7) ? 1 : 0)
// Values:       0, 1
// 
// Specifies device has more than 7 tags
`define CX_MAX_TAG_GTR_7


// Name:         CX_MAX_TAG_GTR_15
// Default:      1 ((CX_MAX_TAG > 15) ? 1 : 0)
// Values:       0, 1
// 
// Specifies device has more than 15 tags
`define CX_MAX_TAG_GTR_15


// Name:         CX_MAX_TAG_GTR_31
// Default:      0 ((CX_MAX_TAG > 31) ? 1 : 0)
// Values:       0, 1
// 
// Specifies device has more than 31 tags
// `define CX_MAX_TAG_GTR_31


// Name:         CX_MAX_TAG_GTR_63
// Default:      0 ((CX_MAX_TAG > 63) ? 1 : 0)
// Values:       0, 1
// 
// Specifies device has more than 63 tags
// `define CX_MAX_TAG_GTR_63


// Name:         CX_MAX_TAG_GTR_127
// Default:      0 ((CX_MAX_TAG > 127) ? 1 : 0)
// Values:       0, 1
// 
// Specifies device has more than 127 tags
// `define CX_MAX_TAG_GTR_127


// Name:         CX_MAX_TAG_GTR_255
// Default:      0 ((CX_MAX_TAG > 255) ? 1 : 0)
// Values:       0, 1
// 
// Specifies device has more than 255 tags
// `define CX_MAX_TAG_GTR_255


// Name:         CX_MAX_TAG_255
// Default:      0 ((CX_MAX_TAG == 255) ? 1 : 0)
// Values:       0, 1
// 
// This parameter indicates that the max tags = 256
// `define CX_MAX_TAG_255


// Name:         CX_LUT_PTR_WIDTH
// Default:      5 ([calc_log2 CX_MAX_TAG])
// Values:       -2147483648, ..., 2147483647
// 
// This is the width of the MAG_TAG bus.
`define CX_LUT_PTR_WIDTH 5


// Name:           CX_LBC_EXT_AW
// Default:        32
// Values:         12, ..., (FLT_Q_ADDR_WIDTH<=32) ? FLT_Q_ADDR_WIDTH : 32
// Enabled:        Always
// Parameter Type: Feature Setting
// 
// Defines the width of the ELBI address bus for the Local Bus Controller (LBC). Only 12-bits are needed to access the 4KB 
// (1K DWORDS) of the PCI Express Configuration space per function. However, in order to access more than 4 KB of ELBI 
// register space, the default value of CX_LBC_EXT_AW can be increased up to a maximum of 32. Refer to 'Local Bus Controller (LBC)' 
// section in the Architecture chapter of the Databook.
`define CX_LBC_EXT_AW 6'd32


// Name:           CX_LBC_NW
// Default:        32-bit
// Values:         32-bit (1), 64-bit (2)
// Enabled:        Always
// Parameter Type: Feature Setting
// 
// Defines the width of the ELBI databus for the Local Bus Controller (LBC) in dwords. There are 32 or 64 bits of 
// ext_lbc_din for each function in your controller configuration. (128 bits is planned for future release).
`define CX_LBC_NW 1


`define CX_ELBI_WD_32


// `define CX_ELBI_WD_64


// `define CX_ELBI_WD_128


`define CX_LBC_INT_WD 32


// Name:           CX_CONFIG_INTERCEPT_ENABLE
// Default:        false
// Values:         false (0), true (1)
// Enabled:        Always
// Parameter Type: Feature Setting
// 
// Enables Configuration Intercept feature. Allows your application logic 
// to modify the behavior of Rx CFG requests that are accessing the core's internal registers. 
// For more details, see the "Advanced LBC and DBI Usage" chapter in the Databook. 
// This is an advanced feature that is only required in exceptional applications.
// `define CX_CONFIG_INTERCEPT_ENABLE

//-/ =================================================================
//-/ RAS D.E.S
//-/ =================================================================

// Name:           CX_RAS_DES_ENABLE
// Default:        false ((CX_AUTOMOTIVE_ENABLE==1)? 1: 0)
// Values:         false (0), true (1)
// Parameter Type: Feature Setting
// 
// Enables RAS D.E.S functions (debug functions, error injection and statistical analysis).
// `define CX_RAS_DES_ENABLE


`define CX_RAS_DES_LMT_RXTLP 0


`define CX_RAS_DES_LMT_TXTLP 0


`define CX_RAS_DES_LMT_TXDLLP 0



// Name:           CX_RAS_DES_EC_ENABLE
// Default:        false (CX_RAS_DES_ENABLE)
// Values:         false (0), true (1)
// Enabled:        CX_RAS_DES_ENABLE
// Parameter Type: Feature Setting
// 
// Enables RAS D.E.S event counters.
// `define CX_RAS_DES_EC_ENABLE


// Name:           CX_RAS_DES_TBA_ENABLE
// Default:        false (CX_RAS_DES_ENABLE)
// Values:         false (0), true (1)
// Enabled:        CX_RAS_DES_ENABLE
// Parameter Type: Feature Setting
// 
// Enables RAS D.E.S time based analysis function.
// `define CX_RAS_DES_TBA_ENABLE


// Name:           CX_RAS_DES_EINJ_ENABLE
// Default:        false (CX_RAS_DES_ENABLE)
// Values:         false (0), true (1)
// Enabled:        CX_RAS_DES_ENABLE
// Parameter Type: Feature Setting
// 
// Enables RAS D.E.S error injection function.
// `define CX_RAS_DES_EINJ_ENABLE


// Name:           CX_RAS_DES_SD_ENABLE
// Default:        false (CX_RAS_DES_ENABLE)
// Values:         false (0), true (1)
// Enabled:        CX_RAS_DES_ENABLE
// Parameter Type: Feature Setting
// 
// Enables RAS D.E.S silicon debug function.
// `define CX_RAS_DES_SD_ENABLE


// Name:           CX_RAS_DES_TF_ENABLE
// Default:        false ((CX_RAS_DES_ENABLE) && (CX_RAS_DES_NEXT_PHASE_ENABLE))
// Values:         false (0), true (1)
// Enabled:        ((CX_RAS_DES_ENABLE) && (CX_RAS_DES_NEXT_PHASE_ENABLE))
// Parameter Type: Feature Setting
// 
// Enables RAS D.E.S trace FIFO.
// `define CX_RAS_DES_TF_ENABLE


// Name:           CX_RAS_DES_EC_G0_BW
// Default:        4bit
// Values:         1bit (1), 4bit (4), 8bit (8), 16bit (16), 32bit (32)
// Enabled:        CX_RAS_DES_ENABLE && CX_RAS_DES_EC_ENABLE
// Parameter Type: Feature Setting
// 
// Bit width of the event counters in Group0(Layer1 - per lane errors)
`define CX_RAS_DES_EC_G0_BW 4


// Name:           CX_RAS_DES_EC_G1_BW
// Default:        8bit
// Values:         1bit (1), 4bit (4), 8bit (8), 16bit (16), 32bit (32)
// Enabled:        CX_RAS_DES_ENABLE && CX_RAS_DES_EC_ENABLE
// Parameter Type: Feature Setting
// 
// Bit width of the event counters in Group1(Layer1 - common errors)
`define CX_RAS_DES_EC_G1_BW 8


// Name:           CX_RAS_DES_EC_G2_BW
// Default:        8bit
// Values:         1bit (1), 4bit (4), 8bit (8), 16bit (16), 32bit (32)
// Enabled:        CX_RAS_DES_ENABLE && CX_RAS_DES_EC_ENABLE
// Parameter Type: Feature Setting
// 
// Bit width of the event counters in Group2(Layer2 errors)
`define CX_RAS_DES_EC_G2_BW 8


// Name:           CX_RAS_DES_EC_G3_BW
// Default:        8bit
// Values:         1bit (1), 4bit (4), 8bit (8), 16bit (16), 32bit (32)
// Enabled:        CX_RAS_DES_ENABLE && CX_RAS_DES_EC_ENABLE
// Parameter Type: Feature Setting
// 
// Bit width of the event counters in Group3(Layer3 errors)
`define CX_RAS_DES_EC_G3_BW 8


// Name:           CX_RAS_DES_EC_G4_BW
// Default:        4bit
// Values:         1bit (1), 4bit (4), 8bit (8), 16bit (16), 32bit (32)
// Enabled:        CX_RAS_DES_ENABLE && CX_RAS_DES_EC_ENABLE
// Parameter Type: Feature Setting
// 
// Bit width of the event counters in Group4(Layer1 - per lane non-error events)
`define CX_RAS_DES_EC_G4_BW 4


// Name:           CX_RAS_DES_EC_G5_BW
// Default:        32bit
// Values:         1bit (1), 4bit (4), 8bit (8), 16bit (16), 32bit (32)
// Enabled:        CX_RAS_DES_ENABLE && CX_RAS_DES_EC_ENABLE
// Parameter Type: Feature Setting
// 
// Bit width of the event counters in Group5(Layer1 - common non-error events)
`define CX_RAS_DES_EC_G5_BW 32


// Name:           CX_RAS_DES_EC_G6_BW
// Default:        32bit
// Values:         1bit (1), 4bit (4), 8bit (8), 16bit (16), 32bit (32)
// Enabled:        CX_RAS_DES_ENABLE && CX_RAS_DES_EC_ENABLE
// Parameter Type: Feature Setting
// 
// Bit width of the event counters in Group6(Layer2 - non-error events).
`define CX_RAS_DES_EC_G6_BW 32


// Name:           CX_RAS_DES_EC_G7_BW
// Default:        32bit
// Values:         1bit (1), 4bit (4), 8bit (8), 16bit (16), 32bit (32)
// Enabled:        CX_RAS_DES_ENABLE && CX_RAS_DES_EC_ENABLE
// Parameter Type: Feature Setting
// 
// Bit width of the event counters in Group7(Layer3 - non-error events).
`define CX_RAS_DES_EC_G7_BW 32


// Name:           CX_RAS_DES_EC_G8_BW
// Default:        32bit
// Values:         1bit (1), 4bit (4), 8bit (8), 16bit (16), 32bit (32)
// Enabled:        CX_RAS_DES_ENABLE && CX_RAS_DES_EC_ENABLE
// Parameter Type: Feature Setting
// 
// Bit width of the event counters in Group8(AMBA/DMA - events)
`define CX_RAS_DES_EC_G8_BW 32


// Name:         CX_RAS_DES_EC_INFO_CMN_BW
// Default:      165
// Values:       -2147483648, ..., 2147483647
// 
// Bit width of RAS DES Event counter common debug info
`define CX_RAS_DES_EC_INFO_CMN_BW 165


// Name:         CX_RAS_DES_EC_INFO_PLN_BW
// Default:      9
// Values:       -2147483648, ..., 2147483647
// 
// Bit width of RAS DES Event counter per lane debug info
`define CX_RAS_DES_EC_INFO_PLN_BW 9


// Name:         CX_RAS_DES_SD_INFO_CMN_BW
// Default:      78
// Values:       -2147483648, ..., 2147483647
// 
// Bit width of RAS DES Silicon debug common debug info
`define CX_RAS_DES_SD_INFO_CMN_BW 78


// Name:         CX_RAS_DES_SD_INFO_PLN_BW
// Default:      143
// Values:       -2147483648, ..., 2147483647
// 
// Bit width of RAS DES Silicon debug per lane debug info
`define CX_RAS_DES_SD_INFO_PLN_BW 143


// Name:         CX_RAS_DES_SD_INFO_PVC_BW
// Default:      240
// Values:       -2147483648, ..., 2147483647
// 
// Bit width of RAS DES Silicon debug per VC debug info
`define CX_RAS_DES_SD_INFO_PVC_BW 240


// Name:         CX_RAS_DES_TBA_INFO_CMN_BW
// Default:      7
// Values:       -2147483648, ..., 2147483647
// 
// Bit width of RAS DES Time based analysis common debug info
`define CX_RAS_DES_TBA_INFO_CMN_BW 7


// Name:           DEFAULT_EC_ENABLE
// Default:        Disabled
// Values:         Disabled (0x0), Enabled (0x1)
// Enabled:        CX_RAS_DES_EC_ENABLE
// Parameter Type: Register Default Setting
// 
// Default value of event counter enable
`define DEFAULT_EC_ENABLE 1'h0

//-/ =================================================================
//-/ End RAS D.E.S
//-/ =================================================================


// Name:           DIAGNOSTIC_ENABLE
// Default:        false (CX_RAS_DES_ENABLE)
// Values:         false (0), true (1)
// Enabled:        !CX_RAS_DES_ENABLE
// Parameter Type: Feature Setting
// 
// Enables routing of diag_status_bus and diag_ctrl_bus signals to the SII interface. 
// For more details, see 'SII: Diagnostic Control Signals' in the "Signal Descriptions" chapter of the Databook.
// `define DIAGNOSTIC_ENABLE


// Name:           ENABLE_MEM_MAP_PL_REG
// Default:        0
// Values:         0, 1
// Enabled:        Always
// Parameter Type: Feature Setting
// 
// Enables routing of memory (non-CFG) transactions to the port logic (PL) configuration registers. This is memory mapping 
// of the PL register space. PL registers (which by default are accessed by CFG requests) can also (at the same time) be 
// accessed by MEM requests through the use of the ENABLE_MEM_MAP_PL_REG, PL_FUNC_NUM and PL_BAR_NUM configuration parameters. 
// These can be used to map the PL registers to any BAR of any function. All MEM requests that match PL_BAR_NUM (when 
// ENABLE_MEM_MAP_PL_REG=1) and whose address offset is in the range 0x700-0x8FF will be routed to the PL registers. The BAR 
// corresponding to PL_BAR_NUM must also be mapped/assigned to RTRGT0. For more details, see the "Local Bus Controller (LBC)" section 
// in the "Controller Operations" chapter of the Databook.
// `define ENABLE_MEM_MAP_PL_REG


// Name:           PL_FUNC_NUM
// Default:        0
// Values:         0, ..., 7
// Enabled:        ENABLE_MEM_MAP_PL_REG==1
// Parameter Type: Feature Setting
// 
// Indicates which function is used to map the Port Logic configuration registers into memory space. For more details, see 
// the ENABLE_MEM_MAP_PL_REG parameter.
`define PL_FUNC_NUM 0


// Name:           PL_BAR_NUM
// Default:        BAR0
// Values:         BAR0 (0), BAR1 (1), BAR2 (2), BAR3 (3), BAR4 (4), BAR5 (5)
// Enabled:        ENABLE_MEM_MAP_PL_REG==1
// Parameter Type: Feature Setting
// 
// Indicates which BAR is used to map the Port Logic configuration registers into memory space. For more details, see the 
// ENABLE_MEM_MAP_PL_REG parameter.
`define PL_BAR_NUM 0

//-/ =================================================================
//-/ Begin UNROLL
//-/ =================================================================


// Name:         ENABLE_MEM_MAP_UNROLL_ATU_REG
// Default:      0
// Values:       0, 1
// Enabled:      CX_INTERNAL_ATU_ENABLE && CC_UNROLL_ENABLE
// 
// Enables routing of memory (non-CFG) transactions to the Unroll ATU configuration registers. Unroll registers can be 
// accessed by MEM requests through the use of the ENABLE_MEM_MAP_UNROLL_ATU_REG, UNROLL_FUNC_NUM and UNROLL_BAR_NUM 
// configuration parameters. These can be used to map the UNROLL registers to any BAR of any function. All MEM requests that match 
// UNROLL_BAR_NUM (when ENABLE_MEM_MAP_UNROLL_ATU_REG=1) and whose address offset is in the range 
// UNROLL_ATU_OFFSET_BAR-UNROLL_ATU_OFFSET_BAR+UNROLL_ATU_SIZE will be routed to the UNROLL registers. The BAR corresponding to UNROLL_BAR_NUM must also be 
// mapped/assigned to RTRGT0. For more details, see the "Local Bus Controller (LBC)" section in the "Controller Operations" 
// chapter of the Databook.
// `define ENABLE_MEM_MAP_UNROLL_ATU_REG


// Name:         UNROLL_ATU_OFFSET_BAR
// Default:      0x0
// Values:       0x0, ..., 0xffffffffffffffff
// Enabled:      ENABLE_MEM_MAP_UNROLL_ATU_REG==1
// 
// Indicates the offset BAR address to allocate the UNROLL ATU configuration registers into memory space.
`define UNROLL_ATU_OFFSET_BAR 64'h0


// Name:           ENABLE_MEM_MAP_UNROLL_DMA_REG
// Default:        0
// Values:         0, 1
// Enabled:        CC_DMA_ENABLE && CC_UNROLL_ENABLE
// Parameter Type: Feature Setting
// 
// Enables routing of memory (non-CFG) transactions to the Unroll DMA configuration registers. Unroll DMA registers can be 
// accessed by MEM requests through the use of the ENABLE_MEM_MAP_UNROLL_DMA_REG, UNROLL_FUNC_NUM and UNROLL_BAR_NUM 
// configuration parameters. These can be used to map the UNROLL registers to any BAR of any function. All MEM requests that match 
// UNROLL_BAR_NUM (when ENABLE_MEM_MAP_UNROLL_DMA_REG=1) and whose address offset is in the range 
// UNROLL_DMA_OFFSET_BAR-UNROLL_DMA_OFFSET_BAR+UNROLL_DMA_SIZE will be routed to the UNROLL registers. The BAR corresponding to UNROLL_BAR_NUM must also 
// be mapped/assigned to RTRGT0. For more details, see the "Local Bus Controller (LBC)" section in the "Controller Operations" 
// chapter of the Databook.
// `define ENABLE_MEM_MAP_UNROLL_DMA_REG


// Name:         UNROLL_DMA_OFFSET_BAR
// Default:      0x0
// Values:       0x0, ..., 0xffffffffffffffff
// Enabled:      ENABLE_MEM_MAP_UNROLL_DMA_REG
// 
// Indicates the offset BAR address to allocate the UNROLL DMA configuration registers into memory space.
`define UNROLL_DMA_OFFSET_BAR 64'h0


// Name:           UNROLL_FUNC_NUM
// Default:        0
// Values:         0, ..., 7
// Enabled:        ENABLE_MEM_MAP_UNROLL_ATU_REG==1 || 
//                 ENABLE_MEM_MAP_UNROLL_DMA_REG==1
// Parameter Type: Feature Setting
// 
// Indicates which function is used to map the Unroll configuration registers into memory space. For more details, see the 
// ENABLE_MEM_MAP_UNROLL_ATU_REG or ENABLE_MEM_MAP_UNROLL_DMA_REG parameter.
`define UNROLL_FUNC_NUM 0


// Name:           UNROLL_BAR_NUM
// Default:        BAR0
// Values:         BAR0 (0), BAR1 (1), BAR2 (2), BAR3 (3), BAR4 (4), BAR5 (5)
// Enabled:        ENABLE_MEM_MAP_UNROLL_ATU_REG==1 || 
//                 ENABLE_MEM_MAP_UNROLL_DMA_REG==1
// Parameter Type: Feature Setting
// 
// Indicates which BAR is used to map the UNROLL configuration registers into memory space. For more details, see the 
// ENABLE_MEM_MAP_UNROLL_ATU_REG or ENABLE_MEM_MAP_UNROLL_DMA_REG parameter.
`define UNROLL_BAR_NUM 0
//-/ =================================================================
//-/ End Unroll
//-/ =================================================================



// Name:         CX_RC_FUNC_NUM
// Default:      0
// Values:       -2147483648, ..., 2147483647
// Enabled:      Always
// 
// Function Number to use for RC 
// function number to use in inbound (RX) direction in RC mode 
// This parameter changes the function number of received requests on the 
// target interface to the set value in an RC. For transmission of 
// PM_ACTIVE_STATE_NAK, PME_TURN_OFF, UNLOCK and SET_SLOT_PWR_LIMIT messages 
// the set value is used.
`define CX_RC_FUNC_NUM 0


// Name:           CX_MAX_MTU
// Default:        256
// Values:         128 256 512 1024 2048 4096
// Parameter Type: Performance Setting
// 
// The largest packet payload (Maximum Transfer Unit) that the device will support. Specified in bytes and not dwords. This 
// is distinct from the maximum operating payload (Max_Payload_Size) which may be set by software. This value is used to set 
// memory sizes and places other restrictions on the size of structures. The device will support any valid payload size 
// equal to or smaller than the value specified here.
`define CX_MAX_MTU 16'd256


`define CX_MAX_MTU_PW 8


// Name:           ENABLE_OPTIONAL_CHECKS
// Default:        false
// Values:         false (0), true (1)
// Parameter Type: Feature Setting
// 
// Adds optional protocol checks including byte enable and flow control. Violations of the byte enable check (Section 2.2.5 
// of the PCIe Specification) and the address/length check (Section 2.2.7 of the PCIe Specification) will be treated as 
// malformed TLPs. Also, violations of the various flow control checks will result in a Flow Control Protocol Error (FCPE). Flow 
// control checks are described in Section 2.6.1 of the PCIe Specification.
// `define ENABLE_OPTIONAL_CHECKS


// Name:           SURPRISE_LINK_DOWN_SUPPORTED
// Default:        false
// Values:         false (0), true (1)
// Enabled:        Always
// Parameter Type: Feature Setting
// 
// Adds optional protocol check capability for Surprise Down Error Reporting. Downstream Ports that are Surprise Down Error 
// Reporting Capable (Section 7.8.6 of the PCIe Specification) must treat this transition from DL_Active to DL_Inactive as a 
// Surprise Down error, except in the cases presented in (Section 3.2.1 of the PCIe Specification) where this error 
// detection is blocked.
// `define SURPRISE_LINK_DOWN_SUPPORTED


`define DEFAULT_SURPRISE_DOWN_RPT_CAP 1'h0


// Name:           DL_FEATURE_EN
// Default:        false (CX_GEN4_SPEC07)
// Values:         false (0), true (1)
// Enabled:        ((CX_GEN4_MODE != GEN4_DISABLED))
// Parameter Type: Feature Setting
// 
// The Data Link Feature Capability is an optional Extended Capability that is required for Downstream Ports that support 
// 16.0 GTs. It is optional in other Downstream Ports. It is optional in Functions associated with an Upstream Port. It is not 
// applicable in Functions that are not associated with a Port (e.g. Root Complex Integrated Endpoints, Root Complex Event 
// Collectors). Ports that implement this protocol contain the Data Link Feature Extended Capability as described in Section 
// 7.37 of the PCIe Specification 4.0 VERSION 0.7.
// `define DL_FEATURE_EN


`define DL_FEATURE_SUPPORTED 1'h0


// Name:           FC_SCALE_EN
// Default:        false (DL_FEATURE_EN)
// Values:         false (0), true (1)
// Enabled:        DL_FEATURE_EN
// Parameter Type: Feature Setting
// 
// Link performance can be affected when there are insufficient flow control credits available to account for the Link 
// round trip time. This effect becomes more noticeable at higher Link speeds and the limitation of 127 header credits and 2047 
// data credits can limit performance. The Scaled Flow Control mechanism is designed to address this limitation. Scaled Flow 
// control is described in Section 3.4.2 of the PCIe Specification 4.0 VERSION 0.7.
// `define FC_SCALE_EN


`define SCALED_FC_SUPPORTED 1'h0



// Name:           CX_RBUF_AUTOSIZE
// Default:        true
// Values:         false (0x0), true (0x1)
// Parameter Type: Feature Setting
// 
// Enable or disable automatic size calculation for the retry buffer.: 
//  - True: Enable Auto Size: The sizes of the retry buffer and SOT buffer are automatically calculated based on the 
//  "Maximum Payload Size Supported value", the link width, and device latencies. 
//  - False: Disable Auto Size: Automatic buffer sizing is disabled. The value that you enter for Retry Buffer Depth 
//  (CX_RBUF_DEPTH) directly sets the depth of the retry buffer. 
// For more details, see the "Transmit Replay" section of the "Architecture" chapter of the Databook.
`define CX_RBUF_AUTOSIZE 1'h1


// Name:           CX_PHY_TX_DELAY_MAC
// Default:        4
// Values:         0, ..., 500
// Parameter Type: Feature Setting
// 
// Transmit delay through the MAC layer of the PCIe controller in clock cycles, used for retry buffer auto-size 
// calculation. You normally do not need to change the value of this parameter.
`define CX_PHY_TX_DELAY_MAC 4


// Name:           CX_PHY_TX_DELAY_PHY
// Default:        6
// Values:         0, ..., 500
// Enabled:        CX_S_CPCIE_MODE || CX_SEL_PHY_MODE
// Parameter Type: Feature Setting
// 
// PHY Transmitter delay in clock cycles. This must be specified by your PHY provider and is the (worst case) delay in PIPE 
// clock cycles from the PIPE interface to the TX Phy serial pins. This parameter in conjunction with 'PHY Rx Delay' is used 
// to calculate the delay in getting an ACK DLLP back from the link partner, for a TLP sent by your core. It is then used to 
// calculate the size of the Retry Buffer. This parameter is for Conventional PCIe mode only; M-PCIe doesn't use this 
// parameter.
`define CX_PHY_TX_DELAY_PHY 6


// Name:           CX_PHY_RX_DELAY_MAC
// Default:        4
// Values:         0, ..., 500
// Parameter Type: Feature Setting
// 
// Receive delay through the MAC layer of the PCIe controller in clock cycles, used for retry buffer auto-size calculation. 
// You normally do not need to change the value of this parameter.
`define CX_PHY_RX_DELAY_MAC 4


// Name:           CX_PHY_RX_DELAY_PHY
// Default:        14
// Values:         0, ..., 500
// Enabled:        CX_S_CPCIE_MODE || CX_SEL_PHY_MODE
// Parameter Type: Feature Setting
// 
// PHY Receiver delay in clock cycles. This must be specified by your PHY provider and is the (worst case) delay in PIPE 
// clock cycles from the RX Phy serial pins to the PIPE interface. This parameter in conjunction with 'PHY Tx Delay' is used to 
// calculate the delay in getting an ACK DLLP back from the link partner, for a TLP sent by your controller It is then used 
// to calculate the size of the Retry Buffer. This parameter is for Conventional PCIe mode only ; M-PCIe doesn't use this 
// parameter.
`define CX_PHY_RX_DELAY_PHY 14


// Name:         CX_CPCIE_INTERNAL_DELAY
// Default:      28 (CX_PHY_TX_DELAY_MAC + CX_PHY_TX_DELAY_PHY + CX_PHY_RX_DELAY_MAC 
//               + CX_PHY_RX_DELAY_PHY)
// Values:       -2147483648, ..., 2147483647
// 
// Read-only parameter that indicates the sum of the MAC/PHY delays of Conventional PCIe, used for retry buffer 
// auto-sizing, AckNak Timer adjustment and replay timer adjustment.
`define CX_CPCIE_INTERNAL_DELAY 28


// Name:           CX_INTERNAL_DELAY
// Default:        28 (   (CX_S_CPCIE_MODE)                                    ? CX_CPCIE_INTERNAL_DELAY 
//                  : (CX_S_MPCIE_MODE)                                    ? CM_MPCIE_INTERNAL_DELAY 
//                  : (CX_CPCIE_INTERNAL_DELAY > CM_MPCIE_INTERNAL_DELAY) ? CX_CPCIE_INTERNAL_DELAY 
//                  :  CM_MPCIE_INTERNAL_DELAY)
// Values:         0, ..., 2048
// Parameter Type: Feature Setting
// 
// Read-only parameter that indicates the sum of the MAC/PHY delays, used for retry buffer auto-sizing, AckNak Timer 
// adjustment and replay timer adjustment.
`define CX_INTERNAL_DELAY 28


// Name:           CX_NPRFX
// Default:        0
// Values:         0 1 2 3 4 5 6 7
// Parameter Type: Feature Setting.
// 
// The number of TLP Prefixes that the controller supports. When CX_NPRFX is greater than zero, then each function in the 
// PCIe controller supports the extended FMT field in TLP prefixes and headers. 
// When CX_NPRFX is zero, then the extended FMT field is not supported. 
// The controller does not support TLP prefixes for the DMA module. 
// Range: 0-8 (excluding 1,2,3 as a switch support that supports prefixes must support up to four End-End TLP Prefixes).
`define CX_NPRFX 0


// `define CX_NPRFX_GTR_7


// `define CX_NPRFX_GTR_6


// `define CX_NPRFX_GTR_5


// `define CX_NPRFX_GTR_4


// `define CX_NPRFX_GTR_3


// `define CX_NPRFX_GTR_2


// `define CX_NPRFX_GTR_1


// Name:           CX_TLP_PREFIX_ENABLE
// Default:        0 ((CX_NPRFX == 0) ? 0 : 1)
// Values:         0, 1
// Parameter Type: Feature Setting.
// 
// When enabled, controller supports TLP Prefix; that is, each Function in the PCIe controller supports extended FMT field 
// in 
// TLP Prefixes and Headers (Device Capabilities 2 Register). 
// TLP Prefix configuration is not allowed if either an AMBA Bridge or embedded 
// DMA is configured.
// `define CX_TLP_PREFIX_ENABLE


`define CX_TLP_PREFIX_ENABLE_VALUE 0


// Name:         DATA_BUS_PAR_CALC_WIDTH
// Default:      0 ((CX_RAS_EN==1)? CX_RAS_PROT_RANGE: 0)
// Values:       -2147483648, ..., 2147483647
// 
// Number of data bits covered by a single parity bit.
`define DATA_BUS_PAR_CALC_WIDTH 0


// Name:         CX_RX_PRFX_PAR_WD
// Default:      0 ((CX_RASDP_EN) ? [calc_prfx_par_wd CX_NW CX_NPRFX 
//               CX_RAS_PROT_RANGE CX_RAS_PROT_TYPE] : 0)
// Values:       -2147483648, ..., 2147483647
// 
// Number of parity bits used for RTLH/RADM TLP Prefixes
`define CX_RX_PRFX_PAR_WD 0


// Name:         SATA_CAP_ENABLE
// Default:      false
// Values:       false (0x0), true (0x1)
// 
// SATA Capability structure enable
`define SATA_CAP_ENABLE 1'h0


// `define SATA_CAP_EN


// Name:         FLT_Q_SATA_WIDTH
// Default:      0 (SATA_CAP_ENABLE ? 1 : 0)
// Values:       -2147483648, ..., 2147483647
// 
// number of bits for SATA queue field
`define FLT_Q_SATA_WIDTH 0


// Name:         FLT_Q_DESTINATION_WIDTH
// Default:      2
// Values:       2, ..., 2
// 
// number of bits for Filter field FLT_Q_DESTINATION
`define FLT_Q_DESTINATION_WIDTH 2


// Name:         FLT_Q_FMT_WIDTH
// Default:      2
// Values:       2, ..., 2
// 
// number of bits for Filter field FLT_Q_FMT_WIDTH
`define FLT_Q_FMT_WIDTH 2


// Name:         FLT_Q_TYPE_WIDTH
// Default:      5
// Values:       5, ..., 5
// 
// number of bits for Filter field FLT_Q_TYPE_WIDTH
`define FLT_Q_TYPE_WIDTH 5


// Name:         FLT_Q_TC_WIDTH
// Default:      3
// Values:       3, ..., 3
// 
// number of bits for Filter field FLT_Q_TC
`define FLT_Q_TC_WIDTH 3


// Name:         FLT_Q_TH_WIDTH
// Default:      0 (CX_TPH_ENABLE ? 1 : 0)
// Values:       -2147483648, ..., 2147483647
// 
// number of bits for Filter field FLT_Q_TH
`define FLT_Q_TH_WIDTH 0


// Name:         FLT_Q_ATTR_WIDTH
// Default:      3 (CX_IDO_ENABLE ? 3 : 2)
// Values:       2, 3
// 
// number of bits for Filter field FLT_Q_ATTR
`define FLT_Q_ATTR_WIDTH 3


// Name:         FLT_Q_AT_WIDTH
// Default:      0 (ATS_RX_ENABLE ? 2 : 0)
// Values:       -2147483648, ..., 2147483647
// 
// number of bits for Filter field FLT_Q_AT
`define FLT_Q_AT_WIDTH 0


// Name:         FLT_Q_REQID_WIDTH
// Default:      16
// Values:       16, ..., 16
// 
// number of bits for Filter field FLT_Q_REQID
`define FLT_Q_REQID_WIDTH 16


// Name:         FLT_Q_FUNC_NMBR_WIDTH
// Default:      1 (CX_ARI_ENABLE ? CX_NFUNC_WD : 3)
// Values:       1, ..., 8
// 
// number of bits for Filter field FLT_Q_FUNC_NMBR
`define FLT_Q_FUNC_NMBR_WIDTH 1


// Name:         FLT_Q_CPL_STATUS_WIDTH
// Default:      3
// Values:       3, ..., 3
// 
// number of bits for Filter field FLT_Q_CPL_STATUS
`define FLT_Q_CPL_STATUS_WIDTH 3


// Name:         FLT_Q_VF_WIDTH
// Default:      0 (CX_SRIOV_ENABLE ? CX_NVFUNC_NUM_WD : 0)
// Values:       -2147483648, ..., 2147483647
// 
// number of bits for Filter field FLT_Q_VF 
// This is the Physical Function number
`define FLT_Q_VF_WIDTH 0


// Name:         FLT_Q_PRFX_WIDTH
// Default:      0 (CX_TLP_PREFIX_ENABLE ? CX_NPRFX*32 + CX_RX_PRFX_PAR_WD : 0)
// Values:       -2147483648, ..., 2147483647
// 
// number of bits for Filter field FLT_Q_PRFX 
// This is the TLP prefix(including parity)
`define FLT_Q_PRFX_WIDTH 0


// Name:         FLT_Q_DW_LENGTH_WIDTH
// Default:      10
// Values:       10, ..., 10
// 
// number of bits for Filter field FLT_Q_DW_LENGTH
`define FLT_Q_DW_LENGTH_WIDTH 10


// Name:         FLT_Q_IO_REQ_IN_RANGE_WIDTH
// Default:      1
// Values:       1, ..., 1
// 
// number of bits for Filter field FLT_Q_IO_REQ_IN_RANGE
`define FLT_Q_IO_REQ_IN_RANGE_WIDTH 1


// Name:         FLT_Q_FRSTDW_BE_WIDTH
// Default:      4
// Values:       4, ..., 4
// 
// number of bits for Filter field FLT_Q_FRSTDW_BE
`define FLT_Q_FRSTDW_BE_WIDTH 4


// Name:         FLT_Q_BYTE_CNT_WIDTH
// Default:      12
// Values:       12, ..., 12
// 
// number of bits for Filter field FLT_Q_BYTE_CNT
`define FLT_Q_BYTE_CNT_WIDTH 12


// Name:         FLT_Q_CMPLTR_ID_WIDTH
// Default:      16
// Values:       16, ..., 16
// 
// number of bits for Filter field FLT_Q_CMPLTR_ID
`define FLT_Q_CMPLTR_ID_WIDTH 16


// Name:         FLT_Q_BCM_WIDTH
// Default:      1
// Values:       1, ..., 1
// 
// number of bits for Filter field FLT_Q_BCM
`define FLT_Q_BCM_WIDTH 1


// Name:         FLT_Q_CPL_LOWER_ADDR_WIDTH
// Default:      7
// Values:       7, ..., 7
// 
// number of bits for Filter field FLT_Q_CPL_LOWER_ADDR
`define FLT_Q_CPL_LOWER_ADDR_WIDTH 7


// Name:         FLT_Q_TD_WIDTH
// Default:      1
// Values:       1, ..., 1
// 
// number of bits for Filter field FLT_Q_TD
`define FLT_Q_TD_WIDTH 1


// Name:         FLT_Q_EP_WIDTH
// Default:      1
// Values:       1, ..., 1
// 
// number of bits for Filter field FLT_Q_EP
`define FLT_Q_EP_WIDTH 1


// Name:         FLT_Q_CPL_LAST_WIDTH
// Default:      1
// Values:       1, ..., 1
// 
// number of bits for Filter field FLT_Q_CPL_LAS
`define FLT_Q_CPL_LAST_WIDTH 1


// Name:         FLT_Q_LSTDW_BE_WIDTH
// Default:      4
// Values:       -2147483648, ..., 2147483647
// 
// number of bits for Filter field FLT_Q_LSTDW_BE
`define FLT_Q_LSTDW_BE_WIDTH 4


// Name:         FLT_Q_VALID_TYPE_WIDTH
// Default:      0
// Values:       0, ..., 0
// 
// number of bits for Filter field FLT_Q_VALID_TYPE
`define FLT_Q_VALID_TYPE_WIDTH 0


// Name:         FLT_Q_HDR_RSVD_DW0_WIDTH
// Default:      0 ((CX_P2P_ENABLE==1)*8)
// Values:       0, ..., 8
// 
// number of bits for Filter field FLT_Q_HDR_RSVD_DW0
`define FLT_Q_HDR_RSVD_DW0_WIDTH 0


// Name:         FLT_Q_HDR_RSVD_DW2_WIDTH
// Default:      0 (CX_P2P_ENABLE==1)
// Values:       0, 1
// 
// number of bits for Filter field FLT_Q_HDR_RSVD_DW2
`define FLT_Q_HDR_RSVD_DW2_WIDTH 0


// Name:         FLT_Q_DEV_NMBR_WIDTH
// Default:      5
// Values:       5, ..., 5
// 
// number of bits for Filter field FLT_Q_DEV_NMBR
`define FLT_Q_DEV_NMBR_WIDTH 5


// Name:         FLT_Q_BUS_NMBR_WIDTH
// Default:      8
// Values:       8, ..., 8
// 
// number of bits for Filter field FLT_Q_BUS_NMBR
`define FLT_Q_BUS_NMBR_WIDTH 8


// Name:         FLT_Q_DWADDR_WIDTH
// Default:      62 ([calc_flt_q_dwaddr_width FLT_Q_ADDR_WIDTH ])
// Values:       24, ..., 62
// 
// number of bits for Filter field FLT_Q_DWADDR
`define FLT_Q_DWADDR_WIDTH 62


// Name:         CX_LN_ENABLE
// Default:      false
// Values:       false (0), true (1)
// Enabled:      (1  && (AMBA_INTERFACE!=1) && CX_RADMQ_MODE==2)
// 
// When enabled, the controller supports the Lightweight Notification capability.
// `define CX_LN_ENABLE


`define CX_LN_VALUE 1'h0


// Name:         VF_LN_ENABLE
// Default:      0 (CX_LN_ENABLE==1 && CX_SRIOV_ENABLE==1 && INTERNAL_VF_ENABLE==1)
// Values:       0, 1
// Enabled:      CX_LN_ENABLE==1 && CX_SRIOV_ENABLE==1 && INTERNAL_VF_ENABLE==1
// 
// When enabled, controller supports Lightweight Notification Capability for VFs.
// `define VF_LN_ENABLE


`define VF_LN_VALUE 1'h0


// Name:           VF_LN_REG_MAX_VALUE
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        VF_LN_ENABLE==1
// Parameter Type: Feature Setting
// 
// This parameter sets the default of the LNR_REGISTRATION_LIMIT field in the LNR_CAP_OFF register for VFs in PF0.
`define VF_LN_REG_MAX_VALUE 5'h0


// Name:           VF_LN_128_SUPPORTED_VALUE
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_LN_ENABLE==1
// Parameter Type: Feature Setting
// 
// This parameter sets the default of the LNR_128_SUPPORTED field in the LNR_CAP_OFF register for VFs in PF0.
`define VF_LN_128_SUPPORTED_VALUE 1'h0


// Name:           VF_LN_64_SUPPORTED_VALUE
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_LN_ENABLE==1
// Parameter Type: Feature Setting
// 
// This parameter sets the default of the LNR_64_SUPPORTED field in the LNR_CAP_OFF register for VFs in PF0.
`define VF_LN_64_SUPPORTED_VALUE 1'h0


// Name:         CX_LN_RC_ENABLE
// Default:      0 (CX_LN_ENABLE==1)
// Values:       0, 1
// 
// Core Lightweight Notification Capability in Root Complex and RCRBs
// `define CX_LN_RC_ENABLE


// Name:         CX_LN_EP_ENABLE
// Default:      0 (CX_LN_ENABLE==1)
// Values:       0, 1
// 
// Core Lightweight Notification Capability in Root Complex and RCRBs
// `define CX_LN_EP_ENABLE


// Name:         CX_LN_COMPLETER_CACHELINE_SIZE
// Default:      0
// Values:       0, ..., 2
// Enabled:      CX_LN_ENABLE
// 
// Lightweight Notification System Cache Line Size (RC).
`define CX_LN_COMPLETER_CACHELINE_SIZE 0



// Name:           VF_HDR_LOG_SHARED
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_AER_EN==1 && !CX_EXTENSIBLE_VFUNC
// Parameter Type: Feature Setting.
// 
// Header Log Sharing amongst VF of a PF
`define VF_HDR_LOG_SHARED 1'h0


// `define VF_HDR_LOG_SHARED_ENABLED


// Name:           VF_HDR_LOG_SHARED_DEPTH
// Default:        0x2
// Values:         0x2, 0x4, 0x8, 0x10, 0x20
// Enabled:        VF_HDR_LOG_SHARED
// Parameter Type: Feature Setting.
// 
// VF Shared Header Log Depth
`define VF_HDR_LOG_SHARED_DEPTH 8'h2


// Name:           VF_HDR_LOG_DEPTH
// Default:        0x1
// Values:         0x1, 0x2, 0x4
// Enabled:        VF_HDR_LOG_SHARED==0 && VF_AER_EN
// Parameter Type: Feature Setting.
// 
// VF Header Log Depth
`define VF_HDR_LOG_DEPTH 8'h1



// Name:         FLT_Q_LN_WIDTH
// Default:      0 (CX_LN_ENABLE ? 1 : 0)
// Values:       0, 1
// 
// number of bits for Filter field FLT_Q_LN
`define FLT_Q_LN_WIDTH 0


// Name:         CX_RAS_PROT_RANGE_IS_64
// Default:      0 (CX_RAS_EN? (((CX_RAS_PROT_RANGE==64) && (CX_RAS_PROT_TYPE==0))? 
//               1: 0): 0)
// Values:       0, 1
// 
// Indication of 64 bits being protected by a single ECC code
// `define CX_RAS_PROT_RANGE_IS_64


// Name:         CX_RAS_PROT_RANGE_IS_32
// Default:      0 (CX_RAS_EN? (((CX_RAS_PROT_RANGE==32) && (CX_RAS_PROT_TYPE==0))? 
//               1: 0): 0)
// Values:       0, 1
// 
// Indication of 32 bits being protected by a single ECC code
// `define CX_RAS_PROT_RANGE_IS_32


// Name:         CX_RAS_PARITY_MODE
// Default:      Even (CX_RASDP==2)
// Values:       Even (0), Odd (1)
// 
// RASDP parity mode selection: even or odd
`define CX_RAS_PARITY_MODE 0


// Name:         CX_RAS_ALL_0S_PROT_CODE
// Default:      0xc0c ([<functionof> CX_NW CX_RAS_PROT_TYPE CX_RAS_PARITY_MODE])
// Values:       0x0, ..., 0xffffffffffffffff
// Enabled:      (((CX_RASDP==0)&&(CX_RASDP_RAM_PROT==0))? 0: 1==1)
// 
// Protection code for words filled in with all 0s. Word length used to calculate this parameter is the data path size.
`define CX_RAS_ALL_0S_PROT_CODE 64'hc0c


// Name:         CX_RAS_ALL_PRFX_0S_PROT_CODE
// Default:      0xc0c0c0c ([<functionof> CX_NW CX_NPRFX CX_RAS_PROT_TYPE 
//               CX_RAS_PARITY_MODE])
// Values:       0x0, ..., 0xffffffffffffffff
// Enabled:      (((CX_RASDP==0)&&(CX_RASDP_RAM_PROT==0))? 0: 1==1)
// 
// Protection code for words filled in with all 0s. Word length used to calculate this parameter is the data path size.
`define CX_RAS_ALL_PRFX_0S_PROT_CODE 64'hc0c0c0c


// Name:         RAS_BASE_PROT_WD
// Default:      8 ((CX_RAS_PROT_TYPE==1)? 1: (CX_RAS_PROT_RANGE<=16)? 6: 
//               (CX_RAS_PROT_RANGE==32)? 7: (CX_RAS_PROT_RANGE==64)? 8: 9)
// Values:       -2147483648, ..., 2147483647
// Enabled:      (((CX_RASDP==0)&&(CX_RASDP_RAM_PROT==0))? 0: 1)
// 
// Number of bits required to protect CX_RAS_PROT_RANGE bits
`define RAS_BASE_PROT_WD 8


// Name:         RAS_RAM_BASE_PROT_WD
// Default:      8 ((((CX_NW>1)? 64: 32)==32)? 7: 8)
// Values:       -2147483648, ..., 2147483647
// Enabled:      (((CX_RASDP==0)&&(CX_RASDP_RAM_PROT==0))? 0: 1)
// 
// Number of bits required to protect CX_RAS_RAM_PROT_RANGE bits
`define RAS_RAM_BASE_PROT_WD 8


// Name:         CX_RAS_CORRECTION_EN
// Default:      Enabled ((CX_RASDP==4)? 0: 1)
// Values:       Disabled (0), Enabled (1)
// Enabled:      ((CX_RASDP==0) || (CX_RASDP==1) || (CX_RASDP==2))
// 
// Determines if single bit error correction is used or not for RASDP. 
// If data path is ECC protected, this parameter affects all ECC checker instances. 
// If data path is parity protected, this parameter affects only the  ECC checker instances protecting the RAMs.
`define CX_RAS_CORRECTION_EN 1


// Name:         CX_RAS_ERROR_INJ_EN
// Default:      Disabled ((((CX_RASDP==0)&&(CX_RASDP_RAM_PROT==0))? 0: 1==1)? 1: 0)
// Values:       Disabled (0), Enabled (1)
// Enabled:      (((CX_RASDP==0)&&(CX_RASDP_RAM_PROT==0))? 0: 1)
// 
// Determines if RASDP error injection logic is included in the core. Bridge and DMA do not support error injection.
// `define CX_RAS_ERROR_INJ_EN


// Name:         CX_RAS_ERROR_INJ_EN_WD
// Default:      256
// Values:       -2147483648, ..., 2147483647
// Enabled:      (((CX_RASDP==0)&&(CX_RASDP_RAM_PROT==0))? 0: 1)
// 
// Error injection enable array
`define CX_RAS_ERROR_INJ_EN_WD 256


// Name:         CX_RAS_ERROR_INJ_MASK_WD
// Default:      2400
// Values:       -2147483648, ..., 2147483647
// Enabled:      (((CX_RASDP==0)&&(CX_RASDP_RAM_PROT==0))? 0: 1)
// 
// Error injection enable array
`define CX_RAS_ERROR_INJ_MASK_WD 2400


// Name:         CX_RAS_PCIE_HDR_PROT_WD
// Default:      0 ((CX_RASDP_EN==1)? [<functionof> CX_RAS_PROT_RANGE 
//               RAS_BASE_PROT_WD ]: 0)
// Values:       -2147483648, ..., 2147483647
// Enabled:      (((CX_RASDP==0)? 0: 1)==1)
// 
// Determines the width of the protection code that protects the PCIE header (128 bits). If RASDP is not used the width is 
// set to 0
`define CX_RAS_PCIE_HDR_PROT_WD 0


// Name:         CX_RAS_PCIE_EXTENDED_HDR_WD
// Default:      157 ((CX_IDO_ENABLE==1)? 157 : 156)
// Values:       -2147483648, ..., 2147483647
// Enabled:      CX_RADMQ_MODE==2
// 
// Number header bits of XADM
`define CX_RAS_PCIE_EXTENDED_HDR_WD 157


// Name:         CX_RAS_PCIE_EXTENDED_HDR_PROT_WD
// Default:      0 ((CX_RASDP_EN==1)? [<functionof> CX_RAS_PCIE_EXTENDED_HDR_WD 
//               CX_RAS_PROT_RANGE RAS_BASE_PROT_WD ]:0)
// Values:       -2147483648, ..., 2147483647
// Enabled:      CX_RADMQ_MODE==2
// 
// Number of bits required to protect all the header bits coming in of the XADM
`define CX_RAS_PCIE_EXTENDED_HDR_PROT_WD 0


// Name:         FLT_Q_ADDR_PROT_WIDTH
// Default:      0 ((CX_RASDP_EN==1)? [<functionof> FLT_Q_ADDR_WIDTH 
//               CX_RAS_PROT_RANGE RAS_BASE_PROT_WD ]:0)
// Values:       -2147483648, ..., 2147483647
// Enabled:      CX_RADMQ_MODE==2
// 
// Number of bits required to protect address bits that are passes through the receive queues
`define FLT_Q_ADDR_PROT_WIDTH 0


`define CX_RBUF_SOT_WD 3


`define CX_RBUF_CTRL_WD 7


// Name:         RBUF_CTRL_PROT_WD
// Default:      0 ((CX_RASDP_EN==1 && CX_RAS_PROT_TYPE==0)? 6 : 0)
// Values:       -2147483648, ..., 2147483647
// Enabled:      (((CX_RASDP==0)? 0: 1)==1)
// 
// Determines the width of the protection code that protects the Layer 2 control bits that go into the retry buffer ram. If 
// RAS is not used the width is set to 0
`define RBUF_CTRL_PROT_WD 0


// Name:         RBUF_PROT_WD
// Default:      0 ((CX_RAS_EN==1)? [<functionof> (32*CX_NW) CX_RBUF_CTRL_WD 
//               CX_RASDP_EN CX_RAS_PROT_TYPE CX_RAS_PROT_RANGE CX_RAS_RAM_PROT_RANGE  
//               RAS_BASE_PROT_WD RAS_RAM_BASE_PROT_WD ]: 0)
// Values:       -2147483648, ..., 2147483647
// 
// Determines the width of the protection code that protects the data written in the retry buffer
`define RBUF_PROT_WD 0


// Name:           CX_CDM_REG_CHK_EN
// Default:        false ((CX_AUTOMOTIVE_ENABLE==1)? 1: 0)
// Values:         false (0), true (1)
// Enabled:        ((CX_PCIE_MODE == SINGLE_CPCIE))
// Parameter Type: Feature Setting
// 
// When enabled, the core contains CDM Register Checking feature.
// `define CX_CDM_REG_CHK_EN


// Name:           CX_CDM_REG_CHK_FORCED_CONTINUOUS
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        Always
// Parameter Type: Feature Setting
// 
// When enabled, the core contains CDM Register Checking feature run continuosly
`define CX_CDM_REG_CHK_FORCED_CONTINUOUS 1'h0


// Name:           CX_PTM_ENABLE
// Default:        false
// Values:         false (0), true (1)
// Enabled:        ((CX_PCIE_MODE == SINGLE_CPCIE))
// Parameter Type: Feature Setting
// 
// When enabled, the core supports the Precision Time Measurement capability.
// `define CX_PTM_ENABLE


`define CX_PTM_VALUE 1'h0


// `define CX_PTM_REQUESTER_CAPABLE


`define CX_PTM_REQUESTER_VALUE 1'h0


`define CX_PTM_ROOT_CAPABLE 1'h0


// `define CX_PTM_RESPONDER_CAPABLE


`define CX_PTM_RESPONDER_VALUE 1'h0


// Name:           CX_PTM_LOCAL_CLK_GRAN
// Default:        0x0 ((CX_PTM_ROOT_CAPABLE==0) ? 0 : (CX_FREQ == FREQ_500) ? 2: 
//                 (CX_FREQ == FREQ_250) ? 4 : (CX_FREQ == FREQ_125) ? 8 : (CX_FREQ == 
//                 FREQ_62_5) ? 16 : 32)
// Values:         0x0, ..., 0xff
// Enabled:        CX_PTM_ENABLE
// Parameter Type: Feature Setting
// 
// Set Local Clock Granularity for  PTM.
`define CX_PTM_LOCAL_CLK_GRAN 8'h0



// Name:         TRGT1_TRGT0_INCLUSIVE_WIDTH
// Default:      90 ([calc_trgt1_trgt0_inclusive_width FLT_Q_DW_LENGTH_WIDTH  
//               FLT_Q_IN_MEMBAR_RANGE_WIDTH  FLT_Q_ROM_IN_RANGE_WIDTH  
//               FLT_Q_IO_REQ_IN_RANGE_WIDTH  FLT_Q_FRSTDW_BE_WIDTH  FLT_Q_ADDR_WIDTH    FLT_Q_TD_WIDTH  
//               FLT_Q_EP_WIDTH  FLT_Q_CPL_LAST_WIDTH  FLT_Q_LSTDW_BE_WIDTH 
//               FLT_Q_SATA_WIDTH FLT_Q_AT_WIDTH FLT_Q_TH_WIDTH FLT_Q_HDR_RSVD_DW0_WIDTH 
//               FLT_Q_HDR_RSVD_DW2_WIDTH])
// Values:       0, ..., 160
// 
// number of bits for Fields Storage if Trgt1 && Trgt0 are populated
`define TRGT1_TRGT0_INCLUSIVE_WIDTH 90



// Name:         TRGT0_EXCLUSIVE_WIDTH
// Default:      85 ([calc_trgt0_exclusive_width FLT_Q_IN_MEMBAR_RANGE_WIDTH  
//               FLT_Q_ROM_IN_RANGE_WIDTH  FLT_Q_IO_REQ_IN_RANGE_WIDTH  
//               FLT_Q_FRSTDW_BE_WIDTH  FLT_Q_DWADDR_WIDTH  FLT_Q_LSTDW_BE_WIDTH  FLT_Q_DW_LENGTH_WIDTH])
// Values:       0, ..., 174
// 
// number of bits for Fields Storage if only TRGT0 is populated
`define TRGT0_EXCLUSIVE_WIDTH 85



// Name:         DEMUX_EXCLUSIVE_WIDTH
// Default:      54 ([calc_c1_demux_excl_width FLT_Q_DW_LENGTH_WIDTH  
//               FLT_Q_IN_MEMBAR_RANGE_WIDTH  FLT_Q_ROM_IN_RANGE_WIDTH  FLT_Q_IO_REQ_IN_RANGE_WIDTH  
//               FLT_Q_BYTE_CNT_WIDTH  FLT_Q_CMPLTR_ID_WIDTH  FLT_Q_BCM_WIDTH  
//               FLT_Q_CPL_LOWER_ADDR_WIDTH  FLT_Q_TD_WIDTH  FLT_Q_EP_WIDTH  
//               FLT_Q_CPL_LAST_WIDTH ])
// Values:       0, ..., 160
// 
// number of bits for Fields Storage of Completion TLPs
`define DEMUX_EXCLUSIVE_WIDTH 54


// Name:           CX_MASK_UR_CA_4_TRGT1
// Default:        Report_UR_ERR
// Values:         Report_UR_ERR (0x0), Suppress_UR_ERR (0x1)
// Parameter Type: Feature Setting
// 
// Suppress error logging, Error Message generation, and CPL generation (for non-posted requests) for requests TLPs with UR 
// filtering status that you have chosen to forward to the application (when you set the DEFAULT_TARGET field). 
// For more details, refer to the description of the UR_CA_MASK_4_TRGT1 field, "ECRC Handling" and "Request TLP Routing 
// Rules" in the "Receive Routing" section in the "Controller Operations" chapter of the Databook. 
//  - This parameter sets the default value of the UR_CA_MASK_4_TRGT1 field in the MISC_CONTROL_1_OFF port logic register. 
//  
//  - You should set this if you have set the DEFAULT_TARGET parameter to '1'.
`define CX_MASK_UR_CA_4_TRGT1 1'h0


// Name:           CX_CLIENT0_BLOCK_NEW_TLP
// Default:        true
// Values:         false (0x0), true (0x1)
// Enabled:        ((AMBA_INTERFACE==0))
// Parameter Type: Feature Setting
// 
// Block outbound transactions on XALI0 when in low power modes. For more details, see the 'Power Management' section of 
// the Architecture chapter of the Databook.
`define CX_CLIENT0_BLOCK_NEW_TLP 1'h1


// Name:           CX_CLIENT1_BLOCK_NEW_TLP
// Default:        true
// Values:         false (0x0), true (0x1)
// Enabled:        ((AMBA_INTERFACE==0))
// Parameter Type: Feature Setting
// 
// Block outbound transactions on XALI1 when in low power modes. For more details, see the 'Power Management' section of 
// the Architecture chapter of the Databook.
`define CX_CLIENT1_BLOCK_NEW_TLP 1'h1


// Name:           CX_CLIENT2_BLOCK_NEW_TLP
// Default:        true
// Values:         false (0x0), true (0x1)
// Enabled:        ((CLIENT2_POPULATED==1))
// Parameter Type: Feature Setting
// 
// Block outbound transactions on XALI2 when in low power modes. For more details, see the 'Power Management' section of 
// the Architecture chapter of the Databook.
`define CX_CLIENT2_BLOCK_NEW_TLP 1'h1

//-/ =================================================================
//-/ transmit arbiter config
//-/ =================================================================


// Name:           CX_XADM_ARB_MODE
// Default:        Round Robin
// Values:         VC Based (0), Round Robin (1), Strict Priority (2)
// Enabled:        CX_NVC > 1
// Parameter Type: Feature Setting
// 
// Selects the arbitration method for transmitted TLPs, as described in the "Transmit TLP Arbitration" section of the 
// Databook. 
//  - 0: VC Based. Provides a VC based programmable weighted round robin arbitration (WRR) using two different arbitration 
//  methods for the two groups of VCs. 
//  - 1: Round Robin (RR). Provides round robin arbitration between the three transmit clients. This is the default 
//  method. 
//  - 2: Strict Priority. Provides strict priority between the three transmit clients. XALI0 is lowest, XALI1 is higher, 
//  XALI2 (if implemented) is highest. 
// You can only change this parameter when CX_NVC >1.
`define CX_XADM_ARB_MODE 1


// Name:           CLIENT_PULLBACK
// Default:        true ((CC_DMA_ENABLE && (AMBA_INTERFACE!=0)) ? 1 : 0)
// Values:         false (0), true (1)
// Enabled:        ((AMBA_INTERFACE==0))
// Parameter Type: Feature Setting
// 
// Enable the transmit clients to cancel a TLP that is currently submitted for transmission.
`define CLIENT_PULLBACK


`define CLIENT_PULLBACK_VALUE 1


`define CX_XADM_ARB_CLIENT_RR_PRIORITY


// Name:         CX_XADM_ARB_CLIENT_STRICT_PRIORITY
// Default:      0 (CX_XADM_ARB_MODE==2)
// Values:       0, 1
// 
// This parameter defines client based arbitration scheme strictly based on priority. Cleint0 has lowest priority, ClientN 
// has highest priority
// `define CX_XADM_ARB_CLIENT_STRICT_PRIORITY


// Name:         CX_XADM_ARB_WRR_WEIGHT_BIT_WIDTH
// Default:      8
// Values:       4, ..., 8
// 
// Bit Width of VC-based arbiter 
// WRR (Weighted Round Robin) weights
`define CX_XADM_ARB_WRR_WEIGHT_BIT_WIDTH 8


// Name:           CX_LPVC_WRR_WEIGHT_WRITABLE
// Default:        false
// Values:         false (0), true (1)
// Enabled:        VC_ENABLE==1 && CX_XADM_ARB_MODE==1
// Parameter Type: Feature Setting
// 
// Determines whether the WRR arbitration VC weight values in VC Transmit Arbitration Register 1 and VC Transmit 
// Arbitration Register 2 (in the register section of the Databook) are writable through the DBI.
// `define CX_LPVC_WRR_WEIGHT_WRITABLE


// Name:           LPVC_WRR_WEIGHT_VC0
// Default:        0xf
// Values:         0x0, ..., 0x7f
// Enabled:        VC_ENABLE==1 && CX_XADM_ARB_MODE==1
// Parameter Type: Feature Setting
// 
// WRR Weighting for VC ID #0. If LPVC WRR Weights Writable is true, your application can change the value by writing to VC 
// Transmit Arbitration Register 1 (in the register section of the Databook) through the DBI.
`define LPVC_WRR_WEIGHT_VC0 8'hf


// Name:           LPVC_WRR_WEIGHT_VC1
// Default:        0x0
// Values:         0x0, ..., 0x7f
// Enabled:        VC_ENABLE==1 && CX_XADM_ARB_MODE==1
// Parameter Type: Feature Setting
// 
// WRR Weighting for VC ID #1. If LPVC WRR Weights Writable is true, your application can change the value by writing to VC 
// Transmit Arbitration Register 1 (in the register section of the Databook) through the DBI.
`define LPVC_WRR_WEIGHT_VC1 8'h0


// Name:           LPVC_WRR_WEIGHT_VC2
// Default:        0x0
// Values:         0x0, ..., 0x7f
// Enabled:        VC_ENABLE==1 && CX_XADM_ARB_MODE==1
// Parameter Type: Feature Setting
// 
// WRR Weighting for VC ID #2. If LPVC WRR Weights Writable is true, your application can change the value by writing to VC 
// Transmit Arbitration Register 1 (in the register section of the Databook) through the DBI.
`define LPVC_WRR_WEIGHT_VC2 8'h0


// Name:           LPVC_WRR_WEIGHT_VC3
// Default:        0x0
// Values:         0x0, ..., 0x7f
// Enabled:        VC_ENABLE==1 && CX_XADM_ARB_MODE==1
// Parameter Type: Feature Setting
// 
// WRR Weighting for VC ID #3. If LPVC WRR Weights Writable is true, your application can change the value by writing to VC 
// Transmit Arbitration Register 1 (in the register section of the Databook) through the DBI.
`define LPVC_WRR_WEIGHT_VC3 8'h0


// Name:           LPVC_WRR_WEIGHT_VC4
// Default:        0x0
// Values:         0x0, ..., 0x7f
// Enabled:        VC_ENABLE==1 && CX_XADM_ARB_MODE==1
// Parameter Type: Feature Setting
// 
// WRR Weighting for VC ID #4. If LPVC WRR Weights Writable is true, your application can change the value by writing to VC 
// Transmit Arbitration Register 1 (in the register section of the Databook) through the DBI.
`define LPVC_WRR_WEIGHT_VC4 8'h0


// Name:           LPVC_WRR_WEIGHT_VC5
// Default:        0x0
// Values:         0x0, ..., 0x7f
// Enabled:        VC_ENABLE==1 && CX_XADM_ARB_MODE==1
// Parameter Type: Feature Setting
// 
// WRR Weighting for VC ID #5. If LPVC WRR Weights Writable is true, your application can change the value by writing to VC 
// Transmit Arbitration Register 1 (in the register section of the Databook) through the DBI.
`define LPVC_WRR_WEIGHT_VC5 8'h0


// Name:           LPVC_WRR_WEIGHT_VC6
// Default:        0x0
// Values:         0x0, ..., 0x7f
// Enabled:        VC_ENABLE==1 && CX_XADM_ARB_MODE==1
// Parameter Type: Feature Setting
// 
// WRR Weighting for VC ID #6. If LPVC WRR Weights Writable is true, your application can change the value by writing to VC 
// Transmit Arbitration Register 1 (in the register section of the Databook) through the DBI.
`define LPVC_WRR_WEIGHT_VC6 8'h0


// Name:           LPVC_WRR_WEIGHT_VC7
// Default:        0x0
// Values:         0x0, ..., 0x7f
// Enabled:        VC_ENABLE==1 && CX_XADM_ARB_MODE==1
// Parameter Type: Feature Setting
// 
// WRR Weighting for VC ID #7. If LPVC WRR Weights Writable is true, your application can change the value by writing to VC 
// Transmit Arbitration Register 1 (in the register section of the Databook) through the DBI.
`define LPVC_WRR_WEIGHT_VC7 8'h0


// Name:           P_LEN_CMP_ENABLE
// Default:        1
// Values:         0, 1
// Parameter Type: Feature Setting
// 
// Enable the controller to compare the size of a requested posted payload length against available posted credits before 
// transmitting the posted TLP. This option cannot be selected if Special Posted Handling (SPECIAL_MAX_P_CRD_ENABLE) is 
// selected.
`define P_LEN_CMP_ENABLE


// Name:           SPECIAL_MAX_P_CRD_ENABLE
// Default:        0
// Values:         0, 1
// Parameter Type: Feature Setting
// 
// Check for a specific number of posted credits (posted Credit Threshold) to be available before transmitting a posted 
// TLP. This option cannot be selected if Compare Posted Credit (P_LEN_CMP_ENABLE) is selected.
// `define SPECIAL_MAX_P_CRD_ENABLE


// Name:           SPECIAL_MAX_P_CRD
// Default:        16 (CX_MAX_MTU/16)
// Values:         1, ..., CX_MAX_MTU/16
// Enabled:        ((SPECIAL_MAX_P_CRD_ENABLE))
// Parameter Type: Feature Setting
// 
// The number of posted credits required to be available before the controller transmits a posted TLP. Only applies when 
// Special Posted Handling (SPECIAL_MAX_P_CRD_ENABLE) is set.
`define SPECIAL_MAX_P_CRD 16


// Name:           CPL_LEN_CMP_ENABLE
// Default:        1
// Values:         0, 1
// Parameter Type: Feature Setting
// 
// Enable the controller to compare the actual size of a requested Completion (as opposed to a maximum size Completion) 
// against available Completion credits before transmitting the Completion. This parameter saves gates and improves timing when 
// set to false. 
//  - Typically, an EP must have enough buffer space to receive all CPL data before it sends a MRd transaction. Therefore, 
//  an RC may assume infinite CPL credits. 
//  - There is no need to compare the CPL length with available CPL credits. Therefore, setting this parameter to false 
//  can save gate count by eliminating the compare logic. 
//  - If a PCIe device has specific or more strict requirement for checking a peer components CplD buffer capability, it 
//  sets a threshold that at least 8 CplD credits are available before a PCIe device can transmit a CPLD. 
// Note: This option cannot be selected if SPECIAL_MAX_CPL_CRD_ENABLE parameter 'Special Completion Handling' is set.
`define CPL_LEN_CMP_ENABLE


// Name:           SPECIAL_MAX_CPL_CRD_ENABLE
// Default:        0
// Values:         0, 1
// Parameter Type: Feature Setting
// 
// Check for a specific number of completion credits (completion Credit Threshold) to be available before transmitting a 
// completion TLP. This option cannot be selected if Compare Completion Credit (CPL_LEN_CMP_ENABLE) is selected.
// `define SPECIAL_MAX_CPL_CRD_ENABLE


// Name:           SPECIAL_MAX_CPL_CRD
// Default:        16 (CX_MAX_MTU/16)
// Values:         1, ..., CX_MAX_MTU/16
// Enabled:        ((SPECIAL_MAX_CPL_CRD_ENABLE))
// Parameter Type: Feature Setting
// 
// The number of completion credits required to be available before the controller transmits a completion TLP. Only applies 
// when Special Completion Handling (SPECIAL_MAX_CPL_CRD_ENABLE) is set.
`define SPECIAL_MAX_CPL_CRD 16


// Name:           XADM_CRD_EN
// Default:        0
// Values:         0, 1
// Enabled:        ((AMBA_INTERFACE==0))
// Parameter Type: Feature Setting
// 
// Include top-level ports to provide available credit information to the application. For more details, see 'SII: Transmit 
// Control Signals' section of the Databook. This parameter enables the population of output ports for application 
// monitoring of run-time available credit information for VCn buses: 
//  - xadm_ph_cdts [NVC*8-1:0] : available VC0-VCn header posted credits 
//  - xadm_nph_cdts [NVC*8-1:0] : available VC0-VCn header non-posted credits 
//  - xadm_cplh_cdts [NVC*8-1:0] : available VC0-VCn header completion credits 
//  - xadm_pd_cdts [NVC*12-1:0] : available VC0-VCn data posted credits 
//  - xadm_npd_cdts [NVC*12-1:0] : available VC0-VCn data non-posted credits 
//  - xadm_cpld_cdts [NVC*12-1:0] : available VC0-VCn data completion credits 
// Information for lower order VCs is presented on the lower-order bits.
// `define XADM_CRD_EN


// Name:           CX_PASID_ENABLE
// Default:        false
// Values:         false (0), true (1)
// Enabled:        CX_TLP_PREFIX_ENABLE &&  1 &&  1
// Parameter Type: Feature Setting.
// 
// Support the PASID capability for untranslated addresses.
// `define CX_PASID_ENABLE


`define CX_PASID_ENABLE_VALUE 1'h0


// Name:           CX_MAX_END2END_TLP_PRFXS
// Default:        0 ((CX_NPRFX < 4) ? CX_NPRFX : 0)
// Values:         0, ..., 3
// Parameter Type: Feature Setting.
// 
// When End-End TLP Prefixes are supported, this value determines the maximum number of End-End type TLP Prefixes per TLP 
// packet which the controller may advertize that it can support (Device Capabilities 2 Register). When CX_NPRFX < 4, then 
// CX_MAX_END2END_TLP_PRFXS = CX_NPRFX; when CX_NPRFX is equal to or greater than 4 then CX_MAX_END2END_TLP_PRFXS = 0 (which 
// decodes as a maximum of 4 End-End TLP Prefixes).
`define CX_MAX_END2END_TLP_PRFXS 0


// Name:         CX_PASID_DEFAULTS_VISIBLE
// Default:      0
// Values:       0, 1
// Enabled:      CX_PASID_ENABLE &&  1 &&  1
// 
// Select here if you want to configure the defaults for the PASID capability register. An extra window will appear under 
// this page. To access it, click the plus/minus symbol in the hierarchy view on the left panel. This is optional but not 
// usually recommended. You can also change these register defaults using the DBI before (or after) the link comes up.
`define CX_PASID_DEFAULTS_VISIBLE 0


// Name:           DEFAULT_MAX_PASID_WDTH
// Default:        0
// Values:         0, ..., 20
// Enabled:        CX_PASID_ENABLE &&  1 &&  1
// Parameter Type: Register Default Setting
// 
// The default value for the width of the PASID field supported by the endpoint. 
//  - n indicates support for PASID values 0 through (2^n)-1. 
//  - 0 indicates support for a single PASID. 
//  - 20 indicates support for all PASID values (20 bits).
`define DEFAULT_MAX_PASID_WDTH 0


// Name:           DEFAULT_PRVLGD_MODE_SPPRT
// Default:        1
// Values:         0, 1
// Enabled:        CX_PASID_ENABLE &&  1 &&  1
// Parameter Type: Register Default Setting
// 
// The default value for Privileged Mode Supported. 
//  - 1: Endpoint supports operating in Privileged and Non-Privileged modes, and supports sending requests that have the 
//  Privileged Mode Requested bit Set. 
//  - 0: Endpoint will never Set the Privileged Mode Requested bit.
`define DEFAULT_PRVLGD_MODE_SPPRT 1


// Name:           DEFAULT_EXCT_PRMSSN_SPPRT
// Default:        1
// Values:         0, 1
// Enabled:        CX_PASID_ENABLE &&  1 &&  1
// Parameter Type: Register Default Setting
// 
// The default value for Execute Permission Supported. 
//  - 1: Endpoint supports sending TLPs that have the Execute Requested bit Set. 
//  - 0: Endpoint will never Set the Execute Requested bit.
`define DEFAULT_EXCT_PRMSSN_SPPRT 1

//-/ =================================================================
//-/ Memory Configuration
//-/ =================================================================


// Name:           CX_SRIS_SUPPORT
// Default:        false
// Values:         false (0), true (1)
// Enabled:        (!(CX_PCIE_MODE == SINGLE_MPCIE))
// Parameter Type: Feature Setting
// 
// When enabled, the controller implements logic for Separate Reference Clocks with Independent SSC (SRIS)
// `define CX_SRIS_SUPPORT


// Name:           CX_MAX_RETIMER
// Default:        0x0
// Values:         0x0, 0x1, 0x2
// Enabled:        Always
// Parameter Type: Feature Setting
// 
// Specifies maximum number of Retimers that can be present in your system. This setting impacts default buffer size of 
// Retry, SOT buffer and Receive queue.
`define CX_MAX_RETIMER 1'h0


// Name:         CX_RETIMER_LATENCY
// Default:      0 ([<functionof> CX_MAX_RETIMER CX_SRIS_SUPPORT CX_MAX_MTU 
//               CX_GEN4_SPEED CX_GEN3_SPEED CX_GEN2_SPEED])
// Values:       0, ..., 2048
// 
// This is read-only parameter to indicate total round trip Latency of Retimer calculated from CX_MAX_RETIMER setting and 
// reference Retimer latency table in PCIe Base Spec. This setting impacts retry buffer auto-sizing and default credits of 
// Receive queue.
`define CX_RETIMER_LATENCY 0


// Name:           CX_RETIMER_LATENCY2
// Default:        0 (CX_RETIMER_LATENCY)
// Values:         -2147483648, ..., 2147483647
// Parameter Type: Feature Setting
// 
// Read-only parameter that indicate total round trip Latency of Retimer calculated from CX_MAX_RETIMER setting and 
// reference Retimer latency table in PCIe Base Spec, used for retry buffer auto-sizing.
`define CX_RETIMER_LATENCY2 0


// Name:         CX_DW
// Default:      128 ([<functionof> CX_NB CX_NL])
// Values:       -2147483648, ..., 2147483647
// 
// Specifies the width of the datapath (number of DW per cycles)
`define CX_DW 128


// Name:         CX_RX_L0S_ADJUSTMENT
// Default:      64 ([calc_L0s_adj (   (CX_S_CPCIE_MODE)                    ? CX_MAX_NFTS 
//                : (CX_S_MPCIE_MODE)                    ? CM_MAX_SYNC_TIME_D4 
//                : (CX_MAX_NFTS > CM_MAX_SYNC_TIME_D4) ? CX_MAX_NFTS 
//                :  CM_MAX_SYNC_TIME_D4)])
// Values:       -2147483648, ..., 2147483647
// 
// Time required by the components receive circuits to exit 
// from L0s to L0 (as to receive an Ack DLLP from the other 
// component on the Link) expressed in Symbol Times
`define CX_RX_L0S_ADJUSTMENT 64


// Name:         PCIE_ACK_FACTOR
// Default:      14 ([calc_pci_ack_fac CX_NL CX_MAX_MTU])
// Values:       -2147483648, ..., 2147483647
// 
// Number of maximum size TLPs which can be 
// received before an Ack is sent, and is used to balance Link 30 
// bandwidth efficiency and retry buffer size -- the value varies 
// according to Max_Payload_Size and Link width, and is included in 
// Table 3-5, of the PCI Express Base Specification, rev. 1.0a
`define PCIE_ACK_FACTOR 14


// Name:         CX_RBUF_MAXPKT
// Default:      276 ([calc_buf_maxpkt CX_MAX_MTU CX_ECRC_ENABLE])
// Values:       -2147483648, ..., 2147483647
// 
// Maximum number of bytes per packet
`define CX_RBUF_MAXPKT 276


// Name:         CX_RBUF_DATASIZE
// Default:      17 ([calc_rbuf_ds CX_NB CX_NL CX_MAX_MTU CX_ECRC_ENABLE])
// Values:       -2147483648, ..., 2147483647
// 
// Minimum Number of ram entries per packet
`define CX_RBUF_DATASIZE 17


// Name:         CX_RBUF_DATASIZE_2
// Default:      18 ([<functionof> CX_NB CX_NL CX_MAX_MTU CX_ECRC_ENABLE 
//               CX_TLP_PREFIX_ENABLE_VALUE CX_NPRFX])
// Values:       -2147483648, ..., 2147483647
// 
// Minimum Number of ram entries per packet
`define CX_RBUF_DATASIZE_2 18


// Name:         CX_ACK_LATENCY_LIMIT
// Default:      166 ([calc_ack_lat_limit CX_NL CX_MAX_MTU CX_ECRC_ENABLE 
//               CX_GEN4_SPEED CX_GEN3_SPEED CX_5GTS_SPEED])
// Values:       -2147483648, ..., 2147483647
// 
// PCI Express Base Specification, Rev 1.0a, Section 3.5.3.1
`define CX_ACK_LATENCY_LIMIT 166






// Name:           CX_RBUF_DEPTH
// Default:        136 ([calc_rbuf_depth CX_NB CX_NL CX_MAX_MTU CX_ECRC_ENABLE 
//                 CX_INTERNAL_DELAY CX_MAX_L0S_LTIME CX_GEN4_SPEED CX_GEN3_SPEED CX_5GTS_SPEED 
//                 CX_RETIMER_LATENCY])
// Values:         CX_RBUF_DEPTH_MIN, ..., 4294967295
// Enabled:        ((!CX_RBUF_AUTOSIZE))
// Parameter Type: Feature Setting
// 
// The depth of the retry buffer. When retry buffer auto-sizing is enabled (CX_RBUF_AUTOSIZE), "Retry Buffer Depth" is 
// read-only and indicates the automatically calculated depth of the retry buffer. When retry buffer auto-sizing is disabled, 
// "Retry Buffer Depth" is the user-specified depth of the retry buffer. Note that if the autosize feature is disabled, then the 
// minimum value specified must be large enough to allow normal operation. The default value is the automatically calculated 
// value. For more details, see the 'Transmit Replay' section of the Architecture chapter of the Databook.
`define CX_RBUF_DEPTH 32'd136


`define RBUF_PW 8


// Name:           RBUF_WIDTH
// Default:        135 ( RBUF_PROT_WD + [calc_rbuf_width CX_NB CX_NL 
//                 CX_TLP_PREFIX_ENABLE CX_GEN3_SPEED])
// Values:         34, ..., 686
// Parameter Type: Feature Setting
// 
// Read-only parameter that indicates the width of the retry buffer.
`define RBUF_WIDTH 135


// Name:         RBUF_PAR_EN
// Default:      false (CX_RAM_PROTECTION_MODE==1)
// Values:       false (0), true (1)
// 
// Enable parity for Retry Buffer
// `define RBUF_PAR_EN


// Name:         RBUF_PAR_CALC_WIDTH
// Default:      32 ((RBUF_PAR_EN==1) ? CX_PAR_MODE : 32)
// Values:       -2147483648, ..., 2147483647
// 
// Bit width for Parity Calculation
`define RBUF_PAR_CALC_WIDTH 32


// Name:         RBUF_NPAR_BITS
// Default:      5 ([calc_npar_bits RBUF_WIDTH RBUF_PAR_CALC_WIDTH])
// Values:       -2147483648, ..., 2147483647
// 
// Number of Parity Bits
`define RBUF_NPAR_BITS 5


// Name:         RBUF_NECC_BITS
// Default:      9 ([calc_necc_bits RBUF_WIDTH])
// Values:       -2147483648, ..., 2147483647
// 
// Number of ECC Bits
`define RBUF_NECC_BITS 9


`define CX_RBUF_WIDTH 135


// Name:         CX_SOT_LATENCY
// Default:      119 ([calc_sot_lat CX_NB CX_NL CX_MAX_MTU CX_ECRC_ENABLE 
//               CX_INTERNAL_DELAY CX_MAX_NFTS CX_GEN4_SPEED CX_GEN3_SPEED CX_5GTS_SPEED 
//               CX_RETIMER_LATENCY])
// Values:       -2147483648, ..., 2147483647
// 
// Number of potential in flight packets due to round trip latency
`define CX_SOT_LATENCY 119


// Name:           CX_SOTBUF_DEPTH
// Default:        121 ([calc_sot_depth CX_NB CX_NL CX_MAX_MTU CX_ECRC_ENABLE 
//                 CX_INTERNAL_DELAY CX_MAX_L0S_LTIME CX_GEN4_SPEED CX_GEN3_SPEED CX_5GTS_SPEED 
//                 CX_RETIMER_LATENCY])
// Values:         -2147483648, ..., 2147483647
// Enabled:        ((CX_RBUF_AUTOSIZE==0))
// Parameter Type: Feature Setting
// 
// When retry buffer auto-sizing is enabled, the value displayed here corresponds to the number of minimum-sized TLPs (3 
// DWORDs) that can reside in the retry buffer. 
//  - The 'Start Of TLP (SOT)' buffer stores the starting address of each unacknowledged TLP stored in the retry buffer. 
//  - The SOT buffer requires one entry for each TLP that can be stored in the retry buffer. 
//  - The selected retry buffer size determines the size of the SOT buffer. 
//  - The actual SOT buffer depth is a combination of the value displayed here and the additional requirements that the 
//  actual SOT buffer depth must be at least 32 and must be a power of 2. 
// When retry buffer auto-sizing is disabled, 'Minimum SOT Depth' is the user-specified depth of the SOT buffer. 
//  - The selected size must allow the retry buffer to store the maximum number of shortest TLPs (3 DWORDs). 
//  - The actual SOT buffer depth (SOTBUF_DEPTH) is calculated by adjusting CX_SOTBUF_DEPTH to be at least 32, and 
//  rounding up to the next power-of-2. 
// For more details, see the 'Transmit Replay' section of the 'Architecture' chapter of the Databook.
`define CX_SOTBUF_DEPTH 121


// Name:           SOTBUF_L2DEPTH
// Default:        7 ([calc_sot_L2_depth CX_NB CX_NL CX_MAX_MTU CX_ECRC_ENABLE 
//                 CX_INTERNAL_DELAY CX_MAX_L0S_LTIME CX_RBUF_AUTOSIZE CX_SOTBUF_DEPTH 
//                 CX_GEN4_SPEED CX_GEN3_SPEED CX_5GTS_SPEED CX_RETIMER_LATENCY])
// Values:         -2147483648, ..., 2147483647
// Parameter Type: Feature Setting
// 
// Log 2 of CX_SOT_Depth, used to ensure we have ram based upon a power of 2 
// this value returns a minimum of 5
`define SOTBUF_L2DEPTH 7


// Name:           SOTBUF_DEPTH
// Default:        128 ([calc_sotbuf_depth CX_NB CX_NL CX_MAX_MTU CX_ECRC_ENABLE 
//                 CX_INTERNAL_DELAY CX_MAX_L0S_LTIME CX_RBUF_AUTOSIZE CX_SOTBUF_DEPTH 
//                 CX_GEN4_SPEED CX_GEN3_SPEED CX_5GTS_SPEED CX_RETIMER_LATENCY])
// Values:         32, ..., 4294967295
// Parameter Type: Feature Setting
// 
// Read-only parameter that indicates the depth of the SOT buffer.
`define SOTBUF_DEPTH 32'd128


// Name:         CX_RAS_SOTBUF_PROT_WD
// Default:      0 ((CX_RAS_EN==1)? (([calc_log2 CX_RBUF_DEPTH] > 26)? 7: 6): 0)
// Values:       -2147483648, ..., 2147483647
// Enabled:      (((CX_RASDP==0)&&(CX_RASDP_RAM_PROT==0))? 0: 1==1)
// 
// Determines the width of the protection code that protects the Layer 2 control bits that go into the retry buffer ram. If 
// RAS is not used the width is set to 0
`define CX_RAS_SOTBUF_PROT_WD 0


// Name:           SOTBUF_WIDTH
// Default:        8 (CX_RAS_EN ? (CX_RAS_SOTBUF_PROT_WD +[calc_log2 CX_RBUF_DEPTH]) : 
//                 [calc_log2 CX_RBUF_DEPTH])
// Values:         0, ..., 4294967295
// Parameter Type: Feature Setting
// 
// Read-only parameter that indicates the width of the SOT buffer.
`define SOTBUF_WIDTH 32'd8


// Name:         SOTBUF_PAR_EN
// Default:      false (CX_RAM_PROTECTION_MODE==1)
// Values:       false (0), true (1)
// 
// Enable parity for SOTBUF Buffer
// `define SOTBUF_PAR_EN


// Name:         SOTBUF_PAR_CALC_WIDTH
// Default:      32 ((SOTBUF_PAR_EN==1) ? CX_PAR_MODE : 32)
// Values:       -2147483648, ..., 2147483647
// 
// Bit width for Parity Calc
`define SOTBUF_PAR_CALC_WIDTH 32


// Name:         SOTBUF_NPAR_BITS
// Default:      1 ([calc_npar_bits SOTBUF_WIDTH SOTBUF_PAR_CALC_WIDTH])
// Values:       -2147483648, ..., 2147483647
// 
// Number of Parity Bits
`define SOTBUF_NPAR_BITS 1


// Name:         SOTBUF_NECC_BITS
// Default:      6 ([calc_necc_bits SOTBUF_WIDTH])
// Values:       -2147483648, ..., 2147483647
// 
// Number of SOT buffer ECC Bits
`define SOTBUF_NECC_BITS 6


`define CX_SOTBUF_WIDTH 8


//-/ =================================================================
//-/ Configuration capability register pointers
//-/ =================================================================
//NOTE: for all DefaultValue of the _SIZE below, the 2nd # after the "+"
//is padding and is added so the next PTR starts at even addresses


`define CFG_CAP_START 8'h40


`define CFG_PM_CAP 8'h40


`define PM_CAP_SIZE 8'h10


`define CFG_MSI_CAP 8'h50


`define MSI_CAP_SIZE 8'h20


`define CFG_PCIE_CAP 8'h70


`define PCIE_CAP_SIZE 8'h40


`define CFG_MSIX_CAP 8'hb0


`define MSIX_CAP_SIZE 8'h10


`define CFG_SLOT_CAP 8'hc0


`define SLOT_CAP_SIZE 8'h10


`define CFG_VPD_CAP 8'hd0


`define VPD_CAP_SIZE 8'h10


`define CFG_SATA_CAP 8'he0


`define SATA_CAP_SIZE 8'h10


`define AER_SIZE 12'h48


`define VC_SIZE 8'h20


`define SERIAL_CAP_SIZE 8'h10


`define PB_SIZE 8'h10


`define ARI_SIZE 8'h10


`define SPCIE_SIZE 8'h20


`define PL16G_SIZE 8'h24


`define PL16GM_SIZE 8'h18


`define SRIOV_SIZE 8'h40


`define TPH_SIZE 12'h8c


`define ATS_SIZE 8'h10


`define PRS_SIZE 8'h10


`define LTR_SIZE 8'h8


`define L1SUB_SIZE 8'h10


`define PASID_SIZE 8'h8


`define DPA_SIZE 8'h30


`define LN_SIZE 8'h8


`define MPCIE_SIZE 8'h1c


`define RTR_SIZE 8'hc


`define PTM_SIZE 8'hc


`define PTM_VSEC_SIZE 8'h54


`define PTM_RES_SIZE 8'h54


`define PTM_REQ_SIZE 8'h54


`define FRSQ_SIZE 8'h10


`define RAS_DES_SIZE 9'h100


`define VSECRAS_SIZE 8'h38


`define DLINK_SIZE 8'hc


`define RBAR_SIZE 8'h40

//-/ =================================================================

// Name:           SLAVE_BUS_ADDR_WIDTH
// Default:        32
// Values:         32 64
// Enabled:        (SLAVE_POPULATED && (AXI_POPULATED || AHB_POPULATED))
// Parameter Type: Feature Setting
// 
// Specifies the width of the AXI slave address bus (excluding parity bits [AXI only] if any)
`define SLAVE_BUS_ADDR_WIDTH 32


// Name:           SLAVE_BUS_DATA_WIDTH
// Default:        32
// Values:         32 64 128 256 512
// Enabled:        SLAVE_POPULATED
// Parameter Type: Feature Setting
// 
// Specifies the width of the AXI slave data bus (excluding parity bits [AXI only] if any).
`define SLAVE_BUS_DATA_WIDTH 128


// Name:           CC_SLV_BURST_LEN
// Default:        16 ((AHB_POPULATED && (SLAVE_BUS_DATA_WIDTH==32))? 32 : 16)
// Values:         8 16 32 64 128 256
// Enabled:        SLAVE_POPULATED
// Parameter Type: Performance Setting
// 
// Specifies the maximum burst length (in beats) of an AXI transfer at the slave interface. An application master may 
// execute any burst up to a maximum byte size given by CC_SLV_BURST_LEN * (CC_SLV_BUS_DATA_WIDTH / 8) bytes. This parameter 
// controls the default size of the slave request decomposer Data RAM inside the AXI bridge based on the maximum MemWr transfer 
// size. This parameter uses the unit of burst beat.
`define CC_SLV_BURST_LEN 16


// Name:           CC_SLV_MTU
// Default:        256 (((CC_SLV_BURST_LEN*SLAVE_BUS_DATA_WIDTH/8) > 4096) ? 4096 : 
//                 (CC_SLV_BURST_LEN*SLAVE_BUS_DATA_WIDTH/8))
// Values:         -2147483648, ..., 2147483647
// Enabled:        0
// Parameter Type: Feature Setting
// 
// Slave Maximum Transfer Unit. The application master (at the AXI Slave Interface) must not request or write more than 
// CC_SLV_MTU bytes in a single AXI burst. This value is used to set memory sizes in the bridge (slave request decomposer data 
// FIFO and slave response composer). This parameter is derived automatically as CC_SLV_BURST_LEN * (SLAVE_BUS_DATA_WIDTH / 8) 
// and is read-only.
`define CC_SLV_MTU 256


//-/ =================================================================

`define CX_ATU_CTRL_EN


// Name:           CX_ATU_NUM_OUTBOUND_REGIONS
// Default:        2
// Values:         0, ..., 256
// Enabled:        CX_INTERNAL_ATU_ENABLE
// Parameter Type: Feature Setting
// 
// Specifies the number of address regions to be mapped by the internal Address Translation Unit in the outbound direction. 
// Refer to 'Internal Address Translation (iATU)' section of the Databook.
`define CX_ATU_NUM_OUTBOUND_REGIONS 2


// Name:           CX_ATU_NUM_INBOUND_REGIONS
// Default:        2
// Values:         0, ..., 256
// Enabled:        CX_INTERNAL_ATU_ENABLE
// Parameter Type: Feature Setting
// 
// Specifies the number of address regions to be mapped by the internal Address Translation Unit in the inbound direction. 
// Refer to 'Internal Address Translation (iATU)' section of the Databook.
`define CX_ATU_NUM_INBOUND_REGIONS 2


// `define CX_ATU_NUM_INBOUND_GTR_OUTBOUND


// Name:         UNROLL_ATU_SIZE
// Default:      0x400 (CC_UNROLL_EN==1?([<functionof> CX_ATU_NUM_INBOUND_REGIONS 
//               CX_ATU_NUM_OUTBOUND_REGIONS]):0)
// Values:       0x0, ..., 0xffffffffffffffff
// Enabled:      ENABLE_MEM_MAP_UNROLL_ATU_REG==1
// 
// Indicates the size of UNROLL ATU configuration registers into memory space.
`define UNROLL_ATU_SIZE 64'h400


// Name:           CX_ATU_MIN_REGION_SIZE
// Default:        64k
// Values:         4k (4096), 8k (8192), 16k (16384), 32k (32768), 64k (65536)
// Enabled:        CX_INTERNAL_ATU_ENABLE
// Parameter Type: Feature Setting
// 
// Specifies the minimum size of an address translation region. For example, if set to 64 kB; the lower 16 bits of the 
// Base, Limit and Target registers are zero and all address regions are aligned on 64 kB boundaries. Smaller Regions require 
// more levels of decode logic. Refer to 'Internal Address Translation (iATU)' section of the Databook.
`define CX_ATU_MIN_REGION_SIZE 65536


// Name:           CX_ATU_MAX_REGION_SIZE
// Default:        4G
// Values:         4G (0), 8G (1), 16G (2), 32G (3), 64G (4), 128GB (5), 256GB (6), 
//                 512GB (7), 1TB (8), 2TB (9), 4TB (10), 8TB (11), 16TB (12), 32TB (13), 
//                 64TB (14), 128TB (15), 256TB (16), 512TB (17), 1EB (18), 2EB (19), 
//                 4EB (20), 8EB (21), 16EB (22), 32EB (23), 64EB (24), 128EB (25), 256EB 
//                 (26), 512EB (27), 1ZB (28), 2ZB (29), 4ZB (30), 8ZB (31), 16ZB (32)
// Enabled:        CX_INTERNAL_ATU_ENABLE
// Parameter Type: Feature Setting
// 
// Specifies the maximum allowable size of an Address Translation Region in iATU for both inbound and outbound TLPs. This 
// parameter determines the number of programmable bits in the iATU Upper Limit Address Register for both inbound and 
// outbound. For more information,  refer to 'Internal Address Translation (iATU)' section of the Databook.
`define CX_ATU_MAX_REGION_SIZE 0


// `define CX_ATU_INCR_RGN_SIZE


// `define CX_ATU_AXI_INCR_RGN_SIZE


`define CX_ATU_BASE_WIDTH 32


`define CX_ATU_REGION_WIDTH 16


`define ATU_IN_SINGLE_TRGT_ADDR_ENABLE 1'h1


`define ATU_IN_SINGLE_TRGT_ADDR


`define CX_ATU_OB_CTRL_EN


`define ATU_OB_REGION_1


// `define ATU_OB_REGION_2


// `define ATU_OB_REGION_3


// `define ATU_OB_REGION_4


// `define ATU_OB_REGION_5


// `define ATU_OB_REGION_6


// `define ATU_OB_REGION_7


// `define ATU_OB_REGION_8


// `define ATU_OB_REGION_9


// `define ATU_OB_REGION_10


// `define ATU_OB_REGION_11


// `define ATU_OB_REGION_12


// `define ATU_OB_REGION_13


// `define ATU_OB_REGION_14


// `define ATU_OB_REGION_15


// Name:         VGA_SUPPORT
// Default:      0
// Values:       0, 1
// Enabled:      0
// 
// When enabled, controller will implement the VGA Enable 
// and VGA 16-bit Decode bits. 
// When VGA is enabled, controller will forward VGA-compatible 
// addresses IO & Memory requests
// `define VGA_SUPPORT


// Name:         ISA_SUPPORT
// Default:      0
// Values:       0, 1
// Enabled:      0
// 
// When enabled, controller will implement the ISA Enable bit 
// When ISA is enabled, controller will forward ISA-compatible 
// addresses IO requests 
// NOTE: This is a required per spec, but usage has been 
// deprecated - that's why default value is 0.
// `define ISA_SUPPORT


// Name:         CX_AMBA_ARI_OR_IOV
// Default:      1 (AMBA_INTERFACE != 0 && (CX_SRIOV_ENABLE || CX_ARI_ENABLE))
// Values:       0, 1
// Enabled:      0
// 
// Defined when ARI  or IOV are enabled
`define CX_AMBA_ARI_OR_IOV


// Name:         MSIX_TABLE_EN
// Default:      0
// Values:       0, 1
// Enabled:      !CX_EXTENSIBLE_VFUNC
// 
// Implements the MSI-X generation logic with the data/address table and PBA RAMs in the core. For more details, see the 
// Interrupts section in the "Controller Operations" chapter of the Databook. 
// Not available when Extensible Virtual Function (CX_EXTENSIBLE_VFUNC) is enabled.
// `define MSIX_TABLE_EN


// Name:         CX_MSIX_TABLE_RAM_DEPTH
// Default:      0 ([calc_cal_msix_table_ram_sizes table])
// Values:       -2147483648, ..., 2147483647
// Enabled:      0
// 
// Depth of the RAM used to store MSI-X vector information when the MSI-X table module is used (MSIX_TABLE_EN is selected).
`define CX_MSIX_TABLE_RAM_DEPTH 0


// Name:         CX_MSIX_TABLE_PW
// Default:      1 ([calc_log2 CX_MSIX_TABLE_RAM_DEPTH])
// Values:       -2147483648, ..., 2147483647
// 
// Bus width required to address the MSI-X vector RAM (MSIX_TABLE_EN is selected).
`define CX_MSIX_TABLE_PW 1


// Name:         CX_MSIX_PBA_RAM_DEPTH
// Default:      0 ([calc_cal_msix_table_ram_sizes pba])
// Values:       -2147483648, ..., 2147483647
// Enabled:      0
// 
// Depth of the RAM used to store MSI-X PBA information when the MSI-X table module is used (MSIX_TABLE_EN is selected).
`define CX_MSIX_PBA_RAM_DEPTH 0


// Name:         CX_MSIX_PBA_PW
// Default:      1 ([calc_log2 CX_MSIX_PBA_RAM_DEPTH])
// Values:       -2147483648, ..., 2147483647
// 
// Bus width required to address the MSI-X PBA RAM (MSIX_TABLE_EN is selected).
`define CX_MSIX_PBA_PW 1


// Name:           DBI_MULTI_FUNC_BAR_EN
// Default:        false (MSIX_TABLE_EN)
// Values:         false (0), true (1)
// Enabled:        Always
// Parameter Type: Feature Setting
// 
// Provide support to allow DBI full access with BAR number and function number. Setting the DBI_MULTI_FUNC_BAR_EN 
// configuration parameter allows the DBI interface to direct an access to a particular BAR#. This helps the ELBI application logic 
// to fully decode an access to the ELBI space when multiple BARs have been mapped to RTRGT0 and need to be accessed via the 
// DBI. By default, DBI_MULTI_FUNCT_BAR_EN is set to 0, indicating a single BAR at the ELBI. Refer to 'Local Bus Controller 
// (LBC)' section in the Architecture chapter of the Databook.
// `define DBI_MULTI_FUNC_BAR_EN


// Name:         CX_IDLE_TO_RCVRY_ON_DESKEW
// Default:      false ((CX_CPCIE_ENABLE && CX_GEN3_SPEED) ? 1 : 0)
// Values:       false (0), true (1)
// 
// - 1, deskew_alignment_err signal makes LTSSM transition from IDLE to RECOVERY. 
// - 0, disable the above transition.
// `define CX_IDLE_TO_RCVRY_ON_DESKEW


// Name:           CX_FREQ_STEP_EN
// Default:        Yes (CX_CPCIE_ENABLE && ((CX_PHY_2S_DYN_PACE == 1) || (CX_PHY_NB != 
//                 CX_NB) || (CX_GEN2_SPEED && CX_GEN2_DYNAMIC_WIDTH && 
//                 PHY_GEN2_DYNAMIC_FREQ) || (CX_GEN2_SPEED && CX_GEN2_DYNAMIC_FREQ && 
//                 PHY_GEN2_DYNAMIC_WIDTH)))
// Values:         No (0), Yes (1)
// Parameter Type: Feature Setting
// 
// If this automatically-derived parameter is defined, then a module called freq_step (workspace/src/common/freq_step.v) is 
// placed in between the PIPE I/O and the core's internal pip interface. This module steps up/down the signals to/from the 
// pipe interface. For example, the controller can run at 62.5 MHz (4 symbols per clock) and the pipe can run at 250 MHz (1 
// symbol per clock). This read-only parameter is derived automatically. For more details, see 'Frequency, Speed and Width 
// Support' in the Product Overview chapter of Databook.
`define CX_FREQ_STEP_EN



`define CX_FREQ_STEP_DOWN_EN


// `define CX_FREQ_STEP_UP_EN


`define PCLK_EN


// Name:         FREQ_STEP_CORE_CLK_ENABLE
// Default:      false
// Values:       false (0x0), true (0x1)
// 
// Decodes rxstatus priority and clocks data from freq_step using the core_clk  
// at the cost of increased latency
`define FREQ_STEP_CORE_CLK_ENABLE 1'h0


// `define FREQ_STEP_CORE_CLK


// Name:         CX_FLT_Q_ADDR_LT_64
// Default:      0 ((FLT_Q_ADDR_WIDTH < 64) ? 1 : 0)
// Values:       0, 1
// 
// Set when FLT_Q_ADDR_WIDTH is < 64. Used to filter 
// invalid addresses in RC
// `define CX_FLT_Q_ADDR_LT_64


// Name:         CX_FLT_Q_ADDR_GT_32
// Default:      1 ((FLT_Q_ADDR_WIDTH > 32) ? 1 : 0)
// Values:       0, 1
// 
// Set when FLT_Q_ADDR_WIDTH is > 32
`define CX_FLT_Q_ADDR_GT_32


// Name:         CX_ADDR_RANGE_UR
// Default:      1
// Values:       0, 1
// 
// Allows detection of out of range addresses in incoming requests RC/DM only
`define CX_ADDR_RANGE_UR



// Name:           CX_MSI_CTRL_ENABLE
// Default:        0
// Values:         0, 1
// Enabled:        AMBA_INTERFACE!=0
// Parameter Type: Feature Setting
// 
// Instantiate the Integrated MSI Generation Module (iMRM) in the AXI bridge to detect and terminate inbound MSI TLPs. For 
// more details, see the Interrupt section in the "Controller Operations" chapter of the Databook.
`define CX_MSI_CTRL_ENABLE 1

//AXI MSI interrupt controller FIFO depth. Number of maximum interrupt vectors AXI MSI controller can hold before halting the target interface.

`define CX_MSI_CTRL_FIFO_DEPTH 2



`define CX_MSI_CTRL_EN


`define CX_MSI_CTRL_EN_VALUE 1


// `define CX_MSI_CTRL_EN_AHB


`define CX_MSI_CTRL_EN_AXI


`define CX_MSI_CTRL_EN_AXI_VALUE 1'h1


`define CX_EXTEND_PL


// Name:         CX_PCIE_BRIDGE_ENABLE
// Default:      0x0
// Values:       0x0, 0x1
// Enabled:      0
// 
// Provide support for PCIE to PCI bridge
`define CX_PCIE_BRIDGE_ENABLE 1'h0


// `define CX_PCIE_BRIDGE


// Name:         CX_PIPE_WIDTH_
// Default:      32-bit(4s) (8 * (((CX_GEN4_MODE == GEN4_DW) ?  (CX_NB_GEN3*2) : 
//               CX_NB_GEN3)))
// Values:       8-bit(1s) (8), 16-bit(2s) (16), 32-bit(4s) (32), 64-bit(8s) (64), 
//               128-bit(16s) (128)
// 
// Specifies the lane width (in bits) of the controller PIPE interface before the freq_step module is added (if necessary). 
// Equivalent to 8*CX_NB where CX_NB is the controller PIPE width (bytes) per lane. CX_NB is calculated automatically from 
// CX_FREQ, CX_GEN2_MODE, CX_GEN3_MODE, and CX_GEN4_MODE. CX_NB is the maximum number of "active" symbols (bytes) processed by 
// the controller per clock cycle per lane at the controller PIPE interface. For more details, see Table 1-1 in the 
// "Frequency, Speed, and Width Support" section in the Product Overview chapter of the Databook.
`define CX_PIPE_WIDTH_ 32


// Name:         CX_PHY_PIPE_WIDTH_
// Default:      8-bit(1s) (8 * (((CX_PHY_GEN4_MODE == GEN4_DW) ? (CX_PHY_NB_GEN3*2) 
//               : CX_PHY_NB_GEN3)))
// Values:       8-bit(1s) (8), 16-bit(2s) (16), 32-bit(4s) (32), 64-bit(8s) (64)
// 
// Specifies the lane width (in bits) of the PHY PIPE interface before the freq_step module is added (if necessary). 
// Equivalent to 8*CX_PHY_NB where CX_PHY_NB is the PHY PIPE width (bytes) per lane. CX_PHY_NB is calculated automatically from 
// CX_PHY_FREQ, CX_PHY_GEN2_MODE, CX_PHY_GEN3_MODE, and CX_PHY_GEN4_MODE. CX_PHY_NB is the maximum number of "active" symbols 
// (bytes) processed by the PHY per clock cycle per lane at the PHY PIPE interface. For more details, see Table 1-1 in the 
// "Frequency, Speed, and Width Support" section in the Product Overview chapter of the Databook.
`define CX_PHY_PIPE_WIDTH_ 8


// `define UNPACK_UNREQUIRED_FILES

//www: this is temporarely maintened because it is needed by the test env

// `define NAK_ON_2_STP


// Name:         SLAVE_POPULATED
// Default:      1 ((AMBA_INTERFACE!=0))
// Values:       0, 1
// Enabled:      0
// 
// Indicates that a slave interface is required
`define SLAVE_POPULATED


`define PCIE_CORE_DATA_BUS_WD 128


`define CC_PCIE_CORE_NUM_BYTES 16


// Name:         CX_VEN_MSG_RX_HDR_FORMAT_LEGACY
// Default:      0
// Values:       0, 1
// 
// Bytes 12 to 15 of the vendor message header 
// are output on radm_msg_payload[31:0] in the order received from the wire, 
// i.e. byte 12 is mapped to radm_msg_payload[7:0]. 
// This parameter is defined to maintain backward compatability 
// with GA release 3.90a and prior releases. 
// By default this parameter is not defined post the 3.90a release. 
// Vendor message header bytes 8 to 15 are output on radm_msg_payload[63:0]. 
// and the byte order is reversed to be consistent with the format of message header bytes 
// received on the RTRGT1 interface, i.e. byte 8 is mapped to radm_msg_payload[63:56].
// `define CX_VEN_MSG_RX_HDR_FORMAT_LEGACY


// Name:           CX_PIPE_LOOPBACK_EN
// Default:        Yes ((CX_PCIE_MODE == SINGLE_MPCIE) ? 0 : 1)
// Values:         No (0), Yes (1)
// Enabled:        (!(CX_PCIE_MODE == SINGLE_MPCIE))
// Parameter Type: Feature Setting
// 
// Allows local Loopback from the PIPE TX to PIPE TX in the absence of a link partner. For more details, see the 'Loopback' 
// chapter in the Databook.
`define CX_PIPE_LOOPBACK_EN


// Name:         CX_LOCAL_LOOPBACK_EN
// Default:      1 (CX_RMMI_LOOPBACK_EN || CX_PIPE_LOOPBACK_EN)
// Values:       0, 1
// 
// Local Loopback Enable. This parameter is set if CX_PIPE_LOOPBACK_EN=1 or CX_RMMI_LOOPBACK_EN=1
`define CX_LOCAL_LOOPBACK_EN


// Name:           DEFAULT_GEN3_RXEQ_RGRDLESS_RXTS
// Default:        Yes
// Values:         No (0), Yes (1)
// Enabled:        ((CX_SEL_PHY_MODE  ? (CX_MAX_CPCIE_SPEED >= 3) : CX_S_CPCIE_MODE ? 
//                 (CX_GEN3_MODE != GEN3_DISABLED) : 0))
// Parameter Type: Register Default Setting
// 
// When set to '1', the controller as Gen3 EQ master asserts RxEqEval to instruct the PHY to do Rx adaptation and 
// evaluation after a 500ns timeout from a new preset request. 
//  
// This is the default of the RXEQ_RGRDLESS_RXTS field in GEN3_RELATED_OFF when in Gen3 mode.
`define DEFAULT_GEN3_RXEQ_RGRDLESS_RXTS 1


// Name:           DEFAULT_GEN4_RXEQ_RGRDLESS_RXTS
// Default:        Yes
// Values:         No (0), Yes (1)
// Enabled:        ((CX_GEN4_MODE != GEN4_DISABLED))
// Parameter Type: Register Default Setting
// 
// When set to '1', the controller as Gen4 EQ master asserts RxEqEval to instruct the PHY to do Rx adaptation and 
// evaluation after a 500ns timeout from a new preset request. 
//  
// This is the default of the RXEQ_RGRDLESS_RXTS field in GEN3_RELATED_OFF when in Gen4 mode.
`define DEFAULT_GEN4_RXEQ_RGRDLESS_RXTS 1


// Name:           CX_GEN3_EQ_PSET_COEF_MAP_MODE
// Default:        Dynamic PHY
// Values:         Dynamic PHY (0), Dynamic MAC (1), Programmable Table (2)
// Enabled:        ((CX_SEL_PHY_MODE  ? (CX_MAX_CPCIE_SPEED >= 3) : CX_S_CPCIE_MODE ? 
//                 (CX_GEN3_MODE != GEN3_DISABLED) : 0))
// Parameter Type: Feature Setting
// 
// For Gen3/Gen4 equalization, there are three possible implementations for the mapping of presets to coefficients: 
//  - Dynamic PHY: The coefficients are dynamically mapped in the PHY. 
//  - Dynamic MAC: The coefficients are dynamically mapped in the MAC. 
//  - Programmable Table: The coefficients are programmed in a table by your application. 
// The coefficients obtained from a preset are then used to drive the mac_phy_txdeemph[17:0] output in the transmit path 
// of the relevant port. 
//  
// Note: Gen3 and Gen4 cannot use different mapping modes.
`define CX_GEN3_EQ_PSET_COEF_MAP_MODE 0


// Name:           DEFAULT_GEN3_REQ_SEND_CONSECUTIVE_EIEOS_FOR_PSET_MAP
// Default:        Yes
// Values:         No (0), Yes (1)
// Enabled:        ((CX_SEL_PHY_MODE  ? (CX_MAX_CPCIE_SPEED >= 3) : CX_S_CPCIE_MODE ? 
//                 (CX_GEN3_MODE != GEN3_DISABLED) : 0))
// Parameter Type: Register Default Setting
// 
// For Gen3 equalization, when set to '1', the controller is requested to send consecutive EIEOS for preset-coefficients 
// mapping in Recovery.RcvrLock if EQ is pending. 
//  
// This is the default of the GEN3_REQ_SEND_CONSEC_EIEOS_FOR_PSET_MAP field in GEN3_EQ_CONTROL_OFF when in Gen3 mode.
`define DEFAULT_GEN3_REQ_SEND_CONSECUTIVE_EIEOS_FOR_PSET_MAP 1'd1


// Name:           DEFAULT_GEN4_REQ_SEND_CONSECUTIVE_EIEOS_FOR_PSET_MAP
// Default:        Yes
// Values:         No (0), Yes (1)
// Enabled:        ((CX_GEN4_MODE != GEN4_DISABLED))
// Parameter Type: Register Default Setting
// 
// For Gen4 equalization, when set to '1', the controller is requested to send consecutive EIEOS for preset-coefficients 
// mapping in Recovery.RcvrLock if EQ is pending. 
//  
// This is the default of the GEN3_REQ_SEND_CONSEC_EIEOS_FOR_PSET_MAP field in GEN3_EQ_CONTROL_OFF when in Gen4 mode.
`define DEFAULT_GEN4_REQ_SEND_CONSECUTIVE_EIEOS_FOR_PSET_MAP 1'd1


// Name:           DEFAULT_GEN3_EQ_LOCAL_FS
// Default:        48
// Values:         12, ..., 63
// Enabled:        CX_GEN3_SPEED && CX_GEN3_EQ_PSET_COEF_MAP_MODE==2
// Parameter Type: Register Default Setting
// 
// When the Gen3 Equalization Presets to Coefficients Mapping Mode is Programmable Table, this parameter is used to set the 
// default local Full Swing (FS) value for Gen3 data rate. The FS value is specific to the PHY implementation. It is needed 
// by the controller because it is advertised during Gen3 equalization Phase 1, and it is used to determine if the 
// coefficients meet the rules, as described in Rules for Transmitter Coefficients, section 4.2.3.1 of the PCI Express Base 
// Specification, Rev 3.0. 
// This is the default of the GEN3_EQ_LOCAL_FS field in GEN3_EQ_LOCAL_FS_LF_OFF when in Gen3 mode.
`define DEFAULT_GEN3_EQ_LOCAL_FS 6'd48


// Name:           DEFAULT_GEN3_EQ_LOCAL_LF
// Default:        24
// Values:         0, ..., 63
// Enabled:        CX_GEN3_SPEED && CX_GEN3_EQ_PSET_COEF_MAP_MODE==2
// Parameter Type: Register Default Setting
// 
// When the Gen3 Equalization Presets to Coefficients Mapping Mode is Programmable Table, this parameter is used to set the 
// default local Low Frequency (LF) value for Gen3 data rate. The LF value is specific to the PHY implementation. It is 
// needed by the controller because it is advertised during Gen3 equalization Phase1, and it is used to determine if the 
// coefficients meet the rules, as described in Rules for Transmitter Coefficients, section 4.2.3.1 of the PCI Express Base 
// Specification, Rev 3.0. 
// This is the default of the GEN3_EQ_LOCAL_LF field in GEN3_EQ_LOCAL_FS_LF_OFF when in Gen3 mode.
`define DEFAULT_GEN3_EQ_LOCAL_LF 6'd24


// Name:           DEFAULT_GEN4_EQ_LOCAL_FS
// Default:        48
// Values:         12, ..., 63
// Enabled:        CX_GEN4_SPEED && CX_GEN3_EQ_PSET_COEF_MAP_MODE==2
// Parameter Type: Register Default Setting
// 
// When the Gen3 Equalization Presets to Coefficients Mapping Mode is Programmable Table, this parameter is used to set the 
// default local Full Swing (FS) value for Gen4 data rate. The FS value is specific to the PHY implementation. It is needed 
// by the controller because it is advertised during Gen4 equalization Phase 1, and it is used to determine if the 
// coefficients meet the rules, as described in Rules for Transmitter Coefficients, section TBD of the PCI Express Base Specification, 
// Rev 4.0. 
// This is the default of the GEN3_EQ_LOCAL_FS field in GEN3_EQ_LOCAL_FS_LF_OFF when in Gen4 mode.
`define DEFAULT_GEN4_EQ_LOCAL_FS 6'd48


// Name:           DEFAULT_GEN4_EQ_LOCAL_LF
// Default:        24
// Values:         0, ..., 63
// Enabled:        CX_GEN4_SPEED && CX_GEN3_EQ_PSET_COEF_MAP_MODE==2
// Parameter Type: Register Default Setting
// 
// When the Gen3 Equalization Presets to Coefficients Mapping Mode is Programmable Table, this parameter is used to set the 
// default local Low Frequency (LF) value for Gen4 data rate. The LF value is specific to the PHY implementation. It is 
// needed by the controller because it is advertised during Gen4 equalization Phase1, and it is used to determine if the 
// coefficients meet the rules, as described in Rules for Transmitter Coefficients, section TBD of the PCI Express Base 
// Specification, Rev 4.0. 
// This is the default of the GEN3_EQ_LOCAL_LF field in GEN3_EQ_LOCAL_FS_LF_OFF when in Gen4 mode.
`define DEFAULT_GEN4_EQ_LOCAL_LF 6'd24


// Name:           CX_GEN3_EQ_PSET_COEF_MAP_MODE_PROG
// Default:        0 (CX_GEN3_EQ_PSET_COEF_MAP_MODE==2)
// Values:         0, 1
// Parameter Type: Feature Setting
// 
// When enabled, transmit coefficients are obtained from a programmable table for Gen3 equalization. 
// This parameter is shared for Gen3/4 modes.
// `define CX_GEN3_EQ_PSET_COEF_MAP_MODE_PROG


// Name:         CX_GEN3_EQ_PSET_COEF_MAP_MODE_PROG_APP
// Default:      0
// Values:       0, 1
// 
// Adds support for controlling the coefficients requested when doing Gen3 EQ master. 
// This parameter is shared for Gen3/4 modes.
// `define CX_GEN3_EQ_PSET_COEF_MAP_MODE_PROG_APP


// Name:         CX_GEN3_EQ_PSET_COEF_MAP_MODE_MAC
// Default:      0 (CX_GEN3_EQ_PSET_COEF_MAP_MODE==1)
// Values:       0, 1
// 
// When enabled, transmit coefficients are obtained from 
// the MAC, dynamically, for Gen3 equalization. 
// This parameter is shared for Gen3/4 modes.
// `define CX_GEN3_EQ_PSET_COEF_MAP_MODE_MAC


// Name:         CX_GEN3_EQ_PSET_COEF_MAP_MODE_PHY
// Default:      1 (CX_GEN3_EQ_PSET_COEF_MAP_MODE==0)
// Values:       0, 1
// 
// When enabled, transmit coefficients are obtained from 
// the PHY for Gen3 equalization. 
// This parameter is shared for Gen3/4 modes.
`define CX_GEN3_EQ_PSET_COEF_MAP_MODE_PHY


// Name:           CX_GEN3_EQ_COEF_CONV_SUPPORTED
// Default:        false ((CX_SEL_PHY_MODE  ? (CX_MAX_CPCIE_SPEED >= 3) : 
//                 CX_S_CPCIE_MODE ? (CX_GEN3_MODE != GEN3_DISABLED) : 0))
// Values:         false (0), true (1)
// Enabled:        ((CX_SEL_PHY_MODE  ? (CX_MAX_CPCIE_SPEED >= 3) : CX_S_CPCIE_MODE ? 
//                 (CX_GEN3_MODE != GEN3_DISABLED) : 0))
// Parameter Type: Feature Setting
// 
// When enabled the controller implements additional logic for checking that the fine tuning process of the remote 
// transmitter that is executed during Phase 2 (when controller is USP) or Phase 3 (core is DSP) is converging toward a stable point. 
// This setting is both for Gen3 and Gen4. Gen3 and Gen4 cannot have different settings.
// `define CX_GEN3_EQ_COEF_CONV_SUPPORTED


// Name:           CX_GEN3_EQ_COEFQ_DEPTH
// Default:        2
// Values:         2, ..., 16
// Enabled:        (CX_GEN3_SPEED && (CX_GEN3_EQ_COEF_CONV_SUPPORTED == 1))
// Parameter Type: Feature Setting
// 
// When Equalization Convergence Support (CX_GEN3_EQ_COEF_CONV_SUPPORTED) is enabled , this parameter provides the depth of 
// the queue used to store the coefficients in use by the remote transmitter in successive evaluation cycles. The queue is 
// used to check if the successive coefficient values are converging toward a stable value. This setting is both for Gen3 and 
// Gen4. Gen3 and Gen4 cannot have different setting.
`define CX_GEN3_EQ_COEFQ_DEPTH 2


`define FS_DIV_10 6'h5


`define FS_DIV_8 6'h6


`define FS_DIV_6 6'h8


`define FS_DIV_5 6'ha


`define FS_DIV_4 6'hc


`define P10_PSTC 6'hc


`define GEN4_FS_DIV_10 6'h5


`define GEN4_FS_DIV_8 6'h6


`define GEN4_FS_DIV_6 6'h8


`define GEN4_FS_DIV_5 6'ha


`define GEN4_FS_DIV_4 6'hc


`define GEN4_P10_PSTC 6'hc


`define DEFAULT_CURSOR_P0 6'h24


`define DEFAULT_CURSOR_P1 6'h28


`define DEFAULT_CURSOR_P2 6'h26


`define DEFAULT_CURSOR_P3 6'h2a


`define DEFAULT_CURSOR_P4 6'h30


`define DEFAULT_CURSOR_P5 6'h2b


`define DEFAULT_CURSOR_P6 6'h2a


`define DEFAULT_CURSOR_P7 6'h21


`define DEFAULT_CURSOR_P8 6'h24


`define DEFAULT_CURSOR_P9 6'h28


`define DEFAULT_CURSOR_P10 6'h24


`define DEFAULT_GEN4_CURSOR_P0 6'h24


`define DEFAULT_GEN4_CURSOR_P1 6'h28


`define DEFAULT_GEN4_CURSOR_P2 6'h26


`define DEFAULT_GEN4_CURSOR_P3 6'h2a


`define DEFAULT_GEN4_CURSOR_P4 6'h30


`define DEFAULT_GEN4_CURSOR_P5 6'h2b


`define DEFAULT_GEN4_CURSOR_P6 6'h2a


`define DEFAULT_GEN4_CURSOR_P7 6'h21


`define DEFAULT_GEN4_CURSOR_P8 6'h24


`define DEFAULT_GEN4_CURSOR_P9 6'h28


`define DEFAULT_GEN4_CURSOR_P10 6'h24





// `define CX_IS_SW_OR_FSL_ENHANCED_IO


// Name:         DEFAULT_GEN3_ZRXDC_NONCOMPL
// Default:      0x1
// Values:       0x0, 0x1
// 
// Default value of cfg_pl_gen3_zrxdc_noncompl bit in CDM Port Logic 
// registers. When set, PHY does not comply with 2.5 GT/s receiver impedance when 
// in 8 GT/s mode (8GT/s Receiver impedance ECN). 
// This parameter is shared for Gen3/4 mode.
`define DEFAULT_GEN3_ZRXDC_NONCOMPL 1'h1


// Name:           CX_DPA_ENABLE
// Default:        false
// Values:         false (0), true (1)
// Enabled:        Always
// Parameter Type: Feature Setting
// 
// Function:  Support the Dynamic Power Allocation (DPA) capability.
// `define CX_DPA_ENABLE


`define CX_DPA_ENABLE_VALUE 1'h0


// `define RX_SKP_ADJUSTMENT_ENABLE

//Use Internal ATU Memory Type Decoding
//Currently disabled since this is not yet implemented in the ATU

// `define CC_ATU_MEMTYPE_DECODE_ENABLE


`define CC_ADDR_MEMTYPE_DECODE_ENABLE



// Name:         CX_PHY_RXELECIDLE_SQUELCH
// Default:      1
// Values:       0, 1
// 
// Function: When defined the rxelecidle squelch module is instantiated in the Core to process rxelecidle before using it 
// inside the Core.
`define CX_PHY_RXELECIDLE_SQUELCH


// Name:         CX_PHY_POSEDGE_PHYSTATUS_LOGIC
// Default:      1 (CX_S_CPCIE_MODE || CX_SEL_PHY_MODE)
// Values:       0, 1
// 
// Function: When defined the active high phy_status in DWC_pcie_clkrst module is caught in P2 when phy cannot guarantee 
// pclk edges are provided.
`define CX_PHY_POSEDGE_PHYSTATUS_LOGIC



// Name:           CX_PIPE43_SUPPORT
// Default:        false
// Values:         false (0), true (1)
// Enabled:        ((CX_S_CPCIE_MODE || CX_SEL_PHY_MODE))
// Parameter Type: Feature Setting
// 
// Enables support for PIPE 4.3 
//  
// Note: The controller supports two interface options for L1 substate. 
//  - PIPE 4.2 + Sideband signals. 
//  - PIPE 4.3. 
// Contact your PHY vendor for guidelines on L1 substates. Refer to the User Guide for guidelines on how to configure this 
// parameter for Synopsys PHYs.
`define CX_PIPE43_SUPPORT


// Name:           CX_PIPE43_ASYNC_HS_BYPASS
// Default:        0
// Values:         0, 1
// Enabled:        CX_PIPE43_SUPPORT && CX_L1_SUBSTATES_ENABLE
// Parameter Type: Feature Setting
// 
// Bypass the handshake between phystatus and AsyncPowerChangeAck in P1.1 or P1.2 powerdown state when your PHY vendor does 
// not support it.
`define CX_PIPE43_ASYNC_HS_BYPASS


// Name:           CX_PIPE43_P1CPM_ENCODING
// Default:        0x4
// Values:         0x0, ..., 0xf
// Enabled:        CX_PIPE43_SUPPORT
// Parameter Type: Feature Setting
// 
// Powerdown state encoding on the mac_phy_powerdown[3:0] output for P1.CPM. Contact your PHY vendor for the value that you 
// should use.
`define CX_PIPE43_P1CPM_ENCODING 4'h4


// Name:           CX_PIPE43_P1_1_ENCODING
// Default:        0x5
// Values:         0x4, ..., 0xf
// Enabled:        CX_PIPE43_SUPPORT && CX_L1_SUBSTATES_ENABLE
// Parameter Type: Feature Setting
// 
// Powerdown state encoding on the mac_phy_powerdown[3:0] output for P1.1. Contact your PHY vendor for the value that you 
// should use.
`define CX_PIPE43_P1_1_ENCODING 4'h5


// Name:           CX_PIPE43_P1_2_ENCODING
// Default:        0x6
// Values:         0x4, ..., 0xf
// Enabled:        CX_PIPE43_SUPPORT && CX_L1_SUBSTATES_ENABLE
// Parameter Type: Feature Setting
// 
// Powerdown state encoding on the mac_phy_powerdown[3:0] output for P1.2. Contact your PHY vendor for the value that you 
// should use.
`define CX_PIPE43_P1_2_ENCODING 4'h6


// Name:           CX_PIPE43_P0_P1CPM
// Default:        0
// Values:         0, 1
// Enabled:        CX_PIPE43_SUPPORT
// Parameter Type: Feature Setting
// 
// Specifies P1.CPM Entry sequence. Contact your PHY vendor for the sequence that you should use. If you use the Synopsys 
// C8/C10 PHY, then you must set this parameter to "0". 
//  - 0: P0 -> P1 -> P1.CPM 
//  - 1: P0 -> P1.CPM
`define CX_PIPE43_P0_P1CPM


// Name:           CX_RXSTANDBY_CONTROL
// Default:        0x37 ((PHY_TYPE==CC_GENERIC_PHY) ? (CX_PIPE43_SUPPORT==1) ? 0x37 : 
//                 0x3F : 0x44)
// Values:         0x0, ..., 0x7f
// Enabled:        CX_CPCIE_ENABLE && PHY_TYPE!=CC_GENERIC_PHY
// Parameter Type: Feature Setting
// 
// Bits 0..5 determine if the controller asserts the RxStandby signal (mac_phy_rxstandby) in the indicated condition. 
//  
// Bit 6 enables the controller to perform the RxStandby/RxStandbyStatus handshake. 
//  - [0]: Rx EIOS and subsequent T TX-IDLE-MIN 
//  - [1]: Rate Change 
//  - [2]: Inactive lane for upconfigure/downconfigure 
//  - [3]: PowerDown=P1orP2 (When CX_PIPE43_SUPPORT==1, this bit must be set to 0) 
//  - [4]: RxL0s.Idle 
//  - [5]: EI Infer in L0 
//  - [6]: Execute RxStandby/RxStandbyStatus Handshake 
// Note: Contact your PHY vendor for guidelines on how to properly configure the RxStandby behavior. Refer to the User 
// Guide for guidelines on how to configure this parameter for Synopsys PHYs.
`define CX_RXSTANDBY_CONTROL 7'h37


// Name:           CX_RXSTANDBY_DEFAULT
// Default:        1 (PHY_TYPE==CC_GENERIC_PHY)
// Values:         0 1
// Enabled:        CX_CPCIE_ENABLE && PHY_TYPE!=CC_GENERIC_PHY
// Parameter Type: Feature Setting
// 
// Default value of RxStandby signal (mac_phy_rxstandby) on all lanes after reset. 
//  
// Note: Contact your PHY vendor for guidelines on how to properly configure the RxStandby behavior. Refer to the User 
// Guide for guidelines on how to configure this parameter for Synopsys PHYs.
`define CX_RXSTANDBY_DEFAULT 1'h1



//-/ =================================================================
//-/ Advanced Power Management Configuration
//-/ =================================================================
//

// Name:           CX_ENHANCED_PM_EN
// Default:        false
// Values:         false (0), true (1)
// Enabled:        ((CX_CPCIE_ENABLE || CM_MPCIE_APM_PHASE3_ENABLE || 
//                 !CM_SNPS_MPHY_ENABLE) && !(AMBA_INTERFACE==1))
// Parameter Type: Feature Setting
// 
// Enables support for power gating using the UPF flow.
// `define CX_ENHANCED_PM_EN


// Name:           CX_PHY_ENHANCED_PM_EN
// Default:        false (CX_ENHANCED_PM_EN)
// Values:         false (0), true (1)
// Enabled:        ((CX_S_CPCIE_MODE || CX_SEL_PHY_MODE))
// Parameter Type: Feature Setting
// 
// Enable power gating support in the PHY. When setting this parameter the PHY 
// UPF will be read in during PHY interoperability testing. If using a third 
// party PHY, you need to setup the PHY UPF following the guidelines provided 
// in the User Guide, "Integrating the controller with the PHY".
// `define CX_PHY_ENHANCED_PM_EN


// Name:           CX_EXISTS_VAUX
// Default:        0
// Values:         0, 1
// Enabled:        CX_ENHANCED_PM_EN || CX_PHY_ENHANCED_PM_EN
// Parameter Type: Feature Setting
// 
// Indicates that VAUX power domain is available in L2 when VMAIN is removed.
// `define CX_EXISTS_VAUX


// Name:           CX_L2_PG_EN
// Default:        0 ((CX_EXISTS_VAUX) ? 1 : 0)
// Values:         0, 1
// Enabled:        CX_EXISTS_VAUX
// Parameter Type: Feature Setting
// 
// Indicates that power gating in L2 is supported
// `define CX_L2_PG_EN


// Name:           CX_PHY_L2_PG_EN
// Default:        0 (CX_L2_PG_EN)
// Values:         0, 1
// Enabled:        CX_PHY_ENHANCED_PM_EN && CX_EXISTS_VAUX
// Parameter Type: Feature Setting
// 
// Indicates that power gating is supported in the PHY in L2
// `define CX_PHY_L2_PG_EN


// Name:           CX_BEACON_SUPPORT
// Default:        0
// Values:         0, 1
// Enabled:        CX_ENHANCED_PM_EN && CX_CPCIE_ENABLE
// Parameter Type: Feature Setting
// 
// If the PHY being used supports the beacon mechanism for wakeup from L2 
//  this parameter should be set to 1
// `define CX_BEACON_SUPPORT


// Name:           CX_L12_PG_EN
// Default:        0
// Values:         0, 1
// Enabled:        ((CX_ENHANCED_PM_EN) && (CX_L1_SUBSTATES_ENABLE || 
//                 CX_MPCIE_ENABLE))
// Parameter Type: Feature Setting
// 
// Enable support for power-gating L1 sub-states (L1.2) in C-PCIe or L1 in M-PCIe. 
// If you want to disable L1 power gating in real-time, set app_l1_pwr_off_en =0.
// `define CX_L12_PG_EN


// Name:           CX_PHY_L1_PG_EN
// Default:        0 (CX_L12_PG_EN)
// Values:         0, 1
// Enabled:        ((CX_PHY_ENHANCED_PM_EN) && (CX_L1_SUBSTATES_ENABLE))
// Parameter Type: Feature Setting
// 
// Enable support for power-gating L1 sub-states (L1.2) in C-PCIe PHY.
// `define CX_PHY_L1_PG_EN


// Name:           CX_L1_RETENTION
// Default:        Power Islands
// Values:         Power Islands (0), Retention Registers (1)
// Enabled:        (CX_L12_PG_EN && (CX_L1_SUBSTATES_ENABLE || CX_MPCIE_ENABLE))
// Parameter Type: Feature Setting
// 
// Select always-on power islands or retention registers for L1 power gating. 
// If you want to disable L1 power gating, set app_l1_pwr_off_en =0.
// `define CX_L1_RETENTION


// Name:           CX_RETENTION_TYPE
// Default:        Balloon Retention
// Values:         Single Pin Retention (1), Balloon Retention (2)
// Enabled:        CX_L1_RETENTION
// Parameter Type: Feature Setting
// 
// This parameter determines the type of retention register inferred in the UPF file for L1 power gating.
`define CX_RETENTION_TYPE 2


// Name:           CX_LEVEL_SHIFT_EN
// Default:        0
// Values:         0, 1
// Enabled:        CX_ENHANCED_PM_EN && CX_L2_PG_EN
// Parameter Type: Feature Setting
// 
// Enable level shifting on the boundary between VAUX and VMAIN power domains
// `define CX_LEVEL_SHIFT_EN


// Name:           CX_PSW_EN_ACTIVE_LOW
// Default:        LOW
// Values:         LOW (0), HIGH (1)
// Enabled:        CX_L12_PG_EN
// Parameter Type: Feature Setting
// 
// Determine the polarity and naming of the power switch enable output. 
//  - 0: pm_en_vmain_n 
//  - 1: pm_en_vmain
// `define CX_PSW_EN_ACTIVE_LOW


// Name:           CM_STORE_MPHY_ATTR_ENABLE
// Default:        0 ((CX_MPCIE_ENABLE && CX_ENHANCED_PM_EN && CM_SNPS_MPHY_ENABLE && 
//                 CM_MPCIE_APM_PHASE3_ENABLE) ? 1 : 0)
// Values:         0, 1
// Enabled:        CX_ENHANCED_PM_EN && CX_MPCIE_ENABLE && CM_MPCIE_APM_PHASE3_ENABLE
// Parameter Type: Feature Setting
// 
// Enable saving/restoring of M-PHY registers during L1 power removal when M-PHY power is off.
// `define CM_STORE_MPHY_ATTR_ENABLE


// Name:           CC_MAX_MSTR_TAGS_AXI
// Default:        32
// Values:         2 4 8 16 32 64 128 256
// Enabled:        ((AMBA_INTERFACE==2) || (AMBA_INTERFACE==3))
// Parameter Type: Performance Setting
// 
// Represents the maximum number of AXI master IDs and the maximum number of outstanding NP transactions the AXI bridge can 
// handle. 
// It is used to size the master completion RAM which can be large if CC_MAX_MSTR_TAGS_AXI is large. You should set 
// CC_MAX_MSTR_TAGS_AXI to the minimum number of outstanding AXI requests that are required to saturate the AXI bus and/or supply 
// the throughput required by the core. If decomposition occurs, the number of simultaneously outstanding AXI requests is 
// larger than this value. 
// For more details, see the 'Inbound Bridge Tag Management' section in the AXI Bridge chapter of the Databook. This 
// parameter is used to size the master ID busses with the value log2{CC_MAX_MSTR_TAGS_AXI}.
`define CC_MAX_MSTR_TAGS_AXI 32


// Name:         CC_MAX_MSTR_TAGS_AHB
// Default:      1
// Values:       -2147483648, ..., 2147483647
// Enabled:      0
// 
// Represents the maximum number of outstanding NP transactions the AHB bridge can handle.
`define CC_MAX_MSTR_TAGS_AHB 1


`define CC_MAX_MSTR_TAGS 32

//-/ =================================================================
//-/ TRGT CPL LUT
//-/ =================================================================


// Name:           TRGT_CPL_LUT_EN
// Default:        true ((CC_DMA_ENABLE) ? 1 : (AMBA_POPULATED) ? 1 : 0)
// Values:         false (0), true (1)
// Enabled:        ((TRGT1_POPULATE==1 && !(CC_DMA_ENABLE)  && CX_P2P_ENABLE==0 && 
//                 AMBA_POPULATED==0))
// Parameter Type: Feature Setting
// 
// Enable the Target Completion Lookup Table to be connected internally between the RTRGT1 and XALI0/1/2 interfaces. This 
// feature provides two functions: 
//  - The application does not need to provide certain TLP header information when transmitting completions on XALI0/1/2 
//  because the controller stores and tracks the information in the internal Target Completion Lookup Table. 
//  - When the application has not generated a completion for an incoming request within the required time interval, then 
//  the Target Completion Timeout indicates that a Timeout has occurred. 
// The Target Completion Lookup Table (and Target Completion Timeout event) should not be confused with the Completion 
// Lookup table (and Completion Timeout event) described in 'Received Completion TLP Processing' in the Databook. For more 
// details, see the 'Target Completion Lookup Table' section of the "Signal Interfaces" chapter of the Databook. The size of the 
// this LUT is controlled using the 'Max Forwarded NP Requests' (CX_REMOTE_MAX_TAG) parameter. 
// Note: This feature is not available if Peer-to-Peer support is enabled. 
// Note: When the AXI bridge is used (AMBA_INTERFACE=1, 2 or 3) or when DMA is enabled, the Target Completion Lookup Table 
// is automatically activated.
`define TRGT_CPL_LUT_EN


// Name:           CX_CPL_LUT_CPL_ID
// Default:        1 (AMBA_POPULATED && (CX_SRIOV_ENABLE || CX_ARI_ENABLE))
// Values:         0, 1
// Enabled:        TRGT_CPL_LUT_EN
// Parameter Type: Feature Setting
// 
// Enables the target completion LUT to generate the completer ID 
//  instead of having it provided on the client interface
`define CX_CPL_LUT_CPL_ID

//Use Combo Box

// Name:           CX_REMOTE_MAX_TAG
// Default:        32_Tags (AHB_POPULATED ? 1 : (AXI_POPULATED ? CC_MAX_MSTR_TAGS - 1 
//                 : ((CX_MAX_TAG == 767) ? 1023 : CX_MAX_TAG)))
// Values:         2_Tags (1), 4_Tags (3), 8_Tags (7), 16_Tags (15), 32_Tags (31), 
//                 64_Tags (63), 128_Tags (127), 256_Tags (255), 512_Tags (511), 1024_Tags 
//                 (1023)
// Enabled:        ((AMBA_POPULATED) ? 0 : (TRGT_CPL_LUT_EN))
// Parameter Type: Performance Setting
// 
// The function depends on the nature of the application interface. 
//  - AXI: You should leave this parameter at its default value. 
//  - Native core: Specifies the maximum number of received non-posted requests that the controller will forward to your 
//  application at one time, when the Target Completion LUT (TRGT_CPL_LUT_EN) is enabled. The default value is sufficient for 
//  typical applications. It does not control the number of non-posted requests that the controller can receive and buffer from 
//  the PCIe wire, which is controlled by flow control credits.
`define CX_REMOTE_MAX_TAG 31


// Name:           CX_REMOTE_MAX_TAGS
// Default:        32 (CX_REMOTE_MAX_TAG+1)
// Values:         2 4 8 16 32 64 128 256 512 1024
// Enabled:        0
// Parameter Type: Feature Setting
// 
// Represents the maximum total number of simultaneously outstanding non-posted inbound PCIe requests forwarded by the 
// bridge onto the AXI fabric. This is a read-only copy of CX_REMOTE_MAX_TAG.
`define CX_REMOTE_MAX_TAGS 32


// Name:         CX_REMOTE_LUT_PTR_WIDTH
// Default:      5 ([calc_log2 CX_REMOTE_MAX_TAG])
// Values:       -2147483648, ..., 2147483647
// 
// This is the width of the MAG_TAG bus.
`define CX_REMOTE_LUT_PTR_WIDTH 5


// Name:           CX_10BITS_TAG
// Default:        0 ((((CX_GEN4_SPEED_VALUE == 1) || (CX_MAX_TAG > 255) || 
//                 (CX_REMOTE_MAX_TAG > 255)) && (AMBA_INTERFACE != 1))? 1: 0)
// Values:         0, 1
// Enabled:        AMBA_INTERFACE != 1
// Parameter Type: Feature Setting
// 
// Configure the controller to support the extended tag range using a 10-bit tag field.
// `define CX_10BITS_TAG


// Name:         CX_TAG_SIZE
// Default:      8 ((CX_10BITS_TAG== 1)? 10: 8)
// Values:       8, ..., 10
// Enabled:      0
// 
// Read only parameter to define the width of TLP tag field
`define CX_TAG_SIZE 8


// Name:         CX_10BITS_TAG_REQ
// Default:      0 ((CX_10BITS_TAG== 1 && CX_MAX_TAG > 255)? 1: 0)
// Values:       0, 1
// 
// Read only parameter to determine if 10 bits tag requester function is supported - depends on CX_MAX_TAG
// `define CX_10BITS_TAG_REQ


// Name:         CX_10BITS_TAG_REQ_VALUE
// Default:      0 (((CX_10BITS_TAG== 1 && CX_MAX_TAG > 255)? 1: 0 == 1)? 1: 0)
// Values:       -2147483648, ..., 2147483647
// 
// Read only parameter to hold the value if CX_10BITS_TAG_REQ
`define CX_10BITS_TAG_REQ_VALUE 0


// Name:         CX_10BITS_TAG_VALUE
// Default:      0 ((CX_10BITS_TAG == 1)? 1: 0)
// Values:       -2147483648, ..., 2147483647
// Enabled:      0
// 
// If CX_10BITS_TAG is defined then this parameter is 1; otherwise it is 0
`define CX_10BITS_TAG_VALUE 0


// Name:         CX_REMOTE_LOOKUPID_WD
// Default:      8 ((CC_DMA_ENABLE) ? 8 : (AMBA_POPULATED) ? 8 : (CX_10BITS_TAG) ? 
//               10 : 8)
// Values:       -2147483648, ..., 2147483647
// 
// This is the width of the LOOKUP_ID buses in the target_cpl_lut module.
`define CX_REMOTE_LOOKUPID_WD 8


// Name:         CX_RASDP_TRGT1_HDR_WD
// Default:      0 (CX_RASDP_EN ? (CX_IS_SW ? CX_ATU_CTRL_EN && (CX_RADMQ_MODE==2) ? 
//               51 + FLT_Q_ADDR_WIDTH : 50 + FLT_Q_ADDR_WIDTH : CX_IS_RC ? 
//               CX_ATU_CTRL_EN && (CX_RADMQ_MODE==2) ? 52  + FLT_Q_ADDR_WIDTH : 51  + 
//               FLT_Q_ADDR_WIDTH : CX_ATU_CTRL_EN && (CX_RADMQ_MODE==2) ? 56 + 
//               FLT_Q_ADDR_WIDTH : 55 + FLT_Q_ADDR_WIDTH) + CX_TAG_SIZE + (ATS_RX_ENABLE_VALUE*2) + 
//               FLT_Q_ADDR_WIDTH + (CX_TPH_ENABLE_VALUE*11) + 
//               ((CX_NVFUNC_EWD+1)*CX_SRIOV_ENABLE_VALUE) + CX_NFUNC_WD + FLT_Q_ATTR_WIDTH +CX_LN_VALUE: 0)
// Values:       -2147483648, ..., 2147483647
// 
// Total width of the header fields protected in the TARGET interface
`define CX_RASDP_TRGT1_HDR_WD 0


// Name:         CX_RASDP_TRGT1_HDR_PROT_WD
// Default:      0 ((CX_RASDP_EN==1)? [<functionof> CX_RASDP_TRGT1_HDR_WD 
//               CX_RAS_PROT_RANGE RAS_BASE_PROT_WD ]: 0)
// Values:       -2147483648, ..., 2147483647
// 
// Width of the protection code covering the header fields protected in the TARGET interface
`define CX_RASDP_TRGT1_HDR_PROT_WD 0


// Name:         CX_RASDP_TRGT1_HDR_WD_NON_RC
// Default:      0 (CX_RASDP_EN? (CX_IS_SW ? CX_ATU_CTRL_EN && (CX_RADMQ_MODE==2) ? 
//               51 + FLT_Q_ADDR_WIDTH : 50 + FLT_Q_ADDR_WIDTH : CX_ATU_CTRL_EN && 
//               (CX_RADMQ_MODE==2) ? 56 + FLT_Q_ADDR_WIDTH : 55 + FLT_Q_ADDR_WIDTH) + 
//               CX_TAG_SIZE + (ATS_RX_ENABLE_VALUE*2) + FLT_Q_ADDR_WIDTH + 
//               (CX_TPH_ENABLE_VALUE*11) + ((CX_NVFUNC_EWD+1)*CX_SRIOV_ENABLE_VALUE) + 
//               CX_NFUNC_WD + FLT_Q_ATTR_WIDTH +CX_LN_VALUE: 0)
// Values:       -2147483648, ..., 2147483647
// 
// Total width of the header fields protected in the TARGET interface - all products except RC
`define CX_RASDP_TRGT1_HDR_WD_NON_RC 0


// Name:         CX_RASDP_TRGT1_HDR_PROT_WD_NON_RC
// Default:      0 ((CX_RASDP_EN==1)? [<functionof> CX_RASDP_TRGT1_HDR_WD_NON_RC 
//               CX_RAS_PROT_RANGE RAS_BASE_PROT_WD ]: 0)
// Values:       -2147483648, ..., 2147483647
// 
// Width of the protection code covering the header fields protected in the TARGET interface - all products except RC
`define CX_RASDP_TRGT1_HDR_PROT_WD_NON_RC 0


// Name:         CX_RASDP_BYPASS_HDR_WD
// Default:      0 ((CX_RASDP_EN)? ((CX_IS_SW)? 50: 55) + CX_TAG_SIZE + 
//               (ATS_RX_ENABLE_VALUE*2) + FLT_Q_ADDR_WIDTH + (CX_TPH_ENABLE_VALUE*11) + 
//               ((CX_NVFUNC_EWD+1)*CX_SRIOV_ENABLE_VALUE) + CX_NFUNC_WD + FLT_Q_ATTR_WIDTH 
//               +CX_LN_VALUE: 0)
// Values:       -2147483648, ..., 2147483647
// 
// Total width of the header fields protected in the BYPASS interface
`define CX_RASDP_BYPASS_HDR_WD 0


// Name:         CX_RASDP_BYPASS_HDR_PROT_WD
// Default:      0 ((CX_RASDP_EN==1)? [<functionof> CX_RASDP_BYPASS_HDR_WD 
//               CX_RAS_PROT_RANGE RAS_BASE_PROT_WD ]: 0)
// Values:       -2147483648, ..., 2147483647
// 
// Width of the protection code covering the header fields protected in the BYPASS interface
`define CX_RASDP_BYPASS_HDR_PROT_WD 0


// Name:         FLT_Q_TAG_WIDTH
// Default:      8 ((CX_10BITS_TAG== 1)? 10: 8)
// Values:       8, ..., 10
// 
// number of bits for Filter field FLT_Q_TAG
`define FLT_Q_TAG_WIDTH 8


// Name:         FLT_Q_COMMON_WIDTH
// Default:      43 ([calc_flt_q_common_width FLT_Q_DESTINATION_WIDTH 
//               FLT_Q_FMT_WIDTH  FLT_Q_TYPE_WIDTH  FLT_Q_TC_WIDTH  FLT_Q_ATTR_WIDTH  FLT_Q_LN_WIDTH 
//               FLT_Q_REQID_WIDTH  FLT_Q_TAG_WIDTH  FLT_Q_FUNC_NMBR_WIDTH  
//               FLT_Q_CPL_STATUS_WIDTH FLT_Q_VF_WIDTH FLT_Q_PRFX_WIDTH])
// Values:       0, ..., 1024
// 
// number of bits for Fields common to all Queue Storage options
`define FLT_Q_COMMON_WIDTH 43


// Name:         FLT_Q_HDR_WIDTH
// Default:      169 ([<functionof> FLT_Q_COMMON_WIDTH FLT_Q_DW_LENGTH_WIDTH 
//               FLT_Q_IN_MEMBAR_RANGE_WIDTH FLT_Q_ROM_IN_RANGE_WIDTH 
//               FLT_Q_IO_REQ_IN_RANGE_WIDTH FLT_Q_FRSTDW_BE_WIDTH FLT_Q_ADDR_WIDTH FLT_Q_BYTE_CNT_WIDTH 
//               FLT_Q_CMPLTR_ID_WIDTH FLT_Q_BCM_WIDTH FLT_Q_CPL_LOWER_ADDR_WIDTH 
//               FLT_Q_TD_WIDTH FLT_Q_EP_WIDTH FLT_Q_CPL_LAST_WIDTH FLT_Q_LSTDW_BE_WIDTH 
//               FLT_Q_VALID_TYPE_WIDTH FLT_Q_SATA_WIDTH FLT_Q_TH_WIDTH FLT_Q_AT_WIDTH 
//               FLT_Q_HDR_RSVD_DW0_WIDTH FLT_Q_HDR_RSVD_DW2_WIDTH ])
// Values:       -2147483648, ..., 2147483647
// 
// number of bits of the header bus that needs to be stored in the RAMs
`define FLT_Q_HDR_WIDTH 169


// Name:         CX_FLT_OUT_PROT_WD
// Default:      0 ((CX_RASDP_EN==1)? [<functionof> FLT_Q_HDR_WIDTH 
//               CX_RAS_PROT_RANGE RAS_BASE_PROT_WD ]: 0)
// Values:       -2147483648, ..., 2147483647
// Enabled:      CX_RADMQ_MODE==2
// 
// Number of bits required to protect all the header bits coming out of the RADM filter
`define CX_FLT_OUT_PROT_WD 0


// Name:         CLIENT_HDR_WD
// Default:      142 (132 + CX_TAG_SIZE + CX_IDO_ENABLE_VALUE + CX_NFUNC_WD + 
//               CX_LN_VALUE + ((CX_NVFUNC_EWD+1)*CX_SRIOV_ENABLE_VALUE) + 
//               (CX_TPH_ENABLE_VALUE*11))
// Values:       -2147483648, ..., 2147483647
// 
// Number client header bits
`define CLIENT_HDR_WD 142


`define CLIENT_HDR_PROT_WD 0


// Name:         SCAN_ALL_PSETS
// Default:      1
// Values:       0, 1
// 
// When defined, the controller will request all programmed presets (do not back to the previous good preset if meeting bad 
// preset) for equalization with Figure Of Merit if 24ms time is enough to do this.
`define SCAN_ALL_PSETS


// Name:           DEFAULT_GEN3_EQ_FMDC_MAX_POST_CUSROR_DELTA
// Default:        0
// Values:         0, ..., 15
// Enabled:        (CX_GEN3_SPEED && (CX_GEN3_EQ_COEF_CONV_SUPPORTED == 1))
// Parameter Type: Register Default Setting
// 
// Gen3 EQ Convergence Window Aperture for C+1. Post-cursor coefficients maximum delta within the convergence window depth. 
// 
// This is the default of the GEN3_EQ_FMDC_MAX_POST_CUSROR_DELTA field in GEN3_EQ_FB_MODE_DIR_CHANGE_OFF when in Gen3 mode.
`define DEFAULT_GEN3_EQ_FMDC_MAX_POST_CUSROR_DELTA 4'd0


// Name:           DEFAULT_GEN4_EQ_FMDC_MAX_POST_CUSROR_DELTA
// Default:        0
// Values:         0, ..., 15
// Enabled:        (CX_GEN4_SPEED && (CX_GEN3_EQ_COEF_CONV_SUPPORTED == 1))
// Parameter Type: Register Default Setting
// 
// Gen4 EQ Convergence Window Aperture for C+1. Post-cursor coefficients maximum delta within the convergence window depth. 
// 
// This is the default of the GEN3_EQ_FMDC_MAX_POST_CUSROR_DELTA field in GEN3_EQ_FB_MODE_DIR_CHANGE_OFF when in Gen4 mode.
`define DEFAULT_GEN4_EQ_FMDC_MAX_POST_CUSROR_DELTA 4'd0


// Name:           DEFAULT_GEN3_EQ_FMDC_MAX_PRE_CUSROR_DELTA
// Default:        0
// Values:         0, ..., 15
// Enabled:        (CX_GEN3_SPEED && (CX_GEN3_EQ_COEF_CONV_SUPPORTED == 1))
// Parameter Type: Register Default Setting
// 
// Gen3 EQ Convergence Window Aperture for C-1. Pre-cursor coefficients maximum delta within the convergence window depth. 
// This is the default of the GEN3_EQ_FMDC_MAX_PRE_CUSROR_DELTA field in GEN3_EQ_FB_MODE_DIR_CHANGE_OFF when in Gen3 mode.
`define DEFAULT_GEN3_EQ_FMDC_MAX_PRE_CUSROR_DELTA 4'd0


// Name:           DEFAULT_GEN4_EQ_FMDC_MAX_PRE_CUSROR_DELTA
// Default:        0
// Values:         0, ..., 15
// Enabled:        (CX_GEN4_SPEED && (CX_GEN3_EQ_COEF_CONV_SUPPORTED == 1))
// Parameter Type: Register Default Setting
// 
// Gen4 EQ Convergence Window Aperture for C-1. Pre-cursor coefficients maximum delta within the convergence window depth. 
// This is the default of the GEN3_EQ_FMDC_MAX_PRE_CUSROR_DELTA field in GEN3_EQ_FB_MODE_DIR_CHANGE_OFF when in Gen4 mode.
`define DEFAULT_GEN4_EQ_FMDC_MAX_PRE_CUSROR_DELTA 4'd0


// Name:           DEFAULT_GEN3_EQ_FMDC_N_EVALS
// Default:        2
// Values:         0, ..., 16
// Enabled:        (CX_GEN3_SPEED && (CX_GEN3_EQ_COEF_CONV_SUPPORTED == 1))
// Parameter Type: Register Default Setting
// 
// Gen3 EQ Convergence Window Depth. Number of consecutive evaluations considered in Phase 2/3 when determining if optimal 
// coefficients have been found. 
// This is the default of the GEN3_EQ_FMDC_N_EVALS field in GEN3_EQ_FB_MODE_DIR_CHANGE_OFF when in Gen3 mode.
`define DEFAULT_GEN3_EQ_FMDC_N_EVALS 5'd2


// Name:           DEFAULT_GEN4_EQ_FMDC_N_EVALS
// Default:        2
// Values:         0, ..., 16
// Enabled:        (CX_GEN4_SPEED && (CX_GEN3_EQ_COEF_CONV_SUPPORTED == 1))
// Parameter Type: Register Default Setting
// 
// Gen4 EQ Convergence Window Depth. Number of consecutive evaluations considered in Phase 2/3 when determining if optimal 
// coefficients have been found. 
// This is the default of the GEN3_EQ_FMDC_N_EVALS field in GEN3_EQ_FB_MODE_DIR_CHANGE_OFF when in Gen4 mode.
`define DEFAULT_GEN4_EQ_FMDC_N_EVALS 5'd2


// Name:           DEFAULT_GEN3_EQ_FMDC_T_MIN_PHASE23
// Default:        0
// Values:         0, ..., 24
// Enabled:        (CX_GEN3_SPEED && (CX_GEN3_EQ_COEF_CONV_SUPPORTED == 1))
// Parameter Type: Register Default Setting
// 
// Gen3 EQ Minimum Time (in ms) To Remain in EQ Master Phase. The LTSSM stays in EQ Master phase for at least this amount 
// of 
// time, before starting to check for convergence of the coefficients. 
// This is the default of the GEN3_EQ_FMDC_T_MIN_PHASE23 field in GEN3_EQ_FB_MODE_DIR_CHANGE_OFF when in Gen3 mode.
`define DEFAULT_GEN3_EQ_FMDC_T_MIN_PHASE23 5'd0


// Name:           DEFAULT_GEN4_EQ_FMDC_T_MIN_PHASE23
// Default:        0
// Values:         0, ..., 24
// Enabled:        (CX_GEN4_SPEED && (CX_GEN3_EQ_COEF_CONV_SUPPORTED == 1))
// Parameter Type: Register Default Setting
// 
// Gen4 EQ Minimum Time (in ms) To Remain in EQ Master Phase. The LTSSM stays in EQ Master phase for at least this amount 
// of 
// time, before starting to check for convergence of the coefficients. 
// This is the default of the GEN3_EQ_FMDC_T_MIN_PHASE23 field in GEN3_EQ_FB_MODE_DIR_CHANGE_OFF when in Gen4 mode.
`define DEFAULT_GEN4_EQ_FMDC_T_MIN_PHASE23 5'd0


// Name:           DEFAULT_GEN3_EQ_FOM_INC_INITIAL_EVAL
// Default:        0
// Values:         0, 1
// Enabled:        ((CX_SEL_PHY_MODE  ? (CX_MAX_CPCIE_SPEED >= 3) : CX_S_CPCIE_MODE ? 
//                 (CX_GEN3_MODE != GEN3_DISABLED) : 0))
// Parameter Type: Register Default Setting
// 
// Gen3 EQ Include Initial FOM. Include or not the FOM feedback from the initial preset evaluation performed in the EQ 
// Master, 
// when finding the highest FOM among all preset evaluations. 
//  - 0: Do not include 
//  - 1: Include 
// This is the default of the GEN3_EQ_FOM_INC_INITIAL_EVAL field in GEN3_EQ_CONTROL_OFF when in Gen3 mode.
`define DEFAULT_GEN3_EQ_FOM_INC_INITIAL_EVAL 1'd0


// Name:           DEFAULT_GEN4_EQ_FOM_INC_INITIAL_EVAL
// Default:        0
// Values:         0, 1
// Enabled:        ((CX_GEN4_MODE != GEN4_DISABLED))
// Parameter Type: Register Default Setting
// 
// Gen4 EQ Include Initial FOM. Include or not the FOM feedback from the initial preset evaluation performed in the EQ 
// Master, 
// when finding the highest FOM among all preset evaluations. 
//  - 0: Do not include 
//  - 1: Include 
// This is the default of the GEN3_EQ_FOM_INC_INITIAL_EVAL field in GEN3_EQ_CONTROL_OFF when in Gen4 mode.
`define DEFAULT_GEN4_EQ_FOM_INC_INITIAL_EVAL 1'd0


// Name:           DEFAULT_GEN3_EQ_PSET_REQ_VEC
// Default:        0x59f
// Values:         0x0, ..., 0x7ff
// Enabled:        ((CX_SEL_PHY_MODE  ? (CX_MAX_CPCIE_SPEED >= 3) : CX_S_CPCIE_MODE ? 
//                 (CX_GEN3_MODE != GEN3_DISABLED) : 0))
// Parameter Type: Register Default Setting
// 
// Gen3 EQ Preset Request Vector. Requesting of Presets during the initial part of the EQ Master Phase. Encoding scheme is 
// as follows: 
//  - Bit [15:0] =0x0: No preset is requested and evaluated in EQ Master Phase. 
//  - Bit [i] =1: "Preset=i" is requested and evaluated in EQ Master Phase. 
// This is the default of the GEN3_EQ_PSET_REQ_VEC field in GEN3_EQ_CONTROL_OFF when in Gen3 mode. 
// You must contact your PHY vendor to ensure 24 ms timeout does not occur in presets (FOM) requests in EQ master phase.
`define DEFAULT_GEN3_EQ_PSET_REQ_VEC 16'h59f


// Name:           DEFAULT_GEN4_EQ_PSET_REQ_VEC
// Default:        0x59f
// Values:         0x0, ..., 0x7ff
// Enabled:        ((CX_GEN4_MODE != GEN4_DISABLED))
// Parameter Type: Register Default Setting
// 
// Gen4 EQ Preset Request Vector. Requesting of Presets during the initial part of the EQ Master Phase. Encoding scheme is 
// as follows: 
//  - Bit [15:0] =0x0: No preset is requested and evaluated in EQ Master Phase. 
//  - Bit [i] =1: "Preset=i" is requested and evaluated in EQ Master Phase. 
// This is the default of the GEN3_EQ_PSET_REQ_VEC field in GEN3_EQ_CONTROL_OFF when in Gen4 mode. 
// You must contact your PHY vendor to ensure 24 ms timeout does not occur in presets (FOM) requests in EQ master phase.
`define DEFAULT_GEN4_EQ_PSET_REQ_VEC 16'h59f


// Name:           DEFAULT_GEN3_EQ_EVAL_2MS_DISABLE
// Default:        1
// Values:         0, 1
// Enabled:        ((CX_SEL_PHY_MODE  ? (CX_MAX_CPCIE_SPEED >= 3) : CX_S_CPCIE_MODE ? 
//                 (CX_GEN3_MODE != GEN3_DISABLED) : 0))
// Parameter Type: Register Default Setting
// 
// Gen3 EQ Phase2_3 2 ms Timeout Disable. Determine behavior in Phase2 for USP (Phase3 if DSP) when the PHY does not 
// respond 
// within 2ms to the assertion of RxEqEval
`define DEFAULT_GEN3_EQ_EVAL_2MS_DISABLE 1'd1


// Name:           DEFAULT_GEN4_EQ_EVAL_2MS_DISABLE
// Default:        1
// Values:         0, 1
// Enabled:        ((CX_GEN4_MODE != GEN4_DISABLED))
// Parameter Type: Register Default Setting
// 
// Gen4 EQ Phase2_3 2 ms Timeout Disable. Determine behavior in Phase2 for USP (Phase3 if DSP) when the PHY does not 
// respond 
// within 2ms to the assertion of RxEqEval
`define DEFAULT_GEN4_EQ_EVAL_2MS_DISABLE 1'd1


// Name:           DEFAULT_GEN3_EQ_FB_MODE
// Default:        Direction Change ((CX_SEL_PHY_MODE  ? (CX_MAX_CPCIE_SPEED >= 3) : 
//                 CX_S_CPCIE_MODE ? (CX_GEN3_MODE != GEN3_DISABLED) : 0))
// Values:         Direction Change (0), Figure Of Merit (1)
// Enabled:        ((CX_SEL_PHY_MODE  ? (CX_MAX_CPCIE_SPEED >= 3) : CX_S_CPCIE_MODE ? 
//                 (CX_GEN3_MODE != GEN3_DISABLED) : 0))
// Parameter Type: Register Default Setting
// 
// Gen3 EQ Feedback Mode. 
//  - 0000b: Direction Change. Figure Of Merit method is also used by setting "Preset Request Vector". 
//  - 0001b: Figure Of Merit. Only Figure Of Merit method is used. 
//  - 0010b: Reserved 
//  - ...... Reserved 
//  - 1111b: Reserved 
// This is the default of the GEN3_EQ_FB_MODE field in GEN3_EQ_CONTROL_OFF when in Gen3 mode.
`define DEFAULT_GEN3_EQ_FB_MODE 4'd0


// Name:           DEFAULT_GEN4_EQ_FB_MODE
// Default:        Direction Change ((CX_GEN4_MODE != GEN4_DISABLED))
// Values:         Direction Change (0), Figure Of Merit (1)
// Enabled:        ((CX_GEN4_MODE != GEN4_DISABLED))
// Parameter Type: Register Default Setting
// 
// Gen4 EQ Feedback Mode. 
//  - 0000b: Direction Change. Figure Of Merit method is also used by setting "Preset Request Vector". 
//  - 0001b: Figure Of Merit. Only Figure Of Merit method is used. 
//  - 0010b: Reserved 
//  - ...... Reserved 
//  - 1111b: Reserved 
// This is the default of the GEN3_EQ_FB_MODE field in GEN3_EQ_CONTROL_OFF when in Gen4 mode.
`define DEFAULT_GEN4_EQ_FB_MODE 4'd0


// Name:           DEFAULT_GEN4_USP_SEND_8GT_EQ_TS2_DISABLE
// Default:        1
// Values:         0, 1
// Enabled:        ((CX_GEN4_MODE != GEN4_DISABLED))
// Parameter Type: Register Default Setting
// 
// Upstream Port Send 8GT/s EQ TS2 Disable. The base spec defines that USP can optionally send 8GT EQ TS2 and it means 
// USP can set DSP TxPreset value in Gen4 Data Rate.  If this register set to 0, USP sends 8GT EQ TS2. If this register 
// set to 1, USP does not send 8GT EQ TS2. This applies to upstream ports only. No Function for downstream ports.
`define DEFAULT_GEN4_USP_SEND_8GT_EQ_TS2_DISABLE 1'd1


// Name:           DEFAULT_GEN3_RXEQ_PH01_EN
// Default:        0
// Values:         0, 1
// Enabled:        ((CX_SEL_PHY_MODE  ? (CX_MAX_CPCIE_SPEED >= 3) : CX_S_CPCIE_MODE ? 
//                 (CX_GEN3_MODE != GEN3_DISABLED) : 0))
// Parameter Type: Register Default Setting
// 
// Gen3 EQ Rx Equalization Phase 0/Phase 1 Hold Enable. When this bit is set the upstream port holds phase 0 
// (the downstream port holds phase 1) for 10ms. Holding phase 0 or phase 1 can be used to allow sufficient time for 
// Rx Equalization to be performed by the PHY. This bit is used during Virtex-7 Gen3 equalization. The programmable 
// bits [RXEQ_PH01_EN, EQ_PHASE_2_3] can be used to obtain the following variations of the equalization procedure: 
//  - 00: Tx equalization only in phase 2/3 
//  - 01: No Tx equalization, no Rx equalization 
//  - 10: Tx equalization in phase 2/3, Rx equalization in phase 0/1 
//  - 11: No Tx equalization, Rx equalization in phase 0/1
`define DEFAULT_GEN3_RXEQ_PH01_EN 1'd0


// Name:           DEFAULT_GEN3_EQ_PHASE23_EXIT_MODE
// Default:        To Recovery.Speed
// Values:         To Recovery.Speed (0), To EQ 3 for USP or to Recovery.RcvrLock for 
//                 DSP (1)
// Enabled:        ((CX_SEL_PHY_MODE  ? (CX_MAX_CPCIE_SPEED >= 3) : CX_S_CPCIE_MODE ? 
//                 (CX_GEN3_MODE != GEN3_DISABLED) : 0))
// Parameter Type: Register Default Setting
// 
// Gen3 EQ Master Phase Exit Mode After 24 ms Timeout 
//  - 0b: Exit to Recovery.Speed state 
//  - 1b: Exit to EQ Phase 3 for USP controller or Recovery.RcvrLock state for DSP core 
// This is the default of the GEN3_EQ_PHASE23_EXIT_MODE field in GEN3_EQ_CONTROL_OFF when in Gen3 mode. 
// Setting to '1b' affects Direction Change EQ Feedback Mode. EQ requests for Figure Of Merit mode complete before 24 ms 
// timeout. See DEFAULT_GEN3_EQ_PSET_REQ_VEC for more.
`define DEFAULT_GEN3_EQ_PHASE23_EXIT_MODE 1'd0


// Name:           DEFAULT_GEN4_EQ_PHASE23_EXIT_MODE
// Default:        To Recovery.Speed
// Values:         To Recovery.Speed (0), To EQ 3 for USP or to Recovery.RcvrLock for 
//                 DSP (1)
// Enabled:        ((CX_GEN4_MODE != GEN4_DISABLED))
// Parameter Type: Register Default Setting
// 
// Gen4 EQ Master Phase Exit Mode After 24 ms Timeout 
//  - 0b: Exit to Recovery.Speed state 
//  - 1b: Exit to EQ Phase 3 for USP controller or Recovery.RcvrLock state for DSP core 
// This is the default of the GEN3_EQ_PHASE23_EXIT_MODE field in GEN3_EQ_CONTROL_OFF when in Gen4 mode. 
// Setting to '1b' affects Direction Change EQ Feedback Mode. EQ requests for Figure Of Merit mode complete before 24 ms 
// timeout. See DEFAULT_GEN4_EQ_PSET_REQ_VEC for more.
`define DEFAULT_GEN4_EQ_PHASE23_EXIT_MODE 1'd0


// Name:           DEFAULT_GEN4_RXEQ_PH01_EN
// Default:        0
// Values:         0, 1
// Enabled:        ((CX_GEN4_MODE != GEN4_DISABLED))
// Parameter Type: Register Default Setting
// 
// Gen4 EQ Rx Equalization Phase 0/Phase 1 Hold Enable. When this bit is set the upstream port holds phase 0 
// (the downstream port holds phase 1) for 10ms. Holding phase 0 or phase 1 can be used to allow sufficient time for 
// Rx Equalization to be performed by the PHY. This bit is used during Virtex-7 Gen3 equalization. The programmable 
// bits [RXEQ_PH01_EN, EQ_PHASE_2_3] can be used to obtain the following variations of the equalization procedure: 
//  - 00: Tx equalization only in phase 2/3 
//  - 01: No Tx equalization, no Rx equalization 
//  - 10: Tx equalization in phase 2/3, Rx equalization in phase 0/1 
//  - 11: No Tx equalization, Rx equalization in phase 0/1
`define DEFAULT_GEN4_RXEQ_PH01_EN 1'd0


// Name:           DEFAULT_USP_RX_PRESET_HINT0
// Default:        0x7
// Values:         0x0, ..., 0x7
// Enabled:        ((CX_SEL_PHY_MODE  ? (CX_MAX_CPCIE_SPEED >= 3) : CX_S_CPCIE_MODE ? 
//                 (CX_GEN3_MODE != GEN3_DISABLED) : 0))
// Parameter Type: Register Default Setting
// 
// Upstream Port 8.0 GT/s Receiver Preset Hint
`define DEFAULT_USP_RX_PRESET_HINT0 3'h7


// Name:           DEFAULT_USP_TX_PRESET0
// Default:        0xf
// Values:         0x0, ..., 0xf
// Enabled:        ((CX_SEL_PHY_MODE  ? (CX_MAX_CPCIE_SPEED >= 3) : CX_S_CPCIE_MODE ? 
//                 (CX_GEN3_MODE != GEN3_DISABLED) : 0))
// Parameter Type: Register Default Setting
// 
// Upstream Port 8.0 GT/s Transmitter Preset
`define DEFAULT_USP_TX_PRESET0 4'hf


// Name:           DEFAULT_DSP_RX_PRESET_HINT0
// Default:        0x7
// Values:         0x0, ..., 0x7
// Enabled:        ((CX_SEL_PHY_MODE  ? (CX_MAX_CPCIE_SPEED >= 3) : CX_S_CPCIE_MODE ? 
//                 (CX_GEN3_MODE != GEN3_DISABLED) : 0))
// Parameter Type: Register Default Setting
// 
// Downstream Port 8.0 GT/s Receiver Preset Hint
`define DEFAULT_DSP_RX_PRESET_HINT0 3'h7


// Name:           DEFAULT_DSP_TX_PRESET0
// Default:        0xf
// Values:         0x0, ..., 0xf
// Enabled:        ((CX_SEL_PHY_MODE  ? (CX_MAX_CPCIE_SPEED >= 3) : CX_S_CPCIE_MODE ? 
//                 (CX_GEN3_MODE != GEN3_DISABLED) : 0))
// Parameter Type: Register Default Setting
// 
// Downstream Port 8.0 GT/s Transmitter Preset
`define DEFAULT_DSP_TX_PRESET0 4'hf


// Name:           DEFAULT_USP_RX_PRESET_HINT1
// Default:        0x7 (DEFAULT_USP_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN3_SPEED && CX_NL>1
// Parameter Type: Feature Setting
// 
// Upstream Port 8.0 GT/s Receiver Preset Hint Lane1
`define DEFAULT_USP_RX_PRESET_HINT1 3'h7


// Name:           DEFAULT_USP_TX_PRESET1
// Default:        0xf (DEFAULT_USP_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN3_SPEED && CX_NL>1
// Parameter Type: Register Default Setting
// 
// Upstream Port 8.0 GT/s Transmitter Preset Lane1
`define DEFAULT_USP_TX_PRESET1 4'hf


// Name:           DEFAULT_DSP_RX_PRESET_HINT1
// Default:        0x7 (DEFAULT_DSP_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN3_SPEED && CX_NL>1
// Parameter Type: Register Default Setting
// 
// Downstream Port 8.0 GT/s Receiver Preset Hint Lane1
`define DEFAULT_DSP_RX_PRESET_HINT1 3'h7


// Name:           DEFAULT_DSP_TX_PRESET1
// Default:        0xf (DEFAULT_DSP_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN3_SPEED && CX_NL>1
// Parameter Type: Register Default Setting
// 
// Downstream Port 8.0 GT/s Transmitter Preset Lane1
`define DEFAULT_DSP_TX_PRESET1 4'hf


// Name:           DEFAULT_USP_RX_PRESET_HINT2
// Default:        0x7 (DEFAULT_USP_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN3_SPEED && CX_NL>2
// Parameter Type: Feature Setting
// 
// Upstream Port 8.0 GT/s Receiver Preset Hint Lane2
`define DEFAULT_USP_RX_PRESET_HINT2 3'h7


// Name:           DEFAULT_USP_TX_PRESET2
// Default:        0xf (DEFAULT_USP_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN3_SPEED && CX_NL>2
// Parameter Type: Register Default Setting
// 
// Upstream Port 8.0 GT/s Transmitter Preset Lane2
`define DEFAULT_USP_TX_PRESET2 4'hf


// Name:           DEFAULT_DSP_RX_PRESET_HINT2
// Default:        0x7 (DEFAULT_DSP_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN3_SPEED && CX_NL>2
// Parameter Type: Register Default Setting
// 
// Downstream Port 8.0 GT/s Receiver Preset Hint Lane2
`define DEFAULT_DSP_RX_PRESET_HINT2 3'h7


// Name:           DEFAULT_DSP_TX_PRESET2
// Default:        0xf (DEFAULT_DSP_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN3_SPEED && CX_NL>2
// Parameter Type: Register Default Setting
// 
// Downstream Port 8.0 GT/s Transmitter Preset Lane2
`define DEFAULT_DSP_TX_PRESET2 4'hf


// Name:           DEFAULT_USP_RX_PRESET_HINT3
// Default:        0x7 (DEFAULT_USP_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN3_SPEED && CX_NL>3
// Parameter Type: Feature Setting
// 
// Upstream Port 8.0 GT/s Receiver Preset Hint Lane3
`define DEFAULT_USP_RX_PRESET_HINT3 3'h7


// Name:           DEFAULT_USP_TX_PRESET3
// Default:        0xf (DEFAULT_USP_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN3_SPEED && CX_NL>3
// Parameter Type: Register Default Setting
// 
// Upstream Port 8.0 GT/s Transmitter Preset Lane3
`define DEFAULT_USP_TX_PRESET3 4'hf


// Name:           DEFAULT_DSP_RX_PRESET_HINT3
// Default:        0x7 (DEFAULT_DSP_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN3_SPEED && CX_NL>3
// Parameter Type: Register Default Setting
// 
// Downstream Port 8.0 GT/s Receiver Preset Hint Lane3
`define DEFAULT_DSP_RX_PRESET_HINT3 3'h7


// Name:           DEFAULT_DSP_TX_PRESET3
// Default:        0xf (DEFAULT_DSP_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN3_SPEED && CX_NL>3
// Parameter Type: Register Default Setting
// 
// Downstream Port 8.0 GT/s Transmitter Preset Lane3
`define DEFAULT_DSP_TX_PRESET3 4'hf


// Name:           DEFAULT_USP_RX_PRESET_HINT4
// Default:        0x7 (DEFAULT_USP_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN3_SPEED && CX_NL>4
// Parameter Type: Feature Setting
// 
// Upstream Port 8.0 GT/s Receiver Preset Hint Lane4
`define DEFAULT_USP_RX_PRESET_HINT4 3'h7


// Name:           DEFAULT_USP_TX_PRESET4
// Default:        0xf (DEFAULT_USP_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN3_SPEED && CX_NL>4
// Parameter Type: Register Default Setting
// 
// Upstream Port 8.0 GT/s Transmitter Preset Lane4
`define DEFAULT_USP_TX_PRESET4 4'hf


// Name:           DEFAULT_DSP_RX_PRESET_HINT4
// Default:        0x7 (DEFAULT_DSP_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN3_SPEED && CX_NL>4
// Parameter Type: Register Default Setting
// 
// Downstream Port 8.0 GT/s Receiver Preset Hint Lane4
`define DEFAULT_DSP_RX_PRESET_HINT4 3'h7


// Name:           DEFAULT_DSP_TX_PRESET4
// Default:        0xf (DEFAULT_DSP_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN3_SPEED && CX_NL>4
// Parameter Type: Register Default Setting
// 
// Downstream Port 8.0 GT/s Transmitter Preset Lane4
`define DEFAULT_DSP_TX_PRESET4 4'hf


// Name:           DEFAULT_USP_RX_PRESET_HINT5
// Default:        0x7 (DEFAULT_USP_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN3_SPEED && CX_NL>5
// Parameter Type: Feature Setting
// 
// Upstream Port 8.0 GT/s Receiver Preset Hint Lane5
`define DEFAULT_USP_RX_PRESET_HINT5 3'h7


// Name:           DEFAULT_USP_TX_PRESET5
// Default:        0xf (DEFAULT_USP_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN3_SPEED && CX_NL>5
// Parameter Type: Register Default Setting
// 
// Upstream Port 8.0 GT/s Transmitter Preset Lane5
`define DEFAULT_USP_TX_PRESET5 4'hf


// Name:           DEFAULT_DSP_RX_PRESET_HINT5
// Default:        0x7 (DEFAULT_DSP_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN3_SPEED && CX_NL>5
// Parameter Type: Register Default Setting
// 
// Downstream Port 8.0 GT/s Receiver Preset Hint Lane5
`define DEFAULT_DSP_RX_PRESET_HINT5 3'h7


// Name:           DEFAULT_DSP_TX_PRESET5
// Default:        0xf (DEFAULT_DSP_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN3_SPEED && CX_NL>5
// Parameter Type: Register Default Setting
// 
// Downstream Port 8.0 GT/s Transmitter Preset Lane5
`define DEFAULT_DSP_TX_PRESET5 4'hf


// Name:           DEFAULT_USP_RX_PRESET_HINT6
// Default:        0x7 (DEFAULT_USP_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN3_SPEED && CX_NL>6
// Parameter Type: Feature Setting
// 
// Upstream Port 8.0 GT/s Receiver Preset Hint Lane6
`define DEFAULT_USP_RX_PRESET_HINT6 3'h7


// Name:           DEFAULT_USP_TX_PRESET6
// Default:        0xf (DEFAULT_USP_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN3_SPEED && CX_NL>6
// Parameter Type: Register Default Setting
// 
// Upstream Port 8.0 GT/s Transmitter Preset Lane6
`define DEFAULT_USP_TX_PRESET6 4'hf


// Name:           DEFAULT_DSP_RX_PRESET_HINT6
// Default:        0x7 (DEFAULT_DSP_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN3_SPEED && CX_NL>6
// Parameter Type: Register Default Setting
// 
// Downstream Port 8.0 GT/s Receiver Preset Hint Lane6
`define DEFAULT_DSP_RX_PRESET_HINT6 3'h7


// Name:           DEFAULT_DSP_TX_PRESET6
// Default:        0xf (DEFAULT_DSP_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN3_SPEED && CX_NL>6
// Parameter Type: Register Default Setting
// 
// Downstream Port 8.0 GT/s Transmitter Preset Lane6
`define DEFAULT_DSP_TX_PRESET6 4'hf


// Name:           DEFAULT_USP_RX_PRESET_HINT7
// Default:        0x7 (DEFAULT_USP_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN3_SPEED && CX_NL>7
// Parameter Type: Feature Setting
// 
// Upstream Port 8.0 GT/s Receiver Preset Hint Lane7
`define DEFAULT_USP_RX_PRESET_HINT7 3'h7


// Name:           DEFAULT_USP_TX_PRESET7
// Default:        0xf (DEFAULT_USP_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN3_SPEED && CX_NL>7
// Parameter Type: Register Default Setting
// 
// Upstream Port 8.0 GT/s Transmitter Preset Lane7
`define DEFAULT_USP_TX_PRESET7 4'hf


// Name:           DEFAULT_DSP_RX_PRESET_HINT7
// Default:        0x7 (DEFAULT_DSP_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN3_SPEED && CX_NL>7
// Parameter Type: Register Default Setting
// 
// Downstream Port 8.0 GT/s Receiver Preset Hint Lane7
`define DEFAULT_DSP_RX_PRESET_HINT7 3'h7


// Name:           DEFAULT_DSP_TX_PRESET7
// Default:        0xf (DEFAULT_DSP_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN3_SPEED && CX_NL>7
// Parameter Type: Register Default Setting
// 
// Downstream Port 8.0 GT/s Transmitter Preset Lane7
`define DEFAULT_DSP_TX_PRESET7 4'hf


// Name:           DEFAULT_USP_RX_PRESET_HINT8
// Default:        0x7 (DEFAULT_USP_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN3_SPEED && CX_NL>8
// Parameter Type: Feature Setting
// 
// Upstream Port 8.0 GT/s Receiver Preset Hint Lane8
`define DEFAULT_USP_RX_PRESET_HINT8 3'h7


// Name:           DEFAULT_USP_TX_PRESET8
// Default:        0xf (DEFAULT_USP_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN3_SPEED && CX_NL>8
// Parameter Type: Register Default Setting
// 
// Upstream Port 8.0 GT/s Transmitter Preset Lane8
`define DEFAULT_USP_TX_PRESET8 4'hf


// Name:           DEFAULT_DSP_RX_PRESET_HINT8
// Default:        0x7 (DEFAULT_DSP_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN3_SPEED && CX_NL>8
// Parameter Type: Register Default Setting
// 
// Downstream Port 8.0 GT/s Receiver Preset Hint Lane8
`define DEFAULT_DSP_RX_PRESET_HINT8 3'h7


// Name:           DEFAULT_DSP_TX_PRESET8
// Default:        0xf (DEFAULT_DSP_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN3_SPEED && CX_NL>8
// Parameter Type: Register Default Setting
// 
// Downstream Port 8.0 GT/s Transmitter Preset Lane8
`define DEFAULT_DSP_TX_PRESET8 4'hf


// Name:           DEFAULT_USP_RX_PRESET_HINT9
// Default:        0x7 (DEFAULT_USP_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN3_SPEED && CX_NL>9
// Parameter Type: Feature Setting
// 
// Upstream Port 8.0 GT/s Receiver Preset Hint Lane9
`define DEFAULT_USP_RX_PRESET_HINT9 3'h7


// Name:           DEFAULT_USP_TX_PRESET9
// Default:        0xf (DEFAULT_USP_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN3_SPEED && CX_NL>9
// Parameter Type: Register Default Setting
// 
// Upstream Port 8.0 GT/s Transmitter Preset Lane9
`define DEFAULT_USP_TX_PRESET9 4'hf


// Name:           DEFAULT_DSP_RX_PRESET_HINT9
// Default:        0x7 (DEFAULT_DSP_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN3_SPEED && CX_NL>9
// Parameter Type: Register Default Setting
// 
// Downstream Port 8.0 GT/s Receiver Preset Hint Lane9
`define DEFAULT_DSP_RX_PRESET_HINT9 3'h7


// Name:           DEFAULT_DSP_TX_PRESET9
// Default:        0xf (DEFAULT_DSP_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN3_SPEED && CX_NL>9
// Parameter Type: Register Default Setting
// 
// Downstream Port 8.0 GT/s Transmitter Preset Lane9
`define DEFAULT_DSP_TX_PRESET9 4'hf


// Name:           DEFAULT_USP_RX_PRESET_HINT10
// Default:        0x7 (DEFAULT_USP_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN3_SPEED && CX_NL>10
// Parameter Type: Feature Setting
// 
// Upstream Port 8.0 GT/s Receiver Preset Hint Lane10
`define DEFAULT_USP_RX_PRESET_HINT10 3'h7


// Name:           DEFAULT_USP_TX_PRESET10
// Default:        0xf (DEFAULT_USP_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN3_SPEED && CX_NL>10
// Parameter Type: Register Default Setting
// 
// Upstream Port 8.0 GT/s Transmitter Preset Lane10
`define DEFAULT_USP_TX_PRESET10 4'hf


// Name:           DEFAULT_DSP_RX_PRESET_HINT10
// Default:        0x7 (DEFAULT_DSP_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN3_SPEED && CX_NL>10
// Parameter Type: Register Default Setting
// 
// Downstream Port 8.0 GT/s Receiver Preset Hint Lane10
`define DEFAULT_DSP_RX_PRESET_HINT10 3'h7


// Name:           DEFAULT_DSP_TX_PRESET10
// Default:        0xf (DEFAULT_DSP_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN3_SPEED && CX_NL>10
// Parameter Type: Register Default Setting
// 
// Downstream Port 8.0 GT/s Transmitter Preset Lane10
`define DEFAULT_DSP_TX_PRESET10 4'hf


// Name:           DEFAULT_USP_RX_PRESET_HINT11
// Default:        0x7 (DEFAULT_USP_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN3_SPEED && CX_NL>11
// Parameter Type: Feature Setting
// 
// Upstream Port 8.0 GT/s Receiver Preset Hint Lane11
`define DEFAULT_USP_RX_PRESET_HINT11 3'h7


// Name:           DEFAULT_USP_TX_PRESET11
// Default:        0xf (DEFAULT_USP_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN3_SPEED && CX_NL>11
// Parameter Type: Register Default Setting
// 
// Upstream Port 8.0 GT/s Transmitter Preset Lane11
`define DEFAULT_USP_TX_PRESET11 4'hf


// Name:           DEFAULT_DSP_RX_PRESET_HINT11
// Default:        0x7 (DEFAULT_DSP_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN3_SPEED && CX_NL>11
// Parameter Type: Register Default Setting
// 
// Downstream Port 8.0 GT/s Receiver Preset Hint Lane11
`define DEFAULT_DSP_RX_PRESET_HINT11 3'h7


// Name:           DEFAULT_DSP_TX_PRESET11
// Default:        0xf (DEFAULT_DSP_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN3_SPEED && CX_NL>11
// Parameter Type: Register Default Setting
// 
// Downstream Port 8.0 GT/s Transmitter Preset Lane11
`define DEFAULT_DSP_TX_PRESET11 4'hf


// Name:           DEFAULT_USP_RX_PRESET_HINT12
// Default:        0x7 (DEFAULT_USP_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN3_SPEED && CX_NL>12
// Parameter Type: Feature Setting
// 
// Upstream Port 8.0 GT/s Receiver Preset Hint Lane12
`define DEFAULT_USP_RX_PRESET_HINT12 3'h7


// Name:           DEFAULT_USP_TX_PRESET12
// Default:        0xf (DEFAULT_USP_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN3_SPEED && CX_NL>12
// Parameter Type: Register Default Setting
// 
// Upstream Port 8.0 GT/s Transmitter Preset Lane12
`define DEFAULT_USP_TX_PRESET12 4'hf


// Name:           DEFAULT_DSP_RX_PRESET_HINT12
// Default:        0x7 (DEFAULT_DSP_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN3_SPEED && CX_NL>12
// Parameter Type: Register Default Setting
// 
// Downstream Port 8.0 GT/s Receiver Preset Hint Lane12
`define DEFAULT_DSP_RX_PRESET_HINT12 3'h7


// Name:           DEFAULT_DSP_TX_PRESET12
// Default:        0xf (DEFAULT_DSP_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN3_SPEED && CX_NL>12
// Parameter Type: Register Default Setting
// 
// Downstream Port 8.0 GT/s Transmitter Preset Lane12
`define DEFAULT_DSP_TX_PRESET12 4'hf


// Name:           DEFAULT_USP_RX_PRESET_HINT13
// Default:        0x7 (DEFAULT_USP_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN3_SPEED && CX_NL>13
// Parameter Type: Feature Setting
// 
// Upstream Port 8.0 GT/s Receiver Preset Hint Lane13
`define DEFAULT_USP_RX_PRESET_HINT13 3'h7


// Name:           DEFAULT_USP_TX_PRESET13
// Default:        0xf (DEFAULT_USP_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN3_SPEED && CX_NL>13
// Parameter Type: Register Default Setting
// 
// Upstream Port 8.0 GT/s Transmitter Preset Lane13
`define DEFAULT_USP_TX_PRESET13 4'hf


// Name:           DEFAULT_DSP_RX_PRESET_HINT13
// Default:        0x7 (DEFAULT_DSP_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN3_SPEED && CX_NL>13
// Parameter Type: Register Default Setting
// 
// Downstream Port 8.0 GT/s Receiver Preset Hint Lane13
`define DEFAULT_DSP_RX_PRESET_HINT13 3'h7


// Name:           DEFAULT_DSP_TX_PRESET13
// Default:        0xf (DEFAULT_DSP_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN3_SPEED && CX_NL>13
// Parameter Type: Register Default Setting
// 
// Downstream Port 8.0 GT/s Transmitter Preset Lane13
`define DEFAULT_DSP_TX_PRESET13 4'hf


// Name:           DEFAULT_USP_RX_PRESET_HINT14
// Default:        0x7 (DEFAULT_USP_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN3_SPEED && CX_NL>14
// Parameter Type: Feature Setting
// 
// Upstream Port 8.0 GT/s Receiver Preset Hint Lane14
`define DEFAULT_USP_RX_PRESET_HINT14 3'h7


// Name:           DEFAULT_USP_TX_PRESET14
// Default:        0xf (DEFAULT_USP_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN3_SPEED && CX_NL>14
// Parameter Type: Register Default Setting
// 
// Upstream Port 8.0 GT/s Transmitter Preset Lane14
`define DEFAULT_USP_TX_PRESET14 4'hf


// Name:           DEFAULT_DSP_RX_PRESET_HINT14
// Default:        0x7 (DEFAULT_DSP_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN3_SPEED && CX_NL>14
// Parameter Type: Register Default Setting
// 
// Downstream Port 8.0 GT/s Receiver Preset Hint Lane14
`define DEFAULT_DSP_RX_PRESET_HINT14 3'h7


// Name:           DEFAULT_DSP_TX_PRESET14
// Default:        0xf (DEFAULT_DSP_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN3_SPEED && CX_NL>14
// Parameter Type: Register Default Setting
// 
// Downstream Port 8.0 GT/s Transmitter Preset Lane14
`define DEFAULT_DSP_TX_PRESET14 4'hf


// Name:           DEFAULT_USP_RX_PRESET_HINT15
// Default:        0x7 (DEFAULT_USP_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN3_SPEED && CX_NL>15
// Parameter Type: Feature Setting
// 
// Upstream Port 8.0 GT/s Receiver Preset Hint Lane15
`define DEFAULT_USP_RX_PRESET_HINT15 3'h7


// Name:           DEFAULT_USP_TX_PRESET15
// Default:        0xf (DEFAULT_USP_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN3_SPEED && CX_NL>15
// Parameter Type: Register Default Setting
// 
// Upstream Port 8.0 GT/s Transmitter Preset Lane15
`define DEFAULT_USP_TX_PRESET15 4'hf


// Name:           DEFAULT_DSP_RX_PRESET_HINT15
// Default:        0x7 (DEFAULT_DSP_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN3_SPEED && CX_NL>15
// Parameter Type: Register Default Setting
// 
// Downstream Port 8.0 GT/s Receiver Preset Hint Lane15
`define DEFAULT_DSP_RX_PRESET_HINT15 3'h7


// Name:           DEFAULT_DSP_TX_PRESET15
// Default:        0xf (DEFAULT_DSP_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN3_SPEED && CX_NL>15
// Parameter Type: Register Default Setting
// 
// Downstream Port 8.0 GT/s Transmitter Preset Lane15
`define DEFAULT_DSP_TX_PRESET15 4'hf


// Name:           DEFAULT_USP_RX_PRESET_HINT16
// Default:        0x7 (DEFAULT_USP_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN3_SPEED && CX_NL>16
// Parameter Type: Feature Setting
// 
// Upstream Port 8.0 GT/s Receiver Preset Hint Lane16
`define DEFAULT_USP_RX_PRESET_HINT16 3'h7


// Name:           DEFAULT_USP_TX_PRESET16
// Default:        0xf (DEFAULT_USP_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN3_SPEED && CX_NL>16
// Parameter Type: Register Default Setting
// 
// Upstream Port 8.0 GT/s Transmitter Preset Lane16
`define DEFAULT_USP_TX_PRESET16 4'hf


// Name:           DEFAULT_DSP_RX_PRESET_HINT16
// Default:        0x7 (DEFAULT_DSP_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN3_SPEED && CX_NL>16
// Parameter Type: Register Default Setting
// 
// Downstream Port 8.0 GT/s Receiver Preset Hint Lane16
`define DEFAULT_DSP_RX_PRESET_HINT16 3'h7


// Name:           DEFAULT_DSP_TX_PRESET16
// Default:        0xf (DEFAULT_DSP_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN3_SPEED && CX_NL>16
// Parameter Type: Register Default Setting
// 
// Downstream Port 8.0 GT/s Transmitter Preset Lane16
`define DEFAULT_DSP_TX_PRESET16 4'hf



// Name:           DEFAULT_USP_16G_RX_PRESET_HINT0
// Default:        0x7
// Values:         0x0, ..., 0x7
// Enabled:        ((CX_GEN4_MODE != GEN4_DISABLED))
// Parameter Type: Register Default Setting
// 
// Upstream Port 16.0 GT/s Receiver Preset Hint
`define DEFAULT_USP_16G_RX_PRESET_HINT0 3'h7


// Name:           DEFAULT_USP_16G_TX_PRESET0
// Default:        0xf
// Values:         0x0, ..., 0xf
// Enabled:        ((CX_GEN4_MODE != GEN4_DISABLED))
// Parameter Type: Register Default Setting
// 
// Upstream Port 16.0 GT/s Transmitter Preset
`define DEFAULT_USP_16G_TX_PRESET0 4'hf


// Name:           DEFAULT_DSP_16G_RX_PRESET_HINT0
// Default:        0x7
// Values:         0x0, ..., 0x7
// Enabled:        ((CX_GEN4_MODE != GEN4_DISABLED))
// Parameter Type: Register Default Setting
// 
// Downstream Port 16.0 GT/s Receiver Preset Hint
`define DEFAULT_DSP_16G_RX_PRESET_HINT0 3'h7


// Name:           DEFAULT_DSP_16G_TX_PRESET0
// Default:        0xf
// Values:         0x0, ..., 0xf
// Enabled:        ((CX_GEN4_MODE != GEN4_DISABLED))
// Parameter Type: Register Default Setting
// 
// Downstream Port 16.0 GT/s Transmitter Preset
`define DEFAULT_DSP_16G_TX_PRESET0 4'hf


// Name:           DEFAULT_USP_16G_RX_PRESET_HINT1
// Default:        0x7 (DEFAULT_USP_16G_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN4_SPEED && CX_NL>1
// Parameter Type: Register Default Setting
// 
// Upstream Port 16.0 GT/s Receiver Preset Hint Lane1
`define DEFAULT_USP_16G_RX_PRESET_HINT1 3'h7


// Name:           DEFAULT_USP_16G_TX_PRESET1
// Default:        0xf (DEFAULT_USP_16G_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN4_SPEED && CX_NL>1
// Parameter Type: Register Default Setting
// 
// Upstream Port 16.0 GT/s Transmitter Preset Lane1
`define DEFAULT_USP_16G_TX_PRESET1 4'hf


// Name:           DEFAULT_DSP_16G_RX_PRESET_HINT1
// Default:        0x7 (DEFAULT_DSP_16G_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN4_SPEED && CX_NL>1
// Parameter Type: Register Default Setting
// 
// Downstream Port 16.0 GT/s Receiver Preset Hint Lane1
`define DEFAULT_DSP_16G_RX_PRESET_HINT1 3'h7


// Name:           DEFAULT_DSP_16G_TX_PRESET1
// Default:        0xf (DEFAULT_DSP_16G_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN4_SPEED && CX_NL>1
// Parameter Type: Register Default Setting
// 
// Downstream Port 16.0 GT/s Transmitter Preset Lane1
`define DEFAULT_DSP_16G_TX_PRESET1 4'hf


// Name:           DEFAULT_USP_16G_RX_PRESET_HINT2
// Default:        0x7 (DEFAULT_USP_16G_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN4_SPEED && CX_NL>2
// Parameter Type: Register Default Setting
// 
// Upstream Port 16.0 GT/s Receiver Preset Hint Lane2
`define DEFAULT_USP_16G_RX_PRESET_HINT2 3'h7


// Name:           DEFAULT_USP_16G_TX_PRESET2
// Default:        0xf (DEFAULT_USP_16G_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN4_SPEED && CX_NL>2
// Parameter Type: Register Default Setting
// 
// Upstream Port 16.0 GT/s Transmitter Preset Lane2
`define DEFAULT_USP_16G_TX_PRESET2 4'hf


// Name:           DEFAULT_DSP_16G_RX_PRESET_HINT2
// Default:        0x7 (DEFAULT_DSP_16G_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN4_SPEED && CX_NL>2
// Parameter Type: Register Default Setting
// 
// Downstream Port 16.0 GT/s Receiver Preset Hint Lane2
`define DEFAULT_DSP_16G_RX_PRESET_HINT2 3'h7


// Name:           DEFAULT_DSP_16G_TX_PRESET2
// Default:        0xf (DEFAULT_DSP_16G_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN4_SPEED && CX_NL>2
// Parameter Type: Register Default Setting
// 
// Downstream Port 16.0 GT/s Transmitter Preset Lane2
`define DEFAULT_DSP_16G_TX_PRESET2 4'hf


// Name:           DEFAULT_USP_16G_RX_PRESET_HINT3
// Default:        0x7 (DEFAULT_USP_16G_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN4_SPEED && CX_NL>3
// Parameter Type: Register Default Setting
// 
// Upstream Port 16.0 GT/s Receiver Preset Hint Lane3
`define DEFAULT_USP_16G_RX_PRESET_HINT3 3'h7


// Name:           DEFAULT_USP_16G_TX_PRESET3
// Default:        0xf (DEFAULT_USP_16G_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN4_SPEED && CX_NL>3
// Parameter Type: Register Default Setting
// 
// Upstream Port 16.0 GT/s Transmitter Preset Lane3
`define DEFAULT_USP_16G_TX_PRESET3 4'hf


// Name:           DEFAULT_DSP_16G_RX_PRESET_HINT3
// Default:        0x7 (DEFAULT_DSP_16G_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN4_SPEED && CX_NL>3
// Parameter Type: Register Default Setting
// 
// Downstream Port 16.0 GT/s Receiver Preset Hint Lane3
`define DEFAULT_DSP_16G_RX_PRESET_HINT3 3'h7


// Name:           DEFAULT_DSP_16G_TX_PRESET3
// Default:        0xf (DEFAULT_DSP_16G_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN4_SPEED && CX_NL>3
// Parameter Type: Register Default Setting
// 
// Downstream Port 16.0 GT/s Transmitter Preset Lane3
`define DEFAULT_DSP_16G_TX_PRESET3 4'hf


// Name:           DEFAULT_USP_16G_RX_PRESET_HINT4
// Default:        0x7 (DEFAULT_USP_16G_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN4_SPEED && CX_NL>4
// Parameter Type: Register Default Setting
// 
// Upstream Port 16.0 GT/s Receiver Preset Hint Lane4
`define DEFAULT_USP_16G_RX_PRESET_HINT4 3'h7


// Name:           DEFAULT_USP_16G_TX_PRESET4
// Default:        0xf (DEFAULT_USP_16G_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN4_SPEED && CX_NL>4
// Parameter Type: Register Default Setting
// 
// Upstream Port 16.0 GT/s Transmitter Preset Lane4
`define DEFAULT_USP_16G_TX_PRESET4 4'hf


// Name:           DEFAULT_DSP_16G_RX_PRESET_HINT4
// Default:        0x7 (DEFAULT_DSP_16G_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN4_SPEED && CX_NL>4
// Parameter Type: Register Default Setting
// 
// Downstream Port 16.0 GT/s Receiver Preset Hint Lane4
`define DEFAULT_DSP_16G_RX_PRESET_HINT4 3'h7


// Name:           DEFAULT_DSP_16G_TX_PRESET4
// Default:        0xf (DEFAULT_DSP_16G_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN4_SPEED && CX_NL>4
// Parameter Type: Register Default Setting
// 
// Downstream Port 16.0 GT/s Transmitter Preset Lane4
`define DEFAULT_DSP_16G_TX_PRESET4 4'hf


// Name:           DEFAULT_USP_16G_RX_PRESET_HINT5
// Default:        0x7 (DEFAULT_USP_16G_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN4_SPEED && CX_NL>5
// Parameter Type: Register Default Setting
// 
// Upstream Port 16.0 GT/s Receiver Preset Hint Lane5
`define DEFAULT_USP_16G_RX_PRESET_HINT5 3'h7


// Name:           DEFAULT_USP_16G_TX_PRESET5
// Default:        0xf (DEFAULT_USP_16G_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN4_SPEED && CX_NL>5
// Parameter Type: Register Default Setting
// 
// Upstream Port 16.0 GT/s Transmitter Preset Lane5
`define DEFAULT_USP_16G_TX_PRESET5 4'hf


// Name:           DEFAULT_DSP_16G_RX_PRESET_HINT5
// Default:        0x7 (DEFAULT_DSP_16G_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN4_SPEED && CX_NL>5
// Parameter Type: Register Default Setting
// 
// Downstream Port 16.0 GT/s Receiver Preset Hint Lane5
`define DEFAULT_DSP_16G_RX_PRESET_HINT5 3'h7


// Name:           DEFAULT_DSP_16G_TX_PRESET5
// Default:        0xf (DEFAULT_DSP_16G_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN4_SPEED && CX_NL>5
// Parameter Type: Register Default Setting
// 
// Downstream Port 16.0 GT/s Transmitter Preset Lane5
`define DEFAULT_DSP_16G_TX_PRESET5 4'hf


// Name:           DEFAULT_USP_16G_RX_PRESET_HINT6
// Default:        0x7 (DEFAULT_USP_16G_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN4_SPEED && CX_NL>6
// Parameter Type: Register Default Setting
// 
// Upstream Port 16.0 GT/s Receiver Preset Hint Lane6
`define DEFAULT_USP_16G_RX_PRESET_HINT6 3'h7


// Name:           DEFAULT_USP_16G_TX_PRESET6
// Default:        0xf (DEFAULT_USP_16G_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN4_SPEED && CX_NL>6
// Parameter Type: Register Default Setting
// 
// Upstream Port 16.0 GT/s Transmitter Preset Lane6
`define DEFAULT_USP_16G_TX_PRESET6 4'hf


// Name:           DEFAULT_DSP_16G_RX_PRESET_HINT6
// Default:        0x7 (DEFAULT_DSP_16G_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN4_SPEED && CX_NL>6
// Parameter Type: Register Default Setting
// 
// Downstream Port 16.0 GT/s Receiver Preset Hint Lane6
`define DEFAULT_DSP_16G_RX_PRESET_HINT6 3'h7


// Name:           DEFAULT_DSP_16G_TX_PRESET6
// Default:        0xf (DEFAULT_DSP_16G_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN4_SPEED && CX_NL>6
// Parameter Type: Register Default Setting
// 
// Downstream Port 16.0 GT/s Transmitter Preset Lane6
`define DEFAULT_DSP_16G_TX_PRESET6 4'hf


// Name:           DEFAULT_USP_16G_RX_PRESET_HINT7
// Default:        0x7 (DEFAULT_USP_16G_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN4_SPEED && CX_NL>7
// Parameter Type: Register Default Setting
// 
// Upstream Port 16.0 GT/s Receiver Preset Hint Lane7
`define DEFAULT_USP_16G_RX_PRESET_HINT7 3'h7


// Name:           DEFAULT_USP_16G_TX_PRESET7
// Default:        0xf (DEFAULT_USP_16G_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN4_SPEED && CX_NL>7
// Parameter Type: Register Default Setting
// 
// Upstream Port 16.0 GT/s Transmitter Preset Lane7
`define DEFAULT_USP_16G_TX_PRESET7 4'hf


// Name:           DEFAULT_DSP_16G_RX_PRESET_HINT7
// Default:        0x7 (DEFAULT_DSP_16G_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN4_SPEED && CX_NL>7
// Parameter Type: Register Default Setting
// 
// Downstream Port 16.0 GT/s Receiver Preset Hint Lane7
`define DEFAULT_DSP_16G_RX_PRESET_HINT7 3'h7


// Name:           DEFAULT_DSP_16G_TX_PRESET7
// Default:        0xf (DEFAULT_DSP_16G_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN4_SPEED && CX_NL>7
// Parameter Type: Register Default Setting
// 
// Downstream Port 16.0 GT/s Transmitter Preset Lane7
`define DEFAULT_DSP_16G_TX_PRESET7 4'hf


// Name:           DEFAULT_USP_16G_RX_PRESET_HINT8
// Default:        0x7 (DEFAULT_USP_16G_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN4_SPEED && CX_NL>8
// Parameter Type: Register Default Setting
// 
// Upstream Port 16.0 GT/s Receiver Preset Hint Lane8
`define DEFAULT_USP_16G_RX_PRESET_HINT8 3'h7


// Name:           DEFAULT_USP_16G_TX_PRESET8
// Default:        0xf (DEFAULT_USP_16G_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN4_SPEED && CX_NL>8
// Parameter Type: Register Default Setting
// 
// Upstream Port 16.0 GT/s Transmitter Preset Lane8
`define DEFAULT_USP_16G_TX_PRESET8 4'hf


// Name:           DEFAULT_DSP_16G_RX_PRESET_HINT8
// Default:        0x7 (DEFAULT_DSP_16G_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN4_SPEED && CX_NL>8
// Parameter Type: Register Default Setting
// 
// Downstream Port 16.0 GT/s Receiver Preset Hint Lane8
`define DEFAULT_DSP_16G_RX_PRESET_HINT8 3'h7


// Name:           DEFAULT_DSP_16G_TX_PRESET8
// Default:        0xf (DEFAULT_DSP_16G_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN4_SPEED && CX_NL>8
// Parameter Type: Register Default Setting
// 
// Downstream Port 16.0 GT/s Transmitter Preset Lane8
`define DEFAULT_DSP_16G_TX_PRESET8 4'hf


// Name:           DEFAULT_USP_16G_RX_PRESET_HINT9
// Default:        0x7 (DEFAULT_USP_16G_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN4_SPEED && CX_NL>9
// Parameter Type: Register Default Setting
// 
// Upstream Port 16.0 GT/s Receiver Preset Hint Lane9
`define DEFAULT_USP_16G_RX_PRESET_HINT9 3'h7


// Name:           DEFAULT_USP_16G_TX_PRESET9
// Default:        0xf (DEFAULT_USP_16G_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN4_SPEED && CX_NL>9
// Parameter Type: Register Default Setting
// 
// Upstream Port 16.0 GT/s Transmitter Preset Lane9
`define DEFAULT_USP_16G_TX_PRESET9 4'hf


// Name:           DEFAULT_DSP_16G_RX_PRESET_HINT9
// Default:        0x7 (DEFAULT_DSP_16G_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN4_SPEED && CX_NL>9
// Parameter Type: Register Default Setting
// 
// Downstream Port 16.0 GT/s Receiver Preset Hint Lane9
`define DEFAULT_DSP_16G_RX_PRESET_HINT9 3'h7


// Name:           DEFAULT_DSP_16G_TX_PRESET9
// Default:        0xf (DEFAULT_DSP_16G_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN4_SPEED && CX_NL>9
// Parameter Type: Register Default Setting
// 
// Downstream Port 16.0 GT/s Transmitter Preset Lane9
`define DEFAULT_DSP_16G_TX_PRESET9 4'hf


// Name:           DEFAULT_USP_16G_RX_PRESET_HINT10
// Default:        0x7 (DEFAULT_USP_16G_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN4_SPEED && CX_NL>10
// Parameter Type: Register Default Setting
// 
// Upstream Port 16.0 GT/s Receiver Preset Hint Lane10
`define DEFAULT_USP_16G_RX_PRESET_HINT10 3'h7


// Name:           DEFAULT_USP_16G_TX_PRESET10
// Default:        0xf (DEFAULT_USP_16G_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN4_SPEED && CX_NL>10
// Parameter Type: Register Default Setting
// 
// Upstream Port 16.0 GT/s Transmitter Preset Lane10
`define DEFAULT_USP_16G_TX_PRESET10 4'hf


// Name:           DEFAULT_DSP_16G_RX_PRESET_HINT10
// Default:        0x7 (DEFAULT_DSP_16G_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN4_SPEED && CX_NL>10
// Parameter Type: Register Default Setting
// 
// Downstream Port 16.0 GT/s Receiver Preset Hint Lane10
`define DEFAULT_DSP_16G_RX_PRESET_HINT10 3'h7


// Name:           DEFAULT_DSP_16G_TX_PRESET10
// Default:        0xf (DEFAULT_DSP_16G_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN4_SPEED && CX_NL>10
// Parameter Type: Register Default Setting
// 
// Downstream Port 16.0 GT/s Transmitter Preset Lane10
`define DEFAULT_DSP_16G_TX_PRESET10 4'hf


// Name:           DEFAULT_USP_16G_RX_PRESET_HINT11
// Default:        0x7 (DEFAULT_USP_16G_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN4_SPEED && CX_NL>11
// Parameter Type: Register Default Setting
// 
// Upstream Port 16.0 GT/s Receiver Preset Hint Lane11
`define DEFAULT_USP_16G_RX_PRESET_HINT11 3'h7


// Name:           DEFAULT_USP_16G_TX_PRESET11
// Default:        0xf (DEFAULT_USP_16G_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN4_SPEED && CX_NL>11
// Parameter Type: Register Default Setting
// 
// Upstream Port 16.0 GT/s Transmitter Preset Lane11
`define DEFAULT_USP_16G_TX_PRESET11 4'hf


// Name:           DEFAULT_DSP_16G_RX_PRESET_HINT11
// Default:        0x7 (DEFAULT_DSP_16G_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN4_SPEED && CX_NL>11
// Parameter Type: Register Default Setting
// 
// Downstream Port 16.0 GT/s Receiver Preset Hint Lane11
`define DEFAULT_DSP_16G_RX_PRESET_HINT11 3'h7


// Name:           DEFAULT_DSP_16G_TX_PRESET11
// Default:        0xf (DEFAULT_DSP_16G_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN4_SPEED && CX_NL>11
// Parameter Type: Register Default Setting
// 
// Downstream Port 16.0 GT/s Transmitter Preset Lane11
`define DEFAULT_DSP_16G_TX_PRESET11 4'hf


// Name:           DEFAULT_USP_16G_RX_PRESET_HINT12
// Default:        0x7 (DEFAULT_USP_16G_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN4_SPEED && CX_NL>12
// Parameter Type: Register Default Setting
// 
// Upstream Port 16.0 GT/s Receiver Preset Hint Lane12
`define DEFAULT_USP_16G_RX_PRESET_HINT12 3'h7


// Name:           DEFAULT_USP_16G_TX_PRESET12
// Default:        0xf (DEFAULT_USP_16G_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN4_SPEED && CX_NL>12
// Parameter Type: Register Default Setting
// 
// Upstream Port 16.0 GT/s Transmitter Preset Lane12
`define DEFAULT_USP_16G_TX_PRESET12 4'hf


// Name:           DEFAULT_DSP_16G_RX_PRESET_HINT12
// Default:        0x7 (DEFAULT_DSP_16G_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN4_SPEED && CX_NL>12
// Parameter Type: Register Default Setting
// 
// Downstream Port 16.0 GT/s Receiver Preset Hint Lane12
`define DEFAULT_DSP_16G_RX_PRESET_HINT12 3'h7


// Name:           DEFAULT_DSP_16G_TX_PRESET12
// Default:        0xf (DEFAULT_DSP_16G_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN4_SPEED && CX_NL>12
// Parameter Type: Register Default Setting
// 
// Downstream Port 16.0 GT/s Transmitter Preset Lane12
`define DEFAULT_DSP_16G_TX_PRESET12 4'hf


// Name:           DEFAULT_USP_16G_RX_PRESET_HINT13
// Default:        0x7 (DEFAULT_USP_16G_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN4_SPEED && CX_NL>13
// Parameter Type: Register Default Setting
// 
// Upstream Port 16.0 GT/s Receiver Preset Hint Lane13
`define DEFAULT_USP_16G_RX_PRESET_HINT13 3'h7


// Name:           DEFAULT_USP_16G_TX_PRESET13
// Default:        0xf (DEFAULT_USP_16G_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN4_SPEED && CX_NL>13
// Parameter Type: Register Default Setting
// 
// Upstream Port 16.0 GT/s Transmitter Preset Lane13
`define DEFAULT_USP_16G_TX_PRESET13 4'hf


// Name:           DEFAULT_DSP_16G_RX_PRESET_HINT13
// Default:        0x7 (DEFAULT_DSP_16G_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN4_SPEED && CX_NL>13
// Parameter Type: Register Default Setting
// 
// Downstream Port 16.0 GT/s Receiver Preset Hint Lane13
`define DEFAULT_DSP_16G_RX_PRESET_HINT13 3'h7


// Name:           DEFAULT_DSP_16G_TX_PRESET13
// Default:        0xf (DEFAULT_DSP_16G_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN4_SPEED && CX_NL>13
// Parameter Type: Register Default Setting
// 
// Downstream Port 16.0 GT/s Transmitter Preset Lane13
`define DEFAULT_DSP_16G_TX_PRESET13 4'hf


// Name:           DEFAULT_USP_16G_RX_PRESET_HINT14
// Default:        0x7 (DEFAULT_USP_16G_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN4_SPEED && CX_NL>14
// Parameter Type: Register Default Setting
// 
// Upstream Port 16.0 GT/s Receiver Preset Hint Lane14
`define DEFAULT_USP_16G_RX_PRESET_HINT14 3'h7


// Name:           DEFAULT_USP_16G_TX_PRESET14
// Default:        0xf (DEFAULT_USP_16G_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN4_SPEED && CX_NL>14
// Parameter Type: Register Default Setting
// 
// Upstream Port 16.0 GT/s Transmitter Preset Lane14
`define DEFAULT_USP_16G_TX_PRESET14 4'hf


// Name:           DEFAULT_DSP_16G_RX_PRESET_HINT14
// Default:        0x7 (DEFAULT_DSP_16G_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN4_SPEED && CX_NL>14
// Parameter Type: Register Default Setting
// 
// Downstream Port 16.0 GT/s Receiver Preset Hint Lane14
`define DEFAULT_DSP_16G_RX_PRESET_HINT14 3'h7


// Name:           DEFAULT_DSP_16G_TX_PRESET14
// Default:        0xf (DEFAULT_DSP_16G_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN4_SPEED && CX_NL>14
// Parameter Type: Register Default Setting
// 
// Downstream Port 16.0 GT/s Transmitter Preset Lane14
`define DEFAULT_DSP_16G_TX_PRESET14 4'hf


// Name:           DEFAULT_USP_16G_RX_PRESET_HINT15
// Default:        0x7 (DEFAULT_USP_16G_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN4_SPEED && CX_NL>15
// Parameter Type: Register Default Setting
// 
// Upstream Port 16.0 GT/s Receiver Preset Hint Lane15
`define DEFAULT_USP_16G_RX_PRESET_HINT15 3'h7


// Name:           DEFAULT_USP_16G_TX_PRESET15
// Default:        0xf (DEFAULT_USP_16G_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN4_SPEED && CX_NL>15
// Parameter Type: Register Default Setting
// 
// Upstream Port 16.0 GT/s Transmitter Preset Lane15
`define DEFAULT_USP_16G_TX_PRESET15 4'hf


// Name:           DEFAULT_DSP_16G_RX_PRESET_HINT15
// Default:        0x7 (DEFAULT_DSP_16G_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN4_SPEED && CX_NL>15
// Parameter Type: Register Default Setting
// 
// Downstream Port 16.0 GT/s Receiver Preset Hint Lane15
`define DEFAULT_DSP_16G_RX_PRESET_HINT15 3'h7


// Name:           DEFAULT_DSP_16G_TX_PRESET15
// Default:        0xf (DEFAULT_DSP_16G_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN4_SPEED && CX_NL>15
// Parameter Type: Register Default Setting
// 
// Downstream Port 16.0 GT/s Transmitter Preset Lane15
`define DEFAULT_DSP_16G_TX_PRESET15 4'hf


// Name:           DEFAULT_USP_16G_RX_PRESET_HINT16
// Default:        0x7 (DEFAULT_USP_16G_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN4_SPEED && CX_NL>16
// Parameter Type: Register Default Setting
// 
// Upstream Port 16.0 GT/s Receiver Preset Hint Lane16
`define DEFAULT_USP_16G_RX_PRESET_HINT16 3'h7


// Name:           DEFAULT_USP_16G_TX_PRESET16
// Default:        0xf (DEFAULT_USP_16G_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN4_SPEED && CX_NL>16
// Parameter Type: Register Default Setting
// 
// Upstream Port 16.0 GT/s Transmitter Preset Lane16
`define DEFAULT_USP_16G_TX_PRESET16 4'hf


// Name:           DEFAULT_DSP_16G_RX_PRESET_HINT16
// Default:        0x7 (DEFAULT_DSP_16G_RX_PRESET_HINT0)
// Values:         0x0, ..., 0x7
// Enabled:        CX_GEN4_SPEED && CX_NL>16
// Parameter Type: Register Default Setting
// 
// Downstream Port 16.0 GT/s Receiver Preset Hint Lane16
`define DEFAULT_DSP_16G_RX_PRESET_HINT16 3'h7


// Name:           DEFAULT_DSP_16G_TX_PRESET16
// Default:        0xf (DEFAULT_DSP_16G_TX_PRESET0)
// Values:         0x0, ..., 0xf
// Enabled:        CX_GEN4_SPEED && CX_NL>16
// Parameter Type: Register Default Setting
// 
// Downstream Port 16.0 GT/s Transmitter Preset Lane16
`define DEFAULT_DSP_16G_TX_PRESET16 4'hf



// Name:         CX_GEN4_REVISED_EIEOS
// Default:      0 (CX_GEN4_SPEC07)
// Values:       0, 1
// Enabled:      ((CX_GEN4_MODE != GEN4_DISABLED))
// 
// Gen4 slow EIEOS setting. OS format changed from {8{8'hFF, 8'h00h}} to {4{16'hFFFF, 16'h0000}}.
// `define CX_GEN4_REVISED_EIEOS


// Name:         CX_GEN4_SPEC07_LTSSM
// Default:      0 (CX_GEN4_SPEC07)
// Values:       0, 1
// Enabled:      ((CX_GEN4_MODE != GEN4_DISABLED))
// 
// Gen4 spec07 ltssm
// `define CX_GEN4_SPEC07_LTSSM


// Name:         CX_GEN4_SPEC07_CMPL
// Default:      0 (CX_GEN4_SPEC07)
// Values:       0, 1
// Enabled:      ((CX_GEN4_MODE != GEN4_DISABLED))
// 
// Gen4 spec07 compliance pattern
// `define CX_GEN4_SPEC07_CMPL


// Name:         CX_GEN4_SPEC07_ES
// Default:      0 (CX_GEN4_SPEC07)
// Values:       0, 1
// Enabled:      ((CX_GEN4_MODE != GEN4_DISABLED))
// 
// Gen4 0.7 Enhanced SKP OS feature
// `define CX_GEN4_SPEC07_ES


// Name:         CX_GEN4_SPEC07_FI
// Default:      0 (CX_GEN4_SPEC07)
// Values:       0, 1
// Enabled:      ((CX_GEN4_MODE != GEN4_DISABLED))
// 
// Gen4 Fault Isolation feature setting.
// `define CX_GEN4_SPEC07_FI


// Name:         DEFAULT_RXMARGIN_NUM_TIMING_STEPS
// Default:      6
// Values:       6, ..., 63
// Enabled:      CX_PL16GM_ENABLE
// 
// MNumTimingSteps
`define DEFAULT_RXMARGIN_NUM_TIMING_STEPS 6


// Name:         DEFAULT_RXMARGIN_MAX_TIMING_OFFSET
// Default:      20
// Values:       20, ..., 50
// Enabled:      CX_PL16GM_ENABLE
// 
// MMaxTimingOffset
`define DEFAULT_RXMARGIN_MAX_TIMING_OFFSET 20


// Name:         DEFAULT_RXMARGIN_NUM_VOLTAGE_STEPS
// Default:      32
// Values:       32, ..., 127
// Enabled:      CX_PL16GM_ENABLE
// 
// MNumVoltageSteps
`define DEFAULT_RXMARGIN_NUM_VOLTAGE_STEPS 32


// Name:         DEFAULT_RXMARGIN_MAX_VOLTAGE_OFFSET
// Default:      5
// Values:       5, ..., 50
// Enabled:      CX_PL16GM_ENABLE
// 
// MMaxVoltageOffset
`define DEFAULT_RXMARGIN_MAX_VOLTAGE_OFFSET 5


// Name:         DEFAULT_RXMARGIN_SAMPLE_RATE_VOLTAGE
// Default:      0
// Values:       0, ..., 63
// Enabled:      CX_PL16GM_ENABLE
// 
// MSamplingRateVoltage
`define DEFAULT_RXMARGIN_SAMPLE_RATE_VOLTAGE 0


// Name:         DEFAULT_RXMARGIN_SAMPLE_RATE_TIMING
// Default:      0
// Values:       0, ..., 63
// Enabled:      CX_PL16GM_ENABLE
// 
// MSamplingRateTiming
`define DEFAULT_RXMARGIN_SAMPLE_RATE_TIMING 0


// Name:         DEFAULT_RXMARGIN_VOLTAGE_SUPPORTED
// Default:      1
// Values:       0, 1
// Enabled:      CX_PL16GM_ENABLE
// 
// MVoltageSupported
`define DEFAULT_RXMARGIN_VOLTAGE_SUPPORTED 1


// Name:         DEFAULT_RXMARGIN_IND_LEFT_RIGHT_TIMING
// Default:      1
// Values:       0, 1
// Enabled:      CX_PL16GM_ENABLE
// 
// MIndLeftRightTiming
`define DEFAULT_RXMARGIN_IND_LEFT_RIGHT_TIMING 1


// Name:         DEFAULT_RXMARGIN_IND_UP_DOWN_VOLTAGE
// Default:      1
// Values:       0, 1
// Enabled:      CX_PL16GM_ENABLE
// 
// MIndUpDownVoltage
`define DEFAULT_RXMARGIN_IND_UP_DOWN_VOLTAGE 1


// Name:         DEFAULT_RXMARGIN_IND_ERROR_SAMPLER
// Default:      1
// Values:       0, 1
// Enabled:      CX_PL16GM_ENABLE
// 
// MIndErrorSampler
`define DEFAULT_RXMARGIN_IND_ERROR_SAMPLER 1


// Name:         DEFAULT_RXMARGIN_SAMPLE_REPORTING_METHOD
// Default:      0
// Values:       0, 1
// Enabled:      CX_PL16GM_ENABLE
// 
// MSampleReportingMethod
`define DEFAULT_RXMARGIN_SAMPLE_REPORTING_METHOD 0


// Name:         DEFAULT_RXMARGIN_MAXLANES
// Default:      1
// Values:       1, ..., 32
// Enabled:      CX_PL16GM_ENABLE
// 
// MMaxLanes
`define DEFAULT_RXMARGIN_MAXLANES 1

//  ------------------------------------------------------------------------
//
//                    (C) COPYRIGHT 2002 - 2016 SYNOPSYS, INC.
//                            ALL RIGHTS RESERVED
//
//  This software and the associated documentation are confidential and
//  proprietary to Synopsys, Inc.  Your use or disclosure of this
//  software is subject to the terms and conditions of a written
//  license agreement between you, or your company, and Synopsys, Inc.
//
// The entire notice above must be reproduced on all authorized copies.
//
//  ------------------------------------------------------------------------

//-------------------------------------------------------------------------
//---  RCS information:
//---    $DateTime: 2016/07/06 03:49:38 $
//---    $Revision: #45 $
//---    $Id: //dwh/pcie_iip/main/DWC_pcie/DWC_pcie_common/src/DWC_pcie_vc_cc_constants.v#45 $
//-------------------------------------------------------------------------

//-/ =================================================================
//-/ Queue Buffer Configuration
//-/ =================================================================



// Name:         CX_RADM_ADDR_COMP
// Default:      0 (CX_RAM_ADDR_COMP)
// Values:       0, 1
// Enabled:      CX_RADMQ_MODE==2
// 
// Inhibits the RAM's read enable when the read and write addresses are equal. 
//  Turning this option off will improve timing but may not be supported by 
//  some 2-port RAM implementations. 
//  NOTE: The controller only requires that the write data be written to the RAM in 
//  this situation. The read data is not used and can be X's.
// `define CX_RADM_ADDR_COMP


// `define CX_RADMQ_SINGLE_QMODE


// `define CX_RADMQ_MULTI_QMODE



//
//RADM Ordering Config
//



// Name:           CX_RADM_STRICT_VC_PRIORITY
// Default:        Round Robin
// Values:         Round Robin (0x0), Strict Priority (0x1)
// Enabled:        CX_RADMQ_MODE==2
// Parameter Type: Register Default Setting
// 
// The VC arbitration scheme for sending received TLPs to your application. 
//  - Strict Priority: Higher number VC IDs have higher priority 
//  - Round Robin: Round robin arbitration between VCs 
// Notes: 
//  - This parameter is only applicable when CX_NVC > 1. 
//  - It is possible to change the VC Arbitration Scheme (during device setup by software) by writing to the 
//  VC_ORDERING_RX_Q field in the VC0_P_RX_Q_CTRL_OFF register.
`define CX_RADM_STRICT_VC_PRIORITY 1'h0



// Name:           RELAXED_ORDER_SUPPORT
// Default:        true
// Values:         false (0), true (1)
// Enabled:        CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Allows completions to be sent to your application out of order. For more details, see Receive Queues in the Architecture 
// chapter of the Databook.
`define RELAXED_ORDER_SUPPORT


// Name:           ECRC_ERR_PASS_THROUGH
// Default:        false
// Values:         false (0), true (1)
// Enabled:        CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Passes the ECRC error notification to your application on the corresponding radm_<trgt1|cpl|byp>_ecrc_err output. 
// Otherwise the controller will not assert the output when it receives a TLP with an ECRC error. 
//  - This parameter is only used for queues configured in cut-through or store-and-forward mode. It does not apply to 
//  bypass mode. 
//  - The default setting of this parameter is sufficient for most applications. For more details, see the 'Error 
//  Detection For Received TLPs' section in the 'Controller Operations' chapter of the Databook.
// `define ECRC_ERR_PASS_THROUGH


`define RADM_SEG_BUF


`define RADM_SEG_BUF_VALUE 1


// `define RADM_LEGACY_BUF


`define RADM_SEG_BUF_MIN_DPT 3


// Name:           CX_DYNAMIC_SEG_SIZE
// Default:        false
// Values:         false (0), true (1)
// Enabled:        CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
// `define CX_DYNAMIC_SEG_SIZE


// Name:         CLUMP_SUPPORT
// Default:      true
// Values:       false (0), true (1)
// Enabled:      CX_RADMQ_MODE==2
// 
// PCIe Ordering Rules support 
//  This option enables support for the PCIe Ordering Rules arbitration mode. 
//  If this option is not set, PCIe Ordering Rule based Arbitration will not 
//  be available.
`define CLUMP_SUPPORT


// Name:           RADM_P_QMODE_VC0
// Default:        Store/Fwd
// Values:         Store/Fwd (0x1), Cut Thru (0x2), Bypass (0x4)
// Enabled:        (!(CX_NW>=8 && CX_RADMQ_MODE!=2))
// Parameter Type: Feature Setting
// 
// The queue mode for the posted TLP receive queue for VC0. 
//  - Bypass: There is no receive queue in this mode, your application must be able to accept all traffic as back-pressure 
//  is disabled in the mode. 
//  - Store-and-forward: TLPs are stored into queue; TLP is advertised only after the full TLP is stored into the queue. 
//  - Cut-through: TLPs are stored into queue and presented to your application at the same time it is being stored into 
//  the queue. 
// For more details, see "Receive Queue Buffers" in the Architecture chapter of the Databook.
`define RADM_P_QMODE_VC0 3'h1


// Name:           RADM_NP_QMODE_VC0
// Default:        Store/Fwd (CX_RADMQ_MODE==0 ? RADM_P_QMODE_VC0 : 1)
// Values:         Store/Fwd (0x1), Cut Thru (0x2)
// Enabled:        (CX_RADMQ_MODE!=0 && !(CX_NW>=8 && CX_RADMQ_MODE!=2))
// Parameter Type: Feature Setting
// 
// The queue mode for the non-posted TLP receive queue for VC0. 
//  - Store-and-forward: TLPs are stored into queue; TLP is advertised only after the full TLP is stored into the queue. 
//  - Cut-through: TLPs are stored into queue and presented to your application at the same time it is being stored into 
//  the queue. 
// For more details, see "Receive Queue Buffers" in the Architecture chapter of the Databook.
`define RADM_NP_QMODE_VC0 3'h1


// Name:           RADM_NP_QMODE_VC1
// Default:        Store/Fwd (RADM_NP_QMODE_VC0)
// Values:         Store/Fwd (0x1), Cut Thru (0x2)
// Enabled:        CX_NVC>1 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// The queue mode for the non-posted TLP receive queue for VC1. 
//  - Store-and-forward: TLPs are stored into queue; TLP is advertised only after the full TLP is stored into the queue. 
//  - Cut-through: TLPs are stored into queue and presented to your application at the same time it is being stored into 
//  the queue. 
// For more details, see "Receive Queue Buffers" in the Architecture chapter of the Databook.
`define RADM_NP_QMODE_VC1 3'h1


// Name:           RADM_NP_QMODE_VC2
// Default:        Store/Fwd (RADM_NP_QMODE_VC0)
// Values:         Store/Fwd (0x1), Cut Thru (0x2)
// Enabled:        CX_NVC>2 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// The queue mode for the non-posted TLP receive queue for VC2. 
//  - Store-and-forward: TLPs are stored into queue; TLP is advertised only after the full TLP is stored into the queue. 
//  - Cut-through: TLPs are stored into queue and presented to your application at the same time it is being stored into 
//  the queue. 
// For more details, see "Receive Queue Buffers" in the Architecture chapter of the Databook.
`define RADM_NP_QMODE_VC2 3'h1


// Name:           RADM_NP_QMODE_VC3
// Default:        Store/Fwd (RADM_NP_QMODE_VC0)
// Values:         Store/Fwd (0x1), Cut Thru (0x2)
// Enabled:        CX_NVC>3 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// The queue mode for the non-posted TLP receive queue for VC3. 
//  - Store-and-forward: TLPs are stored into queue; TLP is advertised only after the full TLP is stored into the queue. 
//  - Cut-through: TLPs are stored into queue and presented to your application at the same time it is being stored into 
//  the queue. 
// For more details, see "Receive Queue Buffers" in the Architecture chapter of the Databook.
`define RADM_NP_QMODE_VC3 3'h1


// Name:           RADM_NP_QMODE_VC4
// Default:        Store/Fwd (RADM_NP_QMODE_VC0)
// Values:         Store/Fwd (0x1), Cut Thru (0x2)
// Enabled:        CX_NVC>4 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// The queue mode for the non-posted TLP receive queue for VC4. 
//  - Store-and-forward: TLPs are stored into queue; TLP is advertised only after the full TLP is stored into the queue. 
//  - Cut-through: TLPs are stored into queue and presented to your application at the same time it is being stored into 
//  the queue. 
// For more details, see "Receive Queue Buffers" in the Architecture chapter of the Databook.
`define RADM_NP_QMODE_VC4 3'h1


// Name:           RADM_NP_QMODE_VC5
// Default:        Store/Fwd (RADM_NP_QMODE_VC0)
// Values:         Store/Fwd (0x1), Cut Thru (0x2)
// Enabled:        CX_NVC>5 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// The queue mode for the non-posted TLP receive queue for VC5. 
//  - Store-and-forward: TLPs are stored into queue; TLP is advertised only after the full TLP is stored into the queue. 
//  - Cut-through: TLPs are stored into queue and presented to your application at the same time it is being stored into 
//  the queue. 
// For more details, see "Receive Queue Buffers" in the Architecture chapter of the Databook.
`define RADM_NP_QMODE_VC5 3'h1


// Name:           RADM_NP_QMODE_VC6
// Default:        Store/Fwd (RADM_NP_QMODE_VC0)
// Values:         Store/Fwd (0x1), Cut Thru (0x2)
// Enabled:        CX_NVC>6 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// The queue mode for the non-posted TLP receive queue for VC6. 
//  - Store-and-forward: TLPs are stored into queue; TLP is advertised only after the full TLP is stored into the queue. 
//  - Cut-through: TLPs are stored into queue and presented to your application at the same time it is being stored into 
//  the queue. 
// For more details, see "Receive Queue Buffers" in the Architecture chapter of the Databook.
`define RADM_NP_QMODE_VC6 3'h1


// Name:           RADM_NP_QMODE_VC7
// Default:        Store/Fwd (RADM_NP_QMODE_VC0)
// Values:         Store/Fwd (0x1), Cut Thru (0x2)
// Enabled:        CX_NVC>7 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// The queue mode for the non-posted TLP receive queue for VC7. 
//  - Store-and-forward: TLPs are stored into queue; TLP is advertised only after the full TLP is stored into the queue. 
//  - Cut-through: TLPs are stored into queue and presented to your application at the same time it is being stored into 
//  the queue. 
// For more details, see "Receive Queue Buffers" in the Architecture chapter of the Databook.
`define RADM_NP_QMODE_VC7 3'h1


// Name:           RADM_CPL_QMODE_VC0
// Default:        Bypass ((CX_NW>=8) ? 1 : 4)
// Values:         Store/Fwd (0x1), Cut Thru (0x2), Bypass (0x4)
// Enabled:        (!(CX_NW>=8 && CX_RADMQ_MODE!=2))
// Parameter Type: Feature Setting
// 
// The queue mode for the completion tlp receive queue for VC0. 
//  - Bypass: There is no receive queue in this mode, your application must be able to accept all traffic as back-pressure 
//  is disabled in the mode. 
//  - Store-and-forward: TLPs are stored into queue; TLP is advertised only after the full TLP is stored into the queue. 
//  - Cut-through: TLPs are stored into queue and presented to your application at the same time it is being stored into 
//  the queue. 
// For more details, see "Receive Queue Buffers" in the Architecture chapter of the Databook.
`define RADM_CPL_QMODE_VC0 3'h4


// Name:           RADM_P_QMODE_VC1
// Default:        Store/Fwd (RADM_P_QMODE_VC0)
// Values:         Store/Fwd (0x1), Cut Thru (0x2), Bypass (0x4)
// Enabled:        CX_NVC>1 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// The queue mode for the posted tlp receive queue for VC1. 
//  - Bypass: There is no receive queue in this mode, your application must be able to accept all traffic as back-pressure 
//  is disabled in the mode. 
//  - Store-and-forward: TLPs are stored into queue; TLP is advertised only after the full TLP is stored into the queue. 
//  - Cut-through: TLPs are stored into queue and presented to your application at the same time it is being stored into 
//  the queue. 
// For more details, see "Receive Queue Buffers" in the Architecture chapter of the Databook.
`define RADM_P_QMODE_VC1 3'h1


// Name:           RADM_CPL_QMODE_VC1
// Default:        Bypass (RADM_CPL_QMODE_VC0)
// Values:         Store/Fwd (0x1), Cut Thru (0x2), Bypass (0x4)
// Enabled:        CX_NVC>1 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// The queue mode for the completion tlp receive queue for VC1. 
//  - Bypass: There is no receive queue in this mode, your application must be able to accept all traffic as back-pressure 
//  is disabled in the mode. 
//  - Store-and-forward: TLPs are stored into queue; TLP is advertised only after the full TLP is stored into the queue. 
//  - Cut-through: TLPs are stored into queue and presented to your application at the same time it is being stored into 
//  the queue. 
// For more details, see "Receive Queue Buffers" in the Architecture chapter of the Databook.
`define RADM_CPL_QMODE_VC1 3'h4


// Name:           RADM_P_QMODE_VC2
// Default:        Store/Fwd (RADM_P_QMODE_VC0)
// Values:         Store/Fwd (0x1), Cut Thru (0x2), Bypass (0x4)
// Enabled:        CX_NVC>2 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// The queue mode for the posted tlp receive queue for VC2. 
//  - Bypass: There is no receive queue in this mode, your application must be able to accept all traffic as back-pressure 
//  is disabled in the mode. 
//  - Store-and-forward: TLPs are stored into queue; TLP is advertised only after the full TLP is stored into the queue. 
//  - Cut-through: TLPs are stored into queue and presented to your application at the same time it is being stored into 
//  the queue. 
// For more details, see "Receive Queue Buffers" in the Architecture chapter of the Databook.
`define RADM_P_QMODE_VC2 3'h1


// Name:           RADM_CPL_QMODE_VC2
// Default:        Bypass (RADM_CPL_QMODE_VC0)
// Values:         Store/Fwd (0x1), Cut Thru (0x2), Bypass (0x4)
// Enabled:        CX_NVC>2 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// The queue mode for the completion tlp receive queue for VC2. 
//  - Bypass: There is no receive queue in this mode, your application must be able to accept all traffic as back-pressure 
//  is disabled in the mode. 
//  - Store-and-forward: TLPs are stored into queue; TLP is advertised only after the full TLP is stored into the queue. 
//  - Cut-through: TLPs are stored into queue and presented to your application at the same time it is being stored into 
//  the queue. 
// For more details, see "Receive Queue Buffers" in the Architecture chapter of the Databook.
`define RADM_CPL_QMODE_VC2 3'h4


// Name:           RADM_P_QMODE_VC3
// Default:        Store/Fwd (RADM_P_QMODE_VC0)
// Values:         Store/Fwd (0x1), Cut Thru (0x2), Bypass (0x4)
// Enabled:        CX_NVC>3 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// The queue mode for the posted tlp receive queue for VC3. 
//  - Bypass: There is no receive queue in this mode, your application must be able to accept all traffic as back-pressure 
//  is disabled in the mode. 
//  - Store-and-forward: TLPs are stored into queue; TLP is advertised only after the full TLP is stored into the queue. 
//  - Cut-through: TLPs are stored into queue and presented to your application at the same time it is being stored into 
//  the queue. 
// For more details, see "Receive Queue Buffers" in the Architecture chapter of the Databook.
`define RADM_P_QMODE_VC3 3'h1


// Name:           RADM_CPL_QMODE_VC3
// Default:        Bypass (RADM_CPL_QMODE_VC0)
// Values:         Store/Fwd (0x1), Cut Thru (0x2), Bypass (0x4)
// Enabled:        CX_NVC>3 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// The queue mode for the completion tlp receive queue for VC3. 
//  - Bypass: There is no receive queue in this mode, your application must be able to accept all traffic as back-pressure 
//  is disabled in the mode. 
//  - Store-and-forward: TLPs are stored into queue; TLP is advertised only after the full TLP is stored into the queue. 
//  - Cut-through: TLPs are stored into queue and presented to your application at the same time it is being stored into 
//  the queue. 
// For more details, see "Receive Queue Buffers" in the Architecture chapter of the Databook.
`define RADM_CPL_QMODE_VC3 3'h4


// Name:           RADM_P_QMODE_VC4
// Default:        Store/Fwd (RADM_P_QMODE_VC0)
// Values:         Store/Fwd (0x1), Cut Thru (0x2), Bypass (0x4)
// Enabled:        CX_NVC>4 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// The queue mode for the posted tlp receive queue for VC4. 
//  - Bypass: There is no receive queue in this mode, your application must be able to accept all traffic as back-pressure 
//  is disabled in the mode. 
//  - Store-and-forward: TLPs are stored into queue; TLP is advertised only after the full TLP is stored into the queue. 
//  - Cut-through: TLPs are stored into queue and presented to your application at the same time it is being stored into 
//  the queue. 
// For more details, see "Receive Queue Buffers" in the Architecture chapter of the Databook.
`define RADM_P_QMODE_VC4 3'h1


// Name:           RADM_CPL_QMODE_VC4
// Default:        Bypass (RADM_CPL_QMODE_VC0)
// Values:         Store/Fwd (0x1), Cut Thru (0x2), Bypass (0x4)
// Enabled:        CX_NVC>4 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// The queue mode for the completion tlp receive queue for VC4. 
//  - Bypass: There is no receive queue in this mode, your application must be able to accept all traffic as back-pressure 
//  is disabled in the mode. 
//  - Store-and-forward: TLPs are stored into queue; TLP is advertised only after the full TLP is stored into the queue. 
//  - Cut-through: TLPs are stored into queue and presented to your application at the same time it is being stored into 
//  the queue. 
// For more details, see "Receive Queue Buffers" in the Architecture chapter of the Databook.
`define RADM_CPL_QMODE_VC4 3'h4


// Name:           RADM_P_QMODE_VC5
// Default:        Store/Fwd (RADM_P_QMODE_VC0)
// Values:         Store/Fwd (0x1), Cut Thru (0x2), Bypass (0x4)
// Enabled:        CX_NVC>5 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// The queue mode for the posted tlp receive queue for VC5. 
//  - Bypass: There is no receive queue in this mode, your application must be able to accept all traffic as back-pressure 
//  is disabled in the mode. 
//  - Store-and-forward: TLPs are stored into queue; TLP is advertised only after the full TLP is stored into the queue. 
//  - Cut-through: TLPs are stored into queue and presented to your application at the same time it is being stored into 
//  the queue. 
// For more details, see "Receive Queue Buffers" in the Architecture chapter of the Databook.
`define RADM_P_QMODE_VC5 3'h1


// Name:           RADM_CPL_QMODE_VC5
// Default:        Bypass (RADM_CPL_QMODE_VC0)
// Values:         Store/Fwd (0x1), Cut Thru (0x2), Bypass (0x4)
// Enabled:        CX_NVC>5 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// The queue mode for the completion tlp receive queue for VC5. 
//  - Bypass: There is no receive queue in this mode, your application must be able to accept all traffic as back-pressure 
//  is disabled in the mode. 
//  - Store-and-forward: TLPs are stored into queue; TLP is advertised only after the full TLP is stored into the queue. 
//  - Cut-through: TLPs are stored into queue and presented to your application at the same time it is being stored into 
//  the queue. 
// For more details, see "Receive Queue Buffers" in the Architecture chapter of the Databook.
`define RADM_CPL_QMODE_VC5 3'h4


// Name:           RADM_P_QMODE_VC6
// Default:        Store/Fwd (RADM_P_QMODE_VC0)
// Values:         Store/Fwd (0x1), Cut Thru (0x2), Bypass (0x4)
// Enabled:        CX_NVC>6 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// The queue mode for the posted tlp receive queue for VC6. 
//  - Bypass: There is no receive queue in this mode, your application must be able to accept all traffic as back-pressure 
//  is disabled in the mode. 
//  - Store-and-forward: TLPs are stored into queue; TLP is advertised only after the full TLP is stored into the queue. 
//  - Cut-through: TLPs are stored into queue and presented to your application at the same time it is being stored into 
//  the queue. 
// For more details, see "Receive Queue Buffers" in the Architecture chapter of the Databook.
`define RADM_P_QMODE_VC6 3'h1


// Name:           RADM_CPL_QMODE_VC6
// Default:        Bypass (RADM_CPL_QMODE_VC0)
// Values:         Store/Fwd (0x1), Cut Thru (0x2), Bypass (0x4)
// Enabled:        CX_NVC>6 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// The queue mode for the completion tlp receive queue for VC6. 
//  - Bypass: There is no receive queue in this mode, your application must be able to accept all traffic as back-pressure 
//  is disabled in the mode. 
//  - Store-and-forward: TLPs are stored into queue; TLP is advertised only after the full TLP is stored into the queue. 
//  - Cut-through: TLPs are stored into queue and presented to your application at the same time it is being stored into 
//  the queue. 
// For more details, see "Receive Queue Buffers" in the Architecture chapter of the Databook.
`define RADM_CPL_QMODE_VC6 3'h4


// Name:           RADM_P_QMODE_VC7
// Default:        Store/Fwd (RADM_P_QMODE_VC0)
// Values:         Store/Fwd (0x1), Cut Thru (0x2), Bypass (0x4)
// Enabled:        CX_NVC>7 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// The queue mode for the posted tlp receive queue for VC7. 
//  - Bypass: There is no receive queue in this mode, your application must be able to accept all traffic as back-pressure 
//  is disabled in the mode. 
//  - Store-and-forward: TLPs are stored into queue; TLP is advertised only after the full TLP is stored into the queue. 
//  - Cut-through: TLPs are stored into queue and presented to your application at the same time it is being stored into 
//  the queue. 
// For more details, see "Receive Queue Buffers" in the Architecture chapter of the Databook.
`define RADM_P_QMODE_VC7 3'h1


// Name:           RADM_CPL_QMODE_VC7
// Default:        Bypass (RADM_CPL_QMODE_VC0)
// Values:         Store/Fwd (0x1), Cut Thru (0x2), Bypass (0x4)
// Enabled:        CX_NVC>7 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// The queue mode for the completion tlp receive queue for VC7. 
//  - Bypass: There is no receive queue in this mode, your application must be able to accept all traffic as back-pressure 
//  is disabled in the mode. 
//  - Store-and-forward: TLPs are stored into queue; TLP is advertised only after the full TLP is stored into the queue. 
//  - Cut-through: TLPs are stored into queue and presented to your application at the same time it is being stored into 
//  the queue. 
// For more details, see "Receive Queue Buffers" in the Architecture chapter of the Databook.
`define RADM_CPL_QMODE_VC7 3'h4


// Name:           CUT_THROUGH_INVOLVED
// Default:        false (RADM_P_QMODE_VC0==2 || RADM_NP_QMODE_VC0==2 || RADM_CPL_QMODE_VC0==2 || 
//                 RADM_P_QMODE_VC1==2 || RADM_NP_QMODE_VC1==2 || RADM_CPL_QMODE_VC1==2 || 
//                 RADM_P_QMODE_VC2==2 || RADM_NP_QMODE_VC2==2 || RADM_CPL_QMODE_VC2==2 || 
//                 RADM_P_QMODE_VC3==2 || RADM_NP_QMODE_VC3==2 || RADM_CPL_QMODE_VC3==2 || 
//                 RADM_P_QMODE_VC4==2 || RADM_NP_QMODE_VC4==2 || RADM_CPL_QMODE_VC4==2 || 
//                 RADM_P_QMODE_VC5==2 || RADM_NP_QMODE_VC5==2 || RADM_CPL_QMODE_VC5==2 || 
//                 RADM_P_QMODE_VC6==2 || RADM_NP_QMODE_VC6==2 || RADM_CPL_QMODE_VC6==2 || 
//                 RADM_P_QMODE_VC7==2 || RADM_NP_QMODE_VC7==2 || RADM_CPL_QMODE_VC7==2)
// Values:         false (0), true (1)
// Parameter Type: Feature Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
// `define CUT_THROUGH_INVOLVED

//
//VC0 Config
//


// Name:           CX_ECRC_STRIP_ENABLE
// Default:        true (  !(TRGT1_POPULATE) 
//                 || (CX_RAM_PROTECTION_MODE==2 && CX_RADMQ_MODE!=2) 
//                 || (!PCIE_SE && CX_ECRC_ENABLE && CC_DEVICE_TYPE!=CC_SW && !(CX_P2P_ENABLE)) 
//                 || ((  (RADM_NP_QMODE_VC0==2) || (RADM_NP_QMODE_VC1==2) 
//                 || (RADM_NP_QMODE_VC2==2) || (RADM_NP_QMODE_VC3==2) 
//                 || (RADM_NP_QMODE_VC4==2) || (RADM_NP_QMODE_VC5==2) 
//                 || (RADM_NP_QMODE_VC6==2) || (RADM_NP_QMODE_VC7==2)) && (ARC_WIDTH==32)) 
//                 )
// Values:         false (0), true (1)
// Enabled:        (TRGT1_POPULATE && !(AMBA_POPULATED) && !(CC_DMA_ENABLE) && !(CC_DEVICE_TYPE==CC_SW) && !(CX_P2P_ENABLE) 
//                 && !(CX_RAM_PROTECTION_MODE==2 && CX_RADMQ_MODE!=2) 
//                 && !( (  (RADM_NP_QMODE_VC0==2) || (RADM_NP_QMODE_VC1==2) 
//                 || (RADM_NP_QMODE_VC2==2) || (RADM_NP_QMODE_VC3==2) 
//                 || (RADM_NP_QMODE_VC4==2) || (RADM_NP_QMODE_VC5==2) 
//                 || (RADM_NP_QMODE_VC6==2) || (RADM_NP_QMODE_VC7==2)) && (ARC_WIDTH==32)) 
//                 )
// Parameter Type: Feature Setting
// 
// Include ECRC stripping hardware. If enabled, the controller strips ECRC from all incoming packets. The controller always 
// strips the ECRC when you have selected the AHB/AXI bridge module, or when DMA controller is selected. The controller 
// never strips the ECRC when you enable CX_P2P_ENABLE.
`define CX_ECRC_STRIP_ENABLE


// Name:         ECRC_CHK_STRIP_DISABLE
// Default:      0 ((CX_ECRC_ENABLE==0) && (CX_ECRC_STRIP_ENABLE==0))
// Values:       0, 1
// Enabled:      0
// 
// If both ECRC checking (CX_ECRC_ENABLE) and stripping are not defined then this will be defined
// `define ECRC_CHK_STRIP_DISABLE


// `define ECRC_FIELD_PASS_THROUGH


`define CX_RADM_MAXPKT 284


`define CX_RADM_DATASIZE 17


`define CX_RADM_DATASIZE_PW 5


// Name:         CX_NP_CALC_DDEPTH
// Default:      44 ([calc_np_ddepth CX_NB CX_NL CX_MAX_MTU !CX_ECRC_STRIP_ENABLE 
//               CX_INTERNAL_DELAY  CX_RADM_MAXPKT CX_GEN4_SPEED CX_GEN3_SPEED 
//               CX_2ND_SPEED FC_SCALE_EN CX_RETIMER_LATENCY])
// Values:       0, ..., 32752
// 
// Unadjusted Calculated Depth for Non-Posted Data Queue
`define CX_NP_CALC_DDEPTH 44


// Name:         CX_CALC_DDEPTH
// Default:      144 ([calc_ddepth CX_NB CX_NL CX_MAX_MTU !CX_ECRC_STRIP_ENABLE 
//               CX_INTERNAL_DELAY CX_GEN4_SPEED CX_GEN3_SPEED CX_2ND_SPEED FC_SCALE_EN 
//               CX_RETIMER_LATENCY])
// Values:       0, ..., 32752
// 
// Unadjusted Calculated Depth for Posted Data Queue
`define CX_CALC_DDEPTH 144


// Name:         CX_CALC_HDEPTH
// Default:      53 ([calc_hdepth CX_NB CX_NL CX_MAX_MTU !CX_ECRC_STRIP_ENABLE 
//               CX_INTERNAL_DELAY CX_RADM_MAXPKT CX_GEN4_SPEED CX_GEN3_SPEED CX_2ND_SPEED 
//               FC_SCALE_EN CX_RETIMER_LATENCY])
// Values:       0, ..., 2032
// 
// Unadjusted Calculated Depth for Posted Header Queue
`define CX_CALC_HDEPTH 53


// Name:         CX_NP_DSCALE
// Default:      01 (CX_NP_CALC_DDEPTH <= 2047 ? 1 : CX_NP_CALC_DDEPTH <= 8188 ? 4 : 
//               16)
// Values:       01 10 11
// 
// Scale Factor for Non-Posted Data Queue
`define CX_NP_DSCALE 1


// Name:         CX_DSCALE
// Default:      01 (CX_CALC_DDEPTH <= 2047 ? 1 : CX_CALC_DDEPTH <= 8188 ? 4 : 16)
// Values:       01 10 11
// 
// Scale Factor for Posted Data Queue
`define CX_DSCALE 1


// Name:         CX_HSCALE
// Default:      01 (CX_CALC_HDEPTH <= 127 ? 1 : CX_CALC_HDEPTH <= 508 ? 4 : 16)
// Values:       01 10 11
// 
// Scale Factor for Posted Header Queue
`define CX_HSCALE 1


// Name:           CX_DYNAMIC_FC_CREDIT
// Default:        false ((FC_SCALE_EN))
// Values:         false (0), true (1)
// Enabled:        CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Enable your application to update the advertised FC credit values by writing to the VC0 Posted Receive Queue Control 
// port logic register.
// `define CX_DYNAMIC_FC_CREDIT

//--------------------------
// PH Scaling
//--------------------------

// Name:           RADM_PQ_HSCALE_VC0
// Default:        1 ((CX_HSCALE == 16) ? 3 : (CX_HSCALE == 4) ? 2 : 1)
// Values:         1 4 16
// Enabled:        FC_SCALE_EN
// Parameter Type: Feature Setting
// 
// Initial VC0 Posted header scaling factor to advertise Flow Control credit width.
`define RADM_PQ_HSCALE_VC0 2'h1


// Name:           RADM_PQ_HSCALE_VC1
// Default:        1 ((CX_HSCALE == 16) ? 3 : (CX_HSCALE == 4) ? 2 : 1)
// Values:         1 4 16
// Enabled:        FC_SCALE_EN
// Parameter Type: Feature Setting
// 
// Initial VC1 Posted header scaling factor to advertise Flow Control credit width.
`define RADM_PQ_HSCALE_VC1 2'h1


// Name:           RADM_PQ_HSCALE_VC2
// Default:        1 ((CX_HSCALE == 16) ? 3 : (CX_HSCALE == 4) ? 2 : 1)
// Values:         1 4 16
// Enabled:        FC_SCALE_EN
// Parameter Type: Feature Setting
// 
// Initial VC2 Posted header scaling factor to advertise Flow Control credit width.
`define RADM_PQ_HSCALE_VC2 2'h1


// Name:           RADM_PQ_HSCALE_VC3
// Default:        1 ((CX_HSCALE == 16) ? 3 : (CX_HSCALE == 4) ? 2 : 1)
// Values:         1 4 16
// Enabled:        FC_SCALE_EN
// Parameter Type: Feature Setting
// 
// Initial VC3 Posted header scaling factor to advertise Flow Control credit width.
`define RADM_PQ_HSCALE_VC3 2'h1


// Name:           RADM_PQ_HSCALE_VC4
// Default:        1 ((CX_HSCALE == 16) ? 3 : (CX_HSCALE == 4) ? 2 : 1)
// Values:         1 4 16
// Enabled:        FC_SCALE_EN
// Parameter Type: Feature Setting
// 
// Initial VC4 Posted header scaling factor to advertise Flow Control credit width.
`define RADM_PQ_HSCALE_VC4 2'h1


// Name:           RADM_PQ_HSCALE_VC5
// Default:        1 ((CX_HSCALE == 16) ? 3 : (CX_HSCALE == 4) ? 2 : 1)
// Values:         1 4 16
// Enabled:        FC_SCALE_EN
// Parameter Type: Feature Setting
// 
// Initial VC5 Posted header scaling factor to advertise Flow Control credit width.
`define RADM_PQ_HSCALE_VC5 2'h1


// Name:           RADM_PQ_HSCALE_VC6
// Default:        1 ((CX_HSCALE == 16) ? 3 : (CX_HSCALE == 4) ? 2 : 1)
// Values:         1 4 16
// Enabled:        FC_SCALE_EN
// Parameter Type: Feature Setting
// 
// Initial VC6 Posted header scaling factor to advertise Flow Control credit width.
`define RADM_PQ_HSCALE_VC6 2'h1


// Name:           RADM_PQ_HSCALE_VC7
// Default:        1 ((CX_HSCALE == 16) ? 3 : (CX_HSCALE == 4) ? 2 : 1)
// Values:         1 4 16
// Enabled:        FC_SCALE_EN
// Parameter Type: Feature Setting
// 
// Initial VC7 Posted header scaling factor to advertise Flow Control credit width.
`define RADM_PQ_HSCALE_VC7 2'h1

//--------------------------
// PD Scaling
//--------------------------

// Name:           RADM_PQ_DSCALE_VC0
// Default:        1 ((CX_DSCALE == 16) ? 3 : (CX_DSCALE == 4) ? 2 : 1)
// Values:         1 4 16
// Enabled:        FC_SCALE_EN
// Parameter Type: Feature Setting
// 
// Initial VC0 Posted data scaling factor to advertise Flow Control credit width.
`define RADM_PQ_DSCALE_VC0 2'h1


// Name:           RADM_PQ_DSCALE_VC1
// Default:        1 ((CX_DSCALE == 16) ? 3 : (CX_DSCALE == 4) ? 2 : 1)
// Values:         1 4 16
// Enabled:        FC_SCALE_EN
// Parameter Type: Feature Setting
// 
// Initial VC1 Posted data scaling factor to advertise Flow Control credit width.
`define RADM_PQ_DSCALE_VC1 2'h1


// Name:           RADM_PQ_DSCALE_VC2
// Default:        1 ((CX_DSCALE == 16) ? 3 : (CX_DSCALE == 4) ? 2 : 1)
// Values:         1 4 16
// Enabled:        FC_SCALE_EN
// Parameter Type: Feature Setting
// 
// Initial VC2 Posted data scaling factor to advertise Flow Control credit width.
`define RADM_PQ_DSCALE_VC2 2'h1


// Name:           RADM_PQ_DSCALE_VC3
// Default:        1 ((CX_DSCALE == 16) ? 3 : (CX_DSCALE == 4) ? 2 : 1)
// Values:         1 4 16
// Enabled:        FC_SCALE_EN
// Parameter Type: Feature Setting
// 
// Initial VC3 Posted data scaling factor to advertise Flow Control credit width.
`define RADM_PQ_DSCALE_VC3 2'h1


// Name:           RADM_PQ_DSCALE_VC4
// Default:        1 ((CX_DSCALE == 16) ? 3 : (CX_DSCALE == 4) ? 2 : 1)
// Values:         1 4 16
// Enabled:        FC_SCALE_EN
// Parameter Type: Feature Setting
// 
// Initial VC4 Posted data scaling factor to advertise Flow Control credit width.
`define RADM_PQ_DSCALE_VC4 2'h1


// Name:           RADM_PQ_DSCALE_VC5
// Default:        1 ((CX_DSCALE == 16) ? 3 : (CX_DSCALE == 4) ? 2 : 1)
// Values:         1 4 16
// Enabled:        FC_SCALE_EN
// Parameter Type: Feature Setting
// 
// Initial VC5 Posted data scaling factor to advertise Flow Control credit width.
`define RADM_PQ_DSCALE_VC5 2'h1


// Name:           RADM_PQ_DSCALE_VC6
// Default:        1 ((CX_DSCALE == 16) ? 3 : (CX_DSCALE == 4) ? 2 : 1)
// Values:         1 4 16
// Enabled:        FC_SCALE_EN
// Parameter Type: Feature Setting
// 
// Initial VC6 Posted data scaling factor to advertise Flow Control credit width.
`define RADM_PQ_DSCALE_VC6 2'h1


// Name:           RADM_PQ_DSCALE_VC7
// Default:        1 ((CX_DSCALE == 16) ? 3 : (CX_DSCALE == 4) ? 2 : 1)
// Values:         1 4 16
// Enabled:        FC_SCALE_EN
// Parameter Type: Feature Setting
// 
// Initial VC7 Posted data scaling factor to advertise Flow Control credit width.
`define RADM_PQ_DSCALE_VC7 2'h1

//--------------------------
// NPH Scaling
//--------------------------

// Name:           RADM_NPQ_HSCALE_VC0
// Default:        1 ((CX_HSCALE == 16) ? 3 : (CX_HSCALE == 4) ? 2 : 1)
// Values:         1 4 16
// Enabled:        FC_SCALE_EN
// Parameter Type: Feature Setting
// 
// Initial VC0 Non-Posted header scaling factor to advertise Flow Control credit width.
`define RADM_NPQ_HSCALE_VC0 2'h1


// Name:           RADM_NPQ_HSCALE_VC1
// Default:        1 ((CX_HSCALE == 16) ? 3 : (CX_HSCALE == 4) ? 2 : 1)
// Values:         1 4 16
// Enabled:        FC_SCALE_EN
// Parameter Type: Feature Setting
// 
// Initial VC1 Non-Posted header scaling factor to advertise Flow Control credit width.
`define RADM_NPQ_HSCALE_VC1 2'h1


// Name:           RADM_NPQ_HSCALE_VC2
// Default:        1 ((CX_HSCALE == 16) ? 3 : (CX_HSCALE == 4) ? 2 : 1)
// Values:         1 4 16
// Enabled:        FC_SCALE_EN
// Parameter Type: Feature Setting
// 
// Initial VC2 Non-Posted header scaling factor to advertise Flow Control credit width.
`define RADM_NPQ_HSCALE_VC2 2'h1


// Name:           RADM_NPQ_HSCALE_VC3
// Default:        1 ((CX_HSCALE == 16) ? 3 : (CX_HSCALE == 4) ? 2 : 1)
// Values:         1 4 16
// Enabled:        FC_SCALE_EN
// Parameter Type: Feature Setting
// 
// Initial VC3 Non-Posted header scaling factor to advertise Flow Control credit width.
`define RADM_NPQ_HSCALE_VC3 2'h1


// Name:           RADM_NPQ_HSCALE_VC4
// Default:        1 ((CX_HSCALE == 16) ? 3 : (CX_HSCALE == 4) ? 2 : 1)
// Values:         1 4 16
// Enabled:        FC_SCALE_EN
// Parameter Type: Feature Setting
// 
// Initial VC4 Non-Posted header scaling factor to advertise Flow Control credit width.
`define RADM_NPQ_HSCALE_VC4 2'h1


// Name:           RADM_NPQ_HSCALE_VC5
// Default:        1 ((CX_HSCALE == 16) ? 3 : (CX_HSCALE == 4) ? 2 : 1)
// Values:         1 4 16
// Enabled:        FC_SCALE_EN
// Parameter Type: Feature Setting
// 
// Initial VC5 Non-Posted header scaling factor to advertise Flow Control credit width.
`define RADM_NPQ_HSCALE_VC5 2'h1


// Name:           RADM_NPQ_HSCALE_VC6
// Default:        1 ((CX_HSCALE == 16) ? 3 : (CX_HSCALE == 4) ? 2 : 1)
// Values:         1 4 16
// Enabled:        FC_SCALE_EN
// Parameter Type: Feature Setting
// 
// Initial VC6 Non-Posted header scaling factor to advertise Flow Control credit width.
`define RADM_NPQ_HSCALE_VC6 2'h1


// Name:           RADM_NPQ_HSCALE_VC7
// Default:        1 ((CX_HSCALE == 16) ? 3 : (CX_HSCALE == 4) ? 2 : 1)
// Values:         1 4 16
// Enabled:        FC_SCALE_EN
// Parameter Type: Feature Setting
// 
// Initial VC7 Non-Posted header scaling factor to advertise Flow Control credit width.
`define RADM_NPQ_HSCALE_VC7 2'h1

//--------------------------
// NPD Scaling
//--------------------------

// Name:           RADM_NPQ_DSCALE_VC0
// Default:        1 ((CX_NP_DSCALE == 16) ? 3 : (CX_NP_DSCALE == 4) ? 2 : 1)
// Values:         1 4 16
// Enabled:        FC_SCALE_EN
// Parameter Type: Feature Setting
// 
// Initial VC0 Non-Posted data scaling factor to advertise Flow Control credit width.
`define RADM_NPQ_DSCALE_VC0 2'h1


// Name:           RADM_NPQ_DSCALE_VC1
// Default:        1 ((CX_NP_DSCALE == 16) ? 3 : (CX_NP_DSCALE == 4) ? 2 : 1)
// Values:         1 4 16
// Enabled:        FC_SCALE_EN
// Parameter Type: Feature Setting
// 
// Initial VC1 Non-Posted data scaling factor to advertise Flow Control credit width.
`define RADM_NPQ_DSCALE_VC1 2'h1


// Name:           RADM_NPQ_DSCALE_VC2
// Default:        1 ((CX_NP_DSCALE == 16) ? 3 : (CX_NP_DSCALE == 4) ? 2 : 1)
// Values:         1 4 16
// Enabled:        FC_SCALE_EN
// Parameter Type: Feature Setting
// 
// Initial VC2 Non-Posted data scaling factor to advertise Flow Control credit width.
`define RADM_NPQ_DSCALE_VC2 2'h1


// Name:           RADM_NPQ_DSCALE_VC3
// Default:        1 ((CX_NP_DSCALE == 16) ? 3 : (CX_NP_DSCALE == 4) ? 2 : 1)
// Values:         1 4 16
// Enabled:        FC_SCALE_EN
// Parameter Type: Feature Setting
// 
// Initial VC3 Non-Posted data scaling factor to advertise Flow Control credit width.
`define RADM_NPQ_DSCALE_VC3 2'h1


// Name:           RADM_NPQ_DSCALE_VC4
// Default:        1 ((CX_NP_DSCALE == 16) ? 3 : (CX_NP_DSCALE == 4) ? 2 : 1)
// Values:         1 4 16
// Enabled:        FC_SCALE_EN
// Parameter Type: Feature Setting
// 
// Initial VC4 Non-Posted data scaling factor to advertise Flow Control credit width.
`define RADM_NPQ_DSCALE_VC4 2'h1


// Name:           RADM_NPQ_DSCALE_VC5
// Default:        1 ((CX_NP_DSCALE == 16) ? 3 : (CX_NP_DSCALE == 4) ? 2 : 1)
// Values:         1 4 16
// Enabled:        FC_SCALE_EN
// Parameter Type: Feature Setting
// 
// Initial VC5 Non-Posted data scaling factor to advertise Flow Control credit width.
`define RADM_NPQ_DSCALE_VC5 2'h1


// Name:           RADM_NPQ_DSCALE_VC6
// Default:        1 ((CX_NP_DSCALE == 16) ? 3 : (CX_NP_DSCALE == 4) ? 2 : 1)
// Values:         1 4 16
// Enabled:        FC_SCALE_EN
// Parameter Type: Feature Setting
// 
// Initial VC6 Non-Posted data scaling factor to advertise Flow Control credit width.
`define RADM_NPQ_DSCALE_VC6 2'h1


// Name:           RADM_NPQ_DSCALE_VC7
// Default:        1 ((CX_NP_DSCALE == 16) ? 3 : (CX_NP_DSCALE == 4) ? 2 : 1)
// Values:         1 4 16
// Enabled:        FC_SCALE_EN
// Parameter Type: Feature Setting
// 
// Initial VC7 Non-Posted data scaling factor to advertise Flow Control credit width.
`define RADM_NPQ_DSCALE_VC7 2'h1

//--------------------------
// CPLH Scaling
//--------------------------

// Name:           RADM_CPLQ_HSCALE_VC0
// Default:        1 ((CX_HSCALE == 16) ? 3 : (CX_HSCALE == 4) ? 2 : 1)
// Values:         1 4 16
// Enabled:        FC_SCALE_EN
// Parameter Type: Feature Setting
// 
// Initial VC0 Completion header scaling factor to advertise Flow Control credit width.
`define RADM_CPLQ_HSCALE_VC0 2'h1


// Name:           RADM_CPLQ_HSCALE_VC1
// Default:        1 ((CX_HSCALE == 16) ? 3 : (CX_HSCALE == 4) ? 2 : 1)
// Values:         1 4 16
// Enabled:        FC_SCALE_EN
// Parameter Type: Feature Setting
// 
// Initial VC1 Completion header scaling factor to advertise Flow Control credit width.
`define RADM_CPLQ_HSCALE_VC1 2'h1


// Name:           RADM_CPLQ_HSCALE_VC2
// Default:        1 ((CX_HSCALE == 16) ? 3 : (CX_HSCALE == 4) ? 2 : 1)
// Values:         1 4 16
// Enabled:        FC_SCALE_EN
// Parameter Type: Feature Setting
// 
// Initial VC2 Completion header scaling factor to advertise Flow Control credit width.
`define RADM_CPLQ_HSCALE_VC2 2'h1


// Name:           RADM_CPLQ_HSCALE_VC3
// Default:        1 ((CX_HSCALE == 16) ? 3 : (CX_HSCALE == 4) ? 2 : 1)
// Values:         1 4 16
// Enabled:        FC_SCALE_EN
// Parameter Type: Feature Setting
// 
// Initial VC3 Completion header scaling factor to advertise Flow Control credit width.
`define RADM_CPLQ_HSCALE_VC3 2'h1


// Name:           RADM_CPLQ_HSCALE_VC4
// Default:        1 ((CX_HSCALE == 16) ? 3 : (CX_HSCALE == 4) ? 2 : 1)
// Values:         1 4 16
// Enabled:        FC_SCALE_EN
// Parameter Type: Feature Setting
// 
// Initial VC4 Completion header scaling factor to advertise Flow Control credit width.
`define RADM_CPLQ_HSCALE_VC4 2'h1


// Name:           RADM_CPLQ_HSCALE_VC5
// Default:        1 ((CX_HSCALE == 16) ? 3 : (CX_HSCALE == 4) ? 2 : 1)
// Values:         1 4 16
// Enabled:        FC_SCALE_EN
// Parameter Type: Feature Setting
// 
// Initial VC5 Completion header scaling factor to advertise Flow Control credit width.
`define RADM_CPLQ_HSCALE_VC5 2'h1


// Name:           RADM_CPLQ_HSCALE_VC6
// Default:        1 ((CX_HSCALE == 16) ? 3 : (CX_HSCALE == 4) ? 2 : 1)
// Values:         1 4 16
// Enabled:        FC_SCALE_EN
// Parameter Type: Feature Setting
// 
// Initial VC6 Completion header scaling factor to advertise Flow Control credit width.
`define RADM_CPLQ_HSCALE_VC6 2'h1


// Name:           RADM_CPLQ_HSCALE_VC7
// Default:        1 ((CX_HSCALE == 16) ? 3 : (CX_HSCALE == 4) ? 2 : 1)
// Values:         1 4 16
// Enabled:        FC_SCALE_EN
// Parameter Type: Feature Setting
// 
// Initial VC7 Completion header scaling factor to advertise Flow Control credit width.
`define RADM_CPLQ_HSCALE_VC7 2'h1

//--------------------------
// CPLD Scaling
//--------------------------

// Name:           RADM_CPLQ_DSCALE_VC0
// Default:        1 ((CX_DSCALE == 16) ? 3 : (CX_DSCALE == 4) ? 2 : 1)
// Values:         1 4 16
// Enabled:        FC_SCALE_EN
// Parameter Type: Feature Setting
// 
// Initial VC0 Completion data scaling factor to advertise Flow Control credit width.
`define RADM_CPLQ_DSCALE_VC0 2'h1


// Name:           RADM_CPLQ_DSCALE_VC1
// Default:        1 ((CX_DSCALE == 16) ? 3 : (CX_DSCALE == 4) ? 2 : 1)
// Values:         1 4 16
// Enabled:        FC_SCALE_EN
// Parameter Type: Feature Setting
// 
// Initial VC1 Completion data scaling factor to advertise Flow Control credit width.
`define RADM_CPLQ_DSCALE_VC1 2'h1


// Name:           RADM_CPLQ_DSCALE_VC2
// Default:        1 ((CX_DSCALE == 16) ? 3 : (CX_DSCALE == 4) ? 2 : 1)
// Values:         1 4 16
// Enabled:        FC_SCALE_EN
// Parameter Type: Feature Setting
// 
// Initial VC2 Completion data scaling factor to advertise Flow Control credit width.
`define RADM_CPLQ_DSCALE_VC2 2'h1


// Name:           RADM_CPLQ_DSCALE_VC3
// Default:        1 ((CX_DSCALE == 16) ? 3 : (CX_DSCALE == 4) ? 2 : 1)
// Values:         1 4 16
// Enabled:        FC_SCALE_EN
// Parameter Type: Feature Setting
// 
// Initial VC3 Completion data scaling factor to advertise Flow Control credit width.
`define RADM_CPLQ_DSCALE_VC3 2'h1


// Name:           RADM_CPLQ_DSCALE_VC4
// Default:        1 ((CX_DSCALE == 16) ? 3 : (CX_DSCALE == 4) ? 2 : 1)
// Values:         1 4 16
// Enabled:        FC_SCALE_EN
// Parameter Type: Feature Setting
// 
// Initial VC4 Completion data scaling factor to advertise Flow Control credit width.
`define RADM_CPLQ_DSCALE_VC4 2'h1


// Name:           RADM_CPLQ_DSCALE_VC5
// Default:        1 ((CX_DSCALE == 16) ? 3 : (CX_DSCALE == 4) ? 2 : 1)
// Values:         1 4 16
// Enabled:        FC_SCALE_EN
// Parameter Type: Feature Setting
// 
// Initial VC5 Completion data scaling factor to advertise Flow Control credit width.
`define RADM_CPLQ_DSCALE_VC5 2'h1


// Name:           RADM_CPLQ_DSCALE_VC6
// Default:        1 ((CX_DSCALE == 16) ? 3 : (CX_DSCALE == 4) ? 2 : 1)
// Values:         1 4 16
// Enabled:        FC_SCALE_EN
// Parameter Type: Feature Setting
// 
// Initial VC6 Completion data scaling factor to advertise Flow Control credit width.
`define RADM_CPLQ_DSCALE_VC6 2'h1


// Name:           RADM_CPLQ_DSCALE_VC7
// Default:        1 ((CX_DSCALE == 16) ? 3 : (CX_DSCALE == 4) ? 2 : 1)
// Values:         1 4 16
// Enabled:        FC_SCALE_EN
// Parameter Type: Feature Setting
// 
// Initial VC7 Completion data scaling factor to advertise Flow Control credit width.
`define RADM_CPLQ_DSCALE_VC7 2'h1
//--------------------------


// Name:         CX_MAX_APP_RD_REQ_SIZE_AMBA_DMA
// Default:      0x100 ((CC_SLV_MTU < CX_MAX_MTU) ? CX_MAX_MTU : CC_SLV_MTU)
// Values:       0x0, ..., 0xffff
// 
// The max application read request size when the AMBA and DMA blocks are populated.
`define CX_MAX_APP_RD_REQ_SIZE_AMBA_DMA 16'h100


// Name:         CX_APP_RD_REQ_SIZE
// Default:      256 (!AMBA_POPULATED ? CX_MAX_MTU : (CC_DMA_ENABLE ? 
//               CX_MAX_APP_RD_REQ_SIZE_AMBA_DMA : CC_SLV_MTU))
// Values:       32 64 128 256 512 1024 2048 4096
// Enabled:      !AMBA_POPULATED && (RADM_CPL_QMODE_VC0!=4)
// 
// This parameter is used to set the depth of the receive completion data queue (CX_CPLQ_DDP_VC*) when completions are in 
// store-and-forward or cut-through modes, and completion credits are infinite. 
//  - It is the maximum individual MRd size that your application (or AHB/AXI bridge slave) makes. 
//  - For more details, see the Receive Queues section in the Architecture chapter of the Databook. 
//  - When an AHB/AXI bridge is enabled, CX_APP_RD_REQ_SIZE is calculated automatically and you cannot change it.
`define CX_APP_RD_REQ_SIZE 16'd256


// Name:           CX_RADMQ_P_NB_ORDER_LIST
// Default:        true
// Values:         false (0), true (1)
// Enabled:        CX_RADMQ_MODE==1
// Parameter Type: Feature Setting
// 
// If Posted TLP Queues are not bypassed, this parameter provides 
//  a switch to control whether the order fifo effects Posted queue operations. 
//  If Posted TLP queues are not bypassed, this parameter provides a switch to control whether the order FIFO affects 
//  Posted queue operations.: 
//  - True: If Posted Q Use Ordering FIFO is true, the Order FIFO controls the presentation of received Posted TLPs to the 
//  application. 
//  - False: If Posted Q Use Ordering FIFO is false, the Order FIFO does not influence the presentation of received Posted 
//  TLPs to the application. Not a NORMAL usage setting. 
// Note: This parameter is for multiple buffer queue architecture only 
// For more details, see 'Receive Queueing' in the 'Controller Operations' chapter of the Databook.
`define CX_RADMQ_P_NB_ORDER_LIST 1


// Name:           CX_RADMQ_NP_NB_ORDER_LIST
// Default:        true
// Values:         false (0), true (1)
// Enabled:        CX_RADMQ_MODE==1
// Parameter Type: Feature Setting
// 
// If Non-Posted TLP queues are not bypassed, this parameter provides a switch to control whether the order FIFO affects 
// Non-Posted queue operations.: 
//  - True: If Non-Posted Q Use Ordering FIFO is true, the Order FIFO controls the presentation of received Non-Posted 
//  TLPs to the application. 
//  - False: If Non-Posted Q Use Ordering FIFO is false, the Order FIFO does not influence the presentation of received 
//  Non-Posted TLPs to the application. Not a NORMAL usage setting. 
// Note: This parameter is for multiple buffer queue architecture only 
// For more details, see 'Receive Queueing' in the 'Controller Operations' chapter of the Databook.
`define CX_RADMQ_NP_NB_ORDER_LIST 1


// Name:           CX_RADMQ_CPL_NB_ORDER_LIST
// Default:        false
// Values:         false (0), true (1)
// Enabled:        CX_RADMQ_MODE==1
// Parameter Type: Feature Setting
// 
// If the completion queues are not bypassed, this parameter controls if the order FIFO affects the completion queue 
// operations. For more details, see 'Receive Queueing' in the 'Controller Operations' chapter of the Databook.
`define CX_RADMQ_CPL_NB_ORDER_LIST 0


// Name:           RADM_PQ_HCRD_VC0
// Default:        53 (RADM_P_QMODE_VC0==4 ? 0 : CX_CALC_HDEPTH / CX_HSCALE)
// Values:         0, ..., 127
// Parameter Type: Feature Setting
// 
// The number of posted TLP header credits to advertise for VC0.
`define RADM_PQ_HCRD_VC0 8'd53


// Name:           RADM_PQ_DCRD_VC0
// Default:        144 (RADM_P_QMODE_VC0 ==4 ? 0 : CX_CALC_DDEPTH / CX_DSCALE)
// Values:         0, ..., 2047
// Parameter Type: Feature Setting
// 
// The number posted TLP data credits to advertise for VC0.
`define RADM_PQ_DCRD_VC0 12'd96


// Name:           RADM_NPQ_HCRD_VC0
// Default:        53 ((CX_CALC_HDEPTH==0) ? 1 : CX_CALC_HDEPTH / CX_HSCALE)
// Values:         1, ..., 127
// Parameter Type: Feature Setting
// 
// The number non-posted TLP header credits to advertise for VC0.
`define RADM_NPQ_HCRD_VC0 8'd53


// Name:           RADM_NPQ_DCRD_VC0
// Default:        44 ((CX_NP_CALC_DDEPTH==0) ? 1 : CX_NP_CALC_DDEPTH / CX_NP_DSCALE)
// Values:         1, ..., 2047
// Parameter Type: Feature Setting
// 
// The number non-posted TLP data credits to advertise for VC0.
`define RADM_NPQ_DCRD_VC0 12'd11


// Name:           RADM_CPLQ_HCRD_VC0
// Default:        0 ((RADM_CPL_QMODE_VC0==4 || 1) ? 0 : CX_CALC_HDEPTH / CX_HSCALE)
// Values:         0, ..., 127
// Parameter Type: Feature Setting
// 
// The number completion TLP header credits to advertise for VC0.
`define RADM_CPLQ_HCRD_VC0 8'd0


// Name:           RADM_CPLQ_DCRD_VC0
// Default:        0 ((RADM_CPL_QMODE_VC0==4 || 1) ? 0 : CX_CALC_DDEPTH / CX_DSCALE)
// Values:         0, ..., 2047
// Parameter Type: Feature Setting
// 
// The number of completion TLP data credits to advertise for VC0.
`define RADM_CPLQ_DCRD_VC0 12'd0


// Name:           CX_RADM_ORDERING_RULES
// Default:        PCIe Ordering Rules
// Values:         Strict Priority (0x0), PCIe Ordering Rules (0x1)
// Enabled:        CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Specifies the ordering scheme for sending received TLPs to the application: 
//  - 0: Strict Priority: The priority order is Posted, then Completion, then Non-Posted 
//  - 1: PCI Ordering Rules: The arbitration is according to the ordering rules in the PCI Express 3.1 Specification. 
// For more details, see the "Native Core Receive Ordering Schemes" section in the "Advanced Ordering Information" 
// appendix of the Databook. 
// It is possible to change the ordering rules used (by software) by writing to the appropriate queue control register 
// 'TLP Type Ordering'.
`define CX_RADM_ORDERING_RULES 1'h1


// Name:           CX_RADM_ORDERING_RULES_VC0
// Default:        PCIe Ordering Rules (CX_RADM_ORDERING_RULES)
// Values:         Strict Priority (0x0), PCIe Ordering Rules (0x1)
// Enabled:        CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Specifies the ordering scheme for sending received TLPs to the application: 
//  - 0: Strict Priority: The priority order is Posted, then Completion, then Non-Posted 
//  - 1: PCI Ordering Rules: The arbitration is according to the ordering rules in the PCI Express 3.1 Specification. 
// For more details, see the "Native Core Receive Ordering Schemes" section in the "Advanced Ordering Information" 
// appendix of the Databook. 
// You can change the ordering rule scheme by writing to the TLP_TYPE_ORDERING_VC0 field in the VC0_P_RX_Q_CTRL_OFF 
// register.
`define CX_RADM_ORDERING_RULES_VC0 1'h1


// Name:           RADM_DEPTH_DECOUPLE_VC0
// Default:        false
// Values:         false (0), true (1)
// Parameter Type: Feature Setting
// 
// Function: Allow the number of P/NP advertised credits and receive queue depths to be specified independently for VC0. 
// Otherwise, the queue depths are automatically determined from the number of advertised credits. 
//  
// RESTRICTED USE: You should not need to use this feature. Consult SNPS if you want to use it.
// `define RADM_DEPTH_DECOUPLE_VC0


// Name:         CX_RCB
// Default:      64 ((CC_DEVICE_TYPE == CC_RC) ? 128 : 64)
// Values:       -2147483648, ..., 2147483647
// 
// Specifies the minimum Read Completion Boundary(RCB) of all completers with 
//  which the controller will interoperate. For a root port this can be set to 128 
//  bytes, all other components should assume an RCB of 64 bytes unless they 
//  will exist entirely within closed systems where the minimum RCB is known. 
//  This parameter is used only to calculate the required size of the 
//  completion header queues when completion credits are infinite and the 
//  completion queues are not bypassed.
`define CX_RCB 64


`define RADM_SEG_BUF_CT_DPT_ADJ 0


// Name:           RADM_PQ_HDP_VC0
// Default:        54 ((RADM_P_QMODE_VC0==4) ? (CX_RADMQ_MODE==2) ? RADM_SEG_BUF_MIN_DPT : 0  
//                 : [<functionof> CX_RADMQ_MODE RADM_PQ_HCRD_VC0 RADM_NPQ_HCRD_VC0 RADM_CPLQ_HCRD_VC0 RADM_CPL_QMODE_VC0 CX_NHQ CUT_THROUGH_INVOLVED CX_MAX_TAG CX_APP_RD_REQ_SIZE CX_RCB RADM_PQ_HSCALE_VC0])
// Values:         0, ..., 65535
// Enabled:        RADM_P_QMODE_VC0!=4 && RADM_DEPTH_DECOUPLE_VC0==1
// Parameter Type: Feature Setting
// 
// Specifies the depth of the Posted Hdr Queue/RAM. The number of entries in the posted header buffer for VC0-VC7. This 
// option is read-only if the queue is bypassed or "Decouple Depth from Credit" is not selected. For 256-bit configurations this 
// depth corresponds to one half of the total header storage capacity for this particular queue type.
`define RADM_PQ_HDP_VC0 54


// Name:           RADM_CPLQ_HDP_VC0
// Default:        3 ((CX_RADMQ_MODE==0 || RADM_CPL_QMODE_VC0==4) ? (CX_RADMQ_MODE==2) ? RADM_SEG_BUF_MIN_DPT : 0  
//                 : [<functionof> CX_RADMQ_MODE RADM_CPLQ_HCRD_VC0 CUT_THROUGH_INVOLVED CX_NHQ CX_MAX_TAG CX_APP_RD_REQ_SIZE CX_RCB RADM_CPLQ_HSCALE_VC0])
// Values:         0, ..., 65535
// Enabled:        CX_RADMQ_MODE!=0 && RADM_CPL_QMODE_VC0!=4 && 
//                 (RADM_DEPTH_DECOUPLE_VC0==1 || RADM_CPLQ_HCRD_VC0 == 0)
// Parameter Type: Feature Setting
// 
// Specifies the depth of the Completion Hdr Queue/RAM. The number of entries in the completion header buffer for VC0. This 
// option is read-only if the queue is bypassed or Decouple Depth from Credit is not selected. For 256-bit configurations 
// this depth corresponds to one half of the total header storage capacity for this particular queue type.
`define RADM_CPLQ_HDP_VC0 3


// Name:           RADM_PQ_DDP_VC0
// Default:        97 (RADM_P_QMODE_VC0==4 ?  (CX_RADMQ_MODE==2) ? RADM_SEG_BUF_MIN_DPT : 0 
//                 : [<functionof> CX_RADMQ_MODE RADM_PQ_HCRD_VC0 RADM_PQ_DCRD_VC0 RADM_NPQ_HCRD_VC0 RADM_NPQ_DCRD_VC0 RADM_CPLQ_HDP_VC0 RADM_CPLQ_DCRD_VC0 RADM_CPL_QMODE_VC0 CX_NW CX_NHQ CC_DEVICE_TYPE CC_SW CX_ECRC_STRIP_ENABLE RADM_SEG_BUF_CT_DPT_ADJ CX_MAX_TAG CX_APP_RD_REQ_SIZE RADM_PQ_DSCALE_VC0])
// Values:         0, ..., 65535
// Enabled:        RADM_P_QMODE_VC0!=4 && RADM_DEPTH_DECOUPLE_VC0==1
// Parameter Type: Feature Setting
// 
// Specifies the depth of the Posted Data Queue/RAM. The number of entries in the posted data buffer for VC0. This option 
// is read-only if the queue is bypassed or Decouple Depth from Credit is not selected. For 256-bit configurations this depth 
// corresponds to one half of the total data storage capacity for this particular queue type.
`define RADM_PQ_DDP_VC0 97


// Name:           RADM_NPQ_HDP_VC0
// Default:        54 ((CX_RADMQ_MODE==0 || RADM_NP_QMODE_VC0==4) ? (CX_RADMQ_MODE==2) ? RADM_SEG_BUF_MIN_DPT : 0  
//                 : [<functionof> CX_RADMQ_MODE RADM_NPQ_HCRD_VC0 CUT_THROUGH_INVOLVED CX_NHQ RADM_NPQ_HSCALE_VC0])
// Values:         0, ..., 65535
// Enabled:        CX_RADMQ_MODE!=0 && RADM_NP_QMODE_VC0!=4 && 
//                 RADM_DEPTH_DECOUPLE_VC0==1
// Parameter Type: Feature Setting
// 
// Specifies the depth of the non-posted Hdr Queue/RAM. The number of entries in the non-posted header buffer for VC0. This 
// option is read-only if the queue is bypassed or Decouple Depth from Credit is not selected. For 256-bit configurations 
// this depth corresponds to one half of the total header storage capacity for this particular queue type.
`define RADM_NPQ_HDP_VC0 54


// Name:           RADM_NPQ_DDP_VC0
// Default:        12 ((CX_RADMQ_MODE==0 || RADM_NP_QMODE_VC0==4) ?  (CX_RADMQ_MODE==2) ? RADM_SEG_BUF_MIN_DPT : 0 
//                 : [<functionof> 0 CX_RADMQ_MODE RADM_NPQ_HCRD_VC0 RADM_NPQ_DCRD_VC0 CUT_THROUGH_INVOLVED CX_NW CX_NHQ CC_DEVICE_TYPE CC_SW CX_ECRC_STRIP_ENABLE RADM_NPQ_DSCALE_VC0])
// Values:         0, ..., 65535
// Enabled:        CX_RADMQ_MODE!=0 && RADM_NP_QMODE_VC0!=4 && 
//                 RADM_DEPTH_DECOUPLE_VC0==1
// Parameter Type: Feature Setting
// 
// Specifies the depth of the non-posted Data Queue/RAM. The number of entries in the non-posted data buffer for VC0. This 
// option is read-only if the queue is bypassed or Decouple Depth from Credit is not selected. For 256-bit configurations 
// this depth corresponds to one half of the total data storage capacity for this particular queue type.
`define RADM_NPQ_DDP_VC0 12


// Name:           RADM_CPLQ_DDP_VC0
// Default:        3 ((CX_RADMQ_MODE==0 || RADM_CPL_QMODE_VC0==4) ?  (CX_RADMQ_MODE==2) ? RADM_SEG_BUF_MIN_DPT : 0 
//                 : [<functionof> CX_RADMQ_MODE RADM_CPLQ_HDP_VC0 RADM_CPLQ_DCRD_VC0 CUT_THROUGH_INVOLVED CX_NHQ CX_NW CX_MAX_TAG CX_APP_RD_REQ_SIZE CC_DEVICE_TYPE CC_SW CX_ECRC_STRIP_ENABLE RADM_SEG_BUF_CT_DPT_ADJ RADM_CPLQ_DSCALE_VC0])
// Values:         0, ..., 65535
// Enabled:        CX_RADMQ_MODE!=0 && RADM_CPL_QMODE_VC0!=4 && 
//                 (RADM_DEPTH_DECOUPLE_VC0==1 || RADM_CPLQ_DCRD_VC0 == 0)
// Parameter Type: Feature Setting
// 
// Specifies the depth of the Completion Data Queue/RAM. The number of entries in the completion data buffer for VC0. This 
// option is read-only if the queue is bypassed or Decouple Depth from Credit is not selected. For 256-bit configurations 
// this depth corresponds to one half of the total data storage capacity for this particular queue type.
`define RADM_CPLQ_DDP_VC0 3

//
//Values that don't need to appear in the GUI
//

`define RADM_PQ_HPW_VC0 6


`define RADM_NPQ_HPW_VC0 6


`define RADM_CPLQ_HPW_VC0 2


`define RADM_PQ_DPW_VC0 7


`define RADM_NPQ_DPW_VC0 4


`define RADM_CPLQ_DPW_VC0 2


`define CX_RADM_HDP_VC0 111


`define CX_RADM_DDP_VC0 112

//
//VC1 Config
//


// Name:           RADM_PQ_HCRD_VC1
// Default:        0 (CX_NVC<=1 ||  RADM_P_QMODE_VC1==4 ? 0 : RADM_PQ_HCRD_VC0)
// Values:         0, ..., 127
// Enabled:        CX_NVC>1 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Specifies the # of Posted Hdr Credits to Advertise.
`define RADM_PQ_HCRD_VC1 8'd0


// Name:           RADM_PQ_DCRD_VC1
// Default:        0 (CX_NVC<=1 ||  RADM_P_QMODE_VC1==4 ? 0 : RADM_PQ_DCRD_VC0)
// Values:         0, ..., 2047
// Enabled:        CX_NVC>1 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Specifies the # of Posted Data Credits to Advertise. 
//  One data credit = 128 bits of data
`define RADM_PQ_DCRD_VC1 12'd0


// Name:           RADM_NPQ_HCRD_VC1
// Default:        1 (CX_NVC<=1 ? 1 : RADM_NPQ_HCRD_VC0)
// Values:         1, ..., 127
// Enabled:        CX_NVC>1 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Specifies the # of Non-Posted Hdr Credits to Advertise.
`define RADM_NPQ_HCRD_VC1 8'd1


// Name:           RADM_NPQ_DCRD_VC1
// Default:        1 (CX_NVC<=1 ? 1 : RADM_NPQ_DCRD_VC0)
// Values:         1, ..., 2047
// Enabled:        CX_NVC>1 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Specifies the # of Non-Posted Data Credits to Advertise. 
//  One data credit = 128 bits of data
`define RADM_NPQ_DCRD_VC1 12'd1


// Name:           RADM_CPLQ_HCRD_VC1
// Default:        0 ((CX_NVC<=1 || RADM_CPL_QMODE_VC1==4) ? 0 : RADM_CPLQ_HCRD_VC0)
// Values:         0, ..., 127
// Enabled:        CX_NVC>1 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Specifies the # of Completion Hdr Credits to Advertise.
`define RADM_CPLQ_HCRD_VC1 8'd0


// Name:           RADM_CPLQ_DCRD_VC1
// Default:        0 ((CX_NVC<=1 || RADM_CPL_QMODE_VC1==4) ? 0 : RADM_CPLQ_DCRD_VC0)
// Values:         0, ..., 2047
// Enabled:        CX_NVC>1 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Specifies the # of Completion Data Credits to Advertise. 
//  One data credit = 128 bits of data
`define RADM_CPLQ_DCRD_VC1 12'd0


// Name:           CX_RADM_ORDERING_RULES_VC1
// Default:        PCIe Ordering Rules (CX_RADM_ORDERING_RULES)
// Values:         Strict Priority (0x0), PCIe Ordering Rules (0x1)
// Enabled:        CX_NVC>1 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Specifies the ordering scheme for sending received TLPs to the application: 
//  - 0: Strict Priority: The priority order is Posted, then Completion, then Non-Posted 
//  - 1: PCI Ordering Rules: The arbitration is according to the ordering rules in the PCI Express 3.1 Specification. 
// For more details, see the "Native Core Receive Ordering Schemes" section in the "Advanced Ordering Information" 
// appendix of the Databook. 
// You can change the ordering rule scheme by writing to the TLP_TYPE_ORDERING_VC0 field in the VC0_P_RX_Q_CTRL_OFF 
// register.
`define CX_RADM_ORDERING_RULES_VC1 1'h1


// Name:           RADM_DEPTH_DECOUPLE_VC1
// Default:        0 (CX_NVC<=1 && RADM_DEPTH_DECOUPLE_VC0)
// Values:         0, 1
// Enabled:        CX_NVC>1 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Selecting this option allow RAM depths to be specified independantly 
//  from the advertised credits.
// `define RADM_DEPTH_DECOUPLE_VC1


// Name:           RADM_PQ_HDP_VC1
// Default:        0 (CX_NVC<=1 ? 0 
//                 : RADM_P_QMODE_VC1==4 ? ( (CX_RADMQ_MODE==2) ? RADM_SEG_BUF_MIN_DPT : 0 ) 
//                 : [<functionof> CX_RADMQ_MODE RADM_PQ_HCRD_VC1 CX_NHQ CUT_THROUGH_INVOLVED RADM_PQ_HSCALE_VC1])
// Values:         0, ..., 65535
// Enabled:        CX_NVC>1 && CX_RADMQ_MODE==2 && RADM_P_QMODE_VC1!=4 && 
//                 RADM_DEPTH_DECOUPLE_VC1==1
// Parameter Type: Feature Setting
// 
// Specifies the depth of the Posted Hdr Queue/RAM.
`define RADM_PQ_HDP_VC1 0


// Name:           RADM_PQ_DDP_VC1
// Default:        0 (CX_NVC<=1 ? 0 
//                 : RADM_P_QMODE_VC1==4 ? ( (CX_RADMQ_MODE==2) ? RADM_SEG_BUF_MIN_DPT : 0 ) 
//                 : [<functionof> RADM_PQ_HCRD_VC1 RADM_PQ_DCRD_VC1 CX_NW CX_NHQ CC_DEVICE_TYPE CC_SW CX_ECRC_STRIP_ENABLE RADM_SEG_BUF_CT_DPT_ADJ RADM_PQ_DSCALE_VC1])
// Values:         0, ..., 65535
// Enabled:        CX_NVC>1 && CX_RADMQ_MODE==2 && RADM_P_QMODE_VC1!=4 && 
//                 RADM_DEPTH_DECOUPLE_VC1==1
// Parameter Type: Feature Setting
// 
// Specifies the depth of the Posted Data Queue/RAM.
`define RADM_PQ_DDP_VC1 0


// Name:           RADM_NPQ_HDP_VC1
// Default:        0 (CX_NVC<=1 ? 0 
//                 : RADM_NP_QMODE_VC1==4 ? ( (CX_RADMQ_MODE==2) ? RADM_SEG_BUF_MIN_DPT : 0 ) 
//                 : [<functionof> CX_RADMQ_MODE RADM_NPQ_HCRD_VC1 CUT_THROUGH_INVOLVED CX_NHQ RADM_NPQ_HSCALE_VC1])
// Values:         0, ..., 65535
// Enabled:        CX_NVC>1 && CX_RADMQ_MODE==2 && RADM_NP_QMODE_VC1!=4 && 
//                 RADM_DEPTH_DECOUPLE_VC1==1
// Parameter Type: Feature Setting
// 
// Specifies the depth of the non-posted Hdr Queue/RAM.
`define RADM_NPQ_HDP_VC1 0


// Name:           RADM_NPQ_DDP_VC1
// Default:        0 (CX_NVC<=1 ? 0 
//                 : RADM_NP_QMODE_VC1==4 ? ( (CX_RADMQ_MODE==2) ? RADM_SEG_BUF_MIN_DPT : 0 ) 
//                 : [<functionof> 1 CX_RADMQ_MODE RADM_NPQ_HCRD_VC1 RADM_NPQ_DCRD_VC1 CUT_THROUGH_INVOLVED CX_NW CX_NHQ CC_DEVICE_TYPE CC_SW CX_ECRC_STRIP_ENABLE RADM_NPQ_DSCALE_VC1])
// Values:         0, ..., 65535
// Enabled:        CX_NVC>1 && CX_RADMQ_MODE==2 && RADM_NP_QMODE_VC1!=4 && 
//                 RADM_DEPTH_DECOUPLE_VC1==1
// Parameter Type: Feature Setting
// 
// Specifies the depth of the non-posted Data Queue/RAM.
`define RADM_NPQ_DDP_VC1 0


// Name:           RADM_CPLQ_HDP_VC1
// Default:        0 (CX_NVC<=1 ? 0 
//                 : RADM_CPL_QMODE_VC1==4 ? ( (CX_RADMQ_MODE==2) ? RADM_SEG_BUF_MIN_DPT : 0 ) 
//                 : [<functionof> CX_RADMQ_MODE RADM_CPLQ_HCRD_VC1 CUT_THROUGH_INVOLVED CX_NHQ CX_MAX_TAG CX_APP_RD_REQ_SIZE CX_RCB RADM_CPLQ_HSCALE_VC1])
// Values:         0, ..., 65535
// Enabled:        CX_NVC>1 && CX_RADMQ_MODE==2 && RADM_CPL_QMODE_VC1!=4 && 
//                 (RADM_DEPTH_DECOUPLE_VC1==1 || RADM_CPLQ_HCRD_VC1 == 0)
// Parameter Type: Feature Setting
// 
// Specifies the depth of the Completion Hdr Queue/RAM.
`define RADM_CPLQ_HDP_VC1 0

////reuse-pragma attr CheckExpr[@CX_RADMQ_MODE==2] {@RADM_CPLQ_DDP_VC1 >= @RADM_SEG_BUF_MIN_DPT}

// Name:           RADM_CPLQ_DDP_VC1
// Default:        0 (CX_NVC<=1 ? 0 
//                 : RADM_CPL_QMODE_VC1==4 ? ( (CX_RADMQ_MODE==2) ? RADM_SEG_BUF_MIN_DPT : 0 ) 
//                 : [<functionof> CX_RADMQ_MODE RADM_CPLQ_HDP_VC1 RADM_CPLQ_DCRD_VC1 CUT_THROUGH_INVOLVED CX_NHQ CX_NW CX_MAX_TAG CX_APP_RD_REQ_SIZE CC_DEVICE_TYPE CC_SW CX_ECRC_STRIP_ENABLE RADM_SEG_BUF_CT_DPT_ADJ RADM_CPLQ_DSCALE_VC1])
// Values:         0, ..., 65535
// Enabled:        CX_NVC>1 && CX_RADMQ_MODE==2 && RADM_CPL_QMODE_VC1!=4 && 
//                 (RADM_DEPTH_DECOUPLE_VC1==1 || RADM_CPLQ_DCRD_VC1 == 0)
// Parameter Type: Feature Setting
// 
// Specifies the depth of the Completion Data Queue/RAM.
`define RADM_CPLQ_DDP_VC1 0

 

//
//Values that don't need to appear in the GUI
//


`define RADM_PQ_HPW_VC1 0


`define RADM_NPQ_HPW_VC1 0


`define RADM_CPLQ_HPW_VC1 0


`define RADM_PQ_DPW_VC1 0


`define RADM_NPQ_DPW_VC1 0


`define RADM_CPLQ_DPW_VC1 0


`define CX_RADM_HDP_VC1 0


`define CX_RADM_DDP_VC1 0

//
//End VC1 Config
//


//
//VC2 Config
//


// Name:           RADM_PQ_HCRD_VC2
// Default:        0 (CX_NVC<=2 ||  RADM_P_QMODE_VC2==4 ? 0 : RADM_PQ_HCRD_VC0)
// Values:         0, ..., 127
// Enabled:        CX_NVC>2 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Specifies the # of Posted Hdr Credits to Advertise.
`define RADM_PQ_HCRD_VC2 8'd0


// Name:           RADM_PQ_DCRD_VC2
// Default:        0 (CX_NVC<=2 ||  RADM_P_QMODE_VC2==4 ? 0 : RADM_PQ_DCRD_VC0)
// Values:         0, ..., 2047
// Enabled:        CX_NVC>2 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Specifies the # of Posted Data Credits to Advertise. 
//  One data credit = 128 bits of data
`define RADM_PQ_DCRD_VC2 12'd0


// Name:           RADM_NPQ_HCRD_VC2
// Default:        1 (CX_NVC<=2 ? 1 : RADM_NPQ_HCRD_VC0)
// Values:         1, ..., 127
// Enabled:        CX_NVC>2 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Specifies the # of Non-Posted Hdr Credits to Advertise.
`define RADM_NPQ_HCRD_VC2 8'd1


// Name:           RADM_NPQ_DCRD_VC2
// Default:        1 (CX_NVC<=2 ? 1 : RADM_NPQ_DCRD_VC0)
// Values:         1, ..., 2047
// Enabled:        CX_NVC>2 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Specifies the # of Non-Posted Data Credits to Advertise. 
//  One data credit = 128 bits of data
`define RADM_NPQ_DCRD_VC2 12'd1


// Name:           RADM_CPLQ_HCRD_VC2
// Default:        0 ((CX_NVC<=2 || RADM_CPL_QMODE_VC2==4) ? 0 : RADM_CPLQ_HCRD_VC0)
// Values:         0, ..., 127
// Enabled:        CX_NVC>2 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Specifies the # of Completion Hdr Credits to Advertise.
`define RADM_CPLQ_HCRD_VC2 8'd0


// Name:           RADM_CPLQ_DCRD_VC2
// Default:        0 ((CX_NVC<=2 || RADM_CPL_QMODE_VC2==4) ? 0 : RADM_CPLQ_DCRD_VC0)
// Values:         0, ..., 2047
// Enabled:        CX_NVC>2 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Specifies the # of Completion Data Credits to Advertise. 
//  One data credit = 128 bits of data
`define RADM_CPLQ_DCRD_VC2 12'd0


// Name:           CX_RADM_ORDERING_RULES_VC2
// Default:        PCIe Ordering Rules (CX_RADM_ORDERING_RULES)
// Values:         Strict Priority (0x0), PCIe Ordering Rules (0x1)
// Enabled:        CX_NVC>2 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Specifies the ordering scheme for sending received TLPs to the application: 
//  - 0: Strict Priority: The priority order is Posted, then Completion, then Non-Posted 
//  - 1: PCI Ordering Rules: The arbitration is according to the ordering rules in the PCI Express 3.1 Specification. 
// For more details, see the "Native Core Receive Ordering Schemes" section in the "Advanced Ordering Information" 
// appendix of the Databook. 
// You can change the ordering rule scheme by writing to the TLP_TYPE_ORDERING_VC0 field in the VC0_P_RX_Q_CTRL_OFF 
// register.
`define CX_RADM_ORDERING_RULES_VC2 1'h1


// Name:           RADM_DEPTH_DECOUPLE_VC2
// Default:        0 (CX_NVC<=2 && RADM_DEPTH_DECOUPLE_VC0)
// Values:         0, 1
// Enabled:        CX_NVC>2 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Selecting this option allow RAM depths to be specified independantly 
//  from the advertised credits.
// `define RADM_DEPTH_DECOUPLE_VC2


// Name:           RADM_PQ_HDP_VC2
// Default:        0 (CX_NVC<=2 ? 0 
//                 : RADM_P_QMODE_VC2==4 ? ( (CX_RADMQ_MODE==2) ? RADM_SEG_BUF_MIN_DPT : 0 ) 
//                 : [<functionof> CX_RADMQ_MODE RADM_PQ_HCRD_VC2 CX_NHQ CUT_THROUGH_INVOLVED RADM_PQ_HSCALE_VC2])
// Values:         0, ..., 65535
// Enabled:        CX_NVC>2 && CX_RADMQ_MODE==2 && RADM_P_QMODE_VC2!=4 && 
//                 RADM_DEPTH_DECOUPLE_VC2==1
// Parameter Type: Feature Setting
// 
// Specifies the depth of the Posted Hdr Queue/RAM.
`define RADM_PQ_HDP_VC2 0


// Name:           RADM_PQ_DDP_VC2
// Default:        0 (CX_NVC<=2 ? 0 
//                 : RADM_P_QMODE_VC2==4 ? ( (CX_RADMQ_MODE==2) ? RADM_SEG_BUF_MIN_DPT : 0 ) 
//                 : [<functionof> RADM_PQ_HCRD_VC2 RADM_PQ_DCRD_VC2 CX_NW CX_NHQ CC_DEVICE_TYPE CC_SW CX_ECRC_STRIP_ENABLE RADM_SEG_BUF_CT_DPT_ADJ RADM_PQ_DSCALE_VC2])
// Values:         0, ..., 65535
// Enabled:        CX_NVC>2 && CX_RADMQ_MODE==2 && RADM_P_QMODE_VC2!=4 && 
//                 RADM_DEPTH_DECOUPLE_VC2==1
// Parameter Type: Feature Setting
// 
// Specifies the depth of the Posted Data Queue/RAM.
`define RADM_PQ_DDP_VC2 0


// Name:           RADM_NPQ_HDP_VC2
// Default:        0 (CX_NVC<=2 ? 0 
//                 : RADM_NP_QMODE_VC2==4 ? ( (CX_RADMQ_MODE==2) ? RADM_SEG_BUF_MIN_DPT : 0 ) 
//                 : [<functionof> CX_RADMQ_MODE RADM_NPQ_HCRD_VC2 CUT_THROUGH_INVOLVED CX_NHQ RADM_NPQ_HSCALE_VC2])
// Values:         0, ..., 65535
// Enabled:        CX_NVC>2 && CX_RADMQ_MODE==2 && RADM_NP_QMODE_VC2!=4 && 
//                 RADM_DEPTH_DECOUPLE_VC2==1
// Parameter Type: Feature Setting
// 
// Specifies the depth of the non-posted Hdr Queue/RAM.
`define RADM_NPQ_HDP_VC2 0


// Name:           RADM_NPQ_DDP_VC2
// Default:        0 (CX_NVC<=2 ? 0 
//                 : RADM_NP_QMODE_VC2==4 ? ( (CX_RADMQ_MODE==2) ? RADM_SEG_BUF_MIN_DPT : 0 ) 
//                 : [<functionof> 2 CX_RADMQ_MODE RADM_NPQ_HCRD_VC2 RADM_NPQ_DCRD_VC2 CUT_THROUGH_INVOLVED CX_NW CX_NHQ CC_DEVICE_TYPE CC_SW CX_ECRC_STRIP_ENABLE RADM_NPQ_DSCALE_VC2])
// Values:         0, ..., 65535
// Enabled:        CX_NVC>2 && CX_RADMQ_MODE==2 && RADM_NP_QMODE_VC2!=4 && 
//                 RADM_DEPTH_DECOUPLE_VC2==1
// Parameter Type: Feature Setting
// 
// Specifies the depth of the non-posted Data Queue/RAM.
`define RADM_NPQ_DDP_VC2 0


// Name:           RADM_CPLQ_HDP_VC2
// Default:        0 (CX_NVC<=2 ? 0 
//                 : RADM_CPL_QMODE_VC2==4 ? ( (CX_RADMQ_MODE==2) ? RADM_SEG_BUF_MIN_DPT : 0 ) 
//                 : [<functionof> CX_RADMQ_MODE RADM_CPLQ_HCRD_VC2 CUT_THROUGH_INVOLVED CX_NHQ CX_MAX_TAG CX_APP_RD_REQ_SIZE CX_RCB RADM_CPLQ_HSCALE_VC2])
// Values:         0, ..., 65535
// Enabled:        CX_NVC>2 && CX_RADMQ_MODE==2 && RADM_CPL_QMODE_VC2!=4 && 
//                 (RADM_DEPTH_DECOUPLE_VC2==1 || RADM_CPLQ_HCRD_VC2 == 0)
// Parameter Type: Feature Setting
// 
// Specifies the depth of the Completion Hdr Queue/RAM.
`define RADM_CPLQ_HDP_VC2 0


// Name:           RADM_CPLQ_DDP_VC2
// Default:        0 (CX_NVC<=2 ? 0 
//                 : RADM_CPL_QMODE_VC2==4 ? ( (CX_RADMQ_MODE==2) ? RADM_SEG_BUF_MIN_DPT : 0 ) 
//                 : [<functionof> CX_RADMQ_MODE RADM_CPLQ_HDP_VC2 RADM_CPLQ_DCRD_VC2 CUT_THROUGH_INVOLVED CX_NHQ CX_NW CX_MAX_TAG CX_APP_RD_REQ_SIZE CC_DEVICE_TYPE CC_SW CX_ECRC_STRIP_ENABLE RADM_SEG_BUF_CT_DPT_ADJ RADM_CPLQ_DSCALE_VC2])
// Values:         0, ..., 65535
// Enabled:        CX_NVC>2 && CX_RADMQ_MODE==2 && RADM_CPL_QMODE_VC2!=4 && 
//                 (RADM_DEPTH_DECOUPLE_VC2==1 || RADM_CPLQ_DCRD_VC2 == 0)
// Parameter Type: Feature Setting
// 
// Specifies the depth of the Completion Data Queue/RAM.
`define RADM_CPLQ_DDP_VC2 0


//
//Values that don't need to appear in the GUI
//


`define RADM_PQ_HPW_VC2 0


`define RADM_NPQ_HPW_VC2 0


`define RADM_CPLQ_HPW_VC2 0


`define RADM_PQ_DPW_VC2 0


`define RADM_NPQ_DPW_VC2 0


`define RADM_CPLQ_DPW_VC2 0


`define CX_RADM_HDP_VC2 0


`define CX_RADM_DDP_VC2 0

//
//End VC2 Config
//


//
//VC3 Config
//


// Name:           RADM_PQ_HCRD_VC3
// Default:        0 (CX_NVC<=3 ||  RADM_P_QMODE_VC3==4 ? 0 : RADM_PQ_HCRD_VC0)
// Values:         0, ..., 127
// Enabled:        CX_NVC>3 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Specifies the # of Posted Hdr Credits to Advertise.
`define RADM_PQ_HCRD_VC3 8'd0


// Name:           RADM_PQ_DCRD_VC3
// Default:        0 (CX_NVC<=3 ||  RADM_P_QMODE_VC3==4 ? 0 : RADM_PQ_DCRD_VC0)
// Values:         0, ..., 2047
// Enabled:        CX_NVC>3 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Specifies the # of Posted Data Credits to Advertise. 
//  One data credit = 128 bits of data
`define RADM_PQ_DCRD_VC3 12'd0


// Name:           RADM_NPQ_HCRD_VC3
// Default:        1 (CX_NVC<=3 ? 1 : RADM_NPQ_HCRD_VC0)
// Values:         1, ..., 127
// Enabled:        CX_NVC>3 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Specifies the # of Non-Posted Hdr Credits to Advertise.
`define RADM_NPQ_HCRD_VC3 8'd1


// Name:           RADM_NPQ_DCRD_VC3
// Default:        1 (CX_NVC<=3 ? 1 : RADM_NPQ_DCRD_VC0)
// Values:         1, ..., 2047
// Enabled:        CX_NVC>3 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Specifies the # of Non-Posted Data Credits to Advertise. 
//  One data credit = 128 bits of data
`define RADM_NPQ_DCRD_VC3 12'd1


// Name:           RADM_CPLQ_HCRD_VC3
// Default:        0 ((CX_NVC<=3 || RADM_CPL_QMODE_VC3==4) ? 0 : RADM_CPLQ_HCRD_VC0)
// Values:         0, ..., 127
// Enabled:        CX_NVC>3 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Specifies the # of Completion Hdr Credits to Advertise.
`define RADM_CPLQ_HCRD_VC3 8'd0


// Name:           RADM_CPLQ_DCRD_VC3
// Default:        0 ((CX_NVC<=3 || RADM_CPL_QMODE_VC3==4) ? 0 : RADM_CPLQ_DCRD_VC0)
// Values:         0, ..., 2047
// Enabled:        CX_NVC>3 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Specifies the # of Completion Data Credits to Advertise. 
//  One data credit = 128 bits of data
`define RADM_CPLQ_DCRD_VC3 12'd0


// Name:           CX_RADM_ORDERING_RULES_VC3
// Default:        PCIe Ordering Rules (CX_RADM_ORDERING_RULES)
// Values:         Strict Priority (0x0), PCIe Ordering Rules (0x1)
// Enabled:        CX_NVC>3 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Specifies the ordering scheme for sending received TLPs to the application: 
//  - 0: Strict Priority: The priority order is Posted, then Completion, then Non-Posted 
//  - 1: PCI Ordering Rules: The arbitration is according to the ordering rules in the PCI Express 3.1 Specification. 
// For more details, see the "Native Core Receive Ordering Schemes" section in the "Advanced Ordering Information" 
// appendix of the Databook. 
// You can change the ordering rule scheme by writing to the TLP_TYPE_ORDERING_VC0 field in the VC0_P_RX_Q_CTRL_OFF 
// register.
`define CX_RADM_ORDERING_RULES_VC3 1'h1


// Name:           RADM_DEPTH_DECOUPLE_VC3
// Default:        0 (CX_NVC<=3 && RADM_DEPTH_DECOUPLE_VC0)
// Values:         0, 1
// Enabled:        CX_NVC>3 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Selecting this option allow RAM depths to be specified independantly 
//  from the advertised credits.
// `define RADM_DEPTH_DECOUPLE_VC3


// Name:           RADM_PQ_HDP_VC3
// Default:        0 (CX_NVC<=3 ? 0 
//                 : RADM_P_QMODE_VC3==4 ? ( (CX_RADMQ_MODE==2) ? RADM_SEG_BUF_MIN_DPT : 0 ) 
//                 : [<functionof> CX_RADMQ_MODE RADM_PQ_HCRD_VC3 CX_NHQ CUT_THROUGH_INVOLVED RADM_PQ_HSCALE_VC3])
// Values:         0, ..., 65535
// Enabled:        CX_NVC>3 && CX_RADMQ_MODE==2 && RADM_P_QMODE_VC3!=4 && 
//                 RADM_DEPTH_DECOUPLE_VC3==1
// Parameter Type: Feature Setting
// 
// Specifies the depth of the Posted Hdr Queue/RAM.
`define RADM_PQ_HDP_VC3 0


// Name:           RADM_PQ_DDP_VC3
// Default:        0 (CX_NVC<=3 ? 0 
//                 : RADM_P_QMODE_VC3==4 ? ( (CX_RADMQ_MODE==2) ? RADM_SEG_BUF_MIN_DPT : 0 ) 
//                 : [<functionof> RADM_PQ_HCRD_VC3 RADM_PQ_DCRD_VC3 CX_NW CX_NHQ CC_DEVICE_TYPE CC_SW CX_ECRC_STRIP_ENABLE RADM_SEG_BUF_CT_DPT_ADJ RADM_PQ_DSCALE_VC3])
// Values:         0, ..., 65535
// Enabled:        CX_NVC>3 && CX_RADMQ_MODE==2 && RADM_P_QMODE_VC3!=4 && 
//                 RADM_DEPTH_DECOUPLE_VC3==1
// Parameter Type: Feature Setting
// 
// Specifies the depth of the Posted Data Queue/RAM.
`define RADM_PQ_DDP_VC3 0


// Name:           RADM_NPQ_HDP_VC3
// Default:        0 (CX_NVC<=3 ? 0 
//                 : RADM_NP_QMODE_VC3==4 ? ( (CX_RADMQ_MODE==2) ? RADM_SEG_BUF_MIN_DPT : 0 ) 
//                 : [<functionof> CX_RADMQ_MODE RADM_NPQ_HCRD_VC3 CUT_THROUGH_INVOLVED CX_NHQ RADM_NPQ_HSCALE_VC3])
// Values:         0, ..., 65535
// Enabled:        CX_NVC>3 && CX_RADMQ_MODE==2 && RADM_NP_QMODE_VC3!=4 && 
//                 RADM_DEPTH_DECOUPLE_VC3==1
// Parameter Type: Feature Setting
// 
// Specifies the depth of the non-posted Hdr Queue/RAM.
`define RADM_NPQ_HDP_VC3 0


// Name:           RADM_NPQ_DDP_VC3
// Default:        0 (CX_NVC<=3 ? 0 
//                 : RADM_NP_QMODE_VC3==4 ? ( (CX_RADMQ_MODE==2) ? RADM_SEG_BUF_MIN_DPT : 0 ) 
//                 : [<functionof> 3 CX_RADMQ_MODE RADM_NPQ_HCRD_VC3 RADM_NPQ_DCRD_VC3 CUT_THROUGH_INVOLVED CX_NW CX_NHQ CC_DEVICE_TYPE CC_SW CX_ECRC_STRIP_ENABLE RADM_NPQ_DSCALE_VC3])
// Values:         0, ..., 65535
// Enabled:        CX_NVC>3 && CX_RADMQ_MODE==2 && RADM_NP_QMODE_VC3!=4 && 
//                 RADM_DEPTH_DECOUPLE_VC3==1
// Parameter Type: Feature Setting
// 
// Specifies the depth of the non-posted Data Queue/RAM.
`define RADM_NPQ_DDP_VC3 0


// Name:           RADM_CPLQ_HDP_VC3
// Default:        0 (CX_NVC<=3 ? 0 
//                 : RADM_CPL_QMODE_VC3==4 ? ( (CX_RADMQ_MODE==2) ? RADM_SEG_BUF_MIN_DPT : 0 ) 
//                 : [<functionof> CX_RADMQ_MODE RADM_CPLQ_HCRD_VC3 CUT_THROUGH_INVOLVED CX_NHQ CX_MAX_TAG CX_APP_RD_REQ_SIZE CX_RCB RADM_CPLQ_HSCALE_VC3])
// Values:         0, ..., 65535
// Enabled:        CX_NVC>3 && CX_RADMQ_MODE==2 && RADM_CPL_QMODE_VC3!=4 && 
//                 (RADM_DEPTH_DECOUPLE_VC3==1 || RADM_CPLQ_HCRD_VC3 == 0)
// Parameter Type: Feature Setting
// 
// Specifies the depth of the Completion Hdr Queue/RAM.
`define RADM_CPLQ_HDP_VC3 0


// Name:           RADM_CPLQ_DDP_VC3
// Default:        0 (CX_NVC<=3 ? 0 
//                 : RADM_CPL_QMODE_VC3==4 ? ( (CX_RADMQ_MODE==2) ? RADM_SEG_BUF_MIN_DPT : 0 ) 
//                 : [<functionof> CX_RADMQ_MODE RADM_CPLQ_HDP_VC3 RADM_CPLQ_DCRD_VC3 CUT_THROUGH_INVOLVED CX_NHQ CX_NW CX_MAX_TAG CX_APP_RD_REQ_SIZE CC_DEVICE_TYPE CC_SW CX_ECRC_STRIP_ENABLE RADM_SEG_BUF_CT_DPT_ADJ RADM_CPLQ_DSCALE_VC3])
// Values:         0, ..., 65535
// Enabled:        CX_NVC>3 && CX_RADMQ_MODE==2 && RADM_CPL_QMODE_VC3!=4 && 
//                 (RADM_DEPTH_DECOUPLE_VC3==1 || RADM_CPLQ_DCRD_VC3 == 0)
// Parameter Type: Feature Setting
// 
// Specifies the depth of the Completion Data Queue/RAM.
`define RADM_CPLQ_DDP_VC3 0


//
//Values that don't need to appear in the GUI
//


`define RADM_PQ_HPW_VC3 0


`define RADM_NPQ_HPW_VC3 0


`define RADM_CPLQ_HPW_VC3 0


`define RADM_PQ_DPW_VC3 0


`define RADM_NPQ_DPW_VC3 0


`define RADM_CPLQ_DPW_VC3 0


`define CX_RADM_HDP_VC3 0


`define CX_RADM_DDP_VC3 0

//
//End VC3 Config
//


//
//VC4 Config
//


// Name:           RADM_PQ_HCRD_VC4
// Default:        0 (CX_NVC<=4 ||  RADM_P_QMODE_VC4==4 ? 0 : RADM_PQ_HCRD_VC0)
// Values:         0, ..., 127
// Enabled:        CX_NVC>4 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Specifies the # of Posted Hdr Credits to Advertise.
`define RADM_PQ_HCRD_VC4 8'd0


// Name:           RADM_PQ_DCRD_VC4
// Default:        0 (CX_NVC<=4 ||  RADM_P_QMODE_VC4==4 ? 0 : RADM_PQ_DCRD_VC0)
// Values:         0, ..., 2047
// Enabled:        CX_NVC>4 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Specifies the # of Posted Data Credits to Advertise. 
//  One data credit = 128 bits of data
`define RADM_PQ_DCRD_VC4 12'd0


// Name:           RADM_NPQ_HCRD_VC4
// Default:        1 (CX_NVC<=4 ? 1 : RADM_NPQ_HCRD_VC0)
// Values:         1, ..., 127
// Enabled:        CX_NVC>4 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Specifies the # of Non-Posted Hdr Credits to Advertise.
`define RADM_NPQ_HCRD_VC4 8'd1


// Name:           RADM_NPQ_DCRD_VC4
// Default:        1 (CX_NVC<=4 ? 1 : RADM_NPQ_DCRD_VC0)
// Values:         1, ..., 2047
// Enabled:        CX_NVC>4 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Specifies the # of Non-Posted Data Credits to Advertise. 
//  One data credit = 128 bits of data
`define RADM_NPQ_DCRD_VC4 12'd1


// Name:           RADM_CPLQ_HCRD_VC4
// Default:        0 ((CX_NVC<=4 || RADM_CPL_QMODE_VC4==4) ? 0 : RADM_CPLQ_HCRD_VC0)
// Values:         0, ..., 127
// Enabled:        CX_NVC>4 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Specifies the # of Completion Hdr Credits to Advertise.
`define RADM_CPLQ_HCRD_VC4 8'd0


// Name:           RADM_CPLQ_DCRD_VC4
// Default:        0 ((CX_NVC<=4 || RADM_CPL_QMODE_VC4==4) ? 0 : RADM_CPLQ_DCRD_VC0)
// Values:         0, ..., 2047
// Enabled:        CX_NVC>4 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Specifies the # of Completion Data Credits to Advertise. 
//  One data credit = 128 bits of data
`define RADM_CPLQ_DCRD_VC4 12'd0


// Name:           CX_RADM_ORDERING_RULES_VC4
// Default:        PCIe Ordering Rules (CX_RADM_ORDERING_RULES)
// Values:         Strict Priority (0x0), PCIe Ordering Rules (0x1)
// Enabled:        CX_NVC>4 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Specifies the ordering scheme for sending received TLPs to the application: 
//  - 0: Strict Priority: The priority order is Posted, then Completion, then Non-Posted 
//  - 1: PCI Ordering Rules: The arbitration is according to the ordering rules in the PCI Express 3.1 Specification. 
//  For more details, see the "Native Core Receive Ordering Schemes" section in the "Advanced Ordering Information" 
//  appendix of the Databook. 
// You can change the ordering rule scheme by writing to the TLP_TYPE_ORDERING_VC0 field in the VC0_P_RX_Q_CTRL_OFF 
// register.
`define CX_RADM_ORDERING_RULES_VC4 1'h1


// Name:           RADM_DEPTH_DECOUPLE_VC4
// Default:        0 (CX_NVC<=4 && RADM_DEPTH_DECOUPLE_VC0)
// Values:         0, 1
// Enabled:        CX_NVC>4 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Selecting this option allow RAM depths to be specified independantly 
//  from the advertised credits.
// `define RADM_DEPTH_DECOUPLE_VC4


// Name:           RADM_PQ_HDP_VC4
// Default:        0 (CX_NVC<=4 ? 0 
//                 : RADM_P_QMODE_VC4==4 ? ( (CX_RADMQ_MODE==2) ? RADM_SEG_BUF_MIN_DPT : 0 ) 
//                 : [<functionof> CX_RADMQ_MODE RADM_PQ_HCRD_VC4 CX_NHQ CUT_THROUGH_INVOLVED RADM_PQ_HSCALE_VC4])
// Values:         0, ..., 65535
// Enabled:        CX_NVC>4 && CX_RADMQ_MODE==2 && RADM_P_QMODE_VC4!=4 && 
//                 RADM_DEPTH_DECOUPLE_VC4==1
// Parameter Type: Feature Setting
// 
// Specifies the depth of the Posted Hdr Queue/RAM.
`define RADM_PQ_HDP_VC4 0


// Name:           RADM_PQ_DDP_VC4
// Default:        0 (CX_NVC<=4 ? 0 
//                 : RADM_P_QMODE_VC4==4 ? ( (CX_RADMQ_MODE==2) ? RADM_SEG_BUF_MIN_DPT : 0 ) 
//                 : [<functionof> RADM_PQ_HCRD_VC4 RADM_PQ_DCRD_VC4 CX_NW CX_NHQ CC_DEVICE_TYPE CC_SW CX_ECRC_STRIP_ENABLE RADM_SEG_BUF_CT_DPT_ADJ RADM_PQ_DSCALE_VC4])
// Values:         0, ..., 65535
// Enabled:        CX_NVC>4 && CX_RADMQ_MODE==2 && RADM_P_QMODE_VC4!=4 && 
//                 RADM_DEPTH_DECOUPLE_VC4==1
// Parameter Type: Feature Setting
// 
// Specifies the depth of the Posted Data Queue/RAM.
`define RADM_PQ_DDP_VC4 0


// Name:           RADM_NPQ_HDP_VC4
// Default:        0 (CX_NVC<=4 ? 0 
//                 : RADM_NP_QMODE_VC4==4 ? ( (CX_RADMQ_MODE==2) ? RADM_SEG_BUF_MIN_DPT : 0 ) 
//                 : [<functionof> CX_RADMQ_MODE RADM_NPQ_HCRD_VC4 CUT_THROUGH_INVOLVED CX_NHQ RADM_NPQ_HSCALE_VC4])
// Values:         0, ..., 65535
// Enabled:        CX_NVC>4 && CX_RADMQ_MODE==2 && RADM_NP_QMODE_VC4!=4 && 
//                 RADM_DEPTH_DECOUPLE_VC4==1
// Parameter Type: Feature Setting
// 
// Specifies the depth of the non-posted Hdr Queue/RAM.
`define RADM_NPQ_HDP_VC4 0


// Name:           RADM_NPQ_DDP_VC4
// Default:        0 (CX_NVC<=4 ? 0 
//                 : RADM_NP_QMODE_VC4==4 ? ( (CX_RADMQ_MODE==2) ? RADM_SEG_BUF_MIN_DPT : 0 ) 
//                 : [<functionof> 4 CX_RADMQ_MODE RADM_NPQ_HCRD_VC4 RADM_NPQ_DCRD_VC4 CUT_THROUGH_INVOLVED CX_NW CX_NHQ CC_DEVICE_TYPE CC_SW CX_ECRC_STRIP_ENABLE RADM_NPQ_DSCALE_VC4])
// Values:         0, ..., 65535
// Enabled:        CX_NVC>4 && CX_RADMQ_MODE==2 && RADM_NP_QMODE_VC4!=4 && 
//                 RADM_DEPTH_DECOUPLE_VC4==1
// Parameter Type: Feature Setting
// 
// Specifies the depth of the non-posted Data Queue/RAM.
`define RADM_NPQ_DDP_VC4 0


// Name:           RADM_CPLQ_HDP_VC4
// Default:        0 (CX_NVC<=4 ? 0 
//                 : RADM_CPL_QMODE_VC4==4 ? ( (CX_RADMQ_MODE==2) ? RADM_SEG_BUF_MIN_DPT : 0 ) 
//                 : [<functionof> CX_RADMQ_MODE RADM_CPLQ_HCRD_VC4 CUT_THROUGH_INVOLVED CX_NHQ CX_MAX_TAG CX_APP_RD_REQ_SIZE CX_RCB RADM_CPLQ_HSCALE_VC4])
// Values:         0, ..., 65535
// Enabled:        CX_NVC>4 && CX_RADMQ_MODE==2 && RADM_CPL_QMODE_VC4!=4 && 
//                 (RADM_DEPTH_DECOUPLE_VC4==1 || RADM_CPLQ_HCRD_VC4 == 0)
// Parameter Type: Feature Setting
// 
// Specifies the depth of the Completion Hdr Queue/RAM.
`define RADM_CPLQ_HDP_VC4 0


// Name:           RADM_CPLQ_DDP_VC4
// Default:        0 (CX_NVC<=4 ? 0 
//                 : RADM_CPL_QMODE_VC4==4 ? ( (CX_RADMQ_MODE==2) ? RADM_SEG_BUF_MIN_DPT : 0 ) 
//                 : [<functionof> CX_RADMQ_MODE RADM_CPLQ_HDP_VC4 RADM_CPLQ_DCRD_VC4 CUT_THROUGH_INVOLVED CX_NHQ CX_NW CX_MAX_TAG CX_APP_RD_REQ_SIZE CC_DEVICE_TYPE CC_SW CX_ECRC_STRIP_ENABLE RADM_SEG_BUF_CT_DPT_ADJ RADM_CPLQ_DSCALE_VC4])
// Values:         0, ..., 65535
// Enabled:        CX_NVC>4 && CX_RADMQ_MODE==2 && RADM_CPL_QMODE_VC4!=4 && 
//                 (RADM_DEPTH_DECOUPLE_VC4==1 || RADM_CPLQ_DCRD_VC4 == 0)
// Parameter Type: Feature Setting
// 
// Specifies the depth of the Completion Data Queue/RAM.
`define RADM_CPLQ_DDP_VC4 0


//
//Values that don't need to appear in the GUI
//


`define RADM_PQ_HPW_VC4 0


`define RADM_NPQ_HPW_VC4 0


`define RADM_CPLQ_HPW_VC4 0


`define RADM_PQ_DPW_VC4 0


`define RADM_NPQ_DPW_VC4 0


`define RADM_CPLQ_DPW_VC4 0


`define CX_RADM_HDP_VC4 0


`define CX_RADM_DDP_VC4 0

//
//End VC4 Config
//


//
//VC5 Config
//


// Name:           RADM_PQ_HCRD_VC5
// Default:        0 (CX_NVC<=5 ||  RADM_P_QMODE_VC5==4 ? 0 : RADM_PQ_HCRD_VC0)
// Values:         0, ..., 127
// Enabled:        CX_NVC>5 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Specifies the # of Posted Hdr Credits to Advertise.
`define RADM_PQ_HCRD_VC5 8'd0


// Name:           RADM_PQ_DCRD_VC5
// Default:        0 (CX_NVC<=5 ||  RADM_P_QMODE_VC5==4 ? 0 : RADM_PQ_DCRD_VC0)
// Values:         0, ..., 2047
// Enabled:        CX_NVC>5 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Specifies the # of Posted Data Credits to Advertise. 
//  One data credit = 128 bits of data
`define RADM_PQ_DCRD_VC5 12'd0


// Name:           RADM_NPQ_HCRD_VC5
// Default:        1 (CX_NVC<=5 ? 1 : RADM_NPQ_HCRD_VC0)
// Values:         1, ..., 127
// Enabled:        CX_NVC>5 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Specifies the # of Non-Posted Hdr Credits to Advertise.
`define RADM_NPQ_HCRD_VC5 8'd1


// Name:           RADM_NPQ_DCRD_VC5
// Default:        1 (CX_NVC<=5 ? 1 : RADM_NPQ_DCRD_VC0)
// Values:         1, ..., 2047
// Enabled:        CX_NVC>5 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Specifies the # of Non-Posted Data Credits to Advertise. 
//  One data credit = 128 bits of data
`define RADM_NPQ_DCRD_VC5 12'd1


// Name:           RADM_CPLQ_HCRD_VC5
// Default:        0 ((CX_NVC<=5 || RADM_CPL_QMODE_VC5==4) ? 0 : RADM_CPLQ_HCRD_VC0)
// Values:         0, ..., 127
// Enabled:        CX_NVC>5 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Specifies the # of Completion Hdr Credits to Advertise.
`define RADM_CPLQ_HCRD_VC5 8'd0


// Name:           RADM_CPLQ_DCRD_VC5
// Default:        0 ((CX_NVC<=5 || RADM_CPL_QMODE_VC5==4) ? 0 : RADM_CPLQ_DCRD_VC0)
// Values:         0, ..., 2047
// Enabled:        CX_NVC>5 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Specifies the # of Completion Data Credits to Advertise. 
//  One data credit = 128 bits of data
`define RADM_CPLQ_DCRD_VC5 12'd0


// Name:           CX_RADM_ORDERING_RULES_VC5
// Default:        PCIe Ordering Rules (CX_RADM_ORDERING_RULES)
// Values:         Strict Priority (0x0), PCIe Ordering Rules (0x1)
// Enabled:        CX_NVC>5 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Specifies the ordering scheme for sending received TLPs to the application: 
//  - 0: Strict Priority: The priority order is Posted, then Completion, then Non-Posted 
//  - 1: PCI Ordering Rules: The arbitration is according to the ordering rules in the PCI Express 3.1 Specification. 
//  For more details, see the "Native Core Receive Ordering Schemes" section in the "Advanced Ordering Information" 
//  appendix of the Databook. 
// You can change the ordering rule scheme by writing to the TLP_TYPE_ORDERING_VC0 field in the VC0_P_RX_Q_CTRL_OFF 
// register.
`define CX_RADM_ORDERING_RULES_VC5 1'h1


// Name:           RADM_DEPTH_DECOUPLE_VC5
// Default:        0 (CX_NVC<=5 && RADM_DEPTH_DECOUPLE_VC0)
// Values:         0, 1
// Enabled:        CX_NVC>5 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Selecting this option allow RAM depths to be specified independantly 
//  from the advertised credits.
// `define RADM_DEPTH_DECOUPLE_VC5


// Name:           RADM_PQ_HDP_VC5
// Default:        0 (CX_NVC<=5 ? 0 
//                 : RADM_P_QMODE_VC5==4 ? ( (CX_RADMQ_MODE==2) ? RADM_SEG_BUF_MIN_DPT : 0 ) 
//                 : [<functionof> CX_RADMQ_MODE RADM_PQ_HCRD_VC5 CX_NHQ CUT_THROUGH_INVOLVED RADM_PQ_HSCALE_VC5])
// Values:         0, ..., 65535
// Enabled:        CX_NVC>5 && CX_RADMQ_MODE==2 && RADM_P_QMODE_VC5!=4 && 
//                 RADM_DEPTH_DECOUPLE_VC5==1
// Parameter Type: Feature Setting
// 
// Specifies the depth of the Posted Hdr Queue/RAM.
`define RADM_PQ_HDP_VC5 0


// Name:           RADM_PQ_DDP_VC5
// Default:        0 (CX_NVC<=5 ? 0 
//                 : RADM_P_QMODE_VC5==4 ? ( (CX_RADMQ_MODE==2) ? RADM_SEG_BUF_MIN_DPT : 0 ) 
//                 : [<functionof> RADM_PQ_HCRD_VC5 RADM_PQ_DCRD_VC5 CX_NW CX_NHQ CC_DEVICE_TYPE CC_SW CX_ECRC_STRIP_ENABLE RADM_SEG_BUF_CT_DPT_ADJ RADM_PQ_DSCALE_VC5])
// Values:         0, ..., 65535
// Enabled:        CX_NVC>5 && CX_RADMQ_MODE==2 && RADM_P_QMODE_VC5!=4 && 
//                 RADM_DEPTH_DECOUPLE_VC5==1
// Parameter Type: Feature Setting
// 
// Specifies the depth of the Posted Data Queue/RAM.
`define RADM_PQ_DDP_VC5 0


// Name:           RADM_NPQ_HDP_VC5
// Default:        0 (CX_NVC<=5 ? 0 
//                 : RADM_NP_QMODE_VC5==4 ? ( (CX_RADMQ_MODE==2) ? RADM_SEG_BUF_MIN_DPT : 0 ) 
//                 : [<functionof> CX_RADMQ_MODE RADM_NPQ_HCRD_VC5 CUT_THROUGH_INVOLVED CX_NHQ RADM_NPQ_HSCALE_VC5])
// Values:         0, ..., 65535
// Enabled:        CX_NVC>5 && CX_RADMQ_MODE==2 && RADM_NP_QMODE_VC5!=4 && 
//                 RADM_DEPTH_DECOUPLE_VC5==1
// Parameter Type: Feature Setting
// 
// Specifies the depth of the non-posted Hdr Queue/RAM.
`define RADM_NPQ_HDP_VC5 0


// Name:           RADM_NPQ_DDP_VC5
// Default:        0 (CX_NVC<=5 ? 0 
//                 : RADM_NP_QMODE_VC5==4 ? ( (CX_RADMQ_MODE==2) ? RADM_SEG_BUF_MIN_DPT : 0 ) 
//                 : [<functionof> 5 CX_RADMQ_MODE RADM_NPQ_HCRD_VC5 RADM_NPQ_DCRD_VC5 CUT_THROUGH_INVOLVED CX_NW CX_NHQ CC_DEVICE_TYPE CC_SW CX_ECRC_STRIP_ENABLE RADM_NPQ_DSCALE_VC5])
// Values:         0, ..., 65535
// Enabled:        CX_NVC>5 && CX_RADMQ_MODE==2 && RADM_NP_QMODE_VC5!=4 && 
//                 RADM_DEPTH_DECOUPLE_VC5==1
// Parameter Type: Feature Setting
// 
// Specifies the depth of the non-posted Data Queue/RAM.
`define RADM_NPQ_DDP_VC5 0


// Name:           RADM_CPLQ_HDP_VC5
// Default:        0 (CX_NVC<=5 ? 0 
//                 : RADM_CPL_QMODE_VC5==4 ? ( (CX_RADMQ_MODE==2) ? RADM_SEG_BUF_MIN_DPT : 0 ) 
//                 : [<functionof> CX_RADMQ_MODE RADM_CPLQ_HCRD_VC5 CUT_THROUGH_INVOLVED CX_NHQ CX_MAX_TAG CX_APP_RD_REQ_SIZE CX_RCB RADM_CPLQ_HSCALE_VC5])
// Values:         0, ..., 65535
// Enabled:        CX_NVC>5 && CX_RADMQ_MODE==2 && RADM_CPL_QMODE_VC5!=4 && 
//                 (RADM_DEPTH_DECOUPLE_VC5==1 || RADM_CPLQ_HCRD_VC5 == 0)
// Parameter Type: Feature Setting
// 
// Specifies the depth of the Completion Hdr Queue/RAM.
`define RADM_CPLQ_HDP_VC5 0


// Name:           RADM_CPLQ_DDP_VC5
// Default:        0 (CX_NVC<=5 ? 0 
//                 : RADM_CPL_QMODE_VC5==4 ? ( (CX_RADMQ_MODE==2) ? RADM_SEG_BUF_MIN_DPT : 0 ) 
//                 : [<functionof> CX_RADMQ_MODE RADM_CPLQ_HDP_VC5 RADM_CPLQ_DCRD_VC5 CUT_THROUGH_INVOLVED CX_NHQ CX_NW CX_MAX_TAG CX_APP_RD_REQ_SIZE CC_DEVICE_TYPE CC_SW CX_ECRC_STRIP_ENABLE RADM_SEG_BUF_CT_DPT_ADJ RADM_CPLQ_DSCALE_VC5])
// Values:         0, ..., 65535
// Enabled:        CX_NVC>5 && CX_RADMQ_MODE==2 && RADM_CPL_QMODE_VC5!=4 && 
//                 (RADM_DEPTH_DECOUPLE_VC5==1 || RADM_CPLQ_DCRD_VC5 == 0)
// Parameter Type: Feature Setting
// 
// Specifies the depth of the Completion Data Queue/RAM.
`define RADM_CPLQ_DDP_VC5 0


//
//Values that don't need to appear in the GUI
//


`define RADM_PQ_HPW_VC5 0


`define RADM_NPQ_HPW_VC5 0


`define RADM_CPLQ_HPW_VC5 0


`define RADM_PQ_DPW_VC5 0


`define RADM_NPQ_DPW_VC5 0


`define RADM_CPLQ_DPW_VC5 0


`define CX_RADM_HDP_VC5 0


`define CX_RADM_DDP_VC5 0

//
//End VC5 Config
//


//
//VC6 Config
//


// Name:           RADM_PQ_HCRD_VC6
// Default:        0 (CX_NVC<=6 ||  RADM_P_QMODE_VC6==4 ? 0 : RADM_PQ_HCRD_VC0)
// Values:         0, ..., 127
// Enabled:        CX_NVC>6 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Specifies the # of Posted Hdr Credits to Advertise.
`define RADM_PQ_HCRD_VC6 8'd0


// Name:           RADM_PQ_DCRD_VC6
// Default:        0 (CX_NVC<=6 ||  RADM_P_QMODE_VC6==4 ? 0 : RADM_PQ_DCRD_VC0)
// Values:         0, ..., 2047
// Enabled:        CX_NVC>6 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Specifies the # of Posted Data Credits to Advertise. 
//  One data credit = 128 bits of data
`define RADM_PQ_DCRD_VC6 12'd0


// Name:           RADM_NPQ_HCRD_VC6
// Default:        1 (CX_NVC<=6 ? 1 : RADM_NPQ_HCRD_VC0)
// Values:         1, ..., 127
// Enabled:        CX_NVC>6 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Specifies the # of Non-Posted Hdr Credits to Advertise.
`define RADM_NPQ_HCRD_VC6 8'd1


// Name:           RADM_NPQ_DCRD_VC6
// Default:        1 (CX_NVC<=6 ? 1 : RADM_NPQ_DCRD_VC0)
// Values:         1, ..., 2047
// Enabled:        CX_NVC>6 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Specifies the # of Non-Posted Data Credits to Advertise. 
//  One data credit = 128 bits of data
`define RADM_NPQ_DCRD_VC6 12'd1


// Name:           RADM_CPLQ_HCRD_VC6
// Default:        0 ((CX_NVC<=6 || RADM_CPL_QMODE_VC6==4) ? 0 : RADM_CPLQ_HCRD_VC0)
// Values:         0, ..., 127
// Enabled:        CX_NVC>6 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Specifies the # of Completion Hdr Credits to Advertise.
`define RADM_CPLQ_HCRD_VC6 8'd0


// Name:           RADM_CPLQ_DCRD_VC6
// Default:        0 ((CX_NVC<=6 || RADM_CPL_QMODE_VC6==4) ? 0 : RADM_CPLQ_DCRD_VC0)
// Values:         0, ..., 2047
// Enabled:        CX_NVC>6 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Specifies the # of Completion Data Credits to Advertise. 
//  One data credit = 128 bits of data
`define RADM_CPLQ_DCRD_VC6 12'd0


// Name:           CX_RADM_ORDERING_RULES_VC6
// Default:        PCIe Ordering Rules (CX_RADM_ORDERING_RULES)
// Values:         Strict Priority (0x0), PCIe Ordering Rules (0x1)
// Enabled:        CX_NVC>6 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Specifies the ordering scheme for sending received TLPs to the application: 
//  - 0: Strict Priority: The priority order is Posted, then Completion, then Non-Posted 
//  - 1: PCI Ordering Rules: The arbitration is according to the ordering rules in the PCI Express 3.1 Specification. 
//  For more details, see the "Native Core Receive Ordering Schemes" section in the "Advanced Ordering Information" 
//  appendix of the Databook. 
// You can change the ordering rule scheme by writing to the TLP_TYPE_ORDERING_VC0 field in the VC0_P_RX_Q_CTRL_OFF 
// register.
`define CX_RADM_ORDERING_RULES_VC6 1'h1


// Name:           RADM_DEPTH_DECOUPLE_VC6
// Default:        0 (CX_NVC<=6 && RADM_DEPTH_DECOUPLE_VC0)
// Values:         0, 1
// Enabled:        CX_NVC>6 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Selecting this option allow RAM depths to be specified independantly 
//  from the advertised credits.
// `define RADM_DEPTH_DECOUPLE_VC6


// Name:           RADM_PQ_HDP_VC6
// Default:        0 (CX_NVC<=6 ? 0 
//                 : RADM_P_QMODE_VC6==4 ? ( (CX_RADMQ_MODE==2) ? RADM_SEG_BUF_MIN_DPT : 0 ) 
//                 : [<functionof> CX_RADMQ_MODE RADM_PQ_HCRD_VC6 CX_NHQ CUT_THROUGH_INVOLVED RADM_PQ_HSCALE_VC6])
// Values:         0, ..., 65535
// Enabled:        CX_NVC>6 && CX_RADMQ_MODE==2 && RADM_P_QMODE_VC6!=4 && 
//                 RADM_DEPTH_DECOUPLE_VC6==1
// Parameter Type: Feature Setting
// 
// Specifies the depth of the Posted Hdr Queue/RAM.
`define RADM_PQ_HDP_VC6 0


// Name:           RADM_PQ_DDP_VC6
// Default:        0 (CX_NVC<=6 ? 0 
//                 : RADM_P_QMODE_VC6==4 ? ( (CX_RADMQ_MODE==2) ? RADM_SEG_BUF_MIN_DPT : 0 ) 
//                 : [<functionof> RADM_PQ_HCRD_VC6 RADM_PQ_DCRD_VC6 CX_NW CX_NHQ CC_DEVICE_TYPE CC_SW CX_ECRC_STRIP_ENABLE RADM_SEG_BUF_CT_DPT_ADJ RADM_PQ_DSCALE_VC6])
// Values:         0, ..., 65535
// Enabled:        CX_NVC>6 && CX_RADMQ_MODE==2 && RADM_P_QMODE_VC6!=4 && 
//                 RADM_DEPTH_DECOUPLE_VC6==1
// Parameter Type: Feature Setting
// 
// Specifies the depth of the Posted Data Queue/RAM.
`define RADM_PQ_DDP_VC6 0


// Name:           RADM_NPQ_HDP_VC6
// Default:        0 (CX_NVC<=6 ? 0 
//                 : RADM_NP_QMODE_VC6==4 ? ( (CX_RADMQ_MODE==2) ? RADM_SEG_BUF_MIN_DPT : 0 ) 
//                 : [<functionof> CX_RADMQ_MODE RADM_NPQ_HCRD_VC6 CUT_THROUGH_INVOLVED CX_NHQ RADM_NPQ_HSCALE_VC6])
// Values:         0, ..., 65535
// Enabled:        CX_NVC>6 && CX_RADMQ_MODE==2 && RADM_NP_QMODE_VC6!=4 && 
//                 RADM_DEPTH_DECOUPLE_VC6==1
// Parameter Type: Feature Setting
// 
// Specifies the depth of the non-posted Hdr Queue/RAM.
`define RADM_NPQ_HDP_VC6 0


// Name:           RADM_NPQ_DDP_VC6
// Default:        0 (CX_NVC<=6 ? 0 
//                 : RADM_NP_QMODE_VC6==4 ? ( (CX_RADMQ_MODE==2) ? RADM_SEG_BUF_MIN_DPT : 0 ) 
//                 : [<functionof> 6 CX_RADMQ_MODE RADM_NPQ_HCRD_VC6 RADM_NPQ_DCRD_VC6 CUT_THROUGH_INVOLVED CX_NW CX_NHQ CC_DEVICE_TYPE CC_SW CX_ECRC_STRIP_ENABLE RADM_NPQ_DSCALE_VC6])
// Values:         0, ..., 65535
// Enabled:        CX_NVC>6 && CX_RADMQ_MODE==2 && RADM_NP_QMODE_VC6!=4 && 
//                 RADM_DEPTH_DECOUPLE_VC6==1
// Parameter Type: Feature Setting
// 
// Specifies the depth of the non-posted Data Queue/RAM.
`define RADM_NPQ_DDP_VC6 0


// Name:           RADM_CPLQ_HDP_VC6
// Default:        0 (CX_NVC<=6 ? 0 
//                 : RADM_CPL_QMODE_VC6==4 ? ( (CX_RADMQ_MODE==2) ? RADM_SEG_BUF_MIN_DPT : 0 ) 
//                 : [<functionof> CX_RADMQ_MODE RADM_CPLQ_HCRD_VC6 CUT_THROUGH_INVOLVED CX_NHQ CX_MAX_TAG CX_APP_RD_REQ_SIZE CX_RCB RADM_CPLQ_HSCALE_VC6])
// Values:         0, ..., 65535
// Enabled:        CX_NVC>6 && CX_RADMQ_MODE==2 && RADM_CPL_QMODE_VC6!=4 && 
//                 (RADM_DEPTH_DECOUPLE_VC6==1 || RADM_CPLQ_HCRD_VC6 == 0)
// Parameter Type: Feature Setting
// 
// Specifies the depth of the Completion Hdr Queue/RAM.
`define RADM_CPLQ_HDP_VC6 0


// Name:           RADM_CPLQ_DDP_VC6
// Default:        0 (CX_NVC<=6 ? 0 
//                 : RADM_CPL_QMODE_VC6==4 ? ( (CX_RADMQ_MODE==2) ? RADM_SEG_BUF_MIN_DPT : 0 ) 
//                 : [<functionof> CX_RADMQ_MODE RADM_CPLQ_HDP_VC6 RADM_CPLQ_DCRD_VC6 CUT_THROUGH_INVOLVED CX_NHQ CX_NW CX_MAX_TAG CX_APP_RD_REQ_SIZE CC_DEVICE_TYPE CC_SW CX_ECRC_STRIP_ENABLE RADM_SEG_BUF_CT_DPT_ADJ RADM_CPLQ_DSCALE_VC6])
// Values:         0, ..., 65535
// Enabled:        CX_NVC>6 && CX_RADMQ_MODE==2 && RADM_CPL_QMODE_VC6!=4 && 
//                 (RADM_DEPTH_DECOUPLE_VC6==1 || RADM_CPLQ_DCRD_VC6 == 0)
// Parameter Type: Feature Setting
// 
// Specifies the depth of the Completion Data Queue/RAM.
`define RADM_CPLQ_DDP_VC6 0


//
//Values that don't need to appear in the GUI
//


`define RADM_PQ_HPW_VC6 0


`define RADM_NPQ_HPW_VC6 0


`define RADM_CPLQ_HPW_VC6 0


`define RADM_PQ_DPW_VC6 0


`define RADM_NPQ_DPW_VC6 0


`define RADM_CPLQ_DPW_VC6 0


`define CX_RADM_HDP_VC6 0


`define CX_RADM_DDP_VC6 0

//
//End VC6 Config
//


//
//VC7 Config
//


// Name:           RADM_PQ_HCRD_VC7
// Default:        0 (CX_NVC<=7 ||  RADM_P_QMODE_VC7==4 ? 0 : RADM_PQ_HCRD_VC0)
// Values:         0, ..., 127
// Enabled:        CX_NVC>7 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Specifies the # of Posted Hdr Credits to Advertise.
`define RADM_PQ_HCRD_VC7 8'd0


// Name:           RADM_PQ_DCRD_VC7
// Default:        0 (CX_NVC<=7 ||  RADM_P_QMODE_VC7==4 ? 0 : RADM_PQ_DCRD_VC0)
// Values:         0, ..., 2047
// Enabled:        CX_NVC>7 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Specifies the # of Posted Data Credits to Advertise. 
//  One data credit = 128 bits of data
`define RADM_PQ_DCRD_VC7 12'd0


// Name:           RADM_NPQ_HCRD_VC7
// Default:        1 (CX_NVC<=7 ? 1 : RADM_NPQ_HCRD_VC0)
// Values:         1, ..., 127
// Enabled:        CX_NVC>7 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Specifies the # of Non-Posted Hdr Credits to Advertise.
`define RADM_NPQ_HCRD_VC7 8'd1


// Name:           RADM_NPQ_DCRD_VC7
// Default:        1 (CX_NVC<=7 ? 1 : RADM_NPQ_DCRD_VC0)
// Values:         1, ..., 2047
// Enabled:        CX_NVC>7 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Specifies the # of Non-Posted Data Credits to Advertise. 
//  One data credit = 128 bits of data
`define RADM_NPQ_DCRD_VC7 12'd1


// Name:           RADM_CPLQ_HCRD_VC7
// Default:        0 ((CX_NVC<=7 || RADM_CPL_QMODE_VC7==4) ? 0 : RADM_CPLQ_HCRD_VC0)
// Values:         0, ..., 127
// Enabled:        CX_NVC>7 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Specifies the # of Completion Hdr Credits to Advertise.
`define RADM_CPLQ_HCRD_VC7 8'd0


// Name:           RADM_CPLQ_DCRD_VC7
// Default:        0 ((CX_NVC<=7 || RADM_CPL_QMODE_VC7==4) ? 0 : RADM_CPLQ_DCRD_VC0)
// Values:         0, ..., 2047
// Enabled:        CX_NVC>7 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Specifies the # of Completion Data Credits to Advertise. 
//  One data credit = 128 bits of data
`define RADM_CPLQ_DCRD_VC7 12'd0


// Name:           CX_RADM_ORDERING_RULES_VC7
// Default:        PCIe Ordering Rules (CX_RADM_ORDERING_RULES)
// Values:         Strict Priority (0x0), PCIe Ordering Rules (0x1)
// Enabled:        CX_NVC>7 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Specifies the ordering scheme for sending received TLPs to the application: 
//  - 0: Strict Priority: The priority order is Posted, then Completion, then Non-Posted 
//  - 1: PCI Ordering Rules: The arbitration is according to the ordering rules in the PCI Express 3.1 Specification. 
//  For more details, see the "Native Core Receive Ordering Schemes" section in the "Advanced Ordering Information" 
//  appendix of the Databook. 
// You can change the ordering rule scheme by writing to the TLP_TYPE_ORDERING_VC0 field in the VC0_P_RX_Q_CTRL_OFF 
// register.
`define CX_RADM_ORDERING_RULES_VC7 1'h1


// Name:           RADM_DEPTH_DECOUPLE_VC7
// Default:        0 (CX_NVC<=7 && RADM_DEPTH_DECOUPLE_VC0)
// Values:         0, 1
// Enabled:        CX_NVC>7 && CX_RADMQ_MODE==2
// Parameter Type: Feature Setting
// 
// Selecting this option allow RAM depths to be specified independantly 
//  from the advertised credits.
// `define RADM_DEPTH_DECOUPLE_VC7


// Name:           RADM_PQ_HDP_VC7
// Default:        0 (CX_NVC<=7 ? 0 
//                 : RADM_P_QMODE_VC7==4 ? ( (CX_RADMQ_MODE==2) ? RADM_SEG_BUF_MIN_DPT : 0 ) 
//                 : [<functionof> CX_RADMQ_MODE RADM_PQ_HCRD_VC7 CX_NHQ CUT_THROUGH_INVOLVED RADM_PQ_HSCALE_VC7])
// Values:         0, ..., 65535
// Enabled:        CX_NVC>7 && CX_RADMQ_MODE==2 && RADM_P_QMODE_VC7!=4 && 
//                 RADM_DEPTH_DECOUPLE_VC7==1
// Parameter Type: Feature Setting
// 
// Specifies the depth of the Posted Hdr Queue/RAM.
`define RADM_PQ_HDP_VC7 0


// Name:           RADM_PQ_DDP_VC7
// Default:        0 (CX_NVC<=7 ? 0 
//                 : RADM_P_QMODE_VC7==4 ? ( (CX_RADMQ_MODE==2) ? RADM_SEG_BUF_MIN_DPT : 0 ) 
//                 : [<functionof> RADM_PQ_HCRD_VC7 RADM_PQ_DCRD_VC7 CX_NW CX_NHQ CC_DEVICE_TYPE CC_SW CX_ECRC_STRIP_ENABLE RADM_SEG_BUF_CT_DPT_ADJ RADM_PQ_DSCALE_VC7])
// Values:         0, ..., 65535
// Enabled:        CX_NVC>7 && CX_RADMQ_MODE==2 && RADM_P_QMODE_VC7!=4 && 
//                 RADM_DEPTH_DECOUPLE_VC7==1
// Parameter Type: Feature Setting
// 
// Specifies the depth of the Posted Data Queue/RAM.
`define RADM_PQ_DDP_VC7 0


// Name:           RADM_NPQ_HDP_VC7
// Default:        0 (CX_NVC<=7 ? 0 
//                 : RADM_NP_QMODE_VC7==4 ? ( (CX_RADMQ_MODE==2) ? RADM_SEG_BUF_MIN_DPT : 0 ) 
//                 : [<functionof> CX_RADMQ_MODE RADM_NPQ_HCRD_VC7 CUT_THROUGH_INVOLVED CX_NHQ RADM_NPQ_HSCALE_VC7])
// Values:         0, ..., 65535
// Enabled:        CX_NVC>7 && CX_RADMQ_MODE==2 && RADM_NP_QMODE_VC7!=4 && 
//                 RADM_DEPTH_DECOUPLE_VC7==1
// Parameter Type: Feature Setting
// 
// Specifies the depth of the non-posted Hdr Queue/RAM.
`define RADM_NPQ_HDP_VC7 0


// Name:           RADM_NPQ_DDP_VC7
// Default:        0 (CX_NVC<=7 ? 0 
//                 : RADM_NP_QMODE_VC7==4 ? ( (CX_RADMQ_MODE==2) ? RADM_SEG_BUF_MIN_DPT : 0 ) 
//                 : [<functionof> 7 CX_RADMQ_MODE RADM_NPQ_HCRD_VC7 RADM_NPQ_DCRD_VC7 CUT_THROUGH_INVOLVED CX_NW CX_NHQ CC_DEVICE_TYPE CC_SW CX_ECRC_STRIP_ENABLE RADM_NPQ_DSCALE_VC7])
// Values:         0, ..., 65535
// Enabled:        CX_NVC>7 && CX_RADMQ_MODE==2 && RADM_NP_QMODE_VC7!=4 && 
//                 RADM_DEPTH_DECOUPLE_VC7==1
// Parameter Type: Feature Setting
// 
// Specifies the depth of the non-posted Data Queue/RAM.
`define RADM_NPQ_DDP_VC7 0


// Name:           RADM_CPLQ_HDP_VC7
// Default:        0 (CX_NVC<=7 ? 0 
//                 : RADM_CPL_QMODE_VC7==4 ? ( (CX_RADMQ_MODE==2) ? RADM_SEG_BUF_MIN_DPT : 0 ) 
//                 : [<functionof> CX_RADMQ_MODE RADM_CPLQ_HCRD_VC7 CUT_THROUGH_INVOLVED CX_NHQ CX_MAX_TAG CX_APP_RD_REQ_SIZE CX_RCB RADM_CPLQ_HSCALE_VC7])
// Values:         0, ..., 65535
// Enabled:        CX_NVC>7 && CX_RADMQ_MODE==2 && RADM_CPL_QMODE_VC7!=4 && 
//                 (RADM_DEPTH_DECOUPLE_VC7==1 || RADM_CPLQ_HCRD_VC7 == 0)
// Parameter Type: Feature Setting
// 
// Specifies the depth of the Completion Hdr Queue/RAM.
`define RADM_CPLQ_HDP_VC7 0


// Name:           RADM_CPLQ_DDP_VC7
// Default:        0 (CX_NVC<=7 ? 0 
//                 : RADM_CPL_QMODE_VC7==4 ? ( (CX_RADMQ_MODE==2) ? RADM_SEG_BUF_MIN_DPT : 0 ) 
//                 : [<functionof> CX_RADMQ_MODE RADM_CPLQ_HDP_VC7 RADM_CPLQ_DCRD_VC7 CUT_THROUGH_INVOLVED CX_NHQ CX_NW CX_MAX_TAG CX_APP_RD_REQ_SIZE CC_DEVICE_TYPE CC_SW CX_ECRC_STRIP_ENABLE RADM_SEG_BUF_CT_DPT_ADJ RADM_CPLQ_DSCALE_VC7])
// Values:         0, ..., 65535
// Enabled:        CX_NVC>7 && CX_RADMQ_MODE==2 && RADM_CPL_QMODE_VC7!=4 && 
//                 (RADM_DEPTH_DECOUPLE_VC7==1 || RADM_CPLQ_DCRD_VC7 == 0)
// Parameter Type: Feature Setting
// 
// Specifies the depth of the Completion Data Queue/RAM.
`define RADM_CPLQ_DDP_VC7 0


//
//Values that don't need to appear in the GUI
//


`define RADM_PQ_HPW_VC7 0


`define RADM_NPQ_HPW_VC7 0


`define RADM_CPLQ_HPW_VC7 0


`define RADM_PQ_DPW_VC7 0


`define RADM_NPQ_DPW_VC7 0


`define RADM_CPLQ_DPW_VC7 0


`define CX_RADM_HDP_VC7 0


`define CX_RADM_DDP_VC7 0

//
//End VC7 Config
//


//
//END VC Config Section
//


`define CX_CPL_INFINITE_CRD


`define CX_RADMQ_P_INST


// `define CX_RADMQ_NP_INST


// `define CX_RADMQ_CPL_INST


// Name:         RADM_P_HWD
// Default:      133 ([<functionof> CX_RADMQ_MODE RADM_CPL_QMODE_VC0 TRGT1_POPULATE 
//               FLT_Q_COMMON_WIDTH TRGT1_TRGT0_INCLUSIVE_WIDTH TRGT0_EXCLUSIVE_WIDTH 
//               DEMUX_EXCLUSIVE_WIDTH])
// Values:       0, ..., 1024
// 
// number of bits for Fields Storage for posted TLPs Header fields, 
//  excluding parity, q controls
`define RADM_P_HWD 133


// Name:         RADM_NP_HWD
// Default:      133 ([calc_c0_radm_np_hwd TRGT1_POPULATE FLT_Q_COMMON_WIDTH 
//               TRGT1_TRGT0_INCLUSIVE_WIDTH TRGT0_EXCLUSIVE_WIDTH ])
// Values:       0, ..., 1024
// 
// number of bits for Fields Storage for Non-Posted TLPs Header fields, 
//  excluding parity, q controls
`define RADM_NP_HWD 133


// Name:         RADM_CPL_HWD
// Default:      97 ([calc_c2_radm_cpl_hwd  FLT_Q_COMMON_WIDTH DEMUX_EXCLUSIVE_WIDTH 
//               ])
// Values:       0, ..., 1024
// 
// number of bits for Fields Storage for Completion TLPs Header fields, 
//  excluding parity, q-controls
`define RADM_CPL_HWD 97


`define CX_RADM_HDRQ_DEPTH 114


`define CX_RADM_DATAQ_DEPTH 115


`define CX_NUM_SEGMENTS 5'h3


`define CX_SEG_WIDTH 2


`define CX_RADM_SBUF_HDRQ_PW 7


`define CX_RADM_SBUF_DATAQ_PW 7


`define RADM_ECRC_ERR_WD 0


`define RADM_DLLP_ABORT_WD 0


`define RADM_TLP_ABORT_WD 1


`define RADM_EOT_WD 1


`define CX_RADM_EOT_NEG_OFFSET 1


`define CX_RADM_ECRC_ERR_NEG_OFFSET 2


`define CX_RADM_DLLP_ABORT_NEG_OFFSET 2


`define CX_RADM_TLP_ABORT_NEG_OFFSET 2


`define CX_RADM_SBUF_HDRQ_NOPROT_WD 134


`define CX_RADM_SBUF_HDRQ_CTRL_WD 1



`define CX_RAS_RADM_P_HWD_TOPROT 133


`define CX_RAS_RADM_P_HWD 133


`define CX_RAS_TRGT_HDR_TOPROT 133


`define CX_RADM_SBUF_HDRQ_PROT_WD 0


`define CX_RASDP_HDRQ_ERR_SYND_WD 0


`define CX_RADM_SBUF_HDRQ_WD 134


`define TRGT_HDR_PROT_WD 0


`define TRGT_HDR_WD 133


`define CX_RADM_SBUF_DATAQ_CTRL_WD 2


`define CX_RADM_SBUF_DATAQ_DATA_WD 128


`define CX_RADM_SBUF_DATAQ_CTRLQ_WD 1


`define CX_RADM_SBUF_DATAQ_NOPROT_WD 130


`define CX_RADM_SBUF_DATAQ_PROT_WD 0


`define CX_RADM_SBUF_DATAQ_WD 130


`define TRGT_DATA_PROT_WD 0


`define TRGT_DATA_WD 128


`define CX_RADM_SBUF_DATAQ_RAM_WD 129

//Switches & Bridges (PCIE_SW_UP PCIE_SW_DOWN PCIX_PCIE PCIE_PCIX) all have Completions going out the Single Posted Queue output
//rather than the Completion interface.

// `define RADM_SINGLE_QMODE_WO_CPL_BYPASS


`define CX_RADM_Q_DATABITS 129



// Name:         CX_RADMQ_P_MODE
// Default:      Store Forward (RADM_P_QMODE_VC0 >> 1)
// Values:       Store Forward (0), Cut Through (1), By Pass (2)
// 
// Posted TLP queue type. 
//  There are three Queue types available Bypass/Store-and-forward/CutThrough. 
//  Bypass: There is no P receive queue in this mode, the application 
//  must be able to accept all traffic as back-pressure is 
//  disabled in the mode. 
//  Store-and-forward: Received P TLPs are stored into queue 
//  TLP is advertised only after the full TLP is stored into 
//  the queue. 
//  Cut-through: Received P TLPs are stored into queue and presented to your application 
//  at the same time it is being stored into the queue.
`define CX_RADMQ_P_MODE 0



// Name:         CX_RADM_PQ_HWD
// Default:      139 ([calc_c2_radm_pq_hwd  RADM_P_HWD 6 ])
// Values:       0, ..., 1024
// 
// number of bits for Fields Storage for Posted TLPs Header fields 
//  includes queue controls 
//  excludes parity
`define CX_RADM_PQ_HWD 139


`define CX_RADM_PQ_H_DATABITS 134


// Name:         P_HDRQ_PAR_EN
// Default:      false (CX_RAM_PROTECTION_MODE==1)
// Values:       false (0), true (1)
// 
// Enable parity for Posted TLP Header Queue
// `define P_HDRQ_PAR_EN


// Name:         P_HDRQ_PAR_CALC_WIDTH
// Default:      32 ((P_HDRQ_PAR_EN==1) ? CX_PAR_MODE : 32)
// Values:       -2147483648, ..., 2147483647
// 
// Bit width for Parity Calc
`define P_HDRQ_PAR_CALC_WIDTH 32


// Name:         P_HDRQ_NPAR_BITS
// Default:      5 ((CX_RADMQ_MODE==2) ? 
//               [calc_npar_bits CX_RADM_SBUF_HDRQ_WD P_HDRQ_PAR_CALC_WIDTH] : 
//               [calc_npar_bits CX_RADM_PQ_HWD P_HDRQ_PAR_CALC_WIDTH])
// Values:       -2147483648, ..., 2147483647
// 
// Number of Parity Bits
`define P_HDRQ_NPAR_BITS 5


// Name:         RADM_P_QBUF_HDEPTH
// Default:      54 (RADM_PQ_HDP_VC0)
// Values:       0, ..., 65535
// 
// Number of RAM entries required for P TLPs HEADER storage
`define RADM_P_QBUF_HDEPTH 54


// Name:         P_HDRQ_NECC_BITS
// Default:      9 (((CX_RAS_RADM_P_HWD + RADM_DLLP_ABORT_WD + RADM_ECRC_ERR_WD + 
//               RADM_TLP_ABORT_WD + CX_RADM_SBUF_HDRQ_PROT_WD) > 247) ? 10 : 9)
// Values:       -2147483648, ..., 2147483647
// 
// Number of ECC Bits
`define P_HDRQ_NECC_BITS 9

//This is the width (per-VC) of the data that the controller outputs

`define RADM_DATAQ_WD 137


// Name:         RADM_PQ_DWD
// Default:      137 (RADM_DATAQ_WD/CX_NDQ)
// Values:       -2147483648, ..., 2147483647
// 
// Posted data queue width 
//  This is the width (per-VC) of the data of the ram
`define RADM_PQ_DWD 137


// Name:         P_DATAQ_PAR_EN
// Default:      false (CX_RAM_PROTECTION_MODE==1)
// Values:       false (0), true (1)
// 
// Enable parity for Posted TLP Data Queue
// `define P_DATAQ_PAR_EN


// Name:         P_DATAQ_PAR_CALC_WIDTH
// Default:      32 ((P_DATAQ_PAR_EN==1) ? CX_PAR_MODE : 32)
// Values:       -2147483648, ..., 2147483647
// 
// Bit width for Parity Calc
`define P_DATAQ_PAR_CALC_WIDTH 32


// Name:         P_DATAQ_NPAR_BITS
// Default:      5 ((CX_RADMQ_MODE == 2) ? 
//               [calc_npar_bits CX_RADM_SBUF_DATAQ_RAM_WD P_DATAQ_PAR_CALC_WIDTH] : 
//               [calc_npar_bits RADM_PQ_DWD P_DATAQ_PAR_CALC_WIDTH])
// Values:       -2147483648, ..., 2147483647
// 
// Number of Parity Bits
`define P_DATAQ_NPAR_BITS 5


// Name:         RADM_P_QBUF_DDEPTH
// Default:      97 (RADM_PQ_DDP_VC0)
// Values:       0, ..., 65535
// 
// Number of RAM entries required for Posted TLPs DATA storage
`define RADM_P_QBUF_DDEPTH 97


// Name:         P_DATAQ_NECC_BITS
// Default:      9 ((CX_RADMQ_MODE == 2) ? 
//               [calc_necc_bits CX_RADM_SBUF_DATAQ_RAM_WD ] : 
//               [calc_necc_bits RADM_PQ_DWD])
// Values:       -2147483648, ..., 2147483647
// 
// Number of ECC Bits
`define P_DATAQ_NECC_BITS 9


`define CX_RADM_Q_DATABITS_OUT 129


`define CX_RADM_PQ_H_DATABITS_OUT 134



// Name:         CX_RADMQ_NP_MODE
// Default:      Store Forward (RADM_NP_QMODE_VC0 >> 1)
// Values:       Store Forward (0), Cut Through (1)
// 
// Non-Posted TLP queue type. 
//  There are three Queue types available Bypass/Store-and-forward/CutThrough. 
//  Bypass: There is no NP receive queue in this mode, the application 
//  must be able to accept all traffic as back-pressure is 
//  disabled in the mode. 
//  Store-and-forward: NP TLPs are stored into queue 
//  TLP is advertised only after the full TLP is stored into 
//  the queue. 
//  Cut-through: NP TLPs are stored into queue and presented to your application 
//  at the same time it is being stored into the queue.
`define CX_RADMQ_NP_MODE 0


// Name:         CX_RADM_NPQ_HWD
// Default:      139 ([calc_c2_radm_npq_hwd  ([calc_c0_radm_np_hwd TRGT1_POPULATE 
//               FLT_Q_COMMON_WIDTH TRGT1_TRGT0_INCLUSIVE_WIDTH TRGT0_EXCLUSIVE_WIDTH ]) 
//               6 ])
// Values:       0, ..., 1024
// 
// number of bits for Fields Storage for Non-Posted TLPs Header fields 
//  includes queue controls 
//  excludes parity
`define CX_RADM_NPQ_HWD 139


`define CX_RADM_NPQ_H_DATABITS 139


`define CX_RADM_NPQ_H_DATABITS_OUT 139


// Name:         NP_HDRQ_PAR_EN
// Default:      false (CX_RAM_PROTECTION_MODE==1)
// Values:       false (0), true (1)
// 
// Enable parity for Non_posted TLP Header Queue
// `define NP_HDRQ_PAR_EN


// Name:         NP_HDRQ_PAR_CALC_WIDTH
// Default:      32 ((NP_HDRQ_PAR_EN==1) ? CX_PAR_MODE : 32)
// Values:       -2147483648, ..., 2147483647
// 
// Bit width for Parity Calc
`define NP_HDRQ_PAR_CALC_WIDTH 32


// Name:         NP_HDRQ_NPAR_BITS
// Default:      5 ([calc_npar_bits CX_RADM_NPQ_HWD NP_HDRQ_PAR_CALC_WIDTH])
// Values:       -2147483648, ..., 2147483647
// 
// Number of Parity Bits
`define NP_HDRQ_NPAR_BITS 5


// Name:         RADM_NP_QBUF_HDEPTH
// Default:      54 (RADM_NPQ_HDP_VC0)
// Values:       0, ..., 65535
// 
// Number of RAM entries required for NP TLPs HEADER storage
`define RADM_NP_QBUF_HDEPTH 54


// Name:         RADM_NPQ_DWD
// Default:      137 (RADM_DATAQ_WD/CX_NDQ)
// Values:       -2147483648, ..., 2147483647
// 
// Non-Posted data queue width
`define RADM_NPQ_DWD 137


// Name:         NP_DATAQ_PAR_EN
// Default:      false (CX_RAM_PROTECTION_MODE==1)
// Values:       false (0), true (1)
// 
// Enable parity for Non_posted TLP Data Queue
// `define NP_DATAQ_PAR_EN


// Name:         NP_DATAQ_PAR_CALC_WIDTH
// Default:      32 ((NP_DATAQ_PAR_EN==1) ? CX_PAR_MODE : 32)
// Values:       -2147483648, ..., 2147483647
// 
// Bit width for Parity Calc
`define NP_DATAQ_PAR_CALC_WIDTH 32


// Name:         NP_DATAQ_NPAR_BITS
// Default:      5 ([calc_npar_bits RADM_NPQ_DWD NP_DATAQ_PAR_CALC_WIDTH])
// Values:       -2147483648, ..., 2147483647
// 
// Number of Parity Bits
`define NP_DATAQ_NPAR_BITS 5


// Name:         RADM_NP_QBUF_DDEPTH
// Default:      12 (RADM_NPQ_DDP_VC0)
// Values:       0, ..., 65535
// 
// Number of RAM entries required for NP TLPs DATA storage per packet
`define RADM_NP_QBUF_DDEPTH 12


// Name:         CX_RADMQ_CPL_MODE
// Default:      By Pass (RADM_CPL_QMODE_VC0 >> 1)
// Values:       Store Forward (0), Cut Through (1), By Pass (2)
// 
// Completion TLP queue type. 
//  There are three Queue types available Bypass/Store-and-forward/CutThrough. 
//  Bypass: There is no CPL receive queue in this mode, the application 
//  must be able to accept all traffic as back-pressure is 
//  disabled in the mode. 
//  Store-and-forward: TLPs are stored into queue 
//  TLP is advertised only after the full TLP is stored into 
//  the queue. 
//  Cut-through: TLPs are stored into queue and presented to your application 
//  at the same time it is being stored into the queue.
`define CX_RADMQ_CPL_MODE 2


// Name:         CX_RADM_CPLQ_HWD
// Default:      103 ([calc_c2_radm_cplq_hwd  ([calc_c2_radm_cpl_hwd  
//               FLT_Q_COMMON_WIDTH DEMUX_EXCLUSIVE_WIDTH ]) 6 ])
// Values:       0, ..., 1024
// 
// number of bits for Fields Storage for Completion TLPs Header fields 
//  includes queue controls 
//  excludes parity
`define CX_RADM_CPLQ_HWD 103


`define CX_RADM_CPLQ_H_DATABITS 103


`define CX_RADM_CPLQ_H_DATABITS_OUT 103


// Name:         CPL_HDRQ_PAR_EN
// Default:      false (CX_RAM_PROTECTION_MODE==1)
// Values:       false (0), true (1)
// 
// Enable parity for Completion TLP Header Queue
// `define CPL_HDRQ_PAR_EN


// Name:         CPL_HDRQ_PAR_CALC_WIDTH
// Default:      32 ((CPL_HDRQ_PAR_EN==1) ? CX_PAR_MODE : 32)
// Values:       -2147483648, ..., 2147483647
// 
// Bit width for Parity Calc
`define CPL_HDRQ_PAR_CALC_WIDTH 32


// Name:         CPL_HDRQ_NPAR_BITS
// Default:      4 ([calc_npar_bits CX_RADM_CPLQ_HWD CPL_HDRQ_PAR_CALC_WIDTH])
// Values:       -2147483648, ..., 2147483647
// 
// Number of Parity Bits
`define CPL_HDRQ_NPAR_BITS 4


// Name:         RADM_CPL_QBUF_HDEPTH
// Default:      3 (RADM_CPLQ_HDP_VC0)
// Values:       0, ..., 65535
// 
// Number of RAM entries required for CPL TLPs HEADER storage
`define RADM_CPL_QBUF_HDEPTH 3


// Name:         RADM_CPLQ_DWD
// Default:      137 (RADM_DATAQ_WD/CX_NDQ)
// Values:       -2147483648, ..., 2147483647
// 
// Completion data queue width
`define RADM_CPLQ_DWD 137


// Name:         CPL_DATAQ_PAR_EN
// Default:      false (CX_RAM_PROTECTION_MODE==1)
// Values:       false (0), true (1)
// 
// Enable parity for Completion TLP Data Queue
// `define CPL_DATAQ_PAR_EN


// Name:         CPL_DATAQ_PAR_CALC_WIDTH
// Default:      32 ((CPL_DATAQ_PAR_EN==1) ? CX_PAR_MODE : 32)
// Values:       -2147483648, ..., 2147483647
// 
// Bit width for Parity Calc
`define CPL_DATAQ_PAR_CALC_WIDTH 32


// Name:         CPL_DATAQ_NPAR_BITS
// Default:      5 ([calc_npar_bits RADM_CPLQ_DWD CPL_DATAQ_PAR_CALC_WIDTH])
// Values:       -2147483648, ..., 2147483647
// 
// Number of Parity Bits
`define CPL_DATAQ_NPAR_BITS 5


// Name:         RADM_CPL_QBUF_DDEPTH
// Default:      3 (RADM_CPLQ_DDP_VC0)
// Values:       -2147483648, ..., 2147483647
// 
// Number of RAM entries required for CPL TLPs DATA storage
`define RADM_CPL_QBUF_DDEPTH 3

//This macro determines which non-bypassed Q has it's
//order controlled by the Order FIFO. If the bit is
//set to 1, it is controlled by the Order FIFO.
//Bit 0: Posted.
//Bit 1: Non-Posted.
//Bit 2: Completion.
`define CX_RADMQ_NB_ORDER_LIST (`CX_RADMQ_CPL_NB_ORDER_LIST << 2) + (`CX_RADMQ_NP_NB_ORDER_LIST << 1) + `CX_RADMQ_P_NB_ORDER_LIST


// Name:         RADM_NPQ_DDP
// Default:      12 (RADM_NPQ_DDP_VC0)
// Values:       -2147483648, ..., 2147483647
// 
// Non-Posted Data Queue RAM Depth
`define RADM_NPQ_DDP 12


// Name:         RADM_NPQ_HDP
// Default:      54 (RADM_NPQ_HDP_VC0)
// Values:       -2147483648, ..., 2147483647
// 
// Non-Posted Header Queue RAM Depth
`define RADM_NPQ_HDP 54


// Name:         RADM_CPLQ_DDP
// Default:      3 (RADM_CPLQ_DDP_VC0)
// Values:       -2147483648, ..., 2147483647
// 
// Completion Data Queue RAM Depth
`define RADM_CPLQ_DDP 3


// Name:         RADM_CPLQ_HDP
// Default:      3 (RADM_CPLQ_HDP_VC0)
// Values:       -2147483648, ..., 2147483647
// 
// Completion Header Queue RAM Depth
`define RADM_CPLQ_HDP 3


// Name:         RADM_PQ_DDP
// Default:      97 (RADM_PQ_DDP_VC0)
// Values:       -2147483648, ..., 2147483647
// 
// Posted Data Queue RAM Depth
`define RADM_PQ_DDP 97


// Name:         RADM_PQ_HDP
// Default:      54 (RADM_PQ_HDP_VC0)
// Values:       -2147483648, ..., 2147483647
// 
// Posted Header Queue RAM Depth
`define RADM_PQ_HDP 54



// Name:         RADM_PQ_HPW
// Default:      6 ([ calc_radm_pq_hpw   RADM_PQ_HDP_VC0 ])
// Values:       -2147483648, ..., 2147483647
// 
// Posted Header Queue RAM Address Width
`define RADM_PQ_HPW 6


`define CX_RADM_PQ_H_ADDRBITS 7


`define CX_RADM_Q_H_CTRLBITS 1


`define CX_RADM_Q_D_CTRLBITS 1


// Name:         RADM_PQ_DPW
// Default:      7 ([ calc_radm_pq_dpw   RADM_PQ_DDP_VC0 ])
// Values:       -2147483648, ..., 2147483647
// 
// Posted Data Queue RAM Address Width
`define RADM_PQ_DPW 7


`define CX_RADM_PQ_D_ADDRBITS 7


// Name:         RADM_NPQ_HPW
// Default:      6 ([ calc_radm_npq_hpw  RADM_NPQ_HDP_VC0 ])
// Values:       -2147483648, ..., 2147483647
// 
// Non-Posted Header Queue RAM Address Width
`define RADM_NPQ_HPW 6


`define CX_RADM_NPQ_H_ADDRBITS 7


// Name:         RADM_NPQ_DPW
// Default:      4 ([ calc_radm_npq_dpw  RADM_NPQ_DDP_VC0 ])
// Values:       -2147483648, ..., 2147483647
// 
// Non-Posted Data Queue RAM Address Width
`define RADM_NPQ_DPW 4


`define CX_RADM_NPQ_D_ADDRBITS 7


// Name:         RADM_CPLQ_HPW
// Default:      2 ([ calc_radm_cplq_hpw RADM_CPLQ_HDP_VC0 ])
// Values:       -2147483648, ..., 2147483647
// 
// Completion Header Queue RAM Address Width
`define RADM_CPLQ_HPW 2


`define CX_RADM_CPLQ_H_ADDRBITS 7


// Name:         RADM_CPLQ_DPW
// Default:      2 ([ calc_radm_cplq_dpw RADM_CPLQ_DDP_VC0 ])
// Values:       -2147483648, ..., 2147483647
// 
// Completion Data Queue RAM Address Width
`define RADM_CPLQ_DPW 2


`define CX_RADM_CPLQ_D_ADDRBITS 7


`define CX_RADM_PQ_D_WD 129


`define CX_RADM_PQ_H_WD 134


`define CX_RADM_NPQ_D_WD 137


`define CX_RADM_NPQ_H_WD 139


`define CX_RADM_CPLQ_D_WD 137


`define CX_RADM_CPLQ_H_WD 103


`define P_ST_FWD


// `define P_CUT_THRU


// `define P_BYPASS


`define NP_ST_FWD


// `define NP_CUT_THRU


// `define NP_BYPASS


// `define P_NP_SHARE_DEMUX_INPUTS


`define P_NP_SEPARATE_DEMUX_INPUTS


// `define CPL_ST_FWD


// `define CPL_CUT_THRU


`define CPL_BYPASS



// Name:         RADM_ORDERQ_DEPTH
// Default:      112 ((RADM_P_QBUF_HDEPTH + RADM_NP_QBUF_HDEPTH + 
//               RADM_CPL_QBUF_HDEPTH) * CX_NHQ + 1)
// Values:       -2147483648, ..., 2147483647
// Enabled:      CX_RADMQ_MODE==1
// 
// The default sizing doesn't account for CX_RADMQ_P/NP/CPL_NB_ORDER_LIST, resizing must be done manually, for this reason 
// enable the parameter.
`define RADM_ORDERQ_DEPTH 112


`define RADM_ORDERQ_PW 7

//-/ Calculated Credits


`define RADMQ_PHCRD 53


`define RADMQ_PDCRD 96


`define RADMQ_NPHCRD 53


`define RADMQ_NPDCRD 11


`define RADMQ_CPLHCRD 0


`define RADMQ_CPLDCRD 0


// Name:         RADM_MAX_OUTSTD_P_REQ
// Default:      64 ((PCIE_CORE_DATA_BUS_WD==32) ? 32 : (PCIE_CORE_DATA_BUS_WD==64) 
//               ? 64 : (PCIE_CORE_DATA_BUS_WD==128) ? 64 : 128)
// Values:       -2147483648, ..., 2147483647
// Enabled:      ((AMBA_INTERFACE==2) || (AMBA_INTERFACE==3))
// 
// Maximum number of outstanding RADM posted requests, 2^n aligned. 
//  Sets the max number of P requests which can be offloaded by the RADM P queue before 
//  the queue is stalled by the RADM P request tracker. 
//  The number of outstanding P requests is set by the max number of P requests sent for a given 
//  round trip delay. To calculate the max number of P's a min burst size of 64 bytes is considered with a 
//  round trip delay of 232 cycles (200 cycles for the AXI Master Response + Internal Delay of 32 cycles). 
//  The number of outstanding P requests = Round Trip Delay / (Burst Size / Data Width) 
//  Note: the PCIe Core Rx Queues are assumed to be capbale of streaming P requests to the application, i.e. 
//  the Posted Hdr/Data Rx Buffer depths are large enough to prevent the Transmitter throttling requests 
//  due to lack of available credits.
`define RADM_MAX_OUTSTD_P_REQ 64


// Name:         RADM_MAX_OUTSTD_P_REQ_LOG2
// Default:      6 ([calc_log2 RADM_MAX_OUTSTD_P_REQ])
// Values:       -2147483648, ..., 2147483647
// 
// log2 (RADM_MAX_OUTSTD_P_REQ)
`define RADM_MAX_OUTSTD_P_REQ_LOG2 6


// Name:         AXI_RADM_SEG_BUF_ENABLE
// Default:      1 (AXI_POPULATED && RADM_SEG_BUF)
// Values:       0, 1
// 
// AXI and RADM SegmentBuffer
`define AXI_RADM_SEG_BUF_ENABLE


//  ------------------------------------------------------------------------
//
//                    (C) COPYRIGHT 2002 - 2016 SYNOPSYS, INC.
//                            ALL RIGHTS RESERVED
//
//  This software and the associated documentation are confidential and
//  proprietary to Synopsys, Inc.  Your use or disclosure of this
//  software is subject to the terms and conditions of a written
//  license agreement between you, or your company, and Synopsys, Inc.
//
// The entire notice above must be reproduced on all authorized copies.
//
//  ------------------------------------------------------------------------

//-------------------------------------------------------------------------
//---  RCS information:
//---    $DateTime: 2016/07/20 03:49:22 $
//---    $Revision: #79 $
//---    $Id: //dwh/pcie_iip/main/DWC_pcie/DWC_pcie_common/src/DWC_pcie_func_cc_constants.v#79 $
//-------------------------------------------------------------------------

//-/ =================================================================
//-/ Common Configuration Registers
//-/ =================================================================


// Name:           CONFIG_LIMIT
// Default:        0x3ff
// Values:         0x0, ..., 0x3ff
// Enabled:        Always
// Parameter Type: Feature Setting
// 
// Specifies a limit above which incoming configuration requests will be routed to the destination interface defined by 
// TARGET_ABOVE_CONFIG_LIMIT. The CONFIG_LIMIT parameter is normally set to a limit that divides the core's configuration space 
// registers from the application's configuration space registers. The controller LBC module uses this limit to direct a 
// configuration request to the CDM or ELBI/RTRGT1. The application must set a proper value based on its extended configuration 
// registers. For more details, see the 'Local Bus Controller (LBC)' section in the Controller Operations chapter of the 
// Databook. 
//  - This value indicates a DWORD address and not a byte address. 
//  - The default setting of 0x3FF corresponds to the 4K upper limit of configuration space and so TRGT0 will consume all 
//  CFG transactions by default. CONFIG_LIMIT must be set to a value lower than this is have an effect. 
// Normally, you would never set this to less than 0xD00 which is the top of the Synopsys Port Logic register space.
`define CONFIG_LIMIT 10'h3ff


// Name:           PCI_CONFIG_LIMIT
// Default:        0x3f
// Values:         0x0, ..., 0x40
// Enabled:        Always
// Parameter Type: Feature Setting
// 
// Target Interface Destination for configuration requests when the configuration register address is above CONFIG_LIMIT 
// parameter. For more details, see the 'Local Bus Controller (LBC)' section in the Architecture chapter of the Databook.
`define PCI_CONFIG_LIMIT 6'h3f


// Name:           TARGET_ABOVE_CONFIG_LIMIT
// Default:        Target_1 (TRGT1_POPULATE==1 ? 2 : 1)
// Values:         ELBI (1), Target_1 (2)
// Enabled:        TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Target interface destination for configuration requests with an address greater than CONFIG_LIMIT. 
// Normally you would set this to '1' (ELBI).
`define TARGET_ABOVE_CONFIG_LIMIT 2


// Name:           RADM_CPL_LUT_STORE_BYTE_CNT
// Default:        true
// Values:         false (0), true (1)
// Parameter Type: Feature Setting
// 
// Determines whether or not to store the byte count in the receive completion LUT. If the controller does not a receive a 
// completion for each request, then the completion timeout mechanism will terminate the request. It will also indicate on 
// the radm_timeout_cpl_len[11:0] output port, the number of bytes remaining to be delivered when the completion timed out. 
// When the byte count is not stored in the LUT, the controller is unable to detect when it is receiving a completion with an 
// incorrect byte count field. Therefore completions with incorrect byte count will be treated as valid completions instead of 
// being treated as unexpected completions. The controller will not detect missing completions and the receive completion LUT 
// will not timeout.
`define RADM_CPL_LUT_STORE_BYTE_CNT


`define ECC_PROTECTION_EN_VALUE 0


// Name:         CX_CLIENT_PAR_MODE_EN
// Default:      false ((CX_RAS_EN==1) ? 8 : 0>0)
// Values:       false (0), true (1)
// 
// Provide parity checks for client address/data.
// `define CX_CLIENT_PAR_MODE_EN


// Name:         PARERR_ABORT_ENABLE
// Default:      0
// Values:       0, 1
// Enabled:      ((CX_RADMQ_MODE==2))
// 
// Indicates that a parity error detected will abort the receive
// `define PARERR_ABORT_ENABLE


// Name:         CX_HEAD_PAR_WD
// Default:      0 (ECC_PROTECTION_EN ? (FLT_Q_ADDR_WIDTH==64 ? 8 : 7) : 
//               (CX_CLIENT_PAR_MODE>0) ? ((FLT_Q_ADDR_WIDTH==64) ? 64/CX_RAS_PROT_RANGE : 
//               32/CX_RAS_PROT_RANGE) : 0)
// Values:       -2147483648, ..., 2147483647
// 
// Number of parity bits used for Client Header bus
`define CX_HEAD_PAR_WD 0


// Name:         CX_ADDR_PAR_WD
// Default:      0 ((CX_RASDP>0) ? [calc_addr_par_wd CX_NB CX_NL CX_RAS_PROT_RANGE] 
//               : 0)
// Values:       -2147483648, ..., 2147483647
// 
// Number of parity bits used for Client Address bus
`define CX_ADDR_PAR_WD 0


// Name:         CX_PRFX_PAR_WD
// Default:      0 ((CX_RASDP_EN) ? [calc_prfx_par_wd CX_NW CX_NPRFX 
//               CX_RAS_PROT_RANGE CX_RAS_PROT_TYPE] : 0)
// Values:       -2147483648, ..., 2147483647
// 
// Number of parity bits used for XADM/XTLH TLP Prefixes
`define CX_PRFX_PAR_WD 0


// Name:           APP_PAR_ERR_OUT_EN
// Default:        false (((CX_RASDP==0)&&(CX_RASDP_RAM_PROT==0))? 0: 1)
// Values:         false (0), true (1)
// Enabled:        (((CX_RASDP==0)&&(CX_RASDP_RAM_PROT==0))? 0: 1)
// Parameter Type: Feature Setting
// 
// Include top-level parity error signals. 
//  - app_parity_errs[2:0] 
//  - axi_parity_errs[3:0] (AXI Bridge only.) 
// For more information, see the 'Error Handling -> RAM and Address/Data Bus Parity Error and ECC Overview' section in the 
// Controller Operations chapter of the Databook.
// `define APP_PAR_ERR_OUT_EN


// Name:           RADM_PARBITS_OUT
// Default:        0
// Values:         0, 1
// Enabled:        0
// Parameter Type: Feature Setting
// 
// Include top-level parity bit signals.
// `define RADM_PARBITS_OUT


`define RADM_PARBITS_OUT_VALUE 0


// Name:           APP_RETURN_CRD_EN
// Default:        false
// Values:         false (0), true (1)
// Parameter Type: Feature Setting
// 
// Include optional top-level ports for the application to update the Flow Control credits counters. The optional ports are 
// the app_*_ca ports on the SII (see 'System Information Interface (SII)' section of the "Signal Descriptions" chapter 
// Databook for more details). 
//  
// Note: The application is not expected to return completion credits since completion credits are infinite according to 
// the PCI Express 3.1 Specification. 
//   
// Note: Not applicable when AXI Bridge is enabled.
// `define APP_RETURN_CRD_EN


// Name:         CUT_THROUGH_CRD_RETURN_EN
// Default:      false (CX_RADMQ_MODE==2) ? 0 : (RADM_P_QMODE_VC0==2 || 
//               RADM_NP_QMODE_VC0==2 || RADM_CPL_QMODE_VC0==2)
// Values:       false (0), true (1)
// Enabled:      0
// 
// Allow the controller to automatically return credits 
//  for queues in cut-through mode.
// `define CUT_THROUGH_CRD_RETURN_EN


// Name:           FLT_DROP_MSG
// Default:        true
// Values:         false (0x0), true (0x1)
// Parameter Type: Register Default Setting
// 
// Drop message TLPs and do not pass them to the application on RTRGT1. The controller processes received messages and 
// decodes the header before sending it to the application logic on the System Information Interface (SII). 
// By default, received messages are dropped silently and not passed to the application (or AXI bridge master if present) 
// on RTRGT1. To have all decoded messages also sent to the application then do not set this parameter. 
//  - True: Discard message after decoding 
//  - False: Pass message TLP to application on RTRGT1 (or AXI bridge master if present) 
// Note: When The "Receive Posted Queue Mode" is Bypass (RADM_P_QMODE_VC0 = 0x4), received messages are not dropped and 
// are always passed to the application irrespective of the setting of this parameter. 
//  
// For more details, see "Routing of Received Messages to SII and optionally to Application" in the "Message Reception" 
// section in the Controller Operations chapter of the Databook. Your application can override the value of this option at 
// runtime by writing to the 'Symbol Timer Register and Filter Mask Register 1'. These registers allow you to override any 
// decisions (regarding MSG routing) made at configuration time by the FLT_DROP_MSG, DEFAULT_FILTER_MASK_1 and 
// DEFAULT_FILTER_MASK_2 configuration parameters.
`define FLT_DROP_MSG 1'h1


// Name:           DEFAULT_FILTER_MASK_1
// Default:        0x0 ((FLT_DROP_MSG ? 0 : 0x2000) | (CX_SRIOV_ENABLE ? 0x0008 : 0))
// Values:         0x0, ..., 0xffff
// Parameter Type: Register Default Setting
// 
// Default value for Filter Mask Register 1 ('Symbol Timer Register and Filter Mask Register 1'). This register is used to 
// set the number of symbol times to wait between transmitting SKP ordered sets, and also to mask the RADM Filtering and 
// Error Handling Rules. There are several mask bits used to turn off the filtering and error handling rules. For more details, 
// see the 'Receive Filtering' section in Controller Operations chapter of the Databook.
`define DEFAULT_FILTER_MASK_1 16'h0


// Name:           DEFAULT_FILTER_MASK_2
// Default:        0x0
// Values:         0x0, ..., 0xffffffff
// Parameter Type: Register Default Setting
// 
// Default value for 'Filter Mask Register 2'. This register is used to mask the RADM Filtering and Error Handling Rules. 
// There are several mask bits used to turn off the filtering and error handling rules. For more details, see the 'Receive 
// Filtering' section in Controller Operations chapter of the Databook.
`define DEFAULT_FILTER_MASK_2 32'h0


// Name:           SLOT_CLK_CONFIG
// Default:        true
// Values:         false (0x0), true (0x1)
// Parameter Type: Register Default Setting
// 
// Default value for the Slot Clock Configuration bit in the Link Status register.
`define SLOT_CLK_CONFIG 1'h1


// Name:           DEFAULT_LINK_NUM
// Default:        0x4
// Values:         0x0, ..., 0xff
// Enabled:        ((CX_S_CPCIE_MODE || CX_SEL_PHY_MODE))
// Parameter Type: Register Default Setting
// 
// Default Link Number value that the Upstream Device advertises to the Downstream Link partner over the TS sequence. It is 
// also the default value for the Link Number field in the 'Port Force Link Register'. This register is used to force the 
// link to the state specified by the Link State field through a link re-negotiation. For more details, see the Registers 
// chapter of the Databook . 
// M-PCIe doesn't have this feature. M-PCIe doesn't support this feature.
`define DEFAULT_LINK_NUM 8'h4


// Name:           DEFAULT_ACK_FREQUENCY
// Default:        0x0
// Values:         0x0, ..., 0xff
// Parameter Type: Register Default Setting
// 
// Default value for the Ack Frequency field in the "Ack Frequency and L0-L1 ASPM Control Register". A value of "0" 
// indicates that this Ack frequency control feature is turned off. For more details, see the "ACK/NAK Scheduling" section in the 
// Databook. For a typical system, you do not have to modify the default settings.
`define DEFAULT_ACK_FREQUENCY 8'h0



`define DEFAULT_DEFAULT_REPLAY_ADJ 5'h2


// Name:           DEFAULT_REPLAY_ADJ
// Default:        0x2 (((CX_MAX_NFTS*4)/CX_NB)+(CX_CPCIE_INTERNAL_DELAY*3))/64  + 
//                 (((((CX_MAX_NFTS*4)/CX_NB)+(CX_CPCIE_INTERNAL_DELAY*3))%64) ? 1 : 0)
// Values:         0x0, ..., 0x1f
// Enabled:        ((CX_S_CPCIE_MODE || CX_SEL_PHY_MODE))
// Parameter Type: Register Default Setting
// 
// Default value for the 'Timer Modifier for Replay Timer' field in the 'Timer Control and Max Function Number' register. 
// Each increment in this value increases the replay timer by 64. For more details, see the 'Transmit Replay' section of the 
// Controller Operations chapter in the Databook.This parameter is for conventional PCIe mode.
`define DEFAULT_REPLAY_ADJ 5'h3



`define DEFAULT_DEFAULT_GEN3_REPLAY_ADJ 5'h3


// Name:           DEFAULT_GEN3_REPLAY_ADJ
// Default:        0x3 (((CX_MAX_NFTS*65)/(CX_NB*1024)) + 
//                 ((CX_MAX_NFTS*65)/(CX_NB*32768)) + ((CX_CPCIE_INTERNAL_DELAY*3)/256) + 3)
// Values:         0x0, ..., 0x1f
// Enabled:        CX_GEN3_SPEED == 1 && CX_CPCIE_ENABLE
// Parameter Type: Register Default Setting
// 
// Default value (in Gen3/4 mode) for the 'Timer Modifier for Replay Timer' field in the 'Timer Control and Max Function 
// Number' register at Gen3/4 speed. Must consider an EIEOS is transmitted after every 32 FTS. Each increment in this value 
// increases the replay timer by 256.  
// For more details, see the 'Transmit Replay' section of the Controller Operations chapter in the Databook. M-PCIe 
// doesn't support this feature.
`define DEFAULT_GEN3_REPLAY_ADJ 5'h3


// Name:         DEFAULT_FAST_LINK_SCALING_FACTOR
// Default:      0x0
// Values:       0x0, ..., 0x3
// Enabled:      PHY_TYPE!=CC_GENERIC_PHY
// 
// The default value of Fast Link Scaling Factor register 
//  - 0 : Scaling Factor is 1024 (1ms is 1us) 
//  - 1 : Scaling Factor is 256 (1ms is 4us) 
//  - 2 : Scaling Factor is 64 (1ms is 16us) 
//  - 3 : Scaling Factor is 16 (1ms is 64us)
`define DEFAULT_FAST_LINK_SCALING_FACTOR 2'h0


// Name:           MSI_CAP_ENABLE
// Default:        true
// Values:         false (0x0), true (0x1)
// Parameter Type: Feature Setting
// 
// Include the MSI capability structure.
`define MSI_CAP_ENABLE 1'h1


// Name:           MSI_PVM_EN
// Default:        false (MSI_CAP_ENABLE && CX_SRIOV_ENABLE)
// Values:         false (0), true (1)
// Enabled:        !CX_SRIOV_ENABLE && MSI_CAP_ENABLE
// Parameter Type: Feature Setting
// 
// Support MSI Capability Per Vector Masking
// `define MSI_PVM_EN


`define MSI_PVM_EN_VALUE 1'h0


// Name:           MSI_IO
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        MSI_CAP_ENABLE==1
// Parameter Type: Feature Setting
// 
// Include optional top-level ports for MSI, as listed in 'Message Signaled Interrupt (MSI) Interface' section of the 
// Databook.
`define MSI_IO 1'h0

//Route out MSI related IOs to the top level

// `define MSI_IO_EN


// Name:           MSI_64_EN
// Default:        true (MSI_CAP_ENABLE==1)
// Values:         false (0x0), true (0x1)
// Enabled:        MSI_CAP_ENABLE==1 && CX_DEVICE_TYPE==1
// Parameter Type: Register Default Setting
// 
// Default value for the 64-bit Address Capable bit in the 'MSI Control Register'.
`define MSI_64_EN 1'h1


// Name:           DEFAULT_MULTI_MSI_CAPABLE
// Default:        0x0
// Values:         0x0, ..., 0x5
// Enabled:        MSI_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Multiple Message Capable field in the 'MSI Control Register'.
`define DEFAULT_MULTI_MSI_CAPABLE 3'h0


// Name:           DEFAULT_EXT_MSI_DATA_CAPABLE
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        MSI_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Extended Message Data Capable field in the 'MSI Control Register'.
`define DEFAULT_EXT_MSI_DATA_CAPABLE 1'h0


// Name:           MSIX_CAP_ENABLE
// Default:        false
// Values:         false (0x0), true (0x1)
// Parameter Type: Feature Setting
// 
// Include the MSI-X capability structure.
`define MSIX_CAP_ENABLE 1'h0

//Route out MSI-X related IOs to the top level

// `define MSIX_EN


// Name:           MSIX_IO
// Default:        false (MSIX_CAP_ENABLE)
// Values:         false (0x0), true (0x1)
// Enabled:        ((MSIX_CAP_ENABLE==1))
// Parameter Type: Feature Setting
// 
// Include optional top-level ports for MSI-X, as listed in the 'MSI-X Interface' section of the Databook. If included, the 
// MSI-X ports are used only when the controller is operating as an upstream port.
`define MSIX_IO 1'h0

//Route out MSI-X related IOs to the top level

// `define MSIX_IO_EN


// Name:           AS_LINK_PM_SUPT
// Default:        L0s and L1 Supported (CX_SRIS_SUPPORT ? 2 : 3)
// Values:         No ASPM Support (0), L0s Supported (1), L1 Supported (2), L0s and 
//                 L1 Supported (3)
// Parameter Type: Register Default Setting
// 
// Default value for the Active State Link PM Support field in the Link Capabilities register. When SRIS is supported, L0s 
// is not supported and must not be advertised in the Capability register. M-PCIe doesn't use the L0s state, and therefore 
// bit[0] of the Active State Link PM Support field is hardwired to "0" even when you select any value here.
`define AS_LINK_PM_SUPT 3


// Name:           DEFAULT_EP_L0S_ACCPT_LATENCY
// Default:        More than 4us
// Values:         Less than 64ns (0x0), 64ns to less than 128ns (0x1), 128ns to less 
//                 than 256ns (0x2), 256ns to less than 512ns (0x3), 512ns to less than 
//                 1us (0x4), 1us to less than 2us (0x5), 2us to 4us (0x6), More than 
//                 4us (0x7)
// Enabled:        ((CX_S_CPCIE_MODE || CX_SEL_PHY_MODE))
// Parameter Type: Register Default Setting
// 
// Default value for the Endpoint L0s Acceptable Latency field in the 'Device Capabilities Register'. This should be >= 
// DEFAULT_L0S_EXIT_LATENCY (or DEFAULT_COMM_L0S_EXIT_LATENCY), and you must ensure that there is sufficient buffering in your 
// EP for this latency setting. M-PCIe doesn't use this feature.
`define DEFAULT_EP_L0S_ACCPT_LATENCY 3'h7


// Name:           DEFAULT_EP_L1_ACCPT_LATENCY
// Default:        More than 64us
// Values:         Less than 1us (0x0), 1us to less than 2us (0x1), 2us to less than 
//                 4us (0x2), 4us to less than 8us (0x3), 8us to less than 16us (0x4), 
//                 16us to less than 32us (0x5), 32us to 64us (0x6), More than 64us (0x7)
// Enabled:        CX_S_CPCIE_MODE || CX_SEL_PHY_MODE
// Parameter Type: Register Default Setting
// 
// Default value for the Endpoint L1 Acceptable Latency field in the 'Device Capabilities Register.' This should be >= 
// DEFAULT_L1_EXIT_LATENCY (or DEFAULT_COMM_L1_EXIT_LATENCY), and you must ensure that there is sufficient buffering in your EP 
// for this latency setting. This parameter is for conventional PCIe mode only.
`define DEFAULT_EP_L1_ACCPT_LATENCY 3'h7


// Name:           DEFAULT_L1_ENTR_LATENCY
// Default:        8 us
// Values:         1 us (0x0), 2 us (0x1), 4 us (0x2), 8 us (0x3), 16 us (0x4)
// Parameter Type: Register Default Setting
// 
// Default value for the L1 Entrance Latency of the 'Ack Frequency and L0-L1 ASPM Control' register. For more details, see 
// the Registers section of the Databook. The default value is acceptable unless a Custom or Generic PHY is used.
`define DEFAULT_L1_ENTR_LATENCY 3'h3


// Name:           DEFAULT_L0S_ENTR_LATENCY
// Default:        4 us
// Values:         1 us (0x0), 2 us (0x1), 3 us (0x2), 4 us (0x3), 5 us (0x4), 6 us 
//                 (0x5), 7 us (0x6), also 7us (0x7)
// Parameter Type: Register Default Setting
// 
// Default value for the L0s Entrance Latency field of the 'Ack Frequency and L0-L1 ASPM Control' register. For more 
// details, see the Registers section of the Databook. The default value is acceptable unless a Custom or Generic PHY is used. In 
// M-PCIe, this parameter is applicable to the STALL state in L0.
`define DEFAULT_L0S_ENTR_LATENCY 3'h3


// `define CX_COMM_CLK_EN



// Name:           PORT_NUM
// Default:        0x0
// Values:         0x0, ..., 0xff
// Parameter Type: Register Default Setting
// 
// Default value for the Port Number field in the Link Capabilities Register.
`define PORT_NUM 8'h0


// Name:           ASPM_OPTIONALITY_COMPLIANCE
// Default:        true
// Values:         false (0x0), true (0x1)
// Parameter Type: Register Default Setting
// 
// Software uses this bit to determine whether to enable ASPM or whether to run ASPM compliance tests
`define ASPM_OPTIONALITY_COMPLIANCE 1'h1


// Name:           CX_RCB_SUPPORT
// Default:        true
// Values:         false (0x0), true (0x1)
// Parameter Type: Register Default Setting
// 
// Support the ability of configuration software to indicate the Read Completion Boundary value.
`define CX_RCB_SUPPORT 1'h1


// Name:           SLOT_PHY_SLOT_NUM
// Default:        0x0
// Values:         0x0, ..., 0x1fff
// Parameter Type: Register Default Setting
// 
// Default value for the Physical Slot Number field in the Slot Capabilities Register.
`define SLOT_PHY_SLOT_NUM 13'h0


// Name:           SET_SLOT_PWR_LIMIT_SCALE
// Default:        "1.0x"
// Values:         "1.0x" (0x0), "0.1x" (0x1), "0.01x" (0x2), "0.001x" (0x3)
// Parameter Type: Register Default Setting
// 
// Default value for the Slot Power Limit Scale field in the Slot Capabilities Register.
`define SET_SLOT_PWR_LIMIT_SCALE 2'h0


// Name:           SET_SLOT_PWR_LIMIT_VAL
// Default:        0x0
// Values:         0x0, ..., 0xff
// Parameter Type: Register Default Setting
// 
// Default value for the Slot Power Limit Value field in the Slot Capabilities Register.
`define SET_SLOT_PWR_LIMIT_VAL 8'h0


// Name:           SLOT_HP_CAPABLE
// Default:        false
// Values:         false (0x0), true (0x1)
// Parameter Type: Register Default Setting
// 
// Default value for the Hot-Plug Capable bit in the Slot Capabilities Register. When set indicates that this slot is 
// capable of supporting
`define SLOT_HP_CAPABLE 1'h1


// Name:           SLOT_HP_SURPRISE
// Default:        false
// Values:         false (0x0), true (0x1)
// Parameter Type: Register Default Setting
// 
// Default value for the Hot-Plug Surprise bit in the Slot Capabilities Register.
`define SLOT_HP_SURPRISE 1'h0


// Name:           SLOT_NO_CC_SUPPORT
// Default:        false
// Values:         false (0x0), true (0x1)
// Parameter Type: Register Default Setting
// 
// Default value for the No Command Complete Support bit in the Slot Capabilities Register.
`define SLOT_NO_CC_SUPPORT 1'h0


// Name:           SLOT_EML_PRESENT
// Default:        false
// Values:         false (0x0), true (0x1)
// Parameter Type: Register Default Setting
// 
// Default value for the Electromechanical Interlock Present bit in the Slot Capabilities Register.
`define SLOT_EML_PRESENT 1'h0


// Name:           SLOT_PWR_IND_PRESENT
// Default:        false
// Values:         false (0x0), true (0x1)
// Parameter Type: Register Default Setting
// 
// Default value for the Power Indicator Present bit in the Slot Capabilities Register.
`define SLOT_PWR_IND_PRESENT 1'h1


// Name:           SLOT_ATTEN_IND_PRESENT
// Default:        false
// Values:         false (0x0), true (0x1)
// Parameter Type: Register Default Setting
// 
// Default value for the Attention Indicator Present bit in the Slot Capabilities Register.
`define SLOT_ATTEN_IND_PRESENT 1'h1


// Name:           SLOT_MRL_SENSOR_PRESENT
// Default:        false
// Values:         false (0x0), true (0x1)
// Parameter Type: Register Default Setting
// 
// Default value for the MRL Sensor Present bit in the Slot Capabilities Register.
`define SLOT_MRL_SENSOR_PRESENT 1'h0


// Name:           SLOT_PWR_CTRL_PRESENT
// Default:        false
// Values:         false (0x0), true (0x1)
// Parameter Type: Register Default Setting
// 
// Default value for the Power Controller Present bit in the Slot Capabilities Register.
`define SLOT_PWR_CTRL_PRESENT 1'h1


// Name:           SLOT_ATTEN_BUTTON_PRESENT
// Default:        false
// Values:         false (0x0), true (0x1)
// Parameter Type: Register Default Setting
// 
// Default value for the Attention Button Present bit in the Slot Capabilities Register.
`define SLOT_ATTEN_BUTTON_PRESENT 1'h1


// Name:           SEL_DE_EMPHASIS
// Default:        -6 dB
// Values:         -6 dB (0x0), -3.5 dB (0x1)
// Enabled:        CX_GEN2_SPEED==1 && CX_CPCIE_ENABLE
// Parameter Type: Feature Setting
// 
// Selectable De-emphasis. Only for Gen2 downstream ports operating at 5 GT/s. This bit selects the level of de-emphasis 
// the link operates at. M-PCIe doesn't support this feature.
`define SEL_DE_EMPHASIS 1'h0



// Name:           CX_PIPE_HYBRID_MODE
// Default:        Standard PIPE Mode
// Values:         Standard PIPE Mode (0), Hybrid PIPE Mode (1)
// Enabled:        CX_CPCIE_ENABLE==1 && CX_GEN4_SPEED==1 && CX_FREQ_STEP_EN==0
// Parameter Type: Feature Setting
// 
// Select PIPE Mode. This parameter is valid for Synopsys Gen4 Solution Customer only. Use "Standard PIPE Mode" for the 
// other Customers.
// `define CX_PIPE_HYBRID_MODE


// Name:           AER_ENABLE
// Default:        true
// Values:         false (0x0), true (0x1)
// Enabled:        CX_ECRC_ENABLE==0
// Parameter Type: Feature Setting
// 
// Support PCI Express Advanced Error Reporting. Required if ECRC is enabled. If you want to disable this parameter, you 
// must first disable CX_ECRC_ENABLE.
`define AER_ENABLE 1'h1


// Name:           CX_ACS_AER_SUPP
// Default:        false (!AER_ENABLE)
// Values:         false (0x0), true (0x1)
// Enabled:        AER_ENABLE==1
// Parameter Type: Feature Setting
// 
// Support PCI Express Advanced Error Reporting Access Control Services (ACS) Enable .
`define CX_ACS_AER_SUPP 1'h0


// `define CX_ACS_AER


// Name:           VC_ENABLE
// Default:        false ((CX_NVC==1) ? 0 : 1)
// Values:         false (0x0), true (0x1)
// Enabled:        ((CX_NVC==1))
// Parameter Type: Feature Setting
// 
// Support PCIe virtual channel Capability (required if there are multiple VCs).
`define VC_ENABLE 1'h1


// Name:           SERIAL_CAP_ENABLE
// Default:        false
// Values:         false (0x0), true (0x1)
// Parameter Type: Feature Setting
// 
// Include Device Serial Number capability structure.
`define SERIAL_CAP_ENABLE 1'h1


// Name:           DEFAULT_SN_DW1
// Default:        0x0
// Values:         0x0, ..., 0xffffffff
// Enabled:        SERIAL_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Specifies the first 32 bits of the device serial number
`define DEFAULT_SN_DW1 32'h0


// Name:           DEFAULT_SN_DW2
// Default:        0x0
// Values:         0x0, ..., 0xffffffff
// Enabled:        SERIAL_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Specifies the second 32 bits of the device serial number
`define DEFAULT_SN_DW2 32'h0


`define DEFAULT_LANE_SKEW_OFF_26 0

//-/ =================================================================
//-/ Start of SR-IOV common register setting
//-/ =================================================================


`define SRIOV_OR_DBI_MFBAR_EN


// Name:           CX_VF_DEPENDENCY_LINK_SUPP
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 1)
// Parameter Type: Feature Setting
// 
// Enables support for VF dependency link. Valid only if CX_NFUNC >1.
`define CX_VF_DEPENDENCY_LINK_SUPP 1'h0


// Name:         VF_TYPE0_HDR_EN
// Default:      0 (CX_SRIOV_ENABLE && (CX_INTERNAL_NVFUNC != 0))
// Values:       0, 1
// 
// Specifies the controller has VF Type0 Header.
// `define VF_TYPE0_HDR_EN


// Name:         VF_PCIE_CAP_EN
// Default:      0 (CX_SRIOV_ENABLE && (CX_INTERNAL_NVFUNC != 0))
// Values:       0, 1
// 
// Specifies the controller has VF PCIe Capability.
// `define VF_PCIE_CAP_EN


// Name:         VF_ARI_CAP_EN
// Default:      0 (CX_SRIOV_ENABLE && (CX_INTERNAL_NVFUNC != 0))
// Values:       0, 1
// 
// Specifies the controller has VF ARI Capability.
// `define VF_ARI_CAP_EN


// Name:           VF_PM_CAP_ENABLE
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_SRIOV_ENABLE && !CX_EXTENSIBLE_VFUNC
// Parameter Type: Feature Setting
// 
// Enable Power Management Capability for virtual functions. Not available if Extensible Virtual Function 
// (CX_EXTENSIBLE_VFUNC) is enabled.
`define VF_PM_CAP_ENABLE 1'h0


// `define VF_PM_EN


// Name:           VF_SLOT_CAP_ENABLE
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        0
// Parameter Type: Feature Setting
// 
// VF Slot ID Capability structure enable
`define VF_SLOT_CAP_ENABLE 1'h0


// Name:           VF_VPD_CAP_ENABLE
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        0
// Parameter Type: Feature Setting
// 
// VF Vital Product Data (VPD) Capability structure enable
`define VF_VPD_CAP_ENABLE 1'h0


// Name:           VF_MSI_CAP_ENABLE
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_SRIOV_ENABLE && INTERNAL_VF_ENABLE
// Parameter Type: Feature Setting
// 
// Enable MSI Capability for virtual functions.
`define VF_MSI_CAP_ENABLE 1'h0


// `define VF_MSI_EN


// Name:           VF_MSIX_CAP_ENABLE
// Default:        false (CX_SRIOV_ENABLE && (CX_INTERNAL_NVFUNC != 0))
// Values:         false (0x0), true (0x1)
// Enabled:        CX_SRIOV_ENABLE && INTERNAL_VF_ENABLE
// Parameter Type: Feature Setting
// 
// Enable MSI-X Capability for virtual functions.
`define VF_MSIX_CAP_ENABLE 1'h0


// `define VF_MSIX_CAP_EN


// Name:           VF_MSIX_TABLE_BIR
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        ((VF_MSIX_CAP_ENABLE==1))
// Parameter Type: Feature Setting
// 
// Default value for the Table BAR Indicator Register (BIR) field in the VF MSI-X Table Offset and BIR Register. Indicates 
// which BAR is used to map the MSI-X Table into memory space.
`define VF_MSIX_TABLE_BIR 3'h0


// Name:           VF_MSIX_TABLE_OFFSET
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        ((VF_MSIX_CAP_ENABLE==1))
// Parameter Type: Feature Setting
// 
// Default value for the Table Offset field in the VF MSI-X Table Offset and BIR Register.
`define VF_MSIX_TABLE_OFFSET 29'h0


// Name:           VF_MSIX_PBA_BIR
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        ((VF_MSIX_CAP_ENABLE==1))
// Parameter Type: Feature Setting
// 
// Default value for the Pending Bit Array (PBA) BIR field in the VF MSI-X Table Offset and BIR Register. Indicates which 
// BAR is used to map the MSI-X PBA into memory space.
`define VF_MSIX_PBA_BIR 3'h0


// Name:           VF_MSIX_PBA_OFFSET
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        ((VF_MSIX_CAP_ENABLE==1))
// Parameter Type: Feature Setting
// 
// Default value for the PBA Offset field in the VF MSI-X Table Offset and BIR Register.
`define VF_MSIX_PBA_OFFSET 29'h0


// Name:           VF_AER_ENABLE
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_SRIOV_ENABLE && AER_ENABLE && INTERNAL_VF_ENABLE
// Parameter Type: Feature Setting
// 
// Enable AER Capability for virtual functions.
`define VF_AER_ENABLE 1'h0


// `define VF_AER_EN



// Name:           VF_TPH_ENABLE_VALUE
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_SRIOV_ENABLE && CX_TPH_ENABLE && INTERNAL_VF_ENABLE
// Parameter Type: Feature Setting
// 
// Include VF TPH Capability structure
`define VF_TPH_ENABLE_VALUE 1'h0


// `define VF_TPH_ENABLE


// Name:           VF_ATS_ENABLE
// Default:        false
// Values:         false (0), true (1)
// Enabled:        CX_SRIOV_ENABLE && CX_ATS_ENABLE && INTERNAL_VF_ENABLE
// Parameter Type: Feature Setting
// 
// Include VF ATS Capability structure
// `define VF_ATS_ENABLE


`define VF_ATS_ENABLE_VALUE 1'h0


// Name:           VF_PASID_ENABLE
// Default:        false
// Values:         false (0), true (1)
// Enabled:        CX_SRIOV_ENABLE && CX_PASID_ENABLE && INTERNAL_VF_ENABLE
// Parameter Type: Feature Setting
// 
// Include VF PASID Capability structure
// `define VF_PASID_ENABLE


`define VF_PASID_ENABLE_VALUE 1'h0


// Name:           DYNAMIC_VF_ENABLE
// Default:        true
// Values:         false (0), true (1)
// Enabled:        CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Enable programmable allocation of VFs to PFs. For more details, see the Programmable Virtual Function Allocation section 
// in the Databook. You should disable this parameter when you do not need it, to save gates and ease timing closure.
`define DYNAMIC_VF_ENABLE


`define DYNAMIC_VF_ENABLE_VALUE 1


`define STATIC_PF_BUS_MAP { 1'd0, 1'd0 }

`define STATIC_VF_BUS_MAP { 2'd1, 2'd0 }

//-/ =================================================================
//-/ End of SR-IOV common register setting
//-/ =================================================================


// Name:           CX_ARI_FWD_CAP
// Default:        false
// Values:         false (0), true (1)
// Enabled:        Always
// Parameter Type: Feature Setting
// 
// When set, Alternate Routing ID (ARI) Forwarding  is supported and the ARI Forwarding Supported field in the PCIe Device 
// Capabilities 2 Register is set.
// `define CX_ARI_FWD_CAP


`define CX_ARI_FWD_ENABLE 1'h0


// Name:           SPCIE_CAP_ENABLE
// Default:        0x0 (CX_SEL_PHY_MODE  ? (CX_MAX_CPCIE_SPEED >= 3) : CX_S_CPCIE_MODE 
//                 ? (CX_GEN3_MODE != GEN3_DISABLED) : 0)
// Values:         0x0, 0x1
// Parameter Type: Feature Setting
// 
// Secondary PCI Express Extended Capability Structure Enable
`define SPCIE_CAP_ENABLE 1'h0


// Name:           CX_L1_SUBSTATES_ENABLE
// Default:        false
// Values:         false (0), true (1)
// Enabled:        ((CX_S_CPCIE_MODE || CX_SEL_PHY_MODE))
// Parameter Type: Feature Setting
// 
// Enable  support for L1 substates. For more details, see the Power Management section of the Databook. M-PCIe doesn't 
// support this feature.
`define CX_L1_SUBSTATES_ENABLE


// Name:           CX_L1_SUBSTATES_DEFAULTS_VISIBLE
// Default:        0
// Values:         0, 1
// Parameter Type: Register Default Setting
// 
// Select here if you want to configure the defaults for the L1 substates capability register. An extra window will appear 
// under this page. To access it, click the plus/minus symbol in the hierarchy view on the left panel. This is optional but 
// not usually recommended. You can also change these register defaults using the DBI before (or after) the link comes up.
`define CX_L1_SUBSTATES_DEFAULTS_VISIBLE 1


`define CX_L1SUB_ENABLE_VALUE 1'h1


// Name:         CX_L1_PG_ENABLE
// Default:      0 (CX_L12_PG_EN)
// Values:       0, 1
// 
// If power gating is supported in L1 substates this parameter will be set to 1
// `define CX_L1_PG_ENABLE


// Name:         CX_L1SUB_OR_PIPE43
// Default:      1 (CX_L1_SUBSTATES_ENABLE || CX_PIPE43_SUPPORT)
// Values:       0, 1
// 
// This parameter is set to 1 if L1 Substates or PIPE4.3 is enabled
`define CX_L1SUB_OR_PIPE43


// Name:           DEFAULT_AUX_CLK_FREQ
// Default:        10
// Values:         1, ..., 1000
// Enabled:        CX_L1_SUBSTATES_ENABLE
// Parameter Type: Register Default Setting
// 
// The frequency (in MHz) of the aux_clk that is supplied by the application during low power states. This parameter is 
// used to set the default value of the Auxiliary Clock Frequency Control Port Logic Register
`define DEFAULT_AUX_CLK_FREQ 10'd10


// Name:           DEFAULT_L1SUB_PORT_T_COMM_MODE
// Default:        10
// Values:         0, ..., 255
// Enabled:        CX_L1_SUBSTATES_ENABLE
// Parameter Type: Register Default Setting
// 
// Default value of the Port Common_Mode_Restore_Time field in the L1 Substates Capability register. For downstream ports, 
// it is also the default value of the Common Mode Restore Time field in the L1 Substates Control 1 register.
`define DEFAULT_L1SUB_PORT_T_COMM_MODE 8'd10


// Name:           DEFAULT_L1SUB_PORT_T_POWER_ON_SCALE
// Default:        2 us
// Values:         2 us (0x0), 10 us (0x1), 100 us (0x2)
// Enabled:        CX_L1_SUBSTATES_ENABLE
// Parameter Type: Register Default Setting
// 
// Default value of the Port T_POWER_ON Scale field in the L1 Substates Capability register.
`define DEFAULT_L1SUB_PORT_T_POWER_ON_SCALE 2'h0


// Name:           DEFAULT_L1SUB_PORT_T_POWER_ON_VALUE
// Default:        5
// Values:         0, ..., 31
// Enabled:        CX_L1_SUBSTATES_ENABLE
// Parameter Type: Register Default Setting
// 
// Default value of the Port T_POWER_ON Value field in the L1 Substates Capability register.
`define DEFAULT_L1SUB_PORT_T_POWER_ON_VALUE 5'd5


// Name:           PWR_BUDGET_CAP_ENABLE
// Default:        false
// Values:         false (0x0), true (0x1)
// Parameter Type: Feature Setting
// 
// Include Power Budgeting capability structure
`define PWR_BUDGET_CAP_ENABLE 1'h1

//Route out Power Budget related IOs to the top level

`define PWR_BUDGET_IO_ENABLE


// Name:           DEFAULT_PWR_BUDGET_SYS_ALLOC
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        PWR_BUDGET_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the System Allocated bit in the Power Budget Capability register.
`define DEFAULT_PWR_BUDGET_SYS_ALLOC 1'h1


// Name:           VPD_CAP_ENABLE
// Default:        false
// Values:         false (0x0), true (0x1)
// Parameter Type: Feature Setting
// 
// Include Vital Product Data (VPD) capability structure
`define VPD_CAP_ENABLE 1'h1

//Route out VPD related IOs to the top level

`define VPD_IO_ENABLE


// Name:           SLOT_CAP_ENABLE
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        0
// Parameter Type: Feature Setting
// 
// Slot ID Capability structure enable
`define SLOT_CAP_ENABLE 1'h0


// Name:           FIRST_IN_CHASSIS
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        ((SLOT_CAP_ENABLE==1))
// Parameter Type: Register Default Setting
// 
// Default value for the "First In Chassis" field in the Slot Numbering Capabilities Register.
`define FIRST_IN_CHASSIS 1'h0


// Name:         SLOT_NUM
// Default:      0x0
// Values:       0x0, ..., 0x1f
// Enabled:      SLOT_CAP_ENABLE==1
// 
// Default value for the "Add-In Card Slots Provided" field in the Slot Numbering Capabilities Register.
`define SLOT_NUM 5'h0

//Virtual Channel capability register only exist in function 0


// Name:           DEFAULT_VC_ARB_32
// Default:        0x0
// Values:         0x0, ..., 0xf
// Enabled:        ((VC_ENABLE==1))
// Parameter Type: Register Default Setting
// 
// Default value for the VC Arbitration Capability field in the Port VC Capability Register 2.
`define DEFAULT_VC_ARB_32 8'h0


// Name:           DEFAULT_LOW_PRI_EXT_VC_CNT
// Default:        0x0
// Values:         0x0, ..., CX_NVC
// Enabled:        (((VC_ENABLE==1)))
// Parameter Type: Register Default Setting
// 
// Default value for the Low Priority Extended VC Count field in the Port VC Capability Register 1.
`define DEFAULT_LOW_PRI_EXT_VC_CNT 3'h0


`define MAX_LINK_SP 4'h2

// -/ =================================================================
// -/ Start of DPA Capability register setting
// -/ =================================================================


// Name:           DEFAULT_DPA_SUBSTATE_MAX
// Default:        0x1f
// Values:         0x0, ..., 0x1f
// Enabled:        CX_DPA_ENABLE
// Parameter Type: Feature Setting
// 
// Function: 
//  The default value of the maximum substate number which is the total number of supported substates minus one. A value 
//  of 0 indicates support for one substate. This value represents the maximum configurable value of the Substate_Max field in 
//  the DPA Capability register. A write to this register field through the DBI will not be able to alter this to a larger 
//  value.
`define DEFAULT_DPA_SUBSTATE_MAX 5'h1f


`define DEFAULT_DPA_TLUNIT 2'h1


`define DEFAULT_DPA_PAS 2'h1


`define DEFAULT_DPA_XCLY0 8'h80


`define DEFAULT_DPA_XCLY1 8'hff


`define DEFAULT_DPA_TLIB 32'h0


// `define DEFAULT_DPA_SUBSTATE_MAX_LT_8


// `define DEFAULT_DPA_SUBSTATE_MAX_LT_16


// `define DEFAULT_DPA_SUBSTATE_MAX_LT_24


`define DEFAULT_DPA_SUBSTATE_MAX_IS_31


`define DPA_PAA_DEPTH 8
// -/ =================================================================
// -/ End of DPA Capability register setting
// -/ =================================================================

//-/ =================================================================
//-/ Start of RAS D.E.S. Vendor Specific Capability register setting


// Name:         CX_RAS_DES_EC_RAM_DATA_WIDTH
// Default:      64
// Values:       -2147483648, ..., 2147483647
// 
// Bit width of the RAM data in RAS DES event counter register
`define CX_RAS_DES_EC_RAM_DATA_WIDTH 64


// Name:         CX_RAS_DES_EC_RAM_DEPTH
// Default:      0 ([<functionof> CX_RAS_DES_EC_G0_BW CX_RAS_DES_EC_G1_BW 
//               CX_RAS_DES_EC_G2_BW CX_RAS_DES_EC_G3_BW CX_RAS_DES_EC_G4_BW CX_RAS_DES_EC_G5_BW 
//               CX_RAS_DES_EC_G6_BW CX_RAS_DES_EC_G7_BW CX_RAS_DES_EC_ENABLE CX_NL 
//               CX_GEN2_SPEED CX_GEN3_SPEED CX_L1_SUBSTATES_ENABLE 
//               CX_RAS_DES_NEXT_PHASE_ENABLE CX_MPCIE_ENABLE])
// Values:       -2147483648, ..., 2147483647
// 
// RAM depth in RAS DES event counter register
`define CX_RAS_DES_EC_RAM_DEPTH 0


// Name:         CX_RAS_DES_EC_RAM_ENABLE
// Default:      0 (([<functionof> CX_RAS_DES_EC_G0_BW CX_RAS_DES_EC_G1_BW 
//               CX_RAS_DES_EC_G2_BW CX_RAS_DES_EC_G3_BW CX_RAS_DES_EC_G4_BW 
//               CX_RAS_DES_EC_G5_BW CX_RAS_DES_EC_G6_BW CX_RAS_DES_EC_G7_BW CX_RAS_DES_EC_ENABLE CX_NL 
//               CX_GEN2_SPEED CX_GEN3_SPEED CX_L1_SUBSTATES_ENABLE 
//               CX_RAS_DES_NEXT_PHASE_ENABLE CX_MPCIE_ENABLE])>0)
// Values:       0, 1
// 
// RASDES Register RAM Enable
// `define CX_RAS_DES_EC_RAM_ENABLE


// Name:         CX_RAS_DES_RAM_ENABLE
// Default:      0 (CX_RAS_DES_EC_RAM_ENABLE || CX_RAS_DES_TBA_ENABLE)
// Values:       0, 1
// 
// RASDES Register RAM Enable
// `define CX_RAS_DES_RAM_ENABLE


// Name:         CX_RAS_DES_EC_RAM_ADDR_WIDTH
// Default:      1 ([<functionof> ([<functionof> CX_RAS_DES_EC_G0_BW 
//               CX_RAS_DES_EC_G1_BW CX_RAS_DES_EC_G2_BW CX_RAS_DES_EC_G3_BW CX_RAS_DES_EC_G4_BW 
//               CX_RAS_DES_EC_G5_BW CX_RAS_DES_EC_G6_BW CX_RAS_DES_EC_G7_BW 
//               CX_RAS_DES_EC_ENABLE CX_NL CX_GEN2_SPEED CX_GEN3_SPEED CX_L1_SUBSTATES_ENABLE 
//               CX_RAS_DES_NEXT_PHASE_ENABLE CX_MPCIE_ENABLE])])
// Values:       -2147483648, ..., 2147483647
// 
// Bit width of the RAM address in RAS DES event counter register
`define CX_RAS_DES_EC_RAM_ADDR_WIDTH 1


// Name:         CX_RAS_DES_TBA_RAM_DATA_WIDTH
// Default:      64
// Values:       -2147483648, ..., 2147483647
// 
// Bit width of the RAM data in RAS DES event counter register
`define CX_RAS_DES_TBA_RAM_DATA_WIDTH 64


// Name:         CX_RAS_DES_TBA_RAM_DEPTH
// Default:      1 ([<functionof> CX_RAS_DES_TBA_ENABLE CX_L1_SUBSTATES_ENABLE])
// Values:       -2147483648, ..., 2147483647
// 
// RAM depth in RAS DES event counter register
`define CX_RAS_DES_TBA_RAM_DEPTH 1


// Name:         CX_RAS_DES_TBA_RAM_ADDR_WIDTH
// Default:      1 ([<functionof> ([<functionof> CX_RAS_DES_TBA_ENABLE 
//               CX_L1_SUBSTATES_ENABLE])])
// Values:       -2147483648, ..., 2147483647
// 
// Bit width of the RAM address in RAS DES event counter register
`define CX_RAS_DES_TBA_RAM_ADDR_WIDTH 1

//-/ End of RAS D.E.S. Vendor Specific Capability register setting
//-/ =================================================================

//-/ =================================================================
//-/ Function 0 Configuration Registers
//-/ =================================================================


// Name:         FUNC_0
// Default:      1
// Values:       0, 1
// 
// This parameter indicates that Function 0 is present
`define FUNC_0

//-/===========================================
//-/ START: PCI-E CAPABILITIES CONFIGURATION

//

// Name:           PCIE_CAP_INT_MSG_NUM_0
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Message Number field in the PCI Express Capabilities Register.
`define PCIE_CAP_INT_MSG_NUM_0 5'h0


// Name:           DEFAULT_CLK_PM_CAP
// Default:        0x0
// Values:         0x0, 0x1
// Parameter Type: Register Default Setting
// 
// Default value for the Clock Power Management bit in the Link Capabilities Register.
`define DEFAULT_CLK_PM_CAP 1'h1


// Name:           SLOT_IMPLEMENTED_0
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        Always
// Parameter Type: Register Default Setting
// 
// Indicates that the PCI Express link associated with this Port is connected to a slot. Applies to RC only.
`define SLOT_IMPLEMENTED_0 1'h1


// Name:           DEFAULT_PHANTOM_FUNC_SUPPORTED_0
// Default:        0x0
// Values:         0x0, ..., 0x3
// Parameter Type: Register Default Setting
// 
// Indicates the support for use of unclaimed function numbers to extend the number of outstanding transactions allowed by 
// logically combining unclaimed function numbers with Tag identifier
`define DEFAULT_PHANTOM_FUNC_SUPPORTED_0 2'h0


// Name:           DEFAULT_EXT_TAG_FIELD_SUPPORTED_0
// Default:        0x0 ((CX_MAX_TAG>31) ? 1 : 0)
// Values:         0x0, 0x1
// Parameter Type: Register Default Setting
// 
// Indicates the maximum supported size of the Tag field as a Requester. Should only be set when CX_MAX_TAG is greater than 
// 32
`define DEFAULT_EXT_TAG_FIELD_SUPPORTED_0 1'h0


// Name:           DEFAULT_ATT_BUTT_PRE_0
// Default:        0x0
// Values:         0x0, 0x1
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Button is present
`define DEFAULT_ATT_BUTT_PRE_0 1'h0


// Name:           DEFAULT_ATT_IND_PRE_0
// Default:        0x0
// Values:         0x0, 0x1
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Indicator is present
`define DEFAULT_ATT_IND_PRE_0 1'h0


// Name:           DEFAULT_PWR_IND_PRE_0
// Default:        0x0
// Values:         0x0, 0x1
// Parameter Type: Register Default Setting
// 
// When set indicates that a Power Indicator is present
`define DEFAULT_PWR_IND_PRE_0 1'h0


// Name:           DEFAULT_NO_SNOOP_SUPPORTED_0
// Default:        0x0
// Values:         0x0, 0x1
// Parameter Type: Register Default Setting
// 
// Default value for the Enable No Snoop bit in the Device Control Register.
`define DEFAULT_NO_SNOOP_SUPPORTED_0 1'h0


// Name:           ROOT_RCB_0
// Default:        64-bytes
// Values:         64-bytes (0x0), 128-bytes (0x1)
// Parameter Type: Register Default Setting
// 
// Default value for the Read Completion Boundary (RCB) bit in the Link Control Register.
`define ROOT_RCB_0 1'h0


//-/ END:   PCI-E CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: MSI-X CAPABILITIES CONFIGURATION


// Name:           MSIX_TABLE_SIZE_0
// Default:        0x0
// Values:         0x0, ..., 0x7ff
// Enabled:        MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the MSI-X Table Size field in the MSI-X Control Register.
`define MSIX_TABLE_SIZE_0 11'h0


// Name:           MSIX_TABLE_BIR_0
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table BAR Indicator Register (BIR) field in the MSI-X Table Offset and BIR Register.
`define MSIX_TABLE_BIR_0 3'h0


// Name:           MSIX_TABLE_OFFSET_0
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        ((MSIX_CAP_ENABLE==1))
// Parameter Type: Register Default Setting
// 
// Default value for the Table Offset field in the MSI-X Table Offset and BIR Register.
`define MSIX_TABLE_OFFSET_0 29'h0


// Name:           MSIX_PBA_BIR_0
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        ((MSIX_CAP_ENABLE==1))
// Parameter Type: Register Default Setting
// 
// Default value for the Pending Bit Array (PBA) BIR field in the MSI-X PBA Offset and BIR Register.
`define MSIX_PBA_BIR_0 7'h0


// Name:           MSIX_PBA_OFFSET_0
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        ((MSIX_CAP_ENABLE==1))
// Parameter Type: Register Default Setting
// 
// Default value for the PBA Offset field in the MSI-X PBA Offset and BIR Register.
`define MSIX_PBA_OFFSET_0 29'h0

//-/ END:   MSI-X CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SATA CAPABILITIES CONFIGURATION


// Name:           SATA_HBA_OFFSET_0
// Default:        0x0
// Values:         0x0, ..., 0xfffff
// Enabled:        ((SATA_CAP_ENABLE==1))
// Parameter Type: Register Default Setting
// 
// HBA Offset. Base address of the SATA HBA registers, 
//  as an offset from the base address of the BAR indicated 
//  by the SATA BAR field.
`define SATA_HBA_OFFSET_0 20'h0


// Name:           SATA_BAR_0
// Default:        0x0
// Values:         0x0, ..., 0xf
// Enabled:        ((SATA_CAP_ENABLE==1))
// Parameter Type: Register Default Setting
// 
// HBA BAR. The bar that maps to SATA HBA registers,
`define SATA_BAR_0 4'h0

//-/ END:   SATA CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/===========================================
//-/ START: AER CAPABILITIES CONFIGURATION


// Name:           DEFAULT_ECRC_CHK_CAP_0
// Default:        true ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         false (0x0), true (0x1)
// Enabled:        CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Check Capable bit in the Advanced Capabilities and Control Register.
`define DEFAULT_ECRC_CHK_CAP_0 1'h1


// Name:           DEFAULT_ECRC_GEN_CAP_0
// Default:        true ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         false (0x0), true (0x1)
// Enabled:        CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Generation Capability bit in the Advanced Capabilities and Control Register.
`define DEFAULT_ECRC_GEN_CAP_0 1'h1


// Name:           AER_INT_MSG_NUM_0
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Advanced Error Interrupt Message Number field of the Root Error Status Register.
`define AER_INT_MSG_NUM_0 5'h0



// Name:           CX_HDR_LOG_DEPTH_0
// Default:        0x1
// Values:         0x1, 0x2, 0x4
// Enabled:        AER_ENABLE==1
// Parameter Type: Feature Setting.
// 
// AER Header log depth.
`define CX_HDR_LOG_DEPTH_0 3'h1


`define CX_MULTIPLE_HDR_REC_CAP_0 1'h0


//-/ END:   AER CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PM CAPABILITIES CONFIGURATION


// Name:           PME_SUPPORT_0
// Default:        0x1b
// Values:         0x0, ..., 0x1f
// Parameter Type: Register Default Setting
// 
// Default value for the PME_Support field in the Power Management Capabilities Register.
`define PME_SUPPORT_0 5'h1b


// Name:           D1_SUPPORT_0
// Default:        true
// Values:         false (0x0), true (0x1)
// Parameter Type: Register Default Setting
// 
// Default value for the D1 Support bit in the Power Management Capabilities Register.
`define D1_SUPPORT_0 1'h1


// Name:           D2_SUPPORT_0
// Default:        false
// Values:         false (0x0), true (0x1)
// Parameter Type: Register Default Setting
// 
// Default value for the D2 Support bit in the Power Management Capabilities Register.
`define D2_SUPPORT_0 1'h0


// Name:           DEV_SPEC_INIT_0
// Default:        false
// Values:         false (0x0), true (0x1)
// Parameter Type: Register Default Setting
// 
// Default value for the Device Specific Initialization (DSI) bit in the Power Management Capabilities Register.
`define DEV_SPEC_INIT_0 1'h0


// Name:           AUX_CURRENT_0
// Default:        375mA
// Values:         0mA (0x0), 55mA (0x1), 100mA (0x2), 160mA (0x3), 220mA (0x4), 270mA 
//                 (0x5), 320mA (0x6), 375mA (0x7)
// Parameter Type: Register Default Setting
// 
// Default value for the Aux Current field in the Power Management Capabilities Register.
`define AUX_CURRENT_0 3'h7


// Name:           DEFAULT_NO_SOFT_RESET_0
// Default:        false
// Values:         false (0x0), true (0x1)
// Parameter Type: Register Default Setting
// 
// Default value for the No Soft Reset bit in the Power Management Control and Status Register. When set, you should not 
// reset any controller registers when transitioning from D3hot to D0. Therefore, you should not assert the non_sticky_rst_n 
// and sticky_rst_n inputs.
`define DEFAULT_NO_SOFT_RESET_0 1'h0

//-/ END:   PM CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PCI BASIC CONFIGURATION


// Name:           CX_DEVICE_ID_0
// Default:        0xabcd
// Values:         0x0, ..., 0xffff
// Parameter Type: Register Default Setting
// 
// Default value for the Device ID field in the Device ID and Vendor ID Register.
`define CX_DEVICE_ID_0 16'habcd


// Name:           CX_VENDOR_ID_0
// Default:        0x16c3
// Values:         0x0, ..., 0xffff
// Parameter Type: Register Default Setting
// 
// Default value for the Vendor ID field in the Device ID and Vendor ID Register.
`define CX_VENDOR_ID_0 16'h16c3


// Name:           CX_REVISION_ID_0
// Default:        0x1
// Values:         0x0, ..., 0xff
// Parameter Type: Register Default Setting
// 
// Default value for the Revision ID field in the Revision ID Register
`define CX_REVISION_ID_0 8'h1


// Name:           SUBSYS_DEV_ID_0
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem ID field in the Subsystem ID and Subsystem Vendor ID Register.
`define SUBSYS_DEV_ID_0 16'h0


// Name:           SUBSYS_VENDOR_ID_0
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem Vendor ID field in the Subsystem ID and Subsystem Vendor ID Register.
`define SUBSYS_VENDOR_ID_0 16'h0


// Name:           BASE_CLASS_CODE_0
// Default:        0x0
// Values:         0x0, ..., 0xff
// Parameter Type: Register Default Setting
// 
// Default value for the Base Class Code field in the Class Code Register.
`define BASE_CLASS_CODE_0 8'h0


// Name:           SUB_CLASS_CODE_0
// Default:        0x0
// Values:         0x0, ..., 0xff
// Parameter Type: Register Default Setting
// 
// Default value for the Subclass Code field in the Class Code Register.
`define SUB_CLASS_CODE_0 8'h0


// Name:           IF_CODE_0
// Default:        0x0
// Values:         0x0, ..., 0xff
// Parameter Type: Register Default Setting
// 
// Default value for the Programming Interface field in the Class Code Register.
`define IF_CODE_0 8'h0


// Name:           CARDBUS_CIS_PTR_0
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Parameter Type: Register Default Setting
// 
// Default value for the CardBus CIS Pointer Register.
`define CARDBUS_CIS_PTR_0 16'h0


// Name:           INT_PIN_MAPPING_0
// Default:        INTA
// Values:         None (0x0), INTA (0x1), INTB (0x2), INTC (0x3), INTD (0x4)
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Pin Register.
`define INT_PIN_MAPPING_0 8'h1


// Name:           IO_DECODE_32_0
// Default:        16-bit
// Values:         16-bit (0x0), 32-bit (0x1)
// Parameter Type: Register Default Setting
// 
// Default value for the 32-Bit I/O Space bit in the I/O Base and I/O Limit Register.
`define IO_DECODE_32_0 1'h0


// Name:           MEM_DECODE_64_0
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x1)
// Parameter Type: Register Default Setting
// 
// Default value for the 64-Bit Memory Addressing bit in the Prefetchable Memory Base and Limit Register.
`define MEM_DECODE_64_0 1'h0


// Name:           ROM_BAR_ENABLED_0
// Default:        0x1
// Values:         0x0, 0x1
// Parameter Type: Feature Setting
// 
// Include the expansion ROM BAR registers.
`define ROM_BAR_ENABLED_0 1'h1


`define DEFAULT_ROM_BAR_ENABLED_0 1'h1


// Name:           ROM_MASK_0
// Default:        0xffff
// Values:         0x7ff, ..., 0xffffff
// Enabled:        ROM_BAR_ENABLED_0==1
// Parameter Type: Register Default Setting
// 
// Determines the default of the Expansion ROM BAR Mask register. 
//  - The BAR Mask register specifies which bits of the Expansion ROM BAR are non-writable by host software, which 
//  determines the size of the BAR. 
//  - The maximum value for ROM_MASK_N is 0xFFFFFF because the maximum space that can be claimed by an Expansion ROM BAR 
//  is 16 MB. 
//  - For example: 32'hFFFF =BAR size of 2^16.
`define ROM_MASK_0 32'hffff


// Name:           ROM_MASK_WRITABLE_0
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ROM_BAR_ENABLED_0==1
// Parameter Type: Feature Setting
// 
// Determines if the Expansion ROM BAR Mask register is writable by application software. If writing to a Expansion ROM BAR 
// Mask register is enabled, your application can write to the Expansion ROM BAR Mask register through the DBI by asserting 
// dbi_cs2 in addition to dbi_cs.
`define ROM_MASK_WRITABLE_0 1'h1


// Name:           ROM_FUNC0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((ROM_BAR_ENABLED_0==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match the Expansion ROM BAR to either RTRGT0 or RTRGT1. 
//  - For example, setting ROM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for the Expansion ROM BAR of function 
//  0 to RTRGT1. 
//  - If TRGT1_POPULATE =0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define ROM_FUNC0_TARGET_MAP 1'h1


// Name:           CX_PCI_HEADER_DEFAULTS_VISIBLE_0
// Default:        0
// Values:         0, 1
// Parameter Type: Register Default Setting
// 
// Select here if you want to configure the defaults for the other PCI Standard Header registers. 
//  An extra window will appear under this page. To access it, click the plus/minus symbol in the hierarchy view on the 
//  left panel. 
//  This is optional but not usually recommended. 
//  You can also change these register defaults using the DBI before (or after) the link comes up.
`define CX_PCI_HEADER_DEFAULTS_VISIBLE_0 1


//-/ END:   PCI BASIC CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: BAR CONFIGURATION


// Name:           BAR0_ENABLED_0
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        Always
// Parameter Type: Feature Setting
// 
// Include the BAR0 registers.
`define BAR0_ENABLED_0 1'h1


`define DEFAULT_BAR0_ENABLED_0 1'h1


// Name:           MEM0_SPACE_DECODER_0
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        BAR0_ENABLED_0==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR).
`define MEM0_SPACE_DECODER_0 1'h0


// Name:           PREFETCHABLE0_0
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        BAR0_ENABLED_0==1 && MEM0_SPACE_DECODER_0==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR).
`define PREFETCHABLE0_0 1'h0


// Name:           BAR0_TYPE_0
// Default:        64-bit ((MEM0_SPACE_DECODER_0==1 || BAR0_ENABLED_0==0) ? 0 : 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        BAR0_ENABLED_0==1 && MEM0_SPACE_DECODER_0==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR).
`define BAR0_TYPE_0 2'h2


// Name:           BAR0_SIZING_SCHEME_0
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        BAR0_ENABLED_0==1
// Parameter Type: Feature Setting
// 
// BAR0 Sizing Scheme 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR0_SIZING_SCHEME_0 2'h0


// Name:           CX_BAR0_RESIZABLE_0
// Default:        0x0 ((BAR0_SIZING_SCHEME_0==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR0_ENABLED_0==1) && (MEM0_SPACE_DECODER_0==0)
// Parameter Type: Feature Setting
// 
// Defines BAR0 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR0 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR0_RESIZABLE_0 1'h0


// Name:           CX_BAR0_RESOURCE_AVAIL_0
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_BAR0_RESIZABLE_0==1
// Parameter Type: Feature Setting
// 
// Indicates usable resource sizes for BAR0. 
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
// Example: 0x00000030 indicates that BAR0 will operate correctly with the BAR sized to either 1MB or 2MB.
`define CX_BAR0_RESOURCE_AVAIL_0 64'h10


// Name:           BAR0_MASK_WRITABLE_0
// Default:        0x0 ((BAR0_ENABLED_0==1 && BAR0_SIZING_SCHEME_0 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        BAR0_ENABLED_0==1
// Parameter Type: Feature Setting
// 
// Determines whether the BAR Mask register is writable by application software. This allows the application to write the 
// BAR Mask register through the DBI using the BAR's address and asserting dbi_cs2 in addition to dbi_cs. If BAR0_ENABLED_0 = 
// 0 and BAR0_MASK_WRITABLE_0 = 0, then BAR 0 is excluded from the controller hardware configuration.
`define BAR0_MASK_WRITABLE_0 1'h0


// Name:           BAR0_MASK_0
// Default:        0xfffff (CX_BAR0_RESIZABLE_0==1 ? [calc_bar_mask 
//                 CX_BAR0_RESOURCE_AVAIL_0] : MEM0_SPACE_DECODER_0==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        BAR0_ENABLED_0==1 && MEM0_SPACE_DECODER_0==0 && 
//                 CX_BAR0_RESIZABLE_0==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR Mask register. The BAR Mask register specifies which bits of the BAR are 
// non-writable by host software, which determines the size of the BAR. When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then 
// the default value of this mask is determined from the CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR0_MASK_0 64'hfffff


// Name:           MEM_FUNC0_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((BAR0_ENABLED_0==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming Requests that pass filtering and match BAR_0 to either RTRGT0 or RTRGT1. For example, setting 
// MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE = 0 (no RTRGT1 
// interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define MEM_FUNC0_BAR0_TARGET_MAP 1'h1


// Name:           BAR1_ENABLED_0
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        BAR0_TYPE_0==0
// Parameter Type: Feature Setting
// 
// Include the BAR1 registers.
`define BAR1_ENABLED_0 1'h0


`define DEFAULT_BAR1_ENABLED_0 1'h0


// Name:           MEM1_SPACE_DECODER_0
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        BAR1_ENABLED_0==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR).
`define MEM1_SPACE_DECODER_0 1'h0


// Name:           PREFETCHABLE1_0
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        BAR1_ENABLED_0==1 && MEM1_SPACE_DECODER_0==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR).
`define PREFETCHABLE1_0 1'h0


// Name:           BAR1_TYPE_0
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR).
`define BAR1_TYPE_0 2'h0


// Name:           BAR1_SIZING_SCHEME_0
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        BAR1_ENABLED_0==1
// Parameter Type: Feature Setting
// 
// BAR1 Sizing Scheme 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR1_SIZING_SCHEME_0 2'h0


// Name:           CX_BAR1_RESIZABLE_0
// Default:        0x0 ((BAR1_SIZING_SCHEME_0==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR1_ENABLED_0==1) && (MEM1_SPACE_DECODER_0==0)
// Parameter Type: Feature Setting
// 
// Defines BAR1 as a resizable BAR. Setting this bit will provide capability and control register in the resizable BAR 
// capabilty structure. This will enable BAR1 to advertise usable resource sizes and for the BAR size to be reprogrammed by the 
// Root Complex.
`define CX_BAR1_RESIZABLE_0 1'h0


// Name:           CX_BAR1_RESOURCE_AVAIL_0
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_BAR1_RESIZABLE_0==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR1. 
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
// Example: 0x00000030 indicates that BAR1 will operate correctly with the BAR sized to either 1MB or 2MB.
`define CX_BAR1_RESOURCE_AVAIL_0 32'h10


// Name:           BAR1_MASK_WRITABLE_0
// Default:        0x0 ((BAR1_ENABLED_0==1 && BAR1_SIZING_SCHEME_0 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        BAR1_ENABLED_0==1
// Parameter Type: Register Default Setting
// 
// When set enables dynamic changing of BAR1 Mask through DBI
`define BAR1_MASK_WRITABLE_0 1'h0


// Name:           BAR1_MASK_0
// Default:        0xffff (CX_BAR1_RESIZABLE_0==1 ? [calc_bar_mask 
//                 CX_BAR1_RESOURCE_AVAIL_0] : MEM1_SPACE_DECODER_0==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        BAR1_ENABLED_0==1 && MEM1_SPACE_DECODER_0==0 && 
//                 CX_BAR1_RESIZABLE_0==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR Mask register. The BAR Mask register specifies which bits of the BAR are 
// non-writable by host software, which determines the size of the BAR. When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then 
// the default value of this mask is determined from the CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR1_MASK_0 32'hffff


// Name:           MEM_FUNC0_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((BAR1_ENABLED_0==1 && TRGT1_POPULATE==1))
// Parameter Type: Register Default Setting
// 
// Direct incoming requests that pass filtering and match BAR_1 to either RTRGT0 or RTRGT1. For example, setting 
// MEM_FUNC0_BAR1_TARGET_MAP to 1 maps all incoming requests for BAR1 of function 0 to RTRGT1. If TRGT1_POPULATE = 0 (no RTRGT1 
// interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define MEM_FUNC0_BAR1_TARGET_MAP 1'h1


// Name:           BAR2_ENABLED_0
// Default:        0x1
// Values:         0x0, 0x1
// Parameter Type: Feature Setting
// 
// Include the BAR2 registers.
`define BAR2_ENABLED_0 1'h1


`define DEFAULT_BAR2_ENABLED_0 1'h1


// Name:           MEM2_SPACE_DECODER_0
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        BAR2_ENABLED_0==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR).
`define MEM2_SPACE_DECODER_0 1'h0


// Name:           PREFETCHABLE2_0
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        BAR2_ENABLED_0==1 && MEM2_SPACE_DECODER_0==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR).
`define PREFETCHABLE2_0 1'h0


// Name:           BAR2_TYPE_0
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        BAR2_ENABLED_0==1 && MEM2_SPACE_DECODER_0==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR).
`define BAR2_TYPE_0 2'h0


// Name:           BAR2_SIZING_SCHEME_0
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        BAR2_ENABLED_0==1
// Parameter Type: Feature Setting
// 
// BAR2 Sizing Scheme 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR2_SIZING_SCHEME_0 2'h0


// Name:           CX_BAR2_RESIZABLE_0
// Default:        0x0 ((BAR2_SIZING_SCHEME_0==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR2_ENABLED_0==1) && (MEM2_SPACE_DECODER_0==0)
// Parameter Type: Feature Setting
// 
// Defines BAR1 as a resizable BAR. Setting this bit will provide capability and control register in the resizable BAR 
// capabilty structure. This will enable BAR2 to advertise usable resource sizes and for the BAR size to be reprogrammed by the 
// Root Complex.
`define CX_BAR2_RESIZABLE_0 1'h0


// Name:           CX_BAR2_RESOURCE_AVAIL_0
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_BAR2_RESIZABLE_0==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR2. 
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
// Example: 0x00000030 indicates that BAR2 will operate correctly with the BAR sized to either 1MB or 2MB.
`define CX_BAR2_RESOURCE_AVAIL_0 64'h10


// Name:         BAR2_MASK_WRITABLE_0
// Default:      0x0 ((BAR2_ENABLED_0==1 && BAR2_SIZING_SCHEME_0 ==1) ? 1: 0)
// Values:       0x0, 0x1
// Enabled:      BAR2_ENABLED_0==1
// 
// When set enables dynamic changing of BAR2 Mask through DBI
`define BAR2_MASK_WRITABLE_0 1'h0


// Name:           BAR2_MASK_0
// Default:        0xfffff (CX_BAR2_RESIZABLE_0==1 ? [calc_bar_mask 
//                 CX_BAR2_RESOURCE_AVAIL_0] : MEM2_SPACE_DECODER_0==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        BAR2_ENABLED_0==1 && MEM2_SPACE_DECODER_0==0 && 
//                 CX_BAR2_RESIZABLE_0==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR Mask register. The BAR Mask register specifies which bits of the BAR are 
// non-writable by host software, which determines the size of the BAR. When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then 
// the default value of this mask is determined from the CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR2_MASK_0 64'hfffff


// Name:           MEM_FUNC0_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        BAR2_ENABLED_0==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_2 to either RTRGT0 or RTRGT1. For example, setting 
// MEM_FUNC0_BAR2_TARGET_MAP to 1 maps all incoming requests for BAR2 of function 0 to RTRGT1. If TRGT1_POPULATE = 0 (no RTRGT1 
// interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define MEM_FUNC0_BAR2_TARGET_MAP 1'h1


// Name:           BAR3_ENABLED_0
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        BAR2_TYPE_0==0
// Parameter Type: Feature Setting
// 
// Include the BAR3 registers.
`define BAR3_ENABLED_0 1'h0


`define DEFAULT_BAR3_ENABLED_0 1'h0


// Name:           MEM3_SPACE_DECODER_0
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        BAR3_ENABLED_0==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR).
`define MEM3_SPACE_DECODER_0 1'h0


// Name:           PREFETCHABLE3_0
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        BAR3_ENABLED_0==1 && MEM3_SPACE_DECODER_0==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR).
`define PREFETCHABLE3_0 1'h0


// Name:           BAR3_TYPE_0
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR).
`define BAR3_TYPE_0 2'h0


// Name:           BAR3_SIZING_SCHEME_0
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        BAR3_ENABLED_0==1
// Parameter Type: Feature Setting
// 
// BAR3 Sizing Scheme 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR3_SIZING_SCHEME_0 2'h0


// Name:           CX_BAR3_RESIZABLE_0
// Default:        0x0 ((BAR3_SIZING_SCHEME_0==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR3_ENABLED_0==1) && (MEM3_SPACE_DECODER_0==0)
// Parameter Type: Feature Setting
// 
// Defines BAR3 as a resizable BAR. Setting this bit will provide capability and control register in the resizable BAR 
// capabilty structure. This will enable BAR3 to advertise usable resource sizes and for the BAR size to be reprogrammed by the 
// Root Complex.
`define CX_BAR3_RESIZABLE_0 1'h0


// Name:           CX_BAR3_RESOURCE_AVAIL_0
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_BAR3_RESIZABLE_0==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR3. 
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
// Example: 0x00000030 indicates that BAR3 will operate correctly with the BAR sized to either 1MB or 2MB.
`define CX_BAR3_RESOURCE_AVAIL_0 32'h10


// Name:         BAR3_MASK_WRITABLE_0
// Default:      0x0 ((BAR3_ENABLED_0==1 && BAR3_SIZING_SCHEME_0 ==1) ? 1: 0)
// Values:       0x0, 0x1
// Enabled:      BAR3_ENABLED_0==1
// 
// When set enables dynamic changing of BAR3 Mask through DBI
`define BAR3_MASK_WRITABLE_0 1'h0


// Name:           BAR3_MASK_0
// Default:        0xffff (CX_BAR3_RESIZABLE_0==1 ? [calc_bar_mask 
//                 CX_BAR3_RESOURCE_AVAIL_0] : MEM3_SPACE_DECODER_0==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        BAR3_ENABLED_0==1 && MEM3_SPACE_DECODER_0==0 && 
//                 CX_BAR3_RESIZABLE_0==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR Mask register. The BAR Mask register specifies which bits of the BAR are 
// non-writable by host software, which determines the size of the BAR. When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then 
// the default value of this mask is determined from the CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR3_MASK_0 32'hffff


// Name:           MEM_FUNC0_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        BAR3_ENABLED_0==1 && TRGT1_POPULATE==1
// Parameter Type: Register Default Setting
// 
// Direct incoming requests that pass filtering and match BAR_3 to either RTRGT0 or RTRGT1. For example, setting 
// MEM_FUNC0_BAR3_TARGET_MAP to 1 maps all incoming requests for BAR3 of function 0 to RTRGT1.If TRGT1_POPULATE = 0 (no RTRGT1 
// interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define MEM_FUNC0_BAR3_TARGET_MAP 1'h1


// Name:           BAR4_ENABLED_0
// Default:        0x1
// Values:         0x0, 0x1
// Parameter Type: Feature Setting
// 
// Include the BAR4 registers.
`define BAR4_ENABLED_0 1'h1


`define DEFAULT_BAR4_ENABLED_0 1'h1


// Name:           MEM4_SPACE_DECODER_0
// Default:        I/O (BAR4_ENABLED_0==1)
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        BAR4_ENABLED_0==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR).
`define MEM4_SPACE_DECODER_0 1'h1


// Name:           PREFETCHABLE4_0
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        BAR4_ENABLED_0==1 && MEM4_SPACE_DECODER_0==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR).
`define PREFETCHABLE4_0 1'h0


// Name:           BAR4_TYPE_0
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        BAR4_ENABLED_0==1 && MEM4_SPACE_DECODER_0==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR).
`define BAR4_TYPE_0 2'h0


// Name:           BAR4_SIZING_SCHEME_0
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        BAR4_ENABLED_0==1
// Parameter Type: Feature Setting
// 
// BAR4 Sizing Scheme 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR4_SIZING_SCHEME_0 2'h0


// Name:           CX_BAR4_RESIZABLE_0
// Default:        0x0 ((BAR4_SIZING_SCHEME_0==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR4_ENABLED_0==1) && (MEM4_SPACE_DECODER_0==0)
// Parameter Type: Feature Setting
// 
// Defines BAR4 as a resizable BAR. Setting this bit will provide capability and control register in the resizable BAR 
// capabilty structure. This will enable BAR4 to advertise usable resource sizes and for the BAR size to be reprogrammed by the 
// Root Complex.
`define CX_BAR4_RESIZABLE_0 1'h0


// Name:           CX_BAR4_RESOURCE_AVAIL_0
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_BAR4_RESIZABLE_0==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR4. 
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
// Example: 0x00000030 indicates that BAR4 will operate correctly with the BAR sized to either 1MB or 2MB.
`define CX_BAR4_RESOURCE_AVAIL_0 64'h10


// Name:         BAR4_MASK_WRITABLE_0
// Default:      0x0 ((BAR4_ENABLED_0==1 && BAR4_SIZING_SCHEME_0 ==1) ? 1: 0)
// Values:       0x0, 0x1
// Enabled:      BAR4_ENABLED_0==1
// 
// When set enables dynamic changing of BAR4 Mask through DBI
`define BAR4_MASK_WRITABLE_0 1'h0


// Name:           BAR4_MASK_0
// Default:        0xff (CX_BAR4_RESIZABLE_0==1 ? [calc_bar_mask 
//                 CX_BAR4_RESOURCE_AVAIL_0] : MEM4_SPACE_DECODER_0==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        BAR4_ENABLED_0==1 && MEM4_SPACE_DECODER_0==0 && 
//                 CX_BAR4_RESIZABLE_0==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR Mask register. The BAR Mask register specifies which bits of the BAR are 
// non-writable by host software, which determines the size of the BAR. When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then 
// the default value of this mask is determined from the CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR4_MASK_0 64'hff


// Name:           MEM_FUNC0_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        BAR4_ENABLED_0==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_4 to either RTRGT0 or RTRGT1. For example, setting 
// MEM_FUNC0_BAR4_TARGET_MAP to 1 maps all incoming requests for BAR4 of function 0 to RTRGT1. If TRGT1_POPULATE = 0 (no RTRGT1 
// interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define MEM_FUNC0_BAR4_TARGET_MAP 1'h1


// Name:           BAR5_ENABLED_0
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        BAR4_TYPE_0==0
// Parameter Type: Feature Setting
// 
// Include the BAR5 registers.
`define BAR5_ENABLED_0 1'h0


`define DEFAULT_BAR5_ENABLED_0 1'h0


// Name:           MEM5_SPACE_DECODER_0
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        BAR5_ENABLED_0==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR).
`define MEM5_SPACE_DECODER_0 1'h0


// Name:           PREFETCHABLE5_0
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        BAR5_ENABLED_0==1 && MEM5_SPACE_DECODER_0==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR).
`define PREFETCHABLE5_0 1'h0


// Name:           BAR5_TYPE_0
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR).
`define BAR5_TYPE_0 2'h0


// Name:           BAR5_SIZING_SCHEME_0
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        BAR5_ENABLED_0==1
// Parameter Type: Feature Setting
// 
// BAR5 Sizing Scheme 
// - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
// hardware. 
// - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
// hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
// - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
// Sizes' field in the Control Register through the local DBI (only).
`define BAR5_SIZING_SCHEME_0 2'h0


// Name:           CX_BAR5_RESIZABLE_0
// Default:        0x0 ((BAR5_SIZING_SCHEME_0==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR5_ENABLED_0==1) && (MEM5_SPACE_DECODER_0==0)
// Parameter Type: Feature Setting
// 
// Defines BAR5 as a resizable BAR. Setting this bit will provide capability and control register in the resizable BAR 
// capabilty structure. This will enable BAR5 to advertise usable resource sizes and for the BAR size to be reprogrammed by the 
// Root Complex.
`define CX_BAR5_RESIZABLE_0 1'h0


// Name:           CX_BAR5_RESOURCE_AVAIL_0
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_BAR5_RESIZABLE_0==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR5. 
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
// Example: 0x00000030 indicates that BAR5 will operate correctly with the BAR sized to either 1MB or 2MB.
`define CX_BAR5_RESOURCE_AVAIL_0 32'h10


// Name:         BAR5_MASK_WRITABLE_0
// Default:      0x0 ((BAR5_ENABLED_0==1 && BAR5_SIZING_SCHEME_0 ==1) ? 1: 0)
// Values:       0x0, 0x1
// Enabled:      BAR5_ENABLED_0==1
// 
// When set enables dynamic changing of BAR5 Mask through DBI
`define BAR5_MASK_WRITABLE_0 1'h0


// Name:           BAR5_MASK_0
// Default:        0xffff (CX_BAR5_RESIZABLE_0==1 ? [calc_bar_mask 
//                 CX_BAR5_RESOURCE_AVAIL_0] : MEM5_SPACE_DECODER_0==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        BAR5_ENABLED_0==1 && MEM5_SPACE_DECODER_0==0 && 
//                 CX_BAR5_RESIZABLE_0==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR Mask register. The BAR Mask register specifies which bits of the BAR are 
// non-writable by host software, which determines the size of the BAR. When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then 
// the default value of this mask is determined from the CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR5_MASK_0 32'hffff


// Name:           MEM_FUNC0_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        BAR5_ENABLED_0==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_5 to either RTRGT0 or RTRGT1. For example, setting 
// MEM_FUNC0_BAR5_TARGET_MAP to 1 maps all incoming requests for BAR5 of function 0 to RTRGT1. If TRGT1_POPULATE = 0 (no RTRGT1 
// interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define MEM_FUNC0_BAR5_TARGET_MAP 1'h1


// Name:         CX_NUM_RBARS_0
// Default:      0 ([calc_num_rbars CX_BAR0_RESIZABLE_0 CX_BAR1_RESIZABLE_0 
//               CX_BAR2_RESIZABLE_0 CX_BAR3_RESIZABLE_0 CX_BAR4_RESIZABLE_0 
//               CX_BAR5_RESIZABLE_0])
// Values:       -2147483648, ..., 2147483647
// 
// Number of resizable BARs
`define CX_NUM_RBARS_0 0


`define FUNC0_BARSIZE_32 128'h100100


`define FUNC0_BARSIZE 128'h200100


`define FUNC0_BAR0_BARSIZE_TRGT1 128'h100000


`define FUNC0_BAR2_BARSIZE_TRGT1 128'h0


`define FUNC0_BAR4_BARSIZE_TRGT1 128'h0


`define FUNC0_BAR0_TRGT1_ADDR_WIDTH 20


`define FUNC0_BAR2_TRGT1_ADDR_WIDTH 1


`define FUNC0_BAR4_TRGT1_ADDR_WIDTH 1

//-/ END:   BAR CONFIGURATION
//-/===========================================



//-/===========================================
//-/ START: SR-IOV CAPABILITIES CONFIGURATION




// Name:           CX_VF_DEPENDENCY_LINK_0
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_VF_DEPENDENCY_LINK_SUPP && CX_SRIOV_ENABLE && (CX_NFUNC > 1)
// Parameter Type: Feature Setting
// 
// Specifies the 8-bit VF dependency link for the PF. Valid only if CX_NFUNC>1 and CX_VF_DEPENDENCY_LINK_SUPP=1.
`define CX_VF_DEPENDENCY_LINK_0 8'h0


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER1_0
// Default:        0x2 ((CX_NFUNC>=17) ? 32 : (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : 
//                 (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in this physical function in an ARI capable hierarchy. When 
// CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER1_0 16'h2


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER0_0
// Default:        0x100
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in this physical function in a non-ARI capable hierarchy. When 
// CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER0_0 16'h100


// Name:           VF_STRIDE_ARI_CAP_HIER1_0
// Default:        0x2 (CX_VF_STRIDE_ALWAYS_ONE) ? 1 : ((CX_NFUNC>=17) ? 32 : 
//                 (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID stride from one VF to the next one in this physical function in an ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER1_0 16'h2


// Name:           VF_STRIDE_ARI_CAP_HIER0_0
// Default:        0x100 ((CX_VF_STRIDE_ALWAYS_ONE) ? 0x0001 : 0x0100)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one in this physical function in a non-ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER0_0 16'h100


// Name:           CX_VF_DEVICE_ID_0
// Default:        0xabcd (CX_DEVICE_ID_0)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 16-bit virtual function Device ID for this physical function. It may be different from the physical 
// function's.
`define CX_VF_DEVICE_ID_0 16'habcd


// Name:           CX_VF_SUPP_PAGE_SIZE_0
// Default:        0x553
// Values:         0x553, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 32-bit supported page sizes for virtual functions for the physical function.
`define CX_VF_SUPP_PAGE_SIZE_0 32'h553


// Name:           CX_ARI_CAP_HIER_PRSVD_0
// Default:        0x0 (CX_SRIOV_ENABLE)
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Only present in PF0. Read Only Zero in other PFs. Specifies if ARI Capable Hierarchy bit is preserved across certain 
// power state transitions
`define CX_ARI_CAP_HIER_PRSVD_0 1'h0

//-/===========================================
//-/ START: VF BAR CONFIGURATION


// Name:           VF_BAR0_ENABLED_0
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Include the VF BAR0 registers .
`define VF_BAR0_ENABLED_0 1'h1


`define VF_DEFAULT_BAR0_ENABLED_0 1'h1


// Name:           VF_MEM0_SPACE_DECODER_0
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR0_ENABLED_0 && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Space Indicator. Always set to Memory for Virtual Functions
`define VF_MEM0_SPACE_DECODER_0 1'h0


// Name:           VF_PREFETCHABLE0_0
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_0==1 && VF_MEM0_SPACE_DECODER_0==0 && 
//                 CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Prefetchable. When set indicates VF BAR0 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE0_0 1'h0


// Name:           VF_BAR0_TYPE_0
// Default:        64-bit ((VF_MEM0_SPACE_DECODER_0==1 || VF_BAR0_ENABLED_0==0) ? 0 : 
//                 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR0_ENABLED_0==1 && VF_MEM0_SPACE_DECODER_0==0 && 
//                 CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 0; (bits [2:1] for a memory BAR).
`define VF_BAR0_TYPE_0 2'h2


// Name:           VF_BAR0_MASK_WRITABLE_0
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_0==1 && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. This allows your application to write the 
// BAR Mask register through the DBI using the VF BAR's address and asserting dbi_cs2 in addition to dbi_cs.
`define VF_BAR0_MASK_WRITABLE_0 1'h0


// Name:           VF_BAR0_MASK_0
// Default:        0xfffff (VF_MEM0_SPACE_DECODER_0==1 ? 0xFF : (VF_BAR0_TYPE_0==0 ? 
//                 0xFFFF : 0xFFFFF))
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR0_ENABLED_0==1 && VF_MEM0_SPACE_DECODER_0==0 && 
//                 CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Mask. Determines the default of the VF BAR Mask register. The VF BAR Mask register specifies which 
// bits of the VF BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR0_MASK_0 64'hfffff


// Name:           VF_MEM_FUNC0_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR0_ENABLED_0==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0. 
//  
// Note: This feature is not applicable for RC.
`define VF_MEM_FUNC0_BAR0_TARGET_MAP 1'h1


// Name:           VF_BAR1_ENABLED_0
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        (VF_BAR0_TYPE_0==0)  && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Include the VF BAR1 registers .
`define VF_BAR1_ENABLED_0 1'h0


`define VF_DEFAULT_BAR1_ENABLED_0 1'h0


// Name:           VF_MEM1_SPACE_DECODER_0
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR1_ENABLED_0==1 && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Space Indicator
`define VF_MEM1_SPACE_DECODER_0 1'h0


// Name:           VF_PREFETCHABLE1_0
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_0==1 && VF_MEM1_SPACE_DECODER_0==0 && 
//                 CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Prefetchable. When set indicates VF BAR1 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE1_0 1'h0


// Name:           VF_BAR1_TYPE_0
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 0; (bits [2:1] for a memory BAR).
`define VF_BAR1_TYPE_0 2'h0


// Name:           VF_BAR1_MASK_WRITABLE_0
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_0==1 && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. This allows your application to write the 
// BAR Mask register through the DBI using the VF BAR's address and asserting dbi_cs2 in addition to dbi_cs.
`define VF_BAR1_MASK_WRITABLE_0 1'h0


// Name:           VF_BAR1_MASK_0
// Default:        0xffff (VF_MEM1_SPACE_DECODER_0==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR1_ENABLED_0==1 && VF_MEM1_SPACE_DECODER_0==0 && 
//                 CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Mask. Determines the default of the VF BAR Mask register. The VF BAR Mask register specifies which 
// bits of the VF BAR are non-writable by host software, which determines the size of the BAR
`define VF_BAR1_MASK_0 32'hffff


// Name:           VF_MEM_FUNC0_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR1_ENABLED_0==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0. 
//  
// Note: This feature is not applicable for RC.
`define VF_MEM_FUNC0_BAR1_TARGET_MAP 1'h1


// Name:           VF_BAR2_ENABLED_0
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Include the VF BAR2 registers .
`define VF_BAR2_ENABLED_0 1'h1


`define VF_DEFAULT_BAR2_ENABLED_0 1'h1


// Name:           VF_MEM2_SPACE_DECODER_0
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR2_ENABLED_0==1 && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Memory Space Indicator
`define VF_MEM2_SPACE_DECODER_0 1'h0


// Name:           VF_PREFETCHABLE2_0
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_0==1 && VF_MEM2_SPACE_DECODER_0==0 && 
//                 CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// BAR2 Memory Prefetchable. When set indicates VF BAR2 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE2_0 1'h0


// Name:           VF_BAR2_TYPE_0
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR2_ENABLED_0==1 && VF_MEM2_SPACE_DECODER_0==0 && 
//                 CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 0; (bits [2:1] for a memory BAR).
`define VF_BAR2_TYPE_0 2'h0


// Name:           VF_BAR2_MASK_WRITABLE_0
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_0==1 && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. This allows your application to write the 
// BAR Mask register through the DBI using the VF BAR's address and asserting dbi_cs2 in addition to dbi_cs.
`define VF_BAR2_MASK_WRITABLE_0 1'h0


// Name:           VF_BAR2_MASK_0
// Default:        0xffff (VF_MEM2_SPACE_DECODER_0==1 ? 0xFF : (VF_BAR2_TYPE_0==0 ? 
//                 0xFFFF : 0xFFFFF))
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR2_ENABLED_0==1 && VF_MEM2_SPACE_DECODER_0==0 && 
//                 CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Mask. Determines the default of the VF BAR Mask register. The VF BAR Mask register specifies which 
// bits of the VF BAR are non-writable by host software, which determines the size of the BAR
`define VF_BAR2_MASK_0 64'hffff


// Name:           VF_MEM_FUNC0_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR2_ENABLED_0==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Direct incoming requests that pass filtering and match this VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC0_BAR2_TARGET_MAP 1'h1


// Name:           VF_BAR3_ENABLED_0
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_TYPE_0==0 && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Include the VF BAR3 registers .
`define VF_BAR3_ENABLED_0 1'h0


`define VF_DEFAULT_BAR3_ENABLED_0 1'h0


// Name:           VF_MEM3_SPACE_DECODER_0
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR3_ENABLED_0==1 && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// BAR3 Memory Space Indicator
`define VF_MEM3_SPACE_DECODER_0 1'h0


// Name:           VF_PREFETCHABLE3_0
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_0==1 && VF_MEM3_SPACE_DECODER_0==0 && 
//                 CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Memory Prefetchable. When set indicates VF BAR3 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE3_0 1'h0


// Name:           VF_BAR3_TYPE_0
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 0; (bits [2:1] for a memory BAR).
`define VF_BAR3_TYPE_0 2'h0


// Name:           VF_BAR3_MASK_WRITABLE_0
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_0==1 && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. This allows your application to write the 
// BAR Mask register through the DBI using the VF BAR's address and asserting dbi_cs2 in addition to dbi_cs.
`define VF_BAR3_MASK_WRITABLE_0 1'h0


// Name:           VF_BAR3_MASK_0
// Default:        0xffff (VF_MEM3_SPACE_DECODER_0==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR3_ENABLED_0==1 && VF_MEM3_SPACE_DECODER_0==0 && 
//                 CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Mask. Determines the default of the VF BAR Mask register. The VF BAR Mask register specifies which 
// bits of the VF BAR are non-writable by host software, which determines the size of the BAR
`define VF_BAR3_MASK_0 32'hffff


// Name:           VF_MEM_FUNC0_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR3_ENABLED_0==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC0_BAR3_TARGET_MAP 1'h1


// Name:           VF_BAR4_ENABLED_0
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Include the VF BAR4 registers .
`define VF_BAR4_ENABLED_0 1'h1


`define VF_DEFAULT_BAR4_ENABLED_0 1'h1


// Name:           VF_MEM4_SPACE_DECODER_0
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR4_ENABLED_0==1 && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Space Indicator
`define VF_MEM4_SPACE_DECODER_0 1'h0


// Name:           VF_PREFETCHABLE4_0
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_0==1 && VF_MEM4_SPACE_DECODER_0==0 && 
//                 CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Prefetchable. When set indicates VF BAR4 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE4_0 1'h0


// Name:           VF_BAR4_TYPE_0
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR4_ENABLED_0==1 && VF_MEM4_SPACE_DECODER_0==0 && 
//                 CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 0; (bits [2:1] for a memory BAR).
`define VF_BAR4_TYPE_0 2'h0


// Name:           VF_BAR4_MASK_WRITABLE_0
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_0==1 && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. This allows your application to write the 
// BAR Mask register through the DBI using the VF BAR'saddress and asserting dbi_cs2 in addition to dbi_cs.
`define VF_BAR4_MASK_WRITABLE_0 1'h0


// Name:           VF_BAR4_MASK_0
// Default:        0xfff (VF_MEM4_SPACE_DECODER_0==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR4_ENABLED_0==1 && VF_MEM4_SPACE_DECODER_0==0 && 
//                 CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Mask. Determines the default of the VF BAR Mask register. The VF BAR Mask register specifies which 
// bits of the VF BAR are non-writable by host software, which determines the size of the BAR
`define VF_BAR4_MASK_0 64'hfff


// Name:           VF_MEM_FUNC0_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR4_ENABLED_0==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC0_BAR4_TARGET_MAP 1'h1


// Name:           VF_BAR5_ENABLED_0
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_TYPE_0==0 && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Include the VF BAR5 registers .
`define VF_BAR5_ENABLED_0 1'h0


`define VF_DEFAULT_BAR5_ENABLED_0 1'h0


// Name:           VF_MEM5_SPACE_DECODER_0
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR5_ENABLED_0==1 && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Space Indicator
`define VF_MEM5_SPACE_DECODER_0 1'h0


// Name:           VF_PREFETCHABLE5_0
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_0==1 && VF_MEM5_SPACE_DECODER_0==0 && 
//                 CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Prefetchable. When set indicates VF BAR5 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE5_0 1'h0


// Name:           VF_BAR5_TYPE_0
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 0; (bits [2:1] for a memory BAR).
`define VF_BAR5_TYPE_0 2'h0


// Name:           VF_BAR5_MASK_WRITABLE_0
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_0==1 && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. This allows your application to write the 
// BAR Mask register through the DBI using the VF BAR's address and asserting dbi_cs2 in addition to dbi_cs.
`define VF_BAR5_MASK_WRITABLE_0 1'h0


// Name:           VF_BAR5_MASK_0
// Default:        0xffff (VF_MEM5_SPACE_DECODER_0==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR5_ENABLED_0==1 && VF_MEM5_SPACE_DECODER_0==0 && 
//                 CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Mask. Determines the default of the VF BAR Mask register. The VF BAR Mask register specifies which 
// bits of the VF BAR are non-writable by host software, which determines the size of the BAR
`define VF_BAR5_MASK_0 32'hffff


// Name:           VF_MEM_FUNC0_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR5_ENABLED_0==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC0_BAR5_TARGET_MAP 1'h1


`define VF_FUNC0_BARSIZE_32 128'h22000


`define VF_FUNC0_BARSIZE 128'h222000

//-/ END:   VF BAR CONFIGURATION
//-/===========================================

//-/ END:   SR-IOV CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: TPH CAPABILITIES CONFIGURATION


// Name:           TPH_IVEC_0
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Interrupt Vector Mode. If set indicates that the function supports the Interrupt Vector 
// Mode of operation.
`define TPH_IVEC_0 1'h0


// Name:           TPH_DS_0
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Device Specific Mode. If set indicates that the function supports the Device Specific Mode 
// of operation.
`define TPH_DS_0 1'h0


// Name:           TPH_ST_TABLE_LOC_0
// Default:        Not Present
// Values:         Not Present (0), TPH Requester Capability Structure (1), MSI-X 
//                 Table Structure (2)
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_DS_0 || TPH_IVEC_0))
// Parameter Type: Feature Setting
// 
// TLP Processing Hints Steering Tag Table Location. Value indicates if and where the ST Table is located.
`define TPH_ST_TABLE_LOC_0 0

//located in the TPH Requester Capability structure. Please reduce the ST Table Size for this mode of operation"

// Name:           TPH_ST_TABLE_SIZE_0
// Default:        1
// Values:         1, ..., 2048
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_ST_TABLE_LOC_0 != 0))
// Parameter Type: Feature Setting
// 
// TLP Processing Hints Steering Tag Table Size. Software reads this field to determine the ST Table Size N, which is 
// encoded as N-1. For example, a returned value of 00000000011 indicates a table size of 4.
`define TPH_ST_TABLE_SIZE_0 1


`define TPH_ST_TABLE_DEPTH_0 0

//located in the TPH Requester Capability structure. Please reduce the ST Table Size for this mode of operation"

// Name:           VF_TPH_ST_TABLE_SIZE
// Default:        1
// Values:         1, ..., 2048
// Enabled:        (VF_TPH_ENABLE && (TPH_ST_TABLE_LOC_0 != 0))
// Parameter Type: Feature Setting
// 
// TLP Processing Hints Steering Tag Table Size for virtual functions. 
//  - All Virtual functions have the same table size set by this parameter. 
//  - Software reads this field to determine the ST Table Size N, which is encoded as N-1. For example, a returned value 
//  of 00000000011 indicates a table size of 4. 
//  - There is an upper limit of 64 entries when the ST Table is located in the TPH Requester Capability structure.
`define VF_TPH_ST_TABLE_SIZE 1


`define VF_TPH_ST_TABLE_DEPTH 0

//located in the TPH Requester Capability structure. Please reduce the ST Table Size for this mode of operation"

// Name:           EXT_VF_TPH_ST_TABLE_SIZE
// Default:        1
// Values:         1, ..., 2048
// Enabled:        (EXT_VF_TPH_ENABLE && (TPH_ST_TABLE_LOC_0 != 0))
// Parameter Type: Feature Setting
// 
// TLP Processing Hints Steering Tag Table Size for external virtual functions. 
//  - All Virtual functions have the same table size set by this parameter. 
//  - Software reads this field to determine the ST Table Size N, which is encoded as N-1. For example, a returned value 
//  of 00000000011 indicates a table size of 4. 
//  - There is an upper limit of 64 entries when the ST Table is located in the TPH Requester Capability structure.
`define EXT_VF_TPH_ST_TABLE_SIZE 1

//-/ END:   TPH CAPABILITIES CONFIGURATION
//-/===========================================


//-/===========================================
//-/ START: ATS CAPABILITIES CONFIGURATION


// Name:           ATS_INV_Q_DPTH_0
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// The number of Invalidate Requests that the Function can accept before putting backpressure on the upstream connection. A 
// value of 0 indicates the function can accept 32 Invalidate requests.
`define ATS_INV_Q_DPTH_0 5'd0


// Name:           ATS_STU_0
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// This value indicates to the Function the minimum number of 4096-byte blocks that is indicated in a Translation 
// Completion or Invalidate Request. This is a power of 2 multiplier and the number of blocks is 2^STU. A value of 0 indicates 1 block 
// and a value of 31 indicates 2^31 blocks (or 8 TB total).
`define ATS_STU_0 5'd0


// Name:           DEFAULT_ATS_GLOBAL_INVAL_SPPRT
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_ATS_ENABLE && CX_PASID_ENABLE
// Parameter Type: Feature Setting
// 
// This is the default value (after reset) of the Global Invalidate Supported bit field in the ATS Capability register. If 
// Set, the function supports Invalidation Requests that have the Global Invalidate bit Set. If Clear, the function ignores 
// the Global Invalidate bit in all Invalidate Requests. This bit is 0b if the function does not support the PASID TLP Prefix.
`define DEFAULT_ATS_GLOBAL_INVAL_SPPRT 1'h0

//-/ END:   ATS CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PR CAPABILITIES CONFIGURATION


// Name:           CX_PRS_OUTSTANDING_CAPACITY_VALUE_0
// Default:        0x1
// Values:         0x0, ..., 0xffffffff
// Enabled:        (CX_PRS_ENABLE==1) && (CC_DEVICE_TYPE != CC_SW) && (CC_DEVICE_TYPE 
//                 != CC_RC)
// Parameter Type: Register Default Setting
// 
// Register default for PRS Outstanding Capacity in PF0. 
// For more details, see the PRS_OUTSTANDING_CAPACITY field in the PRS_REQ_CAPACITY_REG register.
`define CX_PRS_OUTSTANDING_CAPACITY_VALUE_0 32'h1

//-/ END:   PRS CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//--- START: RN


// Name:           CX_RN_IMM_EN
// Default:        0
// Values:         0, 1
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the core. 
// When you set the Immediate Readiness bit in the PCI header Status Register, the function is configuration-ready. 
// Software is exempt from all requirements to delay configuration accesses following any type of reset or exit from 
// low-power states. 
// The function will always respond to a valid configuration request targeting the function with a completion indicating 
// successful completion status, and not CRS. 
// For more details, see Readiness Notifications in the Controller Operations chapter of the Databook.
// `define CX_RN_IMM_EN


// Name:           CX_RN_IMM_VALUE_0
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        CX_RN_IMM_EN==1
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for PF0.
`define CX_RN_IMM_VALUE_0 1'h0


// Name:           CX_RN_IMM_D0_VALUE_0
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        CX_RN_IMM_EN==1
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for PF0.
`define CX_RN_IMM_D0_VALUE_0 1'h0


// Name:           CX_RN_FRS_SUPPORTED
// Default:        0
// Values:         0, 1
// Parameter Type: Feature Setting
// 
// Enable FRS support in the core. 
// FRS provides an optional mechanism for messaging the host software when a function has become configuration-ready. 
// The controller autonomously sends a Vendor-Defined Type 1 Message (VDM) with no payload following reset or exit from 
// low-power states. 
// Software is permitted to issue requests to the function (following any type of reset or exit from low-power states) 
// after receiving an FRS message from this function and need not wait for the (longer) times required elsewhere. 
// The function will then respond to a valid configuration request targeting the function with a completion indicating 
// successful completion status, and not CRS. 
// For more details, see Readiness Notifications in the Controller Operations chapter of the Databook.
// `define CX_RN_FRS_SUPPORTED


// `define VF_FRS_SUPPORTED


// Name:           CX_RN_FRS_QUEUE_MAX_DEPTH
// Default:        0x8
// Values:         0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x80, 0x100, 0x200, 0x400, 0x800
// Enabled:        CX_RN_FRS_SUPPORTED==1
// Parameter Type: Performance Setting
// 
// Sets the maximum FRS queue depth in root ports (Must be at least 4 for greater than 128 bit Datapath Width).
`define CX_RN_FRS_QUEUE_MAX_DEPTH 12'h8


// Name:           CX_RN_FRS_INT_MSG_NUM
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_RN_FRS_SUPPORTED==1
// Parameter Type: Register Default Setting
// 
// Default for the FRS_INT_MESSAGE_NUMBER field in the FRSQ_CAP_OFF register.
`define CX_RN_FRS_INT_MSG_NUM 0


// Name:           CX_RN_FRS_INT_ENABLE
// Default:        0
// Values:         0, 1
// Enabled:        CX_RN_FRS_SUPPORTED==1
// Parameter Type: Register Default Setting
// 
// Default for the FRS_INTERRUPT_ENABLE field in the FRSQ_CONTROL_FRSQ_STATUS_OFF register.
// `define CX_RN_FRS_INT_ENABLE


// Name:           CX_RN_FRS_VALUE_0
// Default:        0x0 (CX_RN_FRS_SUPPORTED==1)
// Values:         0x0, 0x1
// Enabled:        CX_RN_FRS_SUPPORTED==1
// Parameter Type: Feature Setting
// 
// Function Readiness Status messaging supported for function PF0.
`define CX_RN_FRS_VALUE_0 1'h0


// Name:           CX_RN_DRS_SUPPORTED
// Default:        0 (CX_RN_FRS_SUPPORTED==1)
// Values:         0, 1
// Enabled:        CX_RN_FRS_SUPPORTED==0
// Parameter Type: Feature Setting
// 
// Enable DRS support in the core. 
// DRS provides an optional mechanism for messaging the host software when a device has become configuration-ready. 
// The controller autonomously sends a Vendor-Defined Type 1 Message (VDM) with no payload following reset or exit from 
// low-power states. 
// Software is permitted to issue requests to the device (following any type of reset or exit from low-power states) 
// after receiving an DRS message from this device and need not wait for the (longer) times required elsewhere. 
// The device will then respond to a valid configuration request targeting the device with a completion indicating 
// successful completion status, and not CRS. 
// For more details, see Readiness Notifications in the Controller Operations chapter of the Databook.
// `define CX_RN_DRS_SUPPORTED


// Name:         CX_RN_FRSQ_ENABLE
// Default:      0 (CX_RN_FRS_SUPPORTED==1)
// Values:       0, 1
// 
// When enabled, controller contains FRS Queue
// `define CX_RN_FRSQ_ENABLE


`define CX_RN_FRSQ_ENABLE_VALUE 1'h0


// Name:         CX_RN_SUPPORTED
// Default:      false (CX_RN_DRS_SUPPORTED==1 || CX_RN_FRS_SUPPORTED==1)
// Values:       false (0), true (1)
// 
// When enabled, controller supports DRS or FRS messaging
// `define CX_RN_SUPPORTED


// Name:         CX_RN_SRIOV_SUPPORTED
// Default:      false (CX_SRIOV_ENABLE && INTERNAL_VF_ENABLE && 
//               CX_RN_FRS_SUPPORTED==1)
// Values:       false (0), true (1)
// 
// When enabled, controller supports DRS or FRS messaging
// `define CX_RN_SRIOV_SUPPORTED


// Name:           CX_RN_RTR_EN
// Default:        0
// Values:         0, 1
// Parameter Type: Feature Setting
// 
// Enable Readiness Time Reporting support in the core. 
// RTR provides an optional mechanism for describing the time required for a device or function to become 
// configuration-ready. 
// Software is permitted to issue requests to the device or function (following any type of reset or exit from low-power 
// states) 
// after waiting for the time advertised in this capability and need not wait for the (longer) times required elsewhere. 
// The function will then respond to a valid configuration request targeting the function with a completion indicating 
// successful completion status, and not CRS. 
// For more details, see Readiness Notifications in the Controller Operations chapter of the Databook.
// `define CX_RN_RTR_EN


`define CX_RN_RTR_EN_VALUE 1'h0


// Name:           CX_RN_RTR_VALID_0
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        CX_RN_RTR_EN==1
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF0.
`define CX_RN_RTR_VALID_0 1'h0


// Name:           CX_RN_RTR_DL_UP_VALUE_0
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        CX_RN_RTR_EN==1
// Parameter Type: Register Default Setting
// 
// Register default for RTR DL Up Time field in PF0.
`define CX_RN_RTR_DL_UP_VALUE_0 12'h0


// Name:           CX_RN_RTR_RESET_VALUE_0
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        CX_RN_RTR_EN==1
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF0.
`define CX_RN_RTR_RESET_VALUE_0 12'h0


// Name:           CX_RN_RTR_D3D0_VALUE_0
// Default:        0x0
// Values:         0x0, ..., 0x80a
// Enabled:        CX_RN_RTR_EN==1
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF0.
`define CX_RN_RTR_D3D0_VALUE_0 12'h0


// Name:           CX_RN_RTR_FLR_VALUE_0
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        CX_RN_RTR_EN==1 && CX_FLR_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Register default for RTR FLR Time field in PF0.
`define CX_RN_RTR_FLR_VALUE_0 12'h0


// Name:           VF_RTR_ENABLE
// Default:        0 (CX_RN_RTR_EN==1 && CX_SRIOV_ENABLE==1 && INTERNAL_VF_ENABLE==1)
// Values:         0, 1
// Enabled:        CX_RN_RTR_EN==1 && CX_SRIOV_ENABLE==1 && INTERNAL_VF_ENABLE==1
// Parameter Type: Feature Setting
// 
// Enable Readiness Time Reporting for VF's
// `define VF_RTR_ENABLE


`define VF_RTR_EN_VALUE 1'h0


// Name:           EXT_VF_RTR_ENABLE
// Default:        false
// Values:         false (0), true (1)
// Enabled:        CX_SRIOV_ENABLE && CX_EXTENSIBLE_VFUNC && CX_RN_RTR_EN
// Parameter Type: Feature Setting
// 
// Readiness Time Reporting Capability external for virtual functions.
// `define EXT_VF_RTR_ENABLE


`define EXT_VF_RTR_ENABLE_VALUE 1'h0


// Name:           EXT_VF_LN_ENABLE
// Default:        false
// Values:         false (0), true (1)
// Enabled:        CX_SRIOV_ENABLE && CX_EXTENSIBLE_VFUNC && CX_LN_ENABLE
// Parameter Type: Feature Setting
// 
// Lightweight Notification Capability for external virtual functions.
// `define EXT_VF_LN_ENABLE


`define EXT_VF_LN_ENABLE_VALUE 1'h0


// Name:           EXT_VF_IMM_ENABLE
// Default:        false
// Values:         false (0), true (1)
// Enabled:        CX_SRIOV_ENABLE && CX_EXTENSIBLE_VFUNC && CX_RN_IMM_EN
// Parameter Type: Feature Setting
// 
// Readiness Time Reporting Capability for external virtual functions.
// `define EXT_VF_IMM_ENABLE



// `define EXT_VF_ARI_ENABLE


`define EXT_VF_ARI_ENABLE_VALUE 1'h0


// Name:           VF_IMM_ENABLE
// Default:        0 (CX_RN_IMM_EN==1 && CX_SRIOV_ENABLE==1 && INTERNAL_VF_ENABLE==1)
// Values:         0, 1
// Enabled:        CX_RN_IMM_EN==1 && CX_SRIOV_ENABLE==1 && INTERNAL_VF_ENABLE==1
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support for VFs in the core. 
// When you set the Immediate Readiness bit in the PCI header Status Register, the function is configuration-ready. 
// Software is exempt from all requirements to delay configuration accesses following any type of reset or exit from 
// low-power states. 
// The function will always respond to a valid configuration request targeting the function with a completion indicating 
// successful completion status, and not CRS. 
// For more details, see Readiness Notifications in the Controller Operations chapter of the Databook.
// `define VF_IMM_ENABLE


// Name:           VF_RN_IMM_VALUE_0
// Default:        0x0 (CX_RN_IMM_VALUE_0 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        VF_IMM_ENABLE==1
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for VFs in PF0.
`define VF_RN_IMM_VALUE_0 1'h0


// Name:           VF_RN_IMM_D0_VALUE_0
// Default:        0x0 (CX_RN_IMM_D0_VALUE_0 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        VF_IMM_ENABLE==1
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for VFs in PF0.
`define VF_RN_IMM_D0_VALUE_0 1'h0


// Name:           VF_RN_RTR_VALID_0
// Default:        0x0 (CX_RN_RTR_VALID_0 && VF_RTR_ENABLE)
// Values:         0x0, 0x1
// Enabled:        VF_RTR_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF0 VFs.
`define VF_RN_RTR_VALID_0 1'h0


// Name:           VF_RN_RTR_RESET_VALUE_0
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_0)
// Values:         0x0, ..., 0xa1e
// Enabled:        VF_RTR_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF0 VFs.
`define VF_RN_RTR_RESET_VALUE_0 12'h0


// Name:           VF_RN_RTR_D3D0_VALUE_0
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_0)
// Values:         0x0, ..., 0x80a
// Enabled:        VF_RTR_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF0 VFs.
`define VF_RN_RTR_D3D0_VALUE_0 12'h0


// Name:           VF_RN_RTR_FLR_VALUE_0
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_0)
// Values:         0x0, ..., 0xa1e
// Enabled:        VF_RTR_ENABLE==1 && CX_FLR_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Register default for RTR FLR Time field in PF0 VFs.
`define VF_RN_RTR_FLR_VALUE_0 12'h0


// Name:           EXT_VF_RN_RTR_VALID_0
// Default:        0x0 (CX_RN_RTR_VALID_0 && EXT_VF_RTR_ENABLE)
// Values:         0x0, 0x1
// Enabled:        EXT_VF_RTR_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF0 VFs.
`define EXT_VF_RN_RTR_VALID_0 1'h0


// Name:           EXT_VF_RN_RTR_RESET_VALUE_0
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_0)
// Values:         0x0, ..., 0xa1e
// Enabled:        EXT_VF_RTR_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF0 VFs.
`define EXT_VF_RN_RTR_RESET_VALUE_0 12'h0


// Name:           EXT_VF_RN_RTR_D3D0_VALUE_0
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_0)
// Values:         0x0, ..., 0x80a
// Enabled:        EXT_VF_RTR_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF0 VFs.
`define EXT_VF_RN_RTR_D3D0_VALUE_0 12'h0


// Name:           EXT_VF_RN_RTR_FLR_VALUE_0
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_0)
// Values:         0x0, ..., 0xa1e
// Enabled:        EXT_VF_RTR_ENABLE==1 && CX_FLR_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Register default for RTR FLR Time field in PF0 VFs.
`define EXT_VF_RN_RTR_FLR_VALUE_0 12'h0

//-/ END:  RN
//-/===========================================


//-/ START: LN CAPABILITIES CONFIGURATION
//-/===========================================


// Name:           CX_LN_REG_MAX_VALUE_0
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        CX_LN_ENABLE==1
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_REGISTRATION_MAX field in the LNR_CAP_OFF register for PF0.
`define CX_LN_REG_MAX_VALUE_0 5'h0


// Name:           CX_LN_128_SUPPORTED_VALUE_0
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_LN_ENABLE==1
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_128_SUPPORTED field in the LNR_CAP_OFF register for PF0.
`define CX_LN_128_SUPPORTED_VALUE_0 1'h0


// Name:           CX_LN_64_SUPPORTED_VALUE_0
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_LN_ENABLE==1
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_64_SUPPORTED field in the LNR_CAP_OFF register for PF0.
`define CX_LN_64_SUPPORTED_VALUE_0 1'h0


//-/ END:   LN CAPABILITIES CONFIGURATION
//-/===========================================

//-/==========================================
//-/ End FUNC0 Config
//-/==========================================

//-/===========================================
//-/ Function 1 Configuration Registers
//-/ ==========================================


// Name:         FUNC_1
// Default:      1 ((CX_NFUNC > 1) ? 1 : 0)
// Values:       0, 1
// 
// This parameter indicates that Function 1 is present
`define FUNC_1

//-/===========================================
//-/ START: PCI-E CAPABILITIES CONFIGURATION


// Name:           PCIE_CAP_INT_MSG_NUM_1
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 1
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Message Number field in the PCI Express Capabilities Register. Function 1.
`define PCIE_CAP_INT_MSG_NUM_1 5'h0


// Name:           SLOT_IMPLEMENTED_1
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_NFUNC > 1))
// Parameter Type: Register Default Setting
// 
// Indicates that the PCI Express link associated with this Port is connected to a slot. Function 1.
`define SLOT_IMPLEMENTED_1 1'h1


// Name:           DEFAULT_PHANTOM_FUNC_SUPPORTED_1
// Default:        0x0
// Values:         0x0, ..., 0x3
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_PHANTOM_FUNC_SUPPORTED_1 2'h0


// Name:           DEFAULT_EXT_TAG_FIELD_SUPPORTED_1
// Default:        0x0 (DEFAULT_EXT_TAG_FIELD_SUPPORTED_0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 1
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_EXT_TAG_FIELD_SUPPORTED_1 1'h0



// Name:           DEFAULT_ATT_BUTT_PRE_1
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 1
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Button is present
`define DEFAULT_ATT_BUTT_PRE_1 1'h0


// Name:           DEFAULT_ATT_IND_PRE_1
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 1
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Indicator is present
`define DEFAULT_ATT_IND_PRE_1 1'h0


// Name:           DEFAULT_PWR_IND_PRE_1
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 1
// Parameter Type: Register Default Setting
// 
// When set indicates that a Power Indicator is present
`define DEFAULT_PWR_IND_PRE_1 1'h0


// Name:           DEFAULT_NO_SNOOP_SUPPORTED_1
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 1
// Parameter Type: Register Default Setting
// 
// Default value for the Enable No Snoop bit in the Device Control Register. Function 1.
`define DEFAULT_NO_SNOOP_SUPPORTED_1 1'h0


// Name:           ROOT_RCB_1
// Default:        64-bit
// Values:         64-bit (0x0), 128-bit (0x1)
// Parameter Type: Register Default Setting
// 
// Default value for the Read Completion Boundary (RCB) bit in the Link Control Register.
`define ROOT_RCB_1 1'h0


//-/ END:   PCI-E CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: MSI-X CAPABILITIES CONFIGURATION


// Name:           MSIX_TABLE_SIZE_1
// Default:        0x0
// Values:         0x0, ..., 0x7ff
// Enabled:        CX_NFUNC > 1 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the MSI-X Table Size field in the MSI-X Control Register. Function 1.
`define MSIX_TABLE_SIZE_1 11'h0


// Name:           MSIX_TABLE_BIR_1
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 1 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table BAR Indicator Register (BIR) field in the MSI-X Table Offset and BIR Register. Function 1.
`define MSIX_TABLE_BIR_1 3'h0


// Name:           MSIX_TABLE_OFFSET_1
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 1 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table Offset field in the MSI-X Table Offset and BIR Register. Function 1.
`define MSIX_TABLE_OFFSET_1 29'h0


// Name:           MSIX_PBA_BIR_1
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 1 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Pending Bit Array (PBA) BIR field in the MSI-X PBA Offset and BIR Register. Function 1.
`define MSIX_PBA_BIR_1 7'h0


// Name:           MSIX_PBA_OFFSET_1
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 1 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the PBA Offset field in the MSI-X PBA Offset and BIR Register. Function 1.
`define MSIX_PBA_OFFSET_1 29'h0

//-/ END:   MSI-X CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SATA CAPABILITIES CONFIGURATION


// Name:         SATA_HBA_OFFSET_1
// Default:      0x0
// Values:       0x0, ..., 0xfffff
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA Offset. Base address of the SATA HBA registers, 
//  as an offset from the base address of the BAR indicated 
//  by the SATA BAR field.
`define SATA_HBA_OFFSET_1 20'h0


// Name:         SATA_BAR_1
// Default:      0x0
// Values:       0x0, ..., 0xf
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA BAR. The bar that maps to SATA HBA registers,
`define SATA_BAR_1 4'h0

//-/ END:   SATA CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: AER CAPABILITIES CONFIGURATION


// Name:           DEFAULT_ECRC_CHK_CAP_1
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 1 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Check Capable bit in the Advanced Capabilities and Control Register. Function 1.
`define DEFAULT_ECRC_CHK_CAP_1 1'h1


// Name:           DEFAULT_ECRC_GEN_CAP_1
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 1 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Generation Capability bit in the Advanced Capabilities and Control Register. Function 1.
`define DEFAULT_ECRC_GEN_CAP_1 1'h1


// Name:           AER_INT_MSG_NUM_1
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Parameter Type: Register Default Setting
// 
// Default value for the Advanced Error Interrupt Message Number field of the Root Error Status Register. Function 1.
`define AER_INT_MSG_NUM_1 5'h0



// Name:           CX_HDR_LOG_DEPTH_1
// Default:        0x1
// Values:         0x1, 0x2, 0x4
// Enabled:        CX_NFUNC > 1 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Feature Setting.
// 
// Header Log Depth
`define CX_HDR_LOG_DEPTH_1 3'h1


`define CX_MULTIPLE_HDR_REC_CAP_1 1'h0

//-/ END:   AER CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PM CAPABILITIES CONFIGURATION


// Name:           PME_SUPPORT_1
// Default:        0x1b
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 1
// Parameter Type: Register Default Setting
// 
// Default value for the PME_Support field in the Power Management Capabilities Register. Function 1.
`define PME_SUPPORT_1 5'h1b


// Name:           D1_SUPPORT_1
// Default:        true
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 1
// Parameter Type: Register Default Setting
// 
// Default value for the D1 Support bit in the Power Management Capabilities Register. Function 1.
`define D1_SUPPORT_1 1'h1


// Name:           D2_SUPPORT_1
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 1
// Parameter Type: Register Default Setting
// 
// Default value for the D2 Support bit in the Power Management Capabilities Register. Function 1.
`define D2_SUPPORT_1 1'h1


// Name:           DEV_SPEC_INIT_1
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 1
// Parameter Type: Register Default Setting
// 
// Default value for the Device Specific Initialization (DSI) bit in the Power Management Capabilities Register. Function 
// 1.
`define DEV_SPEC_INIT_1 1'h1


// Name:           AUX_CURRENT_1
// Default:        375mA
// Values:         0mA (0x0), 55mA (0x1), 100mA (0x2), 160mA (0x3), 220mA (0x4), 270mA 
//                 (0x5), 320mA (0x6), 375mA (0x7)
// Enabled:        CX_NFUNC > 1
// Parameter Type: Register Default Setting
// 
// Default value for the Aux Current field in the Power Management Capabilities Register. Function 1.
`define AUX_CURRENT_1 3'h7


// Name:           DEFAULT_NO_SOFT_RESET_1
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 1
// Parameter Type: Register Default Setting
// 
// Default value for the No Soft Reset bit in the Power Management Control and Status Register. When set, you should not 
// reset any controller registers when transitioning from D3hot to D0. Therefore, you should not assert the non_sticky_rst_n 
// and sticky_rst_n inputs. Function 1.
`define DEFAULT_NO_SOFT_RESET_1 1'h0

//-/ END:   PM CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PCI BASIC CONFIGURATION


// Name:           CX_DEVICE_ID_1
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 1
// Parameter Type: Register Default Setting
// 
// Default value for the Device ID field in the Device ID and Vendor ID Register. Function 1.
`define CX_DEVICE_ID_1 16'h0


// Name:           CX_VENDOR_ID_1
// Default:        0x16c3
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 1
// Parameter Type: Register Default Setting
// 
// Default value for the Vendor ID field in the Device ID and Vendor ID Register. Function 1.
`define CX_VENDOR_ID_1 16'h16c3


// Name:           CX_REVISION_ID_1
// Default:        0x1
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 1
// Parameter Type: Register Default Setting
// 
// Default value for the Revision ID field in the Revision ID Register. Function 1.
`define CX_REVISION_ID_1 8'h1


// Name:           SUBSYS_DEV_ID_1
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 1
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 1.
`define SUBSYS_DEV_ID_1 16'h0


// Name:           SUBSYS_VENDOR_ID_1
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 1
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem Vendor ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 1.
`define SUBSYS_VENDOR_ID_1 16'h0


// Name:           BASE_CLASS_CODE_1
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 1
// Parameter Type: Register Default Setting
// 
// Default value for the Base Class Code field in the Class Code Register. Function 1.
`define BASE_CLASS_CODE_1 8'h0


// Name:           SUB_CLASS_CODE_1
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 1
// Parameter Type: Register Default Setting
// 
// Default value for the Subclass Code field in the Class Code Register. Function 1.
`define SUB_CLASS_CODE_1 8'h0


// Name:           IF_CODE_1
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 1
// Parameter Type: Register Default Setting
// 
// Default value for the Programming Interface field in the Class Code Register. Function 1.
`define IF_CODE_1 8'h0


// Name:           CARDBUS_CIS_PTR_1
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 1
// Parameter Type: Register Default Setting
// 
// Default value for the CardBus CIS Pointer Register. Function 1.
`define CARDBUS_CIS_PTR_1 16'h0


// Name:           INT_PIN_MAPPING_1
// Default:        INTA
// Values:         None (0x0), INTA (0x1), INTB (0x2), INTC (0x3), INTD (0x4)
// Enabled:        CX_NFUNC > 1
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Pin Register. Function 1.
`define INT_PIN_MAPPING_1 8'h1


// Name:           IO_DECODE_32_1
// Default:        16-bit
// Values:         16-bit (0x0), 32-bit (0x1)
// Enabled:        CX_NFUNC > 1
// Parameter Type: Register Default Setting
// 
// Default value for the 32-Bit I/O Space bit in the I/O Base and I/O Limit Register. Function 1.
`define IO_DECODE_32_1 1'h0


// Name:           MEM_DECODE_64_1
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x1)
// Enabled:        CX_NFUNC > 1
// Parameter Type: Register Default Setting
// 
// Default value for the 64-Bit Memory Addressing bit in the Prefetchable Memory Base and Limit Register. Function 1.
`define MEM_DECODE_64_1 1'h0


// Name:           ROM_BAR_ENABLED_1
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 1
// Parameter Type: Register Default Setting
// 
// Include the expansion ROM BAR registers. Function 1.
`define ROM_BAR_ENABLED_1 1'h1


`define DEFAULT_ROM_BAR_ENABLED_1 1'h1


// Name:           ROM_MASK_1
// Default:        0xffff
// Values:         0x7ff, ..., 0xffffff
// Enabled:        CX_NFUNC > 1 && ROM_BAR_ENABLED_1==1
// Parameter Type: Register Default Setting
// 
// Determines the default of the Expansion ROM BAR Mask register. Function 1. 
//  - The BAR Mask register specifies which bits of the Expansion ROM BAR are non-writable by host software, which 
//  determines the size of the BAR. 
//  - The maximum value for ROM_MASK_N is 0xFFFFFF because the maximum space that can be claimed by an Expansion ROM BAR 
//  is 16 MB. 
//  - For example: 32'hFFFF =BAR size of 2^16.
`define ROM_MASK_1 32'hffff


// Name:           ROM_MASK_WRITABLE_1
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 1 && ROM_BAR_ENABLED_1==1
// Parameter Type: Feature Setting
// 
// Determines if the Expansion ROM BAR Mask register for function 1 is writable by application software. If writing to a 
// Expansion ROM BAR Mask register is enabled, your application can write to the Expansion ROM BAR Mask register through the 
// DBI by asserting dbi_cs2 in addition to dbi_cs.
`define ROM_MASK_WRITABLE_1 1'h0


// Name:           ROM_FUNC1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 1 && ROM_BAR_ENABLED_1==1 && TRGT1_POPULATE==1))
// Parameter Type: Register Default Setting
// 
// Direct incoming requests that pass filtering and match the Expansion ROM BAR of function 1 to either RTRGT0 or RTRGT1. 
//  - For example, setting ROM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for the Expansion ROM BAR of function 
//  0 to RTRGT1. 
//  - If TRGT1_POPULATE =0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define ROM_FUNC1_TARGET_MAP 1'h1


// Name:           CX_PCI_HEADER_DEFAULTS_VISIBLE_1
// Default:        0
// Values:         0, 1
// Parameter Type: Register Default Setting
// 
// Select here if you want to configure the defaults for the other PCI Standard Header registers for function 1. 
//  An extra window will appear under this page. To access it, click the plus/minus symbol in the hierarchy view on the 
//  left panel. 
//  This is optional but not usually recommended. 
//  You can also change these register defaults using the DBI before (or after) the link comes up.
`define CX_PCI_HEADER_DEFAULTS_VISIBLE_1 0

//-/ END:   PCI BASIC CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: BAR CONFIGURATION


// Name:           BAR0_ENABLED_1
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 1
// Parameter Type: Feature Setting
// 
// Include the BAR0 registers for function 1.
`define BAR0_ENABLED_1 1'h1


`define DEFAULT_BAR0_ENABLED_1 1'h1


// Name:           MEM0_SPACE_DECODER_1
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 1 && BAR0_ENABLED_1==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 1.
`define MEM0_SPACE_DECODER_1 1'h0


// Name:           PREFETCHABLE0_1
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 1 && BAR0_ENABLED_1==1 && MEM0_SPACE_DECODER_1==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 1.
`define PREFETCHABLE0_1 1'h0


// Name:           BAR0_TYPE_1
// Default:        64-bit ((MEM0_SPACE_DECODER_1==1 || BAR0_ENABLED_1==0) ? 0 : 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 1 && BAR0_ENABLED_1==1 && MEM0_SPACE_DECODER_1==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 1.
`define BAR0_TYPE_1 2'h2


// Name:           BAR0_SIZING_SCHEME_1
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 1 && BAR0_ENABLED_1==1
// Parameter Type: Feature Setting
// 
// BAR0 Function 1 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR0_SIZING_SCHEME_1 2'h0


// Name:           CX_BAR0_RESIZABLE_1
// Default:        0x0 ((BAR0_SIZING_SCHEME_1==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR0_ENABLED_1==1) && (MEM0_SPACE_DECODER_1==0)
// Parameter Type: Feature Setting
// 
// Defines BAR0 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR0 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR0_RESIZABLE_1 1'h0


// Name:           CX_BAR0_RESOURCE_AVAIL_1
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 1 && CX_BAR0_RESIZABLE_1==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR0 of function 1. 
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
// Example: 0x00000030 indicates that BAR0 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR0_RESOURCE_AVAIL_1 64'h10


// Name:           BAR0_MASK_WRITABLE_1
// Default:        0x0 ((BAR0_ENABLED_1==1 && BAR0_SIZING_SCHEME_1 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 1 && BAR0_ENABLED_1==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR0 Mask through DBI
`define BAR0_MASK_WRITABLE_1 1'h0


// Name:           BAR0_MASK_1
// Default:        0xfffff (CX_BAR0_RESIZABLE_1==1 ? [calc_bar_mask 
//                 CX_BAR0_RESOURCE_AVAIL_1] : MEM0_SPACE_DECODER_1==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 1 && BAR0_ENABLED_1==1 && MEM0_SPACE_DECODER_1==0 && 
//                 CX_BAR0_RESIZABLE_1==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR0 Mask register of function 1. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR0_MASK_1 64'hfffff


// Name:           MEM_FUNC1_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 1 && BAR0_ENABLED_1==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_0 of function 1 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming Requests for BAR0 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC1_BAR0_TARGET_MAP 1'h1


// Name:           BAR1_ENABLED_1
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 1 && BAR0_TYPE_1==0
// Parameter Type: Feature Setting
// 
// Include the BAR1 registers for function 1.
`define BAR1_ENABLED_1 1'h0


`define DEFAULT_BAR1_ENABLED_1 1'h0


// Name:           MEM1_SPACE_DECODER_1
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 1 && BAR1_ENABLED_1==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 1.
`define MEM1_SPACE_DECODER_1 1'h0


// Name:           PREFETCHABLE1_1
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 1 && BAR1_ENABLED_1==1 && MEM1_SPACE_DECODER_1==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 1.
`define PREFETCHABLE1_1 1'h0


// Name:           BAR1_TYPE_1
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 1.
`define BAR1_TYPE_1 2'h0


// Name:           BAR1_SIZING_SCHEME_1
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 1 && BAR1_ENABLED_1==1
// Parameter Type: Feature Setting
// 
// BAR1 Function 1 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR1_SIZING_SCHEME_1 2'h0


// Name:           CX_BAR1_RESIZABLE_1
// Default:        0x0 ((BAR1_SIZING_SCHEME_1==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR1_ENABLED_1==1) && (MEM1_SPACE_DECODER_1==0)
// Parameter Type: Feature Setting
// 
// Defines BAR1 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR1 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR1_RESIZABLE_1 1'h0


// Name:           CX_BAR1_RESOURCE_AVAIL_1
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 1 && CX_BAR1_RESIZABLE_1==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR1 of function 1. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR1 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR1_RESOURCE_AVAIL_1 32'h10


// Name:           BAR1_MASK_WRITABLE_1
// Default:        0x0 ((BAR1_ENABLED_1==1 && BAR1_SIZING_SCHEME_1 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 1 && BAR1_ENABLED_1==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR1 Mask through DBI
`define BAR1_MASK_WRITABLE_1 1'h0


// Name:           BAR1_MASK_1
// Default:        0xffff (CX_BAR1_RESIZABLE_1==1 ? [calc_bar_mask 
//                 CX_BAR1_RESOURCE_AVAIL_1] : MEM1_SPACE_DECODER_1==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 1 && BAR1_ENABLED_1==1 && MEM1_SPACE_DECODER_1==0 && 
//                 CX_BAR1_RESIZABLE_1==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR1 Mask register of function 1. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR1_MASK_1 32'hffff


// Name:           MEM_FUNC1_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 1 && BAR1_ENABLED_1==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_1 of function 1 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR1_TARGET_MAP to 1 maps all incoming Requests for BAR1 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC1_BAR1_TARGET_MAP 1'h1


// Name:           BAR2_ENABLED_1
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 1
// Parameter Type: Feature Setting
// 
// Include the BAR2 registers for function 1.
`define BAR2_ENABLED_1 1'h1


`define DEFAULT_BAR2_ENABLED_1 1'h1


// Name:           MEM2_SPACE_DECODER_1
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 1 && BAR2_ENABLED_1==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 1.
`define MEM2_SPACE_DECODER_1 1'h0


// Name:           PREFETCHABLE2_1
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 1 && BAR2_ENABLED_1==1 && MEM2_SPACE_DECODER_1==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 1.
`define PREFETCHABLE2_1 1'h0


// Name:           BAR2_TYPE_1
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 1 && BAR2_ENABLED_1==1 && MEM2_SPACE_DECODER_1==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 1.
`define BAR2_TYPE_1 2'h0


// Name:           BAR2_SIZING_SCHEME_1
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 1 && BAR2_ENABLED_1==1
// Parameter Type: Feature Setting
// 
// BAR2 Function 1 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR2_SIZING_SCHEME_1 2'h0


// Name:           CX_BAR2_RESIZABLE_1
// Default:        0x0 ((BAR2_SIZING_SCHEME_1==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR2_ENABLED_1==1) && (MEM2_SPACE_DECODER_1==0)
// Parameter Type: Feature Setting
// 
// Defines BAR2 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR2 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR2_RESIZABLE_1 1'h0


// Name:           CX_BAR2_RESOURCE_AVAIL_1
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 1 && CX_BAR2_RESIZABLE_1==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR2 of function 1. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR2 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR2_RESOURCE_AVAIL_1 64'h10


// Name:           BAR2_MASK_WRITABLE_1
// Default:        0x0 ((BAR2_ENABLED_1==1 && BAR2_SIZING_SCHEME_1 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 1 && BAR2_ENABLED_1==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR2 Mask through DBI
`define BAR2_MASK_WRITABLE_1 1'h0


// Name:           BAR2_MASK_1
// Default:        0xfffff (CX_BAR2_RESIZABLE_1==1 ? [calc_bar_mask 
//                 CX_BAR2_RESOURCE_AVAIL_1] : MEM2_SPACE_DECODER_1==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 1 && BAR2_ENABLED_1==1 && MEM2_SPACE_DECODER_1==0 && 
//                 CX_BAR2_RESIZABLE_1==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR2 Mask register of function 1. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR2_MASK_1 64'hfffff


// Name:           MEM_FUNC1_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 1 && BAR2_ENABLED_1==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_2 of function 1 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR2_TARGET_MAP to 1 maps all incoming requests for BAR2 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC1_BAR2_TARGET_MAP 1'h1


// Name:           BAR3_ENABLED_1
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 1 && BAR2_TYPE_1==0
// Parameter Type: Feature Setting
// 
// Include the BAR3 registers for function 1.
`define BAR3_ENABLED_1 1'h0



`define DEFAULT_BAR3_ENABLED_1 1'h0


// Name:           MEM3_SPACE_DECODER_1
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 1 && BAR3_ENABLED_1==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 1.
`define MEM3_SPACE_DECODER_1 1'h0


// Name:           PREFETCHABLE3_1
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 1 && BAR3_ENABLED_1==1 && MEM3_SPACE_DECODER_1==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 1.
`define PREFETCHABLE3_1 1'h0


// Name:           BAR3_TYPE_1
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 1.
`define BAR3_TYPE_1 2'h0


// Name:           BAR3_SIZING_SCHEME_1
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 1 && BAR3_ENABLED_1==1
// Parameter Type: Feature Setting
// 
// BAR3 Function 1 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR3_SIZING_SCHEME_1 2'h0


// Name:           CX_BAR3_RESIZABLE_1
// Default:        0x0 ((BAR3_SIZING_SCHEME_1==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR3_ENABLED_1==1) && (MEM3_SPACE_DECODER_1==0)
// Parameter Type: Feature Setting
// 
// Defines BAR3 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR3 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR3_RESIZABLE_1 1'h0


// Name:           CX_BAR3_RESOURCE_AVAIL_1
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 1 && CX_BAR3_RESIZABLE_1==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR3 of function 1. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR3 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR3_RESOURCE_AVAIL_1 32'h10


// Name:           BAR3_MASK_WRITABLE_1
// Default:        0x0 ((BAR3_ENABLED_1==1 && BAR3_SIZING_SCHEME_1 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 1 && BAR3_ENABLED_1==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR3 Mask through DBI
`define BAR3_MASK_WRITABLE_1 1'h0


// Name:           BAR3_MASK_1
// Default:        0xffff (CX_BAR3_RESIZABLE_1==1 ? [calc_bar_mask 
//                 CX_BAR3_RESOURCE_AVAIL_1] : MEM3_SPACE_DECODER_1==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 1 && BAR3_ENABLED_1==1 && MEM3_SPACE_DECODER_1==0 && 
//                 CX_BAR3_RESIZABLE_1==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR3 Mask register of function 1. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR3_MASK_1 32'hffff


// Name:           MEM_FUNC1_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 1 && BAR3_ENABLED_1==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_3 of function 1 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR3_TARGET_MAP to 1 maps all incoming requests for BAR3 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC1_BAR3_TARGET_MAP 1'h1


// Name:           BAR4_ENABLED_1
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 1
// Parameter Type: Feature Setting
// 
// Include the BAR4 registers for function 1.
`define BAR4_ENABLED_1 1'h1


`define DEFAULT_BAR4_ENABLED_1 1'h1



// Name:           MEM4_SPACE_DECODER_1
// Default:        I/O (BAR4_ENABLED_1==1)
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 1 && BAR4_ENABLED_1==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 1.
`define MEM4_SPACE_DECODER_1 1'h1


// Name:           PREFETCHABLE4_1
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 1 && BAR4_ENABLED_1==1 && MEM4_SPACE_DECODER_1==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 1.
`define PREFETCHABLE4_1 1'h0


// Name:           BAR4_TYPE_1
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 1 && BAR4_ENABLED_1==1 && MEM4_SPACE_DECODER_1==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 1.
`define BAR4_TYPE_1 2'h0


// Name:           BAR4_SIZING_SCHEME_1
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 1 && BAR4_ENABLED_1==1
// Parameter Type: Feature Setting
// 
// BAR4  Function 1 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR4_SIZING_SCHEME_1 2'h0


// Name:           CX_BAR4_RESIZABLE_1
// Default:        0x0 ((BAR4_SIZING_SCHEME_1==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR4_ENABLED_1==1) && (MEM4_SPACE_DECODER_1==0)
// Parameter Type: Feature Setting
// 
// Defines BAR4 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR4 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR4_RESIZABLE_1 1'h0


// Name:           CX_BAR4_RESOURCE_AVAIL_1
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 1 &&  CX_BAR4_RESIZABLE_1==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR4 of function 1. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR4 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR4_RESOURCE_AVAIL_1 64'h10


// Name:           BAR4_MASK_WRITABLE_1
// Default:        0x0 ((BAR4_ENABLED_1==1 && BAR4_SIZING_SCHEME_1 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 1 && BAR4_ENABLED_1==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR4 Mask through DBI
`define BAR4_MASK_WRITABLE_1 1'h0


// Name:           BAR4_MASK_1
// Default:        0xff (CX_BAR4_RESIZABLE_1==1 ? [calc_bar_mask 
//                 CX_BAR4_RESOURCE_AVAIL_1] : MEM4_SPACE_DECODER_1==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 1 && BAR4_ENABLED_1==1 && MEM4_SPACE_DECODER_1==0 && 
//                 CX_BAR4_RESIZABLE_1==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR4 Mask register of function 1. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR4_MASK_1 64'hff


// Name:           MEM_FUNC1_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 1 && BAR4_ENABLED_1==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_4 of function 1 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR4_TARGET_MAP to 1 maps all incoming requests for BAR4 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC1_BAR4_TARGET_MAP 1'h1


// Name:           BAR5_ENABLED_1
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 1 && BAR4_TYPE_1==0
// Parameter Type: Feature Setting
// 
// Include the BAR5 registers for function 1.
`define BAR5_ENABLED_1 1'h0


`define DEFAULT_BAR5_ENABLED_1 1'h0


// Name:           MEM5_SPACE_DECODER_1
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 1 && BAR5_ENABLED_1==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 1.
`define MEM5_SPACE_DECODER_1 1'h0


// Name:           PREFETCHABLE5_1
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 1 && BAR5_ENABLED_1==1 && MEM5_SPACE_DECODER_1==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 1.
`define PREFETCHABLE5_1 1'h0


// Name:           BAR5_TYPE_1
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 1.
`define BAR5_TYPE_1 2'h0


// Name:           BAR5_SIZING_SCHEME_1
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 1 && BAR5_ENABLED_1==1
// Parameter Type: Feature Setting
// 
// BAR5  Function 1 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR5_SIZING_SCHEME_1 2'h0


// Name:           CX_BAR5_RESIZABLE_1
// Default:        0x0 ((BAR5_SIZING_SCHEME_1==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR5_ENABLED_1==1) && (MEM5_SPACE_DECODER_1==0)
// Parameter Type: Feature Setting
// 
// Defines BAR5 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR5 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR5_RESIZABLE_1 1'h0


// Name:           CX_BAR5_RESOURCE_AVAIL_1
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 1 && CX_BAR5_RESIZABLE_1==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR5 of function 1. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR5 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR5_RESOURCE_AVAIL_1 32'h10


// Name:           BAR5_MASK_WRITABLE_1
// Default:        0x0 ((BAR5_ENABLED_1==1 && BAR5_SIZING_SCHEME_1 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 1 && BAR5_ENABLED_1==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR5 Mask through DBI
`define BAR5_MASK_WRITABLE_1 1'h0


// Name:           BAR5_MASK_1
// Default:        0xffff (CX_BAR5_RESIZABLE_1==1 ? [calc_bar_mask 
//                 CX_BAR5_RESOURCE_AVAIL_1] : MEM5_SPACE_DECODER_1==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 1 && BAR5_ENABLED_1==1 && MEM5_SPACE_DECODER_1==0 && 
//                 CX_BAR5_RESIZABLE_1==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR5 Mask register of function 1. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR5_MASK_1 32'hffff


// Name:           MEM_FUNC1_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 1 && BAR5_ENABLED_1==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_5 of function 1 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR5_TARGET_MAP to 1 maps all incoming requests for BAR5 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC1_BAR5_TARGET_MAP 1'h1


`define FUNC1_BARSIZE_32 128'h100100


`define FUNC1_BARSIZE 128'h200100


`define FUNC1_BAR0_BARSIZE_TRGT1 128'h100000


`define FUNC1_BAR2_BARSIZE_TRGT1 128'h0


`define FUNC1_BAR4_BARSIZE_TRGT1 128'h0


`define FUNC1_BAR0_TRGT1_ADDR_WIDTH 20


`define FUNC1_BAR2_TRGT1_ADDR_WIDTH 1


`define FUNC1_BAR4_TRGT1_ADDR_WIDTH 1


// Name:         CX_NUM_RBARS_1
// Default:      0 ([calc_num_rbars CX_BAR0_RESIZABLE_1 CX_BAR1_RESIZABLE_1 
//               CX_BAR2_RESIZABLE_1 CX_BAR3_RESIZABLE_1 CX_BAR4_RESIZABLE_1 
//               CX_BAR5_RESIZABLE_1])
// Values:       -2147483648, ..., 2147483647
// 
// Number of resizable BARs
`define CX_NUM_RBARS_1 0

//-/ END:   BAR CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SR-IOV CAPABILITIES CONFIGURATION


// Name:           CX_VF_DEPENDENCY_LINK_1
// Default:        0x1
// Values:         0x0, ..., 0xff
// Enabled:        CX_VF_DEPENDENCY_LINK_SUPP && (CX_NFUNC > 1) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Specifies the 8-bit VF dependency link for PF1. Valid only if CX_VF_DEPENDENCY_LINK_SUPP=1.
`define CX_VF_DEPENDENCY_LINK_1 8'h1


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER1_1
// Default:        0x2 ((CX_NFUNC>=17) ? 32 : (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : 
//                 (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF1 in an ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER1_1 16'h2


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER0_1
// Default:        0x100
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF1 
//  in a non-ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER0_1 16'h100


// Name:           VF_STRIDE_ARI_CAP_HIER1_1
// Default:        0x2 (CX_VF_STRIDE_ALWAYS_ONE) ? 1 : ((CX_NFUNC>=17) ? 32 : 
//                 (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF1 in an ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER1_1 16'h2


// Name:           VF_STRIDE_ARI_CAP_HIER0_1
// Default:        0x100 ((CX_VF_STRIDE_ALWAYS_ONE) ? 0x0001 : 0x0100)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF1 in a non-ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER0_1 16'h100


// Name:           CX_VF_DEVICE_ID_1
// Default:        0x0 (CX_DEVICE_ID_1)
// Values:         0x0, ..., 0xffff
// Enabled:        (CX_NFUNC > 1) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 16-bit virtual function Device ID for PF1. 
//  It might be different from the physical function's.
`define CX_VF_DEVICE_ID_1 16'h0


// Name:           CX_VF_SUPP_PAGE_SIZE_1
// Default:        0x553
// Values:         0x553, ..., 0xffff
// Enabled:        (CX_NFUNC > 1) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 32-bit supported page sizes for virtual functions for PF1
`define CX_VF_SUPP_PAGE_SIZE_1 32'h553


// Name:           CX_ARI_CAP_HIER_PRSVD_1
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Specifies if ARI Capable Hierarchy bit is preserved across certain power state transitions 
//  Only present in PF0. Read Only Zero in this PF1.
`define CX_ARI_CAP_HIER_PRSVD_1 1'h0

//-/===========================================
//-/ START: VF BAR CONFIGURATION


// Name:           VF_BAR0_ENABLED_1
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 1)
// Parameter Type: Feature Setting
// 
// Include the VF BAR0 registers in PF1
`define VF_BAR0_ENABLED_1 1'h1


`define VF_DEFAULT_BAR0_ENABLED_1 1'h1


// Name:           VF_MEM0_SPACE_DECODER_1
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR0_ENABLED_1 && CX_SRIOV_ENABLE && (CX_NFUNC > 1)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Space Indicator 
//  ALWAYS set to Memory for Virtual Functions
`define VF_MEM0_SPACE_DECODER_1 1'h0


// Name:           VF_PREFETCHABLE0_1
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_1==1 && VF_MEM0_SPACE_DECODER_1==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 1)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Prefetchable 
//  When set indicates VF BAR0 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE0_1 1'h0


// Name:           VF_BAR0_TYPE_1
// Default:        64-bit ((VF_MEM0_SPACE_DECODER_1==1 || VF_BAR0_ENABLED_1==0) ? 0 : 
//                 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR0_ENABLED_1==1 && VF_MEM0_SPACE_DECODER_1==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 1)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 1; (bits [2:1] for a memory BAR).
`define VF_BAR0_TYPE_1 2'h2


// Name:           VF_BAR0_MASK_WRITABLE_1
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_1==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 1)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR0_MASK_WRITABLE_1 1'h0


// Name:           VF_BAR0_MASK_1
// Default:        0xfffff (VF_MEM0_SPACE_DECODER_1==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR0_ENABLED_1==1 && VF_MEM0_SPACE_DECODER_1==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 1)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Mask 
//  Determines the default of the VF BAR Mask register for PF1. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR0_MASK_1 64'hfffff


// Name:           VF_MEM_FUNC1_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR0_ENABLED_1==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 1)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF1 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC1_BAR0_TARGET_MAP 1'h1


// Name:           VF_BAR1_ENABLED_1
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        (VF_BAR0_TYPE_1==0)  && CX_SRIOV_ENABLE && (CX_NFUNC > 1)
// Parameter Type: Feature Setting
// 
// Include the VF BAR1 registers in PF1
`define VF_BAR1_ENABLED_1 1'h0


`define VF_DEFAULT_BAR1_ENABLED_1 1'h0


// Name:           VF_MEM1_SPACE_DECODER_1
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR1_ENABLED_1==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 1)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Space Indicator
`define VF_MEM1_SPACE_DECODER_1 1'h0


// Name:           VF_PREFETCHABLE1_1
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_1==1 && VF_MEM1_SPACE_DECODER_1==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 1)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Prefetchable 
//  When set indicates VF BAR1 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE1_1 1'h0


// Name:           VF_BAR1_TYPE_1
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 1; (bits [2:1] for a memory BAR).
`define VF_BAR1_TYPE_1 2'h0


// Name:           VF_BAR1_MASK_WRITABLE_1
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_1==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 1)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR1_MASK_WRITABLE_1 1'h0


// Name:           VF_BAR1_MASK_1
// Default:        0xffff (VF_MEM1_SPACE_DECODER_1==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR1_ENABLED_1==1 && VF_MEM1_SPACE_DECODER_1==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 1)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Mask 
//  Determines the default of the VF BAR Mask register for PF1. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR1_MASK_1 32'hffff


// Name:           VF_MEM_FUNC1_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR1_ENABLED_1==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 1)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF1 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC1_BAR1_TARGET_MAP 1'h1


// Name:           VF_BAR2_ENABLED_1
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 1)
// Parameter Type: Feature Setting
// 
// Include the VF BAR2 registers in PF1
`define VF_BAR2_ENABLED_1 1'h1


`define VF_DEFAULT_BAR2_ENABLED_1 1'h1


// Name:           VF_MEM2_SPACE_DECODER_1
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR2_ENABLED_1==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 1)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Memory Space Indicator
`define VF_MEM2_SPACE_DECODER_1 1'h0


// Name:           VF_PREFETCHABLE2_1
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_1==1 && VF_MEM2_SPACE_DECODER_1==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 1)
// Parameter Type: Register Default Setting
// 
// BAR2 Memory Prefetchable 
//  When set indicates VF BAR2 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE2_1 1'h0


// Name:           VF_BAR2_TYPE_1
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR2_ENABLED_1==1 && VF_MEM2_SPACE_DECODER_1==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 1)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 1; (bits [2:1] for a memory BAR).
`define VF_BAR2_TYPE_1 2'h0


// Name:           VF_BAR2_MASK_WRITABLE_1
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_1==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 1)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR2_MASK_WRITABLE_1 1'h0


// Name:           VF_BAR2_MASK_1
// Default:        0xfffff (VF_MEM2_SPACE_DECODER_1==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR2_ENABLED_1==1 && VF_MEM2_SPACE_DECODER_1==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 1)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Mask 
//  Determines the default of the VF BAR Mask register for PF1. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR2_MASK_1 64'hfffff


// Name:           VF_MEM_FUNC1_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR2_ENABLED_1==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 1)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF1 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC1_BAR2_TARGET_MAP 1'h1


// Name:           VF_BAR3_ENABLED_1
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_TYPE_1==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 1)
// Parameter Type: Feature Setting
// 
// Include the VF BAR3 registers in PF1
`define VF_BAR3_ENABLED_1 1'h0


`define VF_DEFAULT_BAR3_ENABLED_1 1'h0


// Name:           VF_MEM3_SPACE_DECODER_1
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR3_ENABLED_1==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 1)
// Parameter Type: Register Default Setting
// 
// BAR3 Memory Space Indicator
`define VF_MEM3_SPACE_DECODER_1 1'h0


// Name:           VF_PREFETCHABLE3_1
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_1==1 && VF_MEM3_SPACE_DECODER_1==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 1)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Memory Prefetchable 
//  When set indicates VF BAR3 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE3_1 1'h0


// Name:           VF_BAR3_TYPE_1
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 1; (bits [2:1] for a memory BAR).
`define VF_BAR3_TYPE_1 2'h0


// Name:           VF_BAR3_MASK_WRITABLE_1
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_1==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 1)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR3_MASK_WRITABLE_1 1'h0


// Name:           VF_BAR3_MASK_1
// Default:        0xffff (VF_MEM3_SPACE_DECODER_1==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR3_ENABLED_1==1 && VF_MEM3_SPACE_DECODER_1==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 1)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Mask 
//  Determines the default of the VF BAR Mask register for PF1. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR3_MASK_1 32'hffff


// Name:           VF_MEM_FUNC1_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR3_ENABLED_1==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 1)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF1 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC1_BAR3_TARGET_MAP 1'h1


// Name:           VF_BAR4_ENABLED_1
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 1)
// Parameter Type: Feature Setting
// 
// Include the VF BAR4 registers in PF1
`define VF_BAR4_ENABLED_1 1'h1


`define VF_DEFAULT_BAR4_ENABLED_1 1'h1


// Name:           VF_MEM4_SPACE_DECODER_1
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR4_ENABLED_1==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 1)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Space Indicator
`define VF_MEM4_SPACE_DECODER_1 1'h0


// Name:           VF_PREFETCHABLE4_1
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_1==1 && VF_MEM4_SPACE_DECODER_1==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 1)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Prefetchable 
//  When set indicates VF BAR4 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE4_1 1'h0


// Name:           VF_BAR4_TYPE_1
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR4_ENABLED_1==1 && VF_MEM4_SPACE_DECODER_1==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 1)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 1; (bits [2:1] for a memory BAR).
`define VF_BAR4_TYPE_1 2'h0


// Name:           VF_BAR4_MASK_WRITABLE_1
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_1==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 1)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR4_MASK_WRITABLE_1 1'h0


// Name:           VF_BAR4_MASK_1
// Default:        0xfff (VF_MEM4_SPACE_DECODER_1==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR4_ENABLED_1==1 && VF_MEM4_SPACE_DECODER_1==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 1)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Mask 
//  Determines the default of the VF BAR Mask register for PF1. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR4_MASK_1 64'hfff


// Name:           VF_MEM_FUNC1_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR4_ENABLED_1==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 1)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF1 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC1_BAR4_TARGET_MAP 1'h1


// Name:           VF_BAR5_ENABLED_1
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_TYPE_1==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 1)
// Parameter Type: Feature Setting
// 
// Include the VF BAR5 registers in PF1
`define VF_BAR5_ENABLED_1 1'h0


`define VF_DEFAULT_BAR5_ENABLED_1 1'h0


// Name:           VF_MEM5_SPACE_DECODER_1
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR5_ENABLED_1==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 1)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Space Indicator
`define VF_MEM5_SPACE_DECODER_1 1'h0


// Name:           VF_PREFETCHABLE5_1
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_1==1 && VF_MEM5_SPACE_DECODER_1==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 1)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Prefetchable 
//  When set indicates VF BAR5 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE5_1 1'h0


// Name:           VF_BAR5_TYPE_1
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 1; (bits [2:1] for a memory BAR).
`define VF_BAR5_TYPE_1 2'h0


// Name:           VF_BAR5_MASK_WRITABLE_1
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_1==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 1)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR5_MASK_WRITABLE_1 1'h0


// Name:           VF_BAR5_MASK_1
// Default:        0xffff (VF_MEM5_SPACE_DECODER_1==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR5_ENABLED_1==1 && VF_MEM5_SPACE_DECODER_1==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 1)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Mask 
//  Determines the default of the VF BAR Mask register for PF1. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR5_MASK_1 32'hffff


// Name:           VF_MEM_FUNC1_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR5_ENABLED_1==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 1)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF1 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC1_BAR5_TARGET_MAP 1'h1


`define VF_FUNC1_BARSIZE_32 128'h101000


`define VF_FUNC1_BARSIZE 128'h201000

//-/ END:   VF BAR CONFIGURATION
//-/===========================================

//-/ END:   SR-IOV CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: TPH CAPABILITIES CONFIGURATION


// Name:           TPH_IVEC_1
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Interrupt Vector Mode. If set indicates that the function supports the Interrupt Vector 
// Mode of operation. Function 1.
`define TPH_IVEC_1 1'h0


// Name:           TPH_DS_1
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Device Specific Mode. If set indicates that the function supports the Device Specific Mode 
// of operation. Function 1.
`define TPH_DS_1 1'h0


// Name:           TPH_ST_TABLE_LOC_1
// Default:        Not Present
// Values:         Not Present (0), TPH Requester Capability Structure (1), MSI-X 
//                 Table Structure (2)
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_DS_1 || TPH_IVEC_1))
// Parameter Type: Feature Setting
// 
// TLP Processing Hints Steering Tag Table Location. Value indicates if and where the ST Table is located. Function 1.
`define TPH_ST_TABLE_LOC_1 0

//located in the TPH Requester Capability structure. Please reduce the ST Table Size for this mode of operation"

// Name:           TPH_ST_TABLE_SIZE_1
// Default:        1
// Values:         1, ..., 2048
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_ST_TABLE_LOC_1 != 0))
// Parameter Type: Feature Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define TPH_ST_TABLE_SIZE_1 1


`define TPH_ST_TABLE_DEPTH_1 0

//-/ END:   TPH CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: ATS CAPABILITIES CONFIGURATION


// Name:           ATS_INV_Q_DPTH_1
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// The number of Invalidate Requests that the Function can accept before putting backpressure on the upstream connection. A 
// value of 0 indicates the function can accept 32 Invalidate requests. Function 1.
`define ATS_INV_Q_DPTH_1 5'd0


// Name:           ATS_STU_1
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// This value indicates to the Function the minimum number of 4096-byte blocks that is indicated in a Translation 
// Completion or Invalidate Request. This is a power of 2 multiplier and the number of blocks is 2^STU. A value of 0 indicates 1 block 
// and a value of 31 indicates 2^31 blocks (or 8 TB total). Function 1.
`define ATS_STU_1 5'd0

//-/ END:   ATS CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PRS CAPABILITIES CONFIGURATION


// Name:           CX_PRS_OUTSTANDING_CAPACITY_VALUE_1
// Default:        0x1
// Values:         0x0, ..., 0xffffffff
// Enabled:        (CX_PRS_ENABLE==1) && (CX_NFUNC > 1)
// Parameter Type: Register Default Setting
// 
// Register default for PRS Outstanding Capacity in PF1. 
// For more details, see the PRS_OUTSTANDING_CAPACITY field in the PRS_REQ_CAPACITY_REG register.
`define CX_PRS_OUTSTANDING_CAPACITY_VALUE_1 32'h1

//-/ END:   PRS CAPABILITIES CONFIGURATION
//-/===========================================


//-/===========================================
//--- START: RN


// Name:           CX_RN_IMM_VALUE_1
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 1)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for PF1.
`define CX_RN_IMM_VALUE_1 1'h0


// Name:           CX_RN_IMM_D0_VALUE_1
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 1)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for PF1.
`define CX_RN_IMM_D0_VALUE_1 1'h0


// Name:           CX_RN_FRS_VALUE_1
// Default:        0x0 (CX_RN_FRS_SUPPORTED==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_FRS_SUPPORTED==1) && (CX_NFUNC > 1)
// Parameter Type: Feature Setting
// 
// Function Readiness Status messaging supported for function PF1.
`define CX_RN_FRS_VALUE_1 1'h0


// Name:           CX_RN_RTR_VALID_1
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF1.
`define CX_RN_RTR_VALID_1 1'h0


// Name:           CX_RN_RTR_DL_UP_VALUE_1
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR DL Up Time field in PF1.
`define CX_RN_RTR_DL_UP_VALUE_1 12'h0


// Name:           CX_RN_RTR_RESET_VALUE_1
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF1.
`define CX_RN_RTR_RESET_VALUE_1 12'h0


// Name:           CX_RN_RTR_D3D0_VALUE_1
// Default:        0x0
// Values:         0x0, ..., 0x80a
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF1.
`define CX_RN_RTR_D3D0_VALUE_1 12'h0


// Name:           CX_RN_RTR_FLR_VALUE_1
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_FLR_ENABLE==1) && (CX_NFUNC > 1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR FLR Time field in PF1.
`define CX_RN_RTR_FLR_VALUE_1 12'h0


// Name:           VF_RN_IMM_VALUE_1
// Default:        0x0 (CX_RN_IMM_VALUE_1 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 1))
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for VFs in PF1.
`define VF_RN_IMM_VALUE_1 1'h0


// Name:           VF_RN_IMM_D0_VALUE_1
// Default:        0x0 (CX_RN_IMM_D0_VALUE_1 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 1))
// Parameter Type: Register Default Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for VFs in PF1.
`define VF_RN_IMM_D0_VALUE_1 1'h0


// Name:           VF_RN_RTR_VALID_1
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 1) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF1 VFs.
`define VF_RN_RTR_VALID_1 1'h0


// Name:           VF_RN_RTR_RESET_VALUE_1
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_1)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 1) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF1 VFS.
`define VF_RN_RTR_RESET_VALUE_1 12'h0


// Name:           VF_RN_RTR_D3D0_VALUE_1
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_1)
// Values:         0x0, ..., 0x80a
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 1) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF1 VFS.
`define VF_RN_RTR_D3D0_VALUE_1 12'h0


// Name:           VF_RN_RTR_FLR_VALUE_1
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_1)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 1) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF1 VFs.
`define VF_RN_RTR_FLR_VALUE_1 12'h0


// Name:           EXT_VF_RN_RTR_VALID_1
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 1) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF1 VFs.
`define EXT_VF_RN_RTR_VALID_1 1'h0


// Name:           EXT_VF_RN_RTR_RESET_VALUE_1
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_1)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 1) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF1 VFS.
`define EXT_VF_RN_RTR_RESET_VALUE_1 12'h0


// Name:           EXT_VF_RN_RTR_D3D0_VALUE_1
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_1)
// Values:         0x0, ..., 0x80a
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 1) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF1 VFS.
`define EXT_VF_RN_RTR_D3D0_VALUE_1 12'h0


// Name:           EXT_VF_RN_RTR_FLR_VALUE_1
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_1)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 1) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF1 VFs.
`define EXT_VF_RN_RTR_FLR_VALUE_1 12'h0

//-/ END:   RN
//-/===========================================

//-/ START: LN CAPABILITIES CONFIGURATION
//-/===========================================


// Name:           CX_LN_REG_MAX_VALUE_1
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 1))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_64_SUPPORTED field in the LNR_CAP_OFF register for PF1.
`define CX_LN_REG_MAX_VALUE_1 5'h0


// Name:           CX_LN_128_SUPPORTED_VALUE_1
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 1))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_128_SUPPORTED field in the LNR_CAP_OFF register for PF1.
`define CX_LN_128_SUPPORTED_VALUE_1 1'h0


// Name:           CX_LN_64_SUPPORTED_VALUE_1
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 1))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_REGISTRATION_MAX field in the LNR_CAP_OFF register for PF1.
`define CX_LN_64_SUPPORTED_VALUE_1 1'h0

//-/ END:   LN CAPABILITIES CONFIGURATION
//-/===========================================




//-/==========================================
//-/ End FUNC1 Config
//-/==========================================

//-/===========================================
//-/ Function 2 Configuration Registers
//-/ ==========================================


// Name:         FUNC_2
// Default:      0 ((CX_NFUNC > 2) ? 1 : 0)
// Values:       0, 1
// 
// This parameter indicates that Function 2 is present
// `define FUNC_2

//-/===========================================
//-/ START: PCI-E CAPABILITIES CONFIGURATION


// Name:           PCIE_CAP_INT_MSG_NUM_2
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 2
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Message Number field in the PCI Express Capabilities Register. Function 2.
`define PCIE_CAP_INT_MSG_NUM_2 5'h0


// Name:           SLOT_IMPLEMENTED_2
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_NFUNC > 2))
// Parameter Type: Register Default Setting
// 
// Indicates that the PCI Express link associated with this Port is connected to a slot. Function 2.
`define SLOT_IMPLEMENTED_2 1'h0


// Name:           DEFAULT_PHANTOM_FUNC_SUPPORTED_2
// Default:        0x0
// Values:         0x0, ..., 0x3
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_PHANTOM_FUNC_SUPPORTED_2 2'h0


// Name:           DEFAULT_EXT_TAG_FIELD_SUPPORTED_2
// Default:        0x0 (DEFAULT_EXT_TAG_FIELD_SUPPORTED_0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 2
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_EXT_TAG_FIELD_SUPPORTED_2 1'h0



// Name:           DEFAULT_ATT_BUTT_PRE_2
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 2
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Button is present
`define DEFAULT_ATT_BUTT_PRE_2 1'h0


// Name:           DEFAULT_ATT_IND_PRE_2
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 2
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Indicator is present
`define DEFAULT_ATT_IND_PRE_2 1'h0


// Name:           DEFAULT_PWR_IND_PRE_2
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 2
// Parameter Type: Register Default Setting
// 
// When set indicates that a Power Indicator is present
`define DEFAULT_PWR_IND_PRE_2 1'h0


// Name:           DEFAULT_NO_SNOOP_SUPPORTED_2
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 2
// Parameter Type: Register Default Setting
// 
// Default value for the Enable No Snoop bit in the Device Control Register. Function 2.
`define DEFAULT_NO_SNOOP_SUPPORTED_2 1'h0


// Name:           ROOT_RCB_2
// Default:        64-bit
// Values:         64-bit (0x0), 128-bit (0x1)
// Parameter Type: Register Default Setting
// 
// Default value for the Read Completion Boundary (RCB) bit in the Link Control Register.
`define ROOT_RCB_2 1'h0


//-/ END:   PCI-E CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: MSI-X CAPABILITIES CONFIGURATION


// Name:           MSIX_TABLE_SIZE_2
// Default:        0x0
// Values:         0x0, ..., 0x7ff
// Enabled:        CX_NFUNC > 2 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the MSI-X Table Size field in the MSI-X Control Register. Function 2.
`define MSIX_TABLE_SIZE_2 11'h0


// Name:           MSIX_TABLE_BIR_2
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 2 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table BAR Indicator Register (BIR) field in the MSI-X Table Offset and BIR Register. Function 2.
`define MSIX_TABLE_BIR_2 3'h0


// Name:           MSIX_TABLE_OFFSET_2
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 2 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table Offset field in the MSI-X Table Offset and BIR Register. Function 2.
`define MSIX_TABLE_OFFSET_2 29'h0


// Name:           MSIX_PBA_BIR_2
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 2 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Pending Bit Array (PBA) BIR field in the MSI-X PBA Offset and BIR Register. Function 2.
`define MSIX_PBA_BIR_2 7'h0


// Name:           MSIX_PBA_OFFSET_2
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 2 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the PBA Offset field in the MSI-X PBA Offset and BIR Register. Function 2.
`define MSIX_PBA_OFFSET_2 29'h0

//-/ END:   MSI-X CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SATA CAPABILITIES CONFIGURATION


// Name:         SATA_HBA_OFFSET_2
// Default:      0x0
// Values:       0x0, ..., 0xfffff
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA Offset. Base address of the SATA HBA registers, 
//  as an offset from the base address of the BAR indicated 
//  by the SATA BAR field.
`define SATA_HBA_OFFSET_2 20'h0


// Name:         SATA_BAR_2
// Default:      0x0
// Values:       0x0, ..., 0xf
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA BAR. The bar that maps to SATA HBA registers,
`define SATA_BAR_2 4'h0

//-/ END:   SATA CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: AER CAPABILITIES CONFIGURATION


// Name:           DEFAULT_ECRC_CHK_CAP_2
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 2 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Check Capable bit in the Advanced Capabilities and Control Register. Function 2.
`define DEFAULT_ECRC_CHK_CAP_2 1'h1


// Name:           DEFAULT_ECRC_GEN_CAP_2
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 2 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Generation Capability bit in the Advanced Capabilities and Control Register. Function 2.
`define DEFAULT_ECRC_GEN_CAP_2 1'h1


// Name:           AER_INT_MSG_NUM_2
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Parameter Type: Register Default Setting
// 
// Default value for the Advanced Error Interrupt Message Number field of the Root Error Status Register. Function 2.
`define AER_INT_MSG_NUM_2 5'h0



// Name:           CX_HDR_LOG_DEPTH_2
// Default:        0x1
// Values:         0x1, 0x2, 0x4
// Enabled:        CX_NFUNC > 2 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Feature Setting.
// 
// Header Log Depth
`define CX_HDR_LOG_DEPTH_2 3'h1


`define CX_MULTIPLE_HDR_REC_CAP_2 1'h0

//-/ END:   AER CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PM CAPABILITIES CONFIGURATION


// Name:           PME_SUPPORT_2
// Default:        0x1b
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 2
// Parameter Type: Register Default Setting
// 
// Default value for the PME_Support field in the Power Management Capabilities Register. Function 2.
`define PME_SUPPORT_2 5'h1b


// Name:           D1_SUPPORT_2
// Default:        true
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 2
// Parameter Type: Register Default Setting
// 
// Default value for the D1 Support bit in the Power Management Capabilities Register. Function 2.
`define D1_SUPPORT_2 1'h1


// Name:           D2_SUPPORT_2
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 2
// Parameter Type: Register Default Setting
// 
// Default value for the D2 Support bit in the Power Management Capabilities Register. Function 2.
`define D2_SUPPORT_2 1'h0


// Name:           DEV_SPEC_INIT_2
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 2
// Parameter Type: Register Default Setting
// 
// Default value for the Device Specific Initialization (DSI) bit in the Power Management Capabilities Register. Function 
// 2.
`define DEV_SPEC_INIT_2 1'h0


// Name:           AUX_CURRENT_2
// Default:        375mA
// Values:         0mA (0x0), 55mA (0x1), 100mA (0x2), 160mA (0x3), 220mA (0x4), 270mA 
//                 (0x5), 320mA (0x6), 375mA (0x7)
// Enabled:        CX_NFUNC > 2
// Parameter Type: Register Default Setting
// 
// Default value for the Aux Current field in the Power Management Capabilities Register. Function 2.
`define AUX_CURRENT_2 3'h7


// Name:           DEFAULT_NO_SOFT_RESET_2
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 2
// Parameter Type: Register Default Setting
// 
// Default value for the No Soft Reset bit in the Power Management Control and Status Register. When set, you should not 
// reset any controller registers when transitioning from D3hot to D0. Therefore, you should not assert the non_sticky_rst_n 
// and sticky_rst_n inputs. Function 2.
`define DEFAULT_NO_SOFT_RESET_2 1'h0

//-/ END:   PM CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PCI BASIC CONFIGURATION


// Name:           CX_DEVICE_ID_2
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 2
// Parameter Type: Register Default Setting
// 
// Default value for the Device ID field in the Device ID and Vendor ID Register. Function 2.
`define CX_DEVICE_ID_2 16'h0


// Name:           CX_VENDOR_ID_2
// Default:        0x16c3
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 2
// Parameter Type: Register Default Setting
// 
// Default value for the Vendor ID field in the Device ID and Vendor ID Register. Function 2.
`define CX_VENDOR_ID_2 16'h16c3


// Name:           CX_REVISION_ID_2
// Default:        0x1
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 2
// Parameter Type: Register Default Setting
// 
// Default value for the Revision ID field in the Revision ID Register. Function 2.
`define CX_REVISION_ID_2 8'h1


// Name:           SUBSYS_DEV_ID_2
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 2
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 2.
`define SUBSYS_DEV_ID_2 16'h0


// Name:           SUBSYS_VENDOR_ID_2
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 2
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem Vendor ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 2.
`define SUBSYS_VENDOR_ID_2 16'h0


// Name:           BASE_CLASS_CODE_2
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 2
// Parameter Type: Register Default Setting
// 
// Default value for the Base Class Code field in the Class Code Register. Function 2.
`define BASE_CLASS_CODE_2 8'h0


// Name:           SUB_CLASS_CODE_2
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 2
// Parameter Type: Register Default Setting
// 
// Default value for the Subclass Code field in the Class Code Register. Function 2.
`define SUB_CLASS_CODE_2 8'h0


// Name:           IF_CODE_2
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 2
// Parameter Type: Register Default Setting
// 
// Default value for the Programming Interface field in the Class Code Register. Function 2.
`define IF_CODE_2 8'h0


// Name:           CARDBUS_CIS_PTR_2
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 2
// Parameter Type: Register Default Setting
// 
// Default value for the CardBus CIS Pointer Register. Function 2.
`define CARDBUS_CIS_PTR_2 16'h0


// Name:           INT_PIN_MAPPING_2
// Default:        INTA
// Values:         None (0x0), INTA (0x1), INTB (0x2), INTC (0x3), INTD (0x4)
// Enabled:        CX_NFUNC > 2
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Pin Register. Function 2.
`define INT_PIN_MAPPING_2 8'h1


// Name:           IO_DECODE_32_2
// Default:        16-bit
// Values:         16-bit (0x0), 32-bit (0x1)
// Enabled:        CX_NFUNC > 2
// Parameter Type: Register Default Setting
// 
// Default value for the 32-Bit I/O Space bit in the I/O Base and I/O Limit Register. Function 2.
`define IO_DECODE_32_2 1'h0


// Name:           MEM_DECODE_64_2
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x1)
// Enabled:        CX_NFUNC > 2
// Parameter Type: Register Default Setting
// 
// Default value for the 64-Bit Memory Addressing bit in the Prefetchable Memory Base and Limit Register. Function 2.
`define MEM_DECODE_64_2 1'h0


// Name:           ROM_BAR_ENABLED_2
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 2
// Parameter Type: Register Default Setting
// 
// Include the expansion ROM BAR registers. Function 2.
`define ROM_BAR_ENABLED_2 1'h1


`define DEFAULT_ROM_BAR_ENABLED_2 1'h1


// Name:           ROM_MASK_2
// Default:        0xffff
// Values:         0x7ff, ..., 0xffffff
// Enabled:        CX_NFUNC > 2 && ROM_BAR_ENABLED_2==1
// Parameter Type: Register Default Setting
// 
// Determines the default of the Expansion ROM BAR Mask register. Function 2. 
//  - The BAR Mask register specifies which bits of the Expansion ROM BAR are non-writable by host software, which 
//  determines the size of the BAR. 
//  - The maximum value for ROM_MASK_N is 0xFFFFFF because the maximum space that can be claimed by an Expansion ROM BAR 
//  is 16 MB. 
//  - For example: 32'hFFFF =BAR size of 2^16.
`define ROM_MASK_2 32'hffff


// Name:           ROM_MASK_WRITABLE_2
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 2 && ROM_BAR_ENABLED_2==1
// Parameter Type: Feature Setting
// 
// Determines if the Expansion ROM BAR Mask register for function 2 is writable by application software. If writing to a 
// Expansion ROM BAR Mask register is enabled, your application can write to the Expansion ROM BAR Mask register through the 
// DBI by asserting dbi_cs2 in addition to dbi_cs.
`define ROM_MASK_WRITABLE_2 1'h0


// Name:           ROM_FUNC2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 2 && ROM_BAR_ENABLED_2==1 && TRGT1_POPULATE==1))
// Parameter Type: Register Default Setting
// 
// Direct incoming requests that pass filtering and match the Expansion ROM BAR of function 2 to either RTRGT0 or RTRGT1. 
//  - For example, setting ROM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for the Expansion ROM BAR of function 
//  0 to RTRGT1. 
//  - If TRGT1_POPULATE =0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define ROM_FUNC2_TARGET_MAP 1'h1


// Name:           CX_PCI_HEADER_DEFAULTS_VISIBLE_2
// Default:        0
// Values:         0, 1
// Parameter Type: Register Default Setting
// 
// Select here if you want to configure the defaults for the other PCI Standard Header registers for function 2. 
//  An extra window will appear under this page. To access it, click the plus/minus symbol in the hierarchy view on the 
//  left panel. 
//  This is optional but not usually recommended. 
//  You can also change these register defaults using the DBI before (or after) the link comes up.
`define CX_PCI_HEADER_DEFAULTS_VISIBLE_2 0

//-/ END:   PCI BASIC CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: BAR CONFIGURATION


// Name:           BAR0_ENABLED_2
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 2
// Parameter Type: Feature Setting
// 
// Include the BAR0 registers for function 2.
`define BAR0_ENABLED_2 1'h1


`define DEFAULT_BAR0_ENABLED_2 1'h1


// Name:           MEM0_SPACE_DECODER_2
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 2 && BAR0_ENABLED_2==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 2.
`define MEM0_SPACE_DECODER_2 1'h0


// Name:           PREFETCHABLE0_2
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 2 && BAR0_ENABLED_2==1 && MEM0_SPACE_DECODER_2==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 2.
`define PREFETCHABLE0_2 1'h0


// Name:           BAR0_TYPE_2
// Default:        64-bit ((MEM0_SPACE_DECODER_2==1 || BAR0_ENABLED_2==0) ? 0 : 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 2 && BAR0_ENABLED_2==1 && MEM0_SPACE_DECODER_2==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 2.
`define BAR0_TYPE_2 2'h2


// Name:           BAR0_SIZING_SCHEME_2
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 2 && BAR0_ENABLED_2==1
// Parameter Type: Feature Setting
// 
// BAR0 Function 2 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR0_SIZING_SCHEME_2 2'h0


// Name:           CX_BAR0_RESIZABLE_2
// Default:        0x0 ((BAR0_SIZING_SCHEME_2==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR0_ENABLED_2==1) && (MEM0_SPACE_DECODER_2==0)
// Parameter Type: Feature Setting
// 
// Defines BAR0 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR0 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR0_RESIZABLE_2 1'h0


// Name:           CX_BAR0_RESOURCE_AVAIL_2
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 2 && CX_BAR0_RESIZABLE_2==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR0 of function 2. 
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
// Example: 0x00000030 indicates that BAR0 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR0_RESOURCE_AVAIL_2 64'h10


// Name:           BAR0_MASK_WRITABLE_2
// Default:        0x0 ((BAR0_ENABLED_2==1 && BAR0_SIZING_SCHEME_2 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 2 && BAR0_ENABLED_2==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR0 Mask through DBI
`define BAR0_MASK_WRITABLE_2 1'h0


// Name:           BAR0_MASK_2
// Default:        0xfffff (CX_BAR0_RESIZABLE_2==1 ? [calc_bar_mask 
//                 CX_BAR0_RESOURCE_AVAIL_2] : MEM0_SPACE_DECODER_2==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 2 && BAR0_ENABLED_2==1 && MEM0_SPACE_DECODER_2==0 && 
//                 CX_BAR0_RESIZABLE_2==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR0 Mask register of function 2. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR0_MASK_2 64'hfffff


// Name:           MEM_FUNC2_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 2 && BAR0_ENABLED_2==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_0 of function 2 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming Requests for BAR0 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC2_BAR0_TARGET_MAP 1'h1


// Name:           BAR1_ENABLED_2
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 2 && BAR0_TYPE_2==0
// Parameter Type: Feature Setting
// 
// Include the BAR1 registers for function 2.
`define BAR1_ENABLED_2 1'h0


`define DEFAULT_BAR1_ENABLED_2 1'h0


// Name:           MEM1_SPACE_DECODER_2
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 2 && BAR1_ENABLED_2==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 2.
`define MEM1_SPACE_DECODER_2 1'h0


// Name:           PREFETCHABLE1_2
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 2 && BAR1_ENABLED_2==1 && MEM1_SPACE_DECODER_2==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 2.
`define PREFETCHABLE1_2 1'h0


// Name:           BAR1_TYPE_2
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 2.
`define BAR1_TYPE_2 2'h0


// Name:           BAR1_SIZING_SCHEME_2
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 2 && BAR1_ENABLED_2==1
// Parameter Type: Feature Setting
// 
// BAR1 Function 2 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR1_SIZING_SCHEME_2 2'h0


// Name:           CX_BAR1_RESIZABLE_2
// Default:        0x0 ((BAR1_SIZING_SCHEME_2==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR1_ENABLED_2==1) && (MEM1_SPACE_DECODER_2==0)
// Parameter Type: Feature Setting
// 
// Defines BAR1 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR1 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR1_RESIZABLE_2 1'h0


// Name:           CX_BAR1_RESOURCE_AVAIL_2
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 2 && CX_BAR1_RESIZABLE_2==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR1 of function 2. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR1 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR1_RESOURCE_AVAIL_2 32'h10


// Name:           BAR1_MASK_WRITABLE_2
// Default:        0x0 ((BAR1_ENABLED_2==1 && BAR1_SIZING_SCHEME_2 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 2 && BAR1_ENABLED_2==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR1 Mask through DBI
`define BAR1_MASK_WRITABLE_2 1'h0


// Name:           BAR1_MASK_2
// Default:        0xffff (CX_BAR1_RESIZABLE_2==1 ? [calc_bar_mask 
//                 CX_BAR1_RESOURCE_AVAIL_2] : MEM1_SPACE_DECODER_2==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 2 && BAR1_ENABLED_2==1 && MEM1_SPACE_DECODER_2==0 && 
//                 CX_BAR1_RESIZABLE_2==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR1 Mask register of function 2. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR1_MASK_2 32'hffff


// Name:           MEM_FUNC2_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 2 && BAR1_ENABLED_2==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_1 of function 2 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR1_TARGET_MAP to 1 maps all incoming Requests for BAR1 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC2_BAR1_TARGET_MAP 1'h1


// Name:           BAR2_ENABLED_2
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 2
// Parameter Type: Feature Setting
// 
// Include the BAR2 registers for function 2.
`define BAR2_ENABLED_2 1'h1


`define DEFAULT_BAR2_ENABLED_2 1'h1


// Name:           MEM2_SPACE_DECODER_2
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 2 && BAR2_ENABLED_2==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 2.
`define MEM2_SPACE_DECODER_2 1'h0


// Name:           PREFETCHABLE2_2
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 2 && BAR2_ENABLED_2==1 && MEM2_SPACE_DECODER_2==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 2.
`define PREFETCHABLE2_2 1'h0


// Name:           BAR2_TYPE_2
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 2 && BAR2_ENABLED_2==1 && MEM2_SPACE_DECODER_2==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 2.
`define BAR2_TYPE_2 2'h0


// Name:           BAR2_SIZING_SCHEME_2
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 2 && BAR2_ENABLED_2==1
// Parameter Type: Feature Setting
// 
// BAR2 Function 2 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR2_SIZING_SCHEME_2 2'h0


// Name:           CX_BAR2_RESIZABLE_2
// Default:        0x0 ((BAR2_SIZING_SCHEME_2==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR2_ENABLED_2==1) && (MEM2_SPACE_DECODER_2==0)
// Parameter Type: Feature Setting
// 
// Defines BAR2 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR2 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR2_RESIZABLE_2 1'h0


// Name:           CX_BAR2_RESOURCE_AVAIL_2
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 2 && CX_BAR2_RESIZABLE_2==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR2 of function 2. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR2 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR2_RESOURCE_AVAIL_2 64'h10


// Name:           BAR2_MASK_WRITABLE_2
// Default:        0x0 ((BAR2_ENABLED_2==1 && BAR2_SIZING_SCHEME_2 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 2 && BAR2_ENABLED_2==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR2 Mask through DBI
`define BAR2_MASK_WRITABLE_2 1'h0


// Name:           BAR2_MASK_2
// Default:        0xfffff (CX_BAR2_RESIZABLE_2==1 ? [calc_bar_mask 
//                 CX_BAR2_RESOURCE_AVAIL_2] : MEM2_SPACE_DECODER_2==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 2 && BAR2_ENABLED_2==1 && MEM2_SPACE_DECODER_2==0 && 
//                 CX_BAR2_RESIZABLE_2==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR2 Mask register of function 2. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR2_MASK_2 64'hfffff


// Name:           MEM_FUNC2_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 2 && BAR2_ENABLED_2==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_2 of function 2 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR2_TARGET_MAP to 1 maps all incoming requests for BAR2 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC2_BAR2_TARGET_MAP 1'h1


// Name:           BAR3_ENABLED_2
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 2 && BAR2_TYPE_2==0
// Parameter Type: Feature Setting
// 
// Include the BAR3 registers for function 2.
`define BAR3_ENABLED_2 1'h0



`define DEFAULT_BAR3_ENABLED_2 1'h0


// Name:           MEM3_SPACE_DECODER_2
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 2 && BAR3_ENABLED_2==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 2.
`define MEM3_SPACE_DECODER_2 1'h0


// Name:           PREFETCHABLE3_2
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 2 && BAR3_ENABLED_2==1 && MEM3_SPACE_DECODER_2==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 2.
`define PREFETCHABLE3_2 1'h0


// Name:           BAR3_TYPE_2
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 2.
`define BAR3_TYPE_2 2'h0


// Name:           BAR3_SIZING_SCHEME_2
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 2 && BAR3_ENABLED_2==1
// Parameter Type: Feature Setting
// 
// BAR3 Function 2 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR3_SIZING_SCHEME_2 2'h0


// Name:           CX_BAR3_RESIZABLE_2
// Default:        0x0 ((BAR3_SIZING_SCHEME_2==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR3_ENABLED_2==1) && (MEM3_SPACE_DECODER_2==0)
// Parameter Type: Feature Setting
// 
// Defines BAR3 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR3 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR3_RESIZABLE_2 1'h0


// Name:           CX_BAR3_RESOURCE_AVAIL_2
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 2 && CX_BAR3_RESIZABLE_2==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR3 of function 2. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR3 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR3_RESOURCE_AVAIL_2 32'h10


// Name:           BAR3_MASK_WRITABLE_2
// Default:        0x0 ((BAR3_ENABLED_2==1 && BAR3_SIZING_SCHEME_2 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 2 && BAR3_ENABLED_2==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR3 Mask through DBI
`define BAR3_MASK_WRITABLE_2 1'h0


// Name:           BAR3_MASK_2
// Default:        0xffff (CX_BAR3_RESIZABLE_2==1 ? [calc_bar_mask 
//                 CX_BAR3_RESOURCE_AVAIL_2] : MEM3_SPACE_DECODER_2==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 2 && BAR3_ENABLED_2==1 && MEM3_SPACE_DECODER_2==0 && 
//                 CX_BAR3_RESIZABLE_2==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR3 Mask register of function 2. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR3_MASK_2 32'hffff


// Name:           MEM_FUNC2_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 2 && BAR3_ENABLED_2==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_3 of function 2 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR3_TARGET_MAP to 1 maps all incoming requests for BAR3 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC2_BAR3_TARGET_MAP 1'h1


// Name:           BAR4_ENABLED_2
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 2
// Parameter Type: Feature Setting
// 
// Include the BAR4 registers for function 2.
`define BAR4_ENABLED_2 1'h1


`define DEFAULT_BAR4_ENABLED_2 1'h1



// Name:           MEM4_SPACE_DECODER_2
// Default:        I/O (BAR4_ENABLED_2==1)
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 2 && BAR4_ENABLED_2==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 2.
`define MEM4_SPACE_DECODER_2 1'h1


// Name:           PREFETCHABLE4_2
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 2 && BAR4_ENABLED_2==1 && MEM4_SPACE_DECODER_2==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 2.
`define PREFETCHABLE4_2 1'h0


// Name:           BAR4_TYPE_2
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 2 && BAR4_ENABLED_2==1 && MEM4_SPACE_DECODER_2==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 2.
`define BAR4_TYPE_2 2'h0


// Name:           BAR4_SIZING_SCHEME_2
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 2 && BAR4_ENABLED_2==1
// Parameter Type: Feature Setting
// 
// BAR4  Function 2 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR4_SIZING_SCHEME_2 2'h0


// Name:           CX_BAR4_RESIZABLE_2
// Default:        0x0 ((BAR4_SIZING_SCHEME_2==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR4_ENABLED_2==1) && (MEM4_SPACE_DECODER_2==0)
// Parameter Type: Feature Setting
// 
// Defines BAR4 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR4 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR4_RESIZABLE_2 1'h0


// Name:           CX_BAR4_RESOURCE_AVAIL_2
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 2 &&  CX_BAR4_RESIZABLE_2==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR4 of function 2. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR4 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR4_RESOURCE_AVAIL_2 64'h10


// Name:           BAR4_MASK_WRITABLE_2
// Default:        0x0 ((BAR4_ENABLED_2==1 && BAR4_SIZING_SCHEME_2 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 2 && BAR4_ENABLED_2==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR4 Mask through DBI
`define BAR4_MASK_WRITABLE_2 1'h0


// Name:           BAR4_MASK_2
// Default:        0xff (CX_BAR4_RESIZABLE_2==1 ? [calc_bar_mask 
//                 CX_BAR4_RESOURCE_AVAIL_2] : MEM4_SPACE_DECODER_2==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 2 && BAR4_ENABLED_2==1 && MEM4_SPACE_DECODER_2==0 && 
//                 CX_BAR4_RESIZABLE_2==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR4 Mask register of function 2. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR4_MASK_2 64'hff


// Name:           MEM_FUNC2_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 2 && BAR4_ENABLED_2==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_4 of function 2 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR4_TARGET_MAP to 1 maps all incoming requests for BAR4 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC2_BAR4_TARGET_MAP 1'h1


// Name:           BAR5_ENABLED_2
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 2 && BAR4_TYPE_2==0
// Parameter Type: Feature Setting
// 
// Include the BAR5 registers for function 2.
`define BAR5_ENABLED_2 1'h0


`define DEFAULT_BAR5_ENABLED_2 1'h0


// Name:           MEM5_SPACE_DECODER_2
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 2 && BAR5_ENABLED_2==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 2.
`define MEM5_SPACE_DECODER_2 1'h0


// Name:           PREFETCHABLE5_2
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 2 && BAR5_ENABLED_2==1 && MEM5_SPACE_DECODER_2==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 2.
`define PREFETCHABLE5_2 1'h0


// Name:           BAR5_TYPE_2
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 2.
`define BAR5_TYPE_2 2'h0


// Name:           BAR5_SIZING_SCHEME_2
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 2 && BAR5_ENABLED_2==1
// Parameter Type: Feature Setting
// 
// BAR5  Function 2 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR5_SIZING_SCHEME_2 2'h0


// Name:           CX_BAR5_RESIZABLE_2
// Default:        0x0 ((BAR5_SIZING_SCHEME_2==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR5_ENABLED_2==1) && (MEM5_SPACE_DECODER_2==0)
// Parameter Type: Feature Setting
// 
// Defines BAR5 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR5 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR5_RESIZABLE_2 1'h0


// Name:           CX_BAR5_RESOURCE_AVAIL_2
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 2 && CX_BAR5_RESIZABLE_2==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR5 of function 2. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR5 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR5_RESOURCE_AVAIL_2 32'h10


// Name:           BAR5_MASK_WRITABLE_2
// Default:        0x0 ((BAR5_ENABLED_2==1 && BAR5_SIZING_SCHEME_2 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 2 && BAR5_ENABLED_2==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR5 Mask through DBI
`define BAR5_MASK_WRITABLE_2 1'h0


// Name:           BAR5_MASK_2
// Default:        0xffff (CX_BAR5_RESIZABLE_2==1 ? [calc_bar_mask 
//                 CX_BAR5_RESOURCE_AVAIL_2] : MEM5_SPACE_DECODER_2==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 2 && BAR5_ENABLED_2==1 && MEM5_SPACE_DECODER_2==0 && 
//                 CX_BAR5_RESIZABLE_2==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR5 Mask register of function 2. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR5_MASK_2 32'hffff


// Name:           MEM_FUNC2_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 2 && BAR5_ENABLED_2==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_5 of function 2 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR5_TARGET_MAP to 1 maps all incoming requests for BAR5 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC2_BAR5_TARGET_MAP 1'h1


`define FUNC2_BARSIZE_32 128'h0


`define FUNC2_BARSIZE 128'h0


`define FUNC2_BAR0_BARSIZE_TRGT1 128'h0


`define FUNC2_BAR2_BARSIZE_TRGT1 128'h0


`define FUNC2_BAR4_BARSIZE_TRGT1 128'h0


`define FUNC2_BAR0_TRGT1_ADDR_WIDTH 1


`define FUNC2_BAR2_TRGT1_ADDR_WIDTH 1


`define FUNC2_BAR4_TRGT1_ADDR_WIDTH 1


// Name:         CX_NUM_RBARS_2
// Default:      0 ([calc_num_rbars CX_BAR0_RESIZABLE_2 CX_BAR1_RESIZABLE_2 
//               CX_BAR2_RESIZABLE_2 CX_BAR3_RESIZABLE_2 CX_BAR4_RESIZABLE_2 
//               CX_BAR5_RESIZABLE_2])
// Values:       -2147483648, ..., 2147483647
// 
// Number of resizable BARs
`define CX_NUM_RBARS_2 0

//-/ END:   BAR CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SR-IOV CAPABILITIES CONFIGURATION


// Name:           CX_VF_DEPENDENCY_LINK_2
// Default:        0x2
// Values:         0x0, ..., 0xff
// Enabled:        CX_VF_DEPENDENCY_LINK_SUPP && (CX_NFUNC > 2) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Specifies the 8-bit VF dependency link for PF2. Valid only if CX_VF_DEPENDENCY_LINK_SUPP=1.
`define CX_VF_DEPENDENCY_LINK_2 8'h2


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER1_2
// Default:        0x2 ((CX_NFUNC>=17) ? 32 : (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : 
//                 (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF2 in an ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER1_2 16'h2


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER0_2
// Default:        0x100
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF2 
//  in a non-ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER0_2 16'h100


// Name:           VF_STRIDE_ARI_CAP_HIER1_2
// Default:        0x2 (CX_VF_STRIDE_ALWAYS_ONE) ? 1 : ((CX_NFUNC>=17) ? 32 : 
//                 (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF2 in an ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER1_2 16'h2


// Name:           VF_STRIDE_ARI_CAP_HIER0_2
// Default:        0x100 ((CX_VF_STRIDE_ALWAYS_ONE) ? 0x0001 : 0x0100)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF2 in a non-ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER0_2 16'h100


// Name:           CX_VF_DEVICE_ID_2
// Default:        0x0 (CX_DEVICE_ID_2)
// Values:         0x0, ..., 0xffff
// Enabled:        (CX_NFUNC > 2) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 16-bit virtual function Device ID for PF2. 
//  It might be different from the physical function's.
`define CX_VF_DEVICE_ID_2 16'h0


// Name:           CX_VF_SUPP_PAGE_SIZE_2
// Default:        0x553
// Values:         0x553, ..., 0xffff
// Enabled:        (CX_NFUNC > 2) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 32-bit supported page sizes for virtual functions for PF2
`define CX_VF_SUPP_PAGE_SIZE_2 32'h553


// Name:           CX_ARI_CAP_HIER_PRSVD_2
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Specifies if ARI Capable Hierarchy bit is preserved across certain power state transitions 
//  Only present in PF0. Read Only Zero in this PF2.
`define CX_ARI_CAP_HIER_PRSVD_2 1'h0

//-/===========================================
//-/ START: VF BAR CONFIGURATION


// Name:           VF_BAR0_ENABLED_2
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 2)
// Parameter Type: Feature Setting
// 
// Include the VF BAR0 registers in PF2
`define VF_BAR0_ENABLED_2 1'h1


`define VF_DEFAULT_BAR0_ENABLED_2 1'h1


// Name:           VF_MEM0_SPACE_DECODER_2
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR0_ENABLED_2 && CX_SRIOV_ENABLE && (CX_NFUNC > 2)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Space Indicator 
//  ALWAYS set to Memory for Virtual Functions
`define VF_MEM0_SPACE_DECODER_2 1'h0


// Name:           VF_PREFETCHABLE0_2
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_2==1 && VF_MEM0_SPACE_DECODER_2==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 2)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Prefetchable 
//  When set indicates VF BAR0 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE0_2 1'h0


// Name:           VF_BAR0_TYPE_2
// Default:        64-bit ((VF_MEM0_SPACE_DECODER_2==1 || VF_BAR0_ENABLED_2==0) ? 0 : 
//                 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR0_ENABLED_2==1 && VF_MEM0_SPACE_DECODER_2==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 2)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 2; (bits [2:1] for a memory BAR).
`define VF_BAR0_TYPE_2 2'h2


// Name:           VF_BAR0_MASK_WRITABLE_2
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_2==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 2)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR0_MASK_WRITABLE_2 1'h0


// Name:           VF_BAR0_MASK_2
// Default:        0xfffff (VF_MEM0_SPACE_DECODER_2==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR0_ENABLED_2==1 && VF_MEM0_SPACE_DECODER_2==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 2)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Mask 
//  Determines the default of the VF BAR Mask register for PF2. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR0_MASK_2 64'hfffff


// Name:           VF_MEM_FUNC2_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR0_ENABLED_2==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 2)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF2 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC2_BAR0_TARGET_MAP 1'h1


// Name:           VF_BAR1_ENABLED_2
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        (VF_BAR0_TYPE_2==0)  && CX_SRIOV_ENABLE && (CX_NFUNC > 2)
// Parameter Type: Feature Setting
// 
// Include the VF BAR1 registers in PF2
`define VF_BAR1_ENABLED_2 1'h0


`define VF_DEFAULT_BAR1_ENABLED_2 1'h0


// Name:           VF_MEM1_SPACE_DECODER_2
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR1_ENABLED_2==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 2)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Space Indicator
`define VF_MEM1_SPACE_DECODER_2 1'h0


// Name:           VF_PREFETCHABLE1_2
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_2==1 && VF_MEM1_SPACE_DECODER_2==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 2)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Prefetchable 
//  When set indicates VF BAR1 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE1_2 1'h0


// Name:           VF_BAR1_TYPE_2
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 2; (bits [2:1] for a memory BAR).
`define VF_BAR1_TYPE_2 2'h0


// Name:           VF_BAR1_MASK_WRITABLE_2
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_2==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 2)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR1_MASK_WRITABLE_2 1'h0


// Name:           VF_BAR1_MASK_2
// Default:        0xffff (VF_MEM1_SPACE_DECODER_2==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR1_ENABLED_2==1 && VF_MEM1_SPACE_DECODER_2==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 2)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Mask 
//  Determines the default of the VF BAR Mask register for PF2. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR1_MASK_2 32'hffff


// Name:           VF_MEM_FUNC2_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR1_ENABLED_2==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 2)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF2 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC2_BAR1_TARGET_MAP 1'h1


// Name:           VF_BAR2_ENABLED_2
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 2)
// Parameter Type: Feature Setting
// 
// Include the VF BAR2 registers in PF2
`define VF_BAR2_ENABLED_2 1'h1


`define VF_DEFAULT_BAR2_ENABLED_2 1'h1


// Name:           VF_MEM2_SPACE_DECODER_2
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR2_ENABLED_2==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 2)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Memory Space Indicator
`define VF_MEM2_SPACE_DECODER_2 1'h0


// Name:           VF_PREFETCHABLE2_2
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_2==1 && VF_MEM2_SPACE_DECODER_2==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 2)
// Parameter Type: Register Default Setting
// 
// BAR2 Memory Prefetchable 
//  When set indicates VF BAR2 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE2_2 1'h0


// Name:           VF_BAR2_TYPE_2
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR2_ENABLED_2==1 && VF_MEM2_SPACE_DECODER_2==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 2)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 2; (bits [2:1] for a memory BAR).
`define VF_BAR2_TYPE_2 2'h0


// Name:           VF_BAR2_MASK_WRITABLE_2
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_2==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 2)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR2_MASK_WRITABLE_2 1'h0


// Name:           VF_BAR2_MASK_2
// Default:        0xfffff (VF_MEM2_SPACE_DECODER_2==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR2_ENABLED_2==1 && VF_MEM2_SPACE_DECODER_2==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 2)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Mask 
//  Determines the default of the VF BAR Mask register for PF2. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR2_MASK_2 64'hfffff


// Name:           VF_MEM_FUNC2_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR2_ENABLED_2==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 2)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF2 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC2_BAR2_TARGET_MAP 1'h1


// Name:           VF_BAR3_ENABLED_2
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_TYPE_2==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 2)
// Parameter Type: Feature Setting
// 
// Include the VF BAR3 registers in PF2
`define VF_BAR3_ENABLED_2 1'h0


`define VF_DEFAULT_BAR3_ENABLED_2 1'h0


// Name:           VF_MEM3_SPACE_DECODER_2
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR3_ENABLED_2==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 2)
// Parameter Type: Register Default Setting
// 
// BAR3 Memory Space Indicator
`define VF_MEM3_SPACE_DECODER_2 1'h0


// Name:           VF_PREFETCHABLE3_2
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_2==1 && VF_MEM3_SPACE_DECODER_2==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 2)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Memory Prefetchable 
//  When set indicates VF BAR3 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE3_2 1'h0


// Name:           VF_BAR3_TYPE_2
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 2; (bits [2:1] for a memory BAR).
`define VF_BAR3_TYPE_2 2'h0


// Name:           VF_BAR3_MASK_WRITABLE_2
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_2==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 2)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR3_MASK_WRITABLE_2 1'h0


// Name:           VF_BAR3_MASK_2
// Default:        0xffff (VF_MEM3_SPACE_DECODER_2==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR3_ENABLED_2==1 && VF_MEM3_SPACE_DECODER_2==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 2)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Mask 
//  Determines the default of the VF BAR Mask register for PF2. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR3_MASK_2 32'hffff


// Name:           VF_MEM_FUNC2_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR3_ENABLED_2==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 2)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF2 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC2_BAR3_TARGET_MAP 1'h1


// Name:           VF_BAR4_ENABLED_2
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 2)
// Parameter Type: Feature Setting
// 
// Include the VF BAR4 registers in PF2
`define VF_BAR4_ENABLED_2 1'h1


`define VF_DEFAULT_BAR4_ENABLED_2 1'h1


// Name:           VF_MEM4_SPACE_DECODER_2
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR4_ENABLED_2==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 2)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Space Indicator
`define VF_MEM4_SPACE_DECODER_2 1'h0


// Name:           VF_PREFETCHABLE4_2
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_2==1 && VF_MEM4_SPACE_DECODER_2==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 2)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Prefetchable 
//  When set indicates VF BAR4 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE4_2 1'h0


// Name:           VF_BAR4_TYPE_2
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR4_ENABLED_2==1 && VF_MEM4_SPACE_DECODER_2==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 2)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 2; (bits [2:1] for a memory BAR).
`define VF_BAR4_TYPE_2 2'h0


// Name:           VF_BAR4_MASK_WRITABLE_2
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_2==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 2)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR4_MASK_WRITABLE_2 1'h0


// Name:           VF_BAR4_MASK_2
// Default:        0xfff (VF_MEM4_SPACE_DECODER_2==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR4_ENABLED_2==1 && VF_MEM4_SPACE_DECODER_2==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 2)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Mask 
//  Determines the default of the VF BAR Mask register for PF2. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR4_MASK_2 64'hfff


// Name:           VF_MEM_FUNC2_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR4_ENABLED_2==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 2)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF2 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC2_BAR4_TARGET_MAP 1'h1


// Name:           VF_BAR5_ENABLED_2
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_TYPE_2==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 2)
// Parameter Type: Feature Setting
// 
// Include the VF BAR5 registers in PF2
`define VF_BAR5_ENABLED_2 1'h0


`define VF_DEFAULT_BAR5_ENABLED_2 1'h0


// Name:           VF_MEM5_SPACE_DECODER_2
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR5_ENABLED_2==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 2)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Space Indicator
`define VF_MEM5_SPACE_DECODER_2 1'h0


// Name:           VF_PREFETCHABLE5_2
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_2==1 && VF_MEM5_SPACE_DECODER_2==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 2)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Prefetchable 
//  When set indicates VF BAR5 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE5_2 1'h0


// Name:           VF_BAR5_TYPE_2
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 2; (bits [2:1] for a memory BAR).
`define VF_BAR5_TYPE_2 2'h0


// Name:           VF_BAR5_MASK_WRITABLE_2
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_2==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 2)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR5_MASK_WRITABLE_2 1'h0


// Name:           VF_BAR5_MASK_2
// Default:        0xffff (VF_MEM5_SPACE_DECODER_2==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR5_ENABLED_2==1 && VF_MEM5_SPACE_DECODER_2==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 2)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Mask 
//  Determines the default of the VF BAR Mask register for PF2. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR5_MASK_2 32'hffff


// Name:           VF_MEM_FUNC2_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR5_ENABLED_2==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 2)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF2 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC2_BAR5_TARGET_MAP 1'h1


`define VF_FUNC2_BARSIZE_32 128'h101000


`define VF_FUNC2_BARSIZE 128'h201000

//-/ END:   VF BAR CONFIGURATION
//-/===========================================

//-/ END:   SR-IOV CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: TPH CAPABILITIES CONFIGURATION


// Name:           TPH_IVEC_2
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Interrupt Vector Mode. If set indicates that the function supports the Interrupt Vector 
// Mode of operation. Function 2.
`define TPH_IVEC_2 1'h0


// Name:           TPH_DS_2
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Device Specific Mode. If set indicates that the function supports the Device Specific Mode 
// of operation. Function 2.
`define TPH_DS_2 1'h0


// Name:           TPH_ST_TABLE_LOC_2
// Default:        Not Present
// Values:         Not Present (0), TPH Requester Capability Structure (1), MSI-X 
//                 Table Structure (2)
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_DS_2 || TPH_IVEC_2))
// Parameter Type: Feature Setting
// 
// TLP Processing Hints Steering Tag Table Location. Value indicates if and where the ST Table is located. Function 2.
`define TPH_ST_TABLE_LOC_2 0

//located in the TPH Requester Capability structure. Please reduce the ST Table Size for this mode of operation"

// Name:           TPH_ST_TABLE_SIZE_2
// Default:        1
// Values:         1, ..., 2048
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_ST_TABLE_LOC_2 != 0))
// Parameter Type: Feature Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define TPH_ST_TABLE_SIZE_2 1


`define TPH_ST_TABLE_DEPTH_2 0

//-/ END:   TPH CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: ATS CAPABILITIES CONFIGURATION


// Name:           ATS_INV_Q_DPTH_2
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// The number of Invalidate Requests that the Function can accept before putting backpressure on the upstream connection. A 
// value of 0 indicates the function can accept 32 Invalidate requests. Function 2.
`define ATS_INV_Q_DPTH_2 5'd0


// Name:           ATS_STU_2
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// This value indicates to the Function the minimum number of 4096-byte blocks that is indicated in a Translation 
// Completion or Invalidate Request. This is a power of 2 multiplier and the number of blocks is 2^STU. A value of 0 indicates 1 block 
// and a value of 31 indicates 2^31 blocks (or 8 TB total). Function 2.
`define ATS_STU_2 5'd0

//-/ END:   ATS CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PRS CAPABILITIES CONFIGURATION


// Name:           CX_PRS_OUTSTANDING_CAPACITY_VALUE_2
// Default:        0x1
// Values:         0x0, ..., 0xffffffff
// Enabled:        (CX_PRS_ENABLE==1) && (CX_NFUNC > 2)
// Parameter Type: Register Default Setting
// 
// Register default for PRS Outstanding Capacity in PF2. 
// For more details, see the PRS_OUTSTANDING_CAPACITY field in the PRS_REQ_CAPACITY_REG register.
`define CX_PRS_OUTSTANDING_CAPACITY_VALUE_2 32'h1

//-/ END:   PRS CAPABILITIES CONFIGURATION
//-/===========================================


//-/===========================================
//--- START: RN


// Name:           CX_RN_IMM_VALUE_2
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 2)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for PF2.
`define CX_RN_IMM_VALUE_2 1'h0


// Name:           CX_RN_IMM_D0_VALUE_2
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 2)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for PF2.
`define CX_RN_IMM_D0_VALUE_2 1'h0


// Name:           CX_RN_FRS_VALUE_2
// Default:        0x0 (CX_RN_FRS_SUPPORTED==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_FRS_SUPPORTED==1) && (CX_NFUNC > 2)
// Parameter Type: Feature Setting
// 
// Function Readiness Status messaging supported for function PF2.
`define CX_RN_FRS_VALUE_2 1'h0


// Name:           CX_RN_RTR_VALID_2
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 2)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF2.
`define CX_RN_RTR_VALID_2 1'h0


// Name:           CX_RN_RTR_DL_UP_VALUE_2
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 2)
// Parameter Type: Register Default Setting
// 
// Register default for RTR DL Up Time field in PF2.
`define CX_RN_RTR_DL_UP_VALUE_2 12'h0


// Name:           CX_RN_RTR_RESET_VALUE_2
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 2)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF2.
`define CX_RN_RTR_RESET_VALUE_2 12'h0


// Name:           CX_RN_RTR_D3D0_VALUE_2
// Default:        0x0
// Values:         0x0, ..., 0x80a
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 2)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF2.
`define CX_RN_RTR_D3D0_VALUE_2 12'h0


// Name:           CX_RN_RTR_FLR_VALUE_2
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_FLR_ENABLE==1) && (CX_NFUNC > 2)
// Parameter Type: Register Default Setting
// 
// Register default for RTR FLR Time field in PF2.
`define CX_RN_RTR_FLR_VALUE_2 12'h0


// Name:           VF_RN_IMM_VALUE_2
// Default:        0x0 (CX_RN_IMM_VALUE_2 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 2))
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for VFs in PF2.
`define VF_RN_IMM_VALUE_2 1'h0


// Name:           VF_RN_IMM_D0_VALUE_2
// Default:        0x0 (CX_RN_IMM_D0_VALUE_2 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 2))
// Parameter Type: Register Default Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for VFs in PF2.
`define VF_RN_IMM_D0_VALUE_2 1'h0


// Name:           VF_RN_RTR_VALID_2
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 2) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF2 VFs.
`define VF_RN_RTR_VALID_2 1'h0


// Name:           VF_RN_RTR_RESET_VALUE_2
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_2)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 2) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF2 VFS.
`define VF_RN_RTR_RESET_VALUE_2 12'h0


// Name:           VF_RN_RTR_D3D0_VALUE_2
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_2)
// Values:         0x0, ..., 0x80a
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 2) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF2 VFS.
`define VF_RN_RTR_D3D0_VALUE_2 12'h0


// Name:           VF_RN_RTR_FLR_VALUE_2
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_2)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 2) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF2 VFs.
`define VF_RN_RTR_FLR_VALUE_2 12'h0


// Name:           EXT_VF_RN_RTR_VALID_2
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 2) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF2 VFs.
`define EXT_VF_RN_RTR_VALID_2 1'h0


// Name:           EXT_VF_RN_RTR_RESET_VALUE_2
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_2)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 2) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF2 VFS.
`define EXT_VF_RN_RTR_RESET_VALUE_2 12'h0


// Name:           EXT_VF_RN_RTR_D3D0_VALUE_2
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_2)
// Values:         0x0, ..., 0x80a
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 2) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF2 VFS.
`define EXT_VF_RN_RTR_D3D0_VALUE_2 12'h0


// Name:           EXT_VF_RN_RTR_FLR_VALUE_2
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_2)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 2) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF2 VFs.
`define EXT_VF_RN_RTR_FLR_VALUE_2 12'h0

//-/ END:   RN
//-/===========================================

//-/ START: LN CAPABILITIES CONFIGURATION
//-/===========================================


// Name:           CX_LN_REG_MAX_VALUE_2
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 2))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_64_SUPPORTED field in the LNR_CAP_OFF register for PF2.
`define CX_LN_REG_MAX_VALUE_2 5'h0


// Name:           CX_LN_128_SUPPORTED_VALUE_2
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 2))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_128_SUPPORTED field in the LNR_CAP_OFF register for PF2.
`define CX_LN_128_SUPPORTED_VALUE_2 1'h0


// Name:           CX_LN_64_SUPPORTED_VALUE_2
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 2))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_REGISTRATION_MAX field in the LNR_CAP_OFF register for PF2.
`define CX_LN_64_SUPPORTED_VALUE_2 1'h0

//-/ END:   LN CAPABILITIES CONFIGURATION
//-/===========================================




//-/==========================================
//-/ End FUNC2 Config
//-/==========================================

//-/===========================================
//-/ Function 3 Configuration Registers
//-/ ==========================================


// Name:         FUNC_3
// Default:      0 ((CX_NFUNC > 3) ? 1 : 0)
// Values:       0, 1
// 
// This parameter indicates that Function 3 is present
// `define FUNC_3

//-/===========================================
//-/ START: PCI-E CAPABILITIES CONFIGURATION


// Name:           PCIE_CAP_INT_MSG_NUM_3
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 3
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Message Number field in the PCI Express Capabilities Register. Function 3.
`define PCIE_CAP_INT_MSG_NUM_3 5'h0


// Name:           SLOT_IMPLEMENTED_3
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_NFUNC > 3))
// Parameter Type: Register Default Setting
// 
// Indicates that the PCI Express link associated with this Port is connected to a slot. Function 3.
`define SLOT_IMPLEMENTED_3 1'h0


// Name:           DEFAULT_PHANTOM_FUNC_SUPPORTED_3
// Default:        0x0
// Values:         0x0, ..., 0x3
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_PHANTOM_FUNC_SUPPORTED_3 2'h0


// Name:           DEFAULT_EXT_TAG_FIELD_SUPPORTED_3
// Default:        0x0 (DEFAULT_EXT_TAG_FIELD_SUPPORTED_0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 3
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_EXT_TAG_FIELD_SUPPORTED_3 1'h0



// Name:           DEFAULT_ATT_BUTT_PRE_3
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 3
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Button is present
`define DEFAULT_ATT_BUTT_PRE_3 1'h0


// Name:           DEFAULT_ATT_IND_PRE_3
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 3
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Indicator is present
`define DEFAULT_ATT_IND_PRE_3 1'h0


// Name:           DEFAULT_PWR_IND_PRE_3
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 3
// Parameter Type: Register Default Setting
// 
// When set indicates that a Power Indicator is present
`define DEFAULT_PWR_IND_PRE_3 1'h0


// Name:           DEFAULT_NO_SNOOP_SUPPORTED_3
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 3
// Parameter Type: Register Default Setting
// 
// Default value for the Enable No Snoop bit in the Device Control Register. Function 3.
`define DEFAULT_NO_SNOOP_SUPPORTED_3 1'h0


// Name:           ROOT_RCB_3
// Default:        64-bit
// Values:         64-bit (0x0), 128-bit (0x1)
// Parameter Type: Register Default Setting
// 
// Default value for the Read Completion Boundary (RCB) bit in the Link Control Register.
`define ROOT_RCB_3 1'h0


//-/ END:   PCI-E CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: MSI-X CAPABILITIES CONFIGURATION


// Name:           MSIX_TABLE_SIZE_3
// Default:        0x0
// Values:         0x0, ..., 0x7ff
// Enabled:        CX_NFUNC > 3 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the MSI-X Table Size field in the MSI-X Control Register. Function 3.
`define MSIX_TABLE_SIZE_3 11'h0


// Name:           MSIX_TABLE_BIR_3
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 3 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table BAR Indicator Register (BIR) field in the MSI-X Table Offset and BIR Register. Function 3.
`define MSIX_TABLE_BIR_3 3'h0


// Name:           MSIX_TABLE_OFFSET_3
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 3 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table Offset field in the MSI-X Table Offset and BIR Register. Function 3.
`define MSIX_TABLE_OFFSET_3 29'h0


// Name:           MSIX_PBA_BIR_3
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 3 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Pending Bit Array (PBA) BIR field in the MSI-X PBA Offset and BIR Register. Function 3.
`define MSIX_PBA_BIR_3 7'h0


// Name:           MSIX_PBA_OFFSET_3
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 3 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the PBA Offset field in the MSI-X PBA Offset and BIR Register. Function 3.
`define MSIX_PBA_OFFSET_3 29'h0

//-/ END:   MSI-X CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SATA CAPABILITIES CONFIGURATION


// Name:         SATA_HBA_OFFSET_3
// Default:      0x0
// Values:       0x0, ..., 0xfffff
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA Offset. Base address of the SATA HBA registers, 
//  as an offset from the base address of the BAR indicated 
//  by the SATA BAR field.
`define SATA_HBA_OFFSET_3 20'h0


// Name:         SATA_BAR_3
// Default:      0x0
// Values:       0x0, ..., 0xf
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA BAR. The bar that maps to SATA HBA registers,
`define SATA_BAR_3 4'h0

//-/ END:   SATA CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: AER CAPABILITIES CONFIGURATION


// Name:           DEFAULT_ECRC_CHK_CAP_3
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 3 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Check Capable bit in the Advanced Capabilities and Control Register. Function 3.
`define DEFAULT_ECRC_CHK_CAP_3 1'h1


// Name:           DEFAULT_ECRC_GEN_CAP_3
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 3 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Generation Capability bit in the Advanced Capabilities and Control Register. Function 3.
`define DEFAULT_ECRC_GEN_CAP_3 1'h1


// Name:           AER_INT_MSG_NUM_3
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Parameter Type: Register Default Setting
// 
// Default value for the Advanced Error Interrupt Message Number field of the Root Error Status Register. Function 3.
`define AER_INT_MSG_NUM_3 5'h0



// Name:           CX_HDR_LOG_DEPTH_3
// Default:        0x1
// Values:         0x1, 0x2, 0x4
// Enabled:        CX_NFUNC > 3 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Feature Setting.
// 
// Header Log Depth
`define CX_HDR_LOG_DEPTH_3 3'h1


`define CX_MULTIPLE_HDR_REC_CAP_3 1'h0

//-/ END:   AER CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PM CAPABILITIES CONFIGURATION


// Name:           PME_SUPPORT_3
// Default:        0x1b
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 3
// Parameter Type: Register Default Setting
// 
// Default value for the PME_Support field in the Power Management Capabilities Register. Function 3.
`define PME_SUPPORT_3 5'h1b


// Name:           D1_SUPPORT_3
// Default:        true
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 3
// Parameter Type: Register Default Setting
// 
// Default value for the D1 Support bit in the Power Management Capabilities Register. Function 3.
`define D1_SUPPORT_3 1'h1


// Name:           D2_SUPPORT_3
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 3
// Parameter Type: Register Default Setting
// 
// Default value for the D2 Support bit in the Power Management Capabilities Register. Function 3.
`define D2_SUPPORT_3 1'h0


// Name:           DEV_SPEC_INIT_3
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 3
// Parameter Type: Register Default Setting
// 
// Default value for the Device Specific Initialization (DSI) bit in the Power Management Capabilities Register. Function 
// 3.
`define DEV_SPEC_INIT_3 1'h0


// Name:           AUX_CURRENT_3
// Default:        375mA
// Values:         0mA (0x0), 55mA (0x1), 100mA (0x2), 160mA (0x3), 220mA (0x4), 270mA 
//                 (0x5), 320mA (0x6), 375mA (0x7)
// Enabled:        CX_NFUNC > 3
// Parameter Type: Register Default Setting
// 
// Default value for the Aux Current field in the Power Management Capabilities Register. Function 3.
`define AUX_CURRENT_3 3'h7


// Name:           DEFAULT_NO_SOFT_RESET_3
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 3
// Parameter Type: Register Default Setting
// 
// Default value for the No Soft Reset bit in the Power Management Control and Status Register. When set, you should not 
// reset any controller registers when transitioning from D3hot to D0. Therefore, you should not assert the non_sticky_rst_n 
// and sticky_rst_n inputs. Function 3.
`define DEFAULT_NO_SOFT_RESET_3 1'h0

//-/ END:   PM CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PCI BASIC CONFIGURATION


// Name:           CX_DEVICE_ID_3
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 3
// Parameter Type: Register Default Setting
// 
// Default value for the Device ID field in the Device ID and Vendor ID Register. Function 3.
`define CX_DEVICE_ID_3 16'h0


// Name:           CX_VENDOR_ID_3
// Default:        0x16c3
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 3
// Parameter Type: Register Default Setting
// 
// Default value for the Vendor ID field in the Device ID and Vendor ID Register. Function 3.
`define CX_VENDOR_ID_3 16'h16c3


// Name:           CX_REVISION_ID_3
// Default:        0x1
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 3
// Parameter Type: Register Default Setting
// 
// Default value for the Revision ID field in the Revision ID Register. Function 3.
`define CX_REVISION_ID_3 8'h1


// Name:           SUBSYS_DEV_ID_3
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 3
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 3.
`define SUBSYS_DEV_ID_3 16'h0


// Name:           SUBSYS_VENDOR_ID_3
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 3
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem Vendor ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 3.
`define SUBSYS_VENDOR_ID_3 16'h0


// Name:           BASE_CLASS_CODE_3
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 3
// Parameter Type: Register Default Setting
// 
// Default value for the Base Class Code field in the Class Code Register. Function 3.
`define BASE_CLASS_CODE_3 8'h0


// Name:           SUB_CLASS_CODE_3
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 3
// Parameter Type: Register Default Setting
// 
// Default value for the Subclass Code field in the Class Code Register. Function 3.
`define SUB_CLASS_CODE_3 8'h0


// Name:           IF_CODE_3
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 3
// Parameter Type: Register Default Setting
// 
// Default value for the Programming Interface field in the Class Code Register. Function 3.
`define IF_CODE_3 8'h0


// Name:           CARDBUS_CIS_PTR_3
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 3
// Parameter Type: Register Default Setting
// 
// Default value for the CardBus CIS Pointer Register. Function 3.
`define CARDBUS_CIS_PTR_3 16'h0


// Name:           INT_PIN_MAPPING_3
// Default:        INTA
// Values:         None (0x0), INTA (0x1), INTB (0x2), INTC (0x3), INTD (0x4)
// Enabled:        CX_NFUNC > 3
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Pin Register. Function 3.
`define INT_PIN_MAPPING_3 8'h1


// Name:           IO_DECODE_32_3
// Default:        16-bit
// Values:         16-bit (0x0), 32-bit (0x1)
// Enabled:        CX_NFUNC > 3
// Parameter Type: Register Default Setting
// 
// Default value for the 32-Bit I/O Space bit in the I/O Base and I/O Limit Register. Function 3.
`define IO_DECODE_32_3 1'h0


// Name:           MEM_DECODE_64_3
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x1)
// Enabled:        CX_NFUNC > 3
// Parameter Type: Register Default Setting
// 
// Default value for the 64-Bit Memory Addressing bit in the Prefetchable Memory Base and Limit Register. Function 3.
`define MEM_DECODE_64_3 1'h0


// Name:           ROM_BAR_ENABLED_3
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 3
// Parameter Type: Register Default Setting
// 
// Include the expansion ROM BAR registers. Function 3.
`define ROM_BAR_ENABLED_3 1'h1


`define DEFAULT_ROM_BAR_ENABLED_3 1'h1


// Name:           ROM_MASK_3
// Default:        0xffff
// Values:         0x7ff, ..., 0xffffff
// Enabled:        CX_NFUNC > 3 && ROM_BAR_ENABLED_3==1
// Parameter Type: Register Default Setting
// 
// Determines the default of the Expansion ROM BAR Mask register. Function 3. 
//  - The BAR Mask register specifies which bits of the Expansion ROM BAR are non-writable by host software, which 
//  determines the size of the BAR. 
//  - The maximum value for ROM_MASK_N is 0xFFFFFF because the maximum space that can be claimed by an Expansion ROM BAR 
//  is 16 MB. 
//  - For example: 32'hFFFF =BAR size of 2^16.
`define ROM_MASK_3 32'hffff


// Name:           ROM_MASK_WRITABLE_3
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 3 && ROM_BAR_ENABLED_3==1
// Parameter Type: Feature Setting
// 
// Determines if the Expansion ROM BAR Mask register for function 3 is writable by application software. If writing to a 
// Expansion ROM BAR Mask register is enabled, your application can write to the Expansion ROM BAR Mask register through the 
// DBI by asserting dbi_cs2 in addition to dbi_cs.
`define ROM_MASK_WRITABLE_3 1'h0


// Name:           ROM_FUNC3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 3 && ROM_BAR_ENABLED_3==1 && TRGT1_POPULATE==1))
// Parameter Type: Register Default Setting
// 
// Direct incoming requests that pass filtering and match the Expansion ROM BAR of function 3 to either RTRGT0 or RTRGT1. 
//  - For example, setting ROM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for the Expansion ROM BAR of function 
//  0 to RTRGT1. 
//  - If TRGT1_POPULATE =0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define ROM_FUNC3_TARGET_MAP 1'h1


// Name:           CX_PCI_HEADER_DEFAULTS_VISIBLE_3
// Default:        0
// Values:         0, 1
// Parameter Type: Register Default Setting
// 
// Select here if you want to configure the defaults for the other PCI Standard Header registers for function 3. 
//  An extra window will appear under this page. To access it, click the plus/minus symbol in the hierarchy view on the 
//  left panel. 
//  This is optional but not usually recommended. 
//  You can also change these register defaults using the DBI before (or after) the link comes up.
`define CX_PCI_HEADER_DEFAULTS_VISIBLE_3 0

//-/ END:   PCI BASIC CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: BAR CONFIGURATION


// Name:           BAR0_ENABLED_3
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 3
// Parameter Type: Feature Setting
// 
// Include the BAR0 registers for function 3.
`define BAR0_ENABLED_3 1'h1


`define DEFAULT_BAR0_ENABLED_3 1'h1


// Name:           MEM0_SPACE_DECODER_3
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 3 && BAR0_ENABLED_3==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 3.
`define MEM0_SPACE_DECODER_3 1'h0


// Name:           PREFETCHABLE0_3
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 3 && BAR0_ENABLED_3==1 && MEM0_SPACE_DECODER_3==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 3.
`define PREFETCHABLE0_3 1'h0


// Name:           BAR0_TYPE_3
// Default:        64-bit ((MEM0_SPACE_DECODER_3==1 || BAR0_ENABLED_3==0) ? 0 : 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 3 && BAR0_ENABLED_3==1 && MEM0_SPACE_DECODER_3==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 3.
`define BAR0_TYPE_3 2'h2


// Name:           BAR0_SIZING_SCHEME_3
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 3 && BAR0_ENABLED_3==1
// Parameter Type: Feature Setting
// 
// BAR0 Function 3 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR0_SIZING_SCHEME_3 2'h0


// Name:           CX_BAR0_RESIZABLE_3
// Default:        0x0 ((BAR0_SIZING_SCHEME_3==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR0_ENABLED_3==1) && (MEM0_SPACE_DECODER_3==0)
// Parameter Type: Feature Setting
// 
// Defines BAR0 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR0 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR0_RESIZABLE_3 1'h0


// Name:           CX_BAR0_RESOURCE_AVAIL_3
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 3 && CX_BAR0_RESIZABLE_3==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR0 of function 3. 
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
// Example: 0x00000030 indicates that BAR0 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR0_RESOURCE_AVAIL_3 64'h10


// Name:           BAR0_MASK_WRITABLE_3
// Default:        0x0 ((BAR0_ENABLED_3==1 && BAR0_SIZING_SCHEME_3 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 3 && BAR0_ENABLED_3==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR0 Mask through DBI
`define BAR0_MASK_WRITABLE_3 1'h0


// Name:           BAR0_MASK_3
// Default:        0xfffff (CX_BAR0_RESIZABLE_3==1 ? [calc_bar_mask 
//                 CX_BAR0_RESOURCE_AVAIL_3] : MEM0_SPACE_DECODER_3==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 3 && BAR0_ENABLED_3==1 && MEM0_SPACE_DECODER_3==0 && 
//                 CX_BAR0_RESIZABLE_3==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR0 Mask register of function 3. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR0_MASK_3 64'hfffff


// Name:           MEM_FUNC3_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 3 && BAR0_ENABLED_3==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_0 of function 3 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming Requests for BAR0 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC3_BAR0_TARGET_MAP 1'h1


// Name:           BAR1_ENABLED_3
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 3 && BAR0_TYPE_3==0
// Parameter Type: Feature Setting
// 
// Include the BAR1 registers for function 3.
`define BAR1_ENABLED_3 1'h0


`define DEFAULT_BAR1_ENABLED_3 1'h0


// Name:           MEM1_SPACE_DECODER_3
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 3 && BAR1_ENABLED_3==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 3.
`define MEM1_SPACE_DECODER_3 1'h0


// Name:           PREFETCHABLE1_3
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 3 && BAR1_ENABLED_3==1 && MEM1_SPACE_DECODER_3==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 3.
`define PREFETCHABLE1_3 1'h0


// Name:           BAR1_TYPE_3
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 3.
`define BAR1_TYPE_3 2'h0


// Name:           BAR1_SIZING_SCHEME_3
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 3 && BAR1_ENABLED_3==1
// Parameter Type: Feature Setting
// 
// BAR1 Function 3 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR1_SIZING_SCHEME_3 2'h0


// Name:           CX_BAR1_RESIZABLE_3
// Default:        0x0 ((BAR1_SIZING_SCHEME_3==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR1_ENABLED_3==1) && (MEM1_SPACE_DECODER_3==0)
// Parameter Type: Feature Setting
// 
// Defines BAR1 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR1 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR1_RESIZABLE_3 1'h0


// Name:           CX_BAR1_RESOURCE_AVAIL_3
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 3 && CX_BAR1_RESIZABLE_3==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR1 of function 3. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR1 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR1_RESOURCE_AVAIL_3 32'h10


// Name:           BAR1_MASK_WRITABLE_3
// Default:        0x0 ((BAR1_ENABLED_3==1 && BAR1_SIZING_SCHEME_3 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 3 && BAR1_ENABLED_3==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR1 Mask through DBI
`define BAR1_MASK_WRITABLE_3 1'h0


// Name:           BAR1_MASK_3
// Default:        0xffff (CX_BAR1_RESIZABLE_3==1 ? [calc_bar_mask 
//                 CX_BAR1_RESOURCE_AVAIL_3] : MEM1_SPACE_DECODER_3==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 3 && BAR1_ENABLED_3==1 && MEM1_SPACE_DECODER_3==0 && 
//                 CX_BAR1_RESIZABLE_3==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR1 Mask register of function 3. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR1_MASK_3 32'hffff


// Name:           MEM_FUNC3_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 3 && BAR1_ENABLED_3==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_1 of function 3 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR1_TARGET_MAP to 1 maps all incoming Requests for BAR1 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC3_BAR1_TARGET_MAP 1'h1


// Name:           BAR2_ENABLED_3
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 3
// Parameter Type: Feature Setting
// 
// Include the BAR2 registers for function 3.
`define BAR2_ENABLED_3 1'h1


`define DEFAULT_BAR2_ENABLED_3 1'h1


// Name:           MEM2_SPACE_DECODER_3
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 3 && BAR2_ENABLED_3==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 3.
`define MEM2_SPACE_DECODER_3 1'h0


// Name:           PREFETCHABLE2_3
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 3 && BAR2_ENABLED_3==1 && MEM2_SPACE_DECODER_3==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 3.
`define PREFETCHABLE2_3 1'h0


// Name:           BAR2_TYPE_3
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 3 && BAR2_ENABLED_3==1 && MEM2_SPACE_DECODER_3==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 3.
`define BAR2_TYPE_3 2'h0


// Name:           BAR2_SIZING_SCHEME_3
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 3 && BAR2_ENABLED_3==1
// Parameter Type: Feature Setting
// 
// BAR2 Function 3 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR2_SIZING_SCHEME_3 2'h0


// Name:           CX_BAR2_RESIZABLE_3
// Default:        0x0 ((BAR2_SIZING_SCHEME_3==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR2_ENABLED_3==1) && (MEM2_SPACE_DECODER_3==0)
// Parameter Type: Feature Setting
// 
// Defines BAR2 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR2 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR2_RESIZABLE_3 1'h0


// Name:           CX_BAR2_RESOURCE_AVAIL_3
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 3 && CX_BAR2_RESIZABLE_3==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR2 of function 3. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR2 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR2_RESOURCE_AVAIL_3 64'h10


// Name:           BAR2_MASK_WRITABLE_3
// Default:        0x0 ((BAR2_ENABLED_3==1 && BAR2_SIZING_SCHEME_3 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 3 && BAR2_ENABLED_3==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR2 Mask through DBI
`define BAR2_MASK_WRITABLE_3 1'h0


// Name:           BAR2_MASK_3
// Default:        0xfffff (CX_BAR2_RESIZABLE_3==1 ? [calc_bar_mask 
//                 CX_BAR2_RESOURCE_AVAIL_3] : MEM2_SPACE_DECODER_3==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 3 && BAR2_ENABLED_3==1 && MEM2_SPACE_DECODER_3==0 && 
//                 CX_BAR2_RESIZABLE_3==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR2 Mask register of function 3. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR2_MASK_3 64'hfffff


// Name:           MEM_FUNC3_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 3 && BAR2_ENABLED_3==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_2 of function 3 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR2_TARGET_MAP to 1 maps all incoming requests for BAR2 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC3_BAR2_TARGET_MAP 1'h1


// Name:           BAR3_ENABLED_3
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 3 && BAR2_TYPE_3==0
// Parameter Type: Feature Setting
// 
// Include the BAR3 registers for function 3.
`define BAR3_ENABLED_3 1'h0



`define DEFAULT_BAR3_ENABLED_3 1'h0


// Name:           MEM3_SPACE_DECODER_3
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 3 && BAR3_ENABLED_3==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 3.
`define MEM3_SPACE_DECODER_3 1'h0


// Name:           PREFETCHABLE3_3
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 3 && BAR3_ENABLED_3==1 && MEM3_SPACE_DECODER_3==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 3.
`define PREFETCHABLE3_3 1'h0


// Name:           BAR3_TYPE_3
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 3.
`define BAR3_TYPE_3 2'h0


// Name:           BAR3_SIZING_SCHEME_3
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 3 && BAR3_ENABLED_3==1
// Parameter Type: Feature Setting
// 
// BAR3 Function 3 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR3_SIZING_SCHEME_3 2'h0


// Name:           CX_BAR3_RESIZABLE_3
// Default:        0x0 ((BAR3_SIZING_SCHEME_3==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR3_ENABLED_3==1) && (MEM3_SPACE_DECODER_3==0)
// Parameter Type: Feature Setting
// 
// Defines BAR3 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR3 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR3_RESIZABLE_3 1'h0


// Name:           CX_BAR3_RESOURCE_AVAIL_3
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 3 && CX_BAR3_RESIZABLE_3==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR3 of function 3. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR3 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR3_RESOURCE_AVAIL_3 32'h10


// Name:           BAR3_MASK_WRITABLE_3
// Default:        0x0 ((BAR3_ENABLED_3==1 && BAR3_SIZING_SCHEME_3 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 3 && BAR3_ENABLED_3==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR3 Mask through DBI
`define BAR3_MASK_WRITABLE_3 1'h0


// Name:           BAR3_MASK_3
// Default:        0xffff (CX_BAR3_RESIZABLE_3==1 ? [calc_bar_mask 
//                 CX_BAR3_RESOURCE_AVAIL_3] : MEM3_SPACE_DECODER_3==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 3 && BAR3_ENABLED_3==1 && MEM3_SPACE_DECODER_3==0 && 
//                 CX_BAR3_RESIZABLE_3==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR3 Mask register of function 3. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR3_MASK_3 32'hffff


// Name:           MEM_FUNC3_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 3 && BAR3_ENABLED_3==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_3 of function 3 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR3_TARGET_MAP to 1 maps all incoming requests for BAR3 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC3_BAR3_TARGET_MAP 1'h1


// Name:           BAR4_ENABLED_3
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 3
// Parameter Type: Feature Setting
// 
// Include the BAR4 registers for function 3.
`define BAR4_ENABLED_3 1'h1


`define DEFAULT_BAR4_ENABLED_3 1'h1



// Name:           MEM4_SPACE_DECODER_3
// Default:        I/O (BAR4_ENABLED_3==1)
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 3 && BAR4_ENABLED_3==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 3.
`define MEM4_SPACE_DECODER_3 1'h1


// Name:           PREFETCHABLE4_3
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 3 && BAR4_ENABLED_3==1 && MEM4_SPACE_DECODER_3==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 3.
`define PREFETCHABLE4_3 1'h0


// Name:           BAR4_TYPE_3
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 3 && BAR4_ENABLED_3==1 && MEM4_SPACE_DECODER_3==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 3.
`define BAR4_TYPE_3 2'h0


// Name:           BAR4_SIZING_SCHEME_3
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 3 && BAR4_ENABLED_3==1
// Parameter Type: Feature Setting
// 
// BAR4  Function 3 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR4_SIZING_SCHEME_3 2'h0


// Name:           CX_BAR4_RESIZABLE_3
// Default:        0x0 ((BAR4_SIZING_SCHEME_3==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR4_ENABLED_3==1) && (MEM4_SPACE_DECODER_3==0)
// Parameter Type: Feature Setting
// 
// Defines BAR4 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR4 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR4_RESIZABLE_3 1'h0


// Name:           CX_BAR4_RESOURCE_AVAIL_3
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 3 &&  CX_BAR4_RESIZABLE_3==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR4 of function 3. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR4 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR4_RESOURCE_AVAIL_3 64'h10


// Name:           BAR4_MASK_WRITABLE_3
// Default:        0x0 ((BAR4_ENABLED_3==1 && BAR4_SIZING_SCHEME_3 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 3 && BAR4_ENABLED_3==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR4 Mask through DBI
`define BAR4_MASK_WRITABLE_3 1'h0


// Name:           BAR4_MASK_3
// Default:        0xff (CX_BAR4_RESIZABLE_3==1 ? [calc_bar_mask 
//                 CX_BAR4_RESOURCE_AVAIL_3] : MEM4_SPACE_DECODER_3==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 3 && BAR4_ENABLED_3==1 && MEM4_SPACE_DECODER_3==0 && 
//                 CX_BAR4_RESIZABLE_3==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR4 Mask register of function 3. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR4_MASK_3 64'hff


// Name:           MEM_FUNC3_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 3 && BAR4_ENABLED_3==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_4 of function 3 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR4_TARGET_MAP to 1 maps all incoming requests for BAR4 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC3_BAR4_TARGET_MAP 1'h1


// Name:           BAR5_ENABLED_3
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 3 && BAR4_TYPE_3==0
// Parameter Type: Feature Setting
// 
// Include the BAR5 registers for function 3.
`define BAR5_ENABLED_3 1'h0


`define DEFAULT_BAR5_ENABLED_3 1'h0


// Name:           MEM5_SPACE_DECODER_3
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 3 && BAR5_ENABLED_3==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 3.
`define MEM5_SPACE_DECODER_3 1'h0


// Name:           PREFETCHABLE5_3
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 3 && BAR5_ENABLED_3==1 && MEM5_SPACE_DECODER_3==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 3.
`define PREFETCHABLE5_3 1'h0


// Name:           BAR5_TYPE_3
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 3.
`define BAR5_TYPE_3 2'h0


// Name:           BAR5_SIZING_SCHEME_3
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 3 && BAR5_ENABLED_3==1
// Parameter Type: Feature Setting
// 
// BAR5  Function 3 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR5_SIZING_SCHEME_3 2'h0


// Name:           CX_BAR5_RESIZABLE_3
// Default:        0x0 ((BAR5_SIZING_SCHEME_3==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR5_ENABLED_3==1) && (MEM5_SPACE_DECODER_3==0)
// Parameter Type: Feature Setting
// 
// Defines BAR5 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR5 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR5_RESIZABLE_3 1'h0


// Name:           CX_BAR5_RESOURCE_AVAIL_3
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 3 && CX_BAR5_RESIZABLE_3==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR5 of function 3. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR5 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR5_RESOURCE_AVAIL_3 32'h10


// Name:           BAR5_MASK_WRITABLE_3
// Default:        0x0 ((BAR5_ENABLED_3==1 && BAR5_SIZING_SCHEME_3 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 3 && BAR5_ENABLED_3==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR5 Mask through DBI
`define BAR5_MASK_WRITABLE_3 1'h0


// Name:           BAR5_MASK_3
// Default:        0xffff (CX_BAR5_RESIZABLE_3==1 ? [calc_bar_mask 
//                 CX_BAR5_RESOURCE_AVAIL_3] : MEM5_SPACE_DECODER_3==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 3 && BAR5_ENABLED_3==1 && MEM5_SPACE_DECODER_3==0 && 
//                 CX_BAR5_RESIZABLE_3==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR5 Mask register of function 3. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR5_MASK_3 32'hffff


// Name:           MEM_FUNC3_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 3 && BAR5_ENABLED_3==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_5 of function 3 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR5_TARGET_MAP to 1 maps all incoming requests for BAR5 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC3_BAR5_TARGET_MAP 1'h1


`define FUNC3_BARSIZE_32 128'h0


`define FUNC3_BARSIZE 128'h0


`define FUNC3_BAR0_BARSIZE_TRGT1 128'h0


`define FUNC3_BAR2_BARSIZE_TRGT1 128'h0


`define FUNC3_BAR4_BARSIZE_TRGT1 128'h0


`define FUNC3_BAR0_TRGT1_ADDR_WIDTH 1


`define FUNC3_BAR2_TRGT1_ADDR_WIDTH 1


`define FUNC3_BAR4_TRGT1_ADDR_WIDTH 1


// Name:         CX_NUM_RBARS_3
// Default:      0 ([calc_num_rbars CX_BAR0_RESIZABLE_3 CX_BAR1_RESIZABLE_3 
//               CX_BAR2_RESIZABLE_3 CX_BAR3_RESIZABLE_3 CX_BAR4_RESIZABLE_3 
//               CX_BAR5_RESIZABLE_3])
// Values:       -2147483648, ..., 2147483647
// 
// Number of resizable BARs
`define CX_NUM_RBARS_3 0

//-/ END:   BAR CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SR-IOV CAPABILITIES CONFIGURATION


// Name:           CX_VF_DEPENDENCY_LINK_3
// Default:        0x3
// Values:         0x0, ..., 0xff
// Enabled:        CX_VF_DEPENDENCY_LINK_SUPP && (CX_NFUNC > 3) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Specifies the 8-bit VF dependency link for PF3. Valid only if CX_VF_DEPENDENCY_LINK_SUPP=1.
`define CX_VF_DEPENDENCY_LINK_3 8'h3


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER1_3
// Default:        0x2 ((CX_NFUNC>=17) ? 32 : (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : 
//                 (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF3 in an ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER1_3 16'h2


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER0_3
// Default:        0x100
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF3 
//  in a non-ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER0_3 16'h100


// Name:           VF_STRIDE_ARI_CAP_HIER1_3
// Default:        0x2 (CX_VF_STRIDE_ALWAYS_ONE) ? 1 : ((CX_NFUNC>=17) ? 32 : 
//                 (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF3 in an ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER1_3 16'h2


// Name:           VF_STRIDE_ARI_CAP_HIER0_3
// Default:        0x100 ((CX_VF_STRIDE_ALWAYS_ONE) ? 0x0001 : 0x0100)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF3 in a non-ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER0_3 16'h100


// Name:           CX_VF_DEVICE_ID_3
// Default:        0x0 (CX_DEVICE_ID_3)
// Values:         0x0, ..., 0xffff
// Enabled:        (CX_NFUNC > 3) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 16-bit virtual function Device ID for PF3. 
//  It might be different from the physical function's.
`define CX_VF_DEVICE_ID_3 16'h0


// Name:           CX_VF_SUPP_PAGE_SIZE_3
// Default:        0x553
// Values:         0x553, ..., 0xffff
// Enabled:        (CX_NFUNC > 3) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 32-bit supported page sizes for virtual functions for PF3
`define CX_VF_SUPP_PAGE_SIZE_3 32'h553


// Name:           CX_ARI_CAP_HIER_PRSVD_3
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Specifies if ARI Capable Hierarchy bit is preserved across certain power state transitions 
//  Only present in PF0. Read Only Zero in this PF3.
`define CX_ARI_CAP_HIER_PRSVD_3 1'h0

//-/===========================================
//-/ START: VF BAR CONFIGURATION


// Name:           VF_BAR0_ENABLED_3
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 3)
// Parameter Type: Feature Setting
// 
// Include the VF BAR0 registers in PF3
`define VF_BAR0_ENABLED_3 1'h1


`define VF_DEFAULT_BAR0_ENABLED_3 1'h1


// Name:           VF_MEM0_SPACE_DECODER_3
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR0_ENABLED_3 && CX_SRIOV_ENABLE && (CX_NFUNC > 3)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Space Indicator 
//  ALWAYS set to Memory for Virtual Functions
`define VF_MEM0_SPACE_DECODER_3 1'h0


// Name:           VF_PREFETCHABLE0_3
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_3==1 && VF_MEM0_SPACE_DECODER_3==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 3)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Prefetchable 
//  When set indicates VF BAR0 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE0_3 1'h0


// Name:           VF_BAR0_TYPE_3
// Default:        64-bit ((VF_MEM0_SPACE_DECODER_3==1 || VF_BAR0_ENABLED_3==0) ? 0 : 
//                 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR0_ENABLED_3==1 && VF_MEM0_SPACE_DECODER_3==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 3)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 3; (bits [2:1] for a memory BAR).
`define VF_BAR0_TYPE_3 2'h2


// Name:           VF_BAR0_MASK_WRITABLE_3
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_3==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 3)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR0_MASK_WRITABLE_3 1'h0


// Name:           VF_BAR0_MASK_3
// Default:        0xfffff (VF_MEM0_SPACE_DECODER_3==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR0_ENABLED_3==1 && VF_MEM0_SPACE_DECODER_3==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 3)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Mask 
//  Determines the default of the VF BAR Mask register for PF3. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR0_MASK_3 64'hfffff


// Name:           VF_MEM_FUNC3_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR0_ENABLED_3==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 3)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF3 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC3_BAR0_TARGET_MAP 1'h1


// Name:           VF_BAR1_ENABLED_3
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        (VF_BAR0_TYPE_3==0)  && CX_SRIOV_ENABLE && (CX_NFUNC > 3)
// Parameter Type: Feature Setting
// 
// Include the VF BAR1 registers in PF3
`define VF_BAR1_ENABLED_3 1'h0


`define VF_DEFAULT_BAR1_ENABLED_3 1'h0


// Name:           VF_MEM1_SPACE_DECODER_3
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR1_ENABLED_3==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 3)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Space Indicator
`define VF_MEM1_SPACE_DECODER_3 1'h0


// Name:           VF_PREFETCHABLE1_3
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_3==1 && VF_MEM1_SPACE_DECODER_3==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 3)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Prefetchable 
//  When set indicates VF BAR1 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE1_3 1'h0


// Name:           VF_BAR1_TYPE_3
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 3; (bits [2:1] for a memory BAR).
`define VF_BAR1_TYPE_3 2'h0


// Name:           VF_BAR1_MASK_WRITABLE_3
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_3==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 3)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR1_MASK_WRITABLE_3 1'h0


// Name:           VF_BAR1_MASK_3
// Default:        0xffff (VF_MEM1_SPACE_DECODER_3==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR1_ENABLED_3==1 && VF_MEM1_SPACE_DECODER_3==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 3)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Mask 
//  Determines the default of the VF BAR Mask register for PF3. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR1_MASK_3 32'hffff


// Name:           VF_MEM_FUNC3_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR1_ENABLED_3==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 3)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF3 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC3_BAR1_TARGET_MAP 1'h1


// Name:           VF_BAR2_ENABLED_3
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 3)
// Parameter Type: Feature Setting
// 
// Include the VF BAR2 registers in PF3
`define VF_BAR2_ENABLED_3 1'h1


`define VF_DEFAULT_BAR2_ENABLED_3 1'h1


// Name:           VF_MEM2_SPACE_DECODER_3
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR2_ENABLED_3==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 3)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Memory Space Indicator
`define VF_MEM2_SPACE_DECODER_3 1'h0


// Name:           VF_PREFETCHABLE2_3
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_3==1 && VF_MEM2_SPACE_DECODER_3==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 3)
// Parameter Type: Register Default Setting
// 
// BAR2 Memory Prefetchable 
//  When set indicates VF BAR2 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE2_3 1'h0


// Name:           VF_BAR2_TYPE_3
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR2_ENABLED_3==1 && VF_MEM2_SPACE_DECODER_3==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 3)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 3; (bits [2:1] for a memory BAR).
`define VF_BAR2_TYPE_3 2'h0


// Name:           VF_BAR2_MASK_WRITABLE_3
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_3==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 3)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR2_MASK_WRITABLE_3 1'h0


// Name:           VF_BAR2_MASK_3
// Default:        0xfffff (VF_MEM2_SPACE_DECODER_3==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR2_ENABLED_3==1 && VF_MEM2_SPACE_DECODER_3==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 3)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Mask 
//  Determines the default of the VF BAR Mask register for PF3. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR2_MASK_3 64'hfffff


// Name:           VF_MEM_FUNC3_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR2_ENABLED_3==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 3)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF3 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC3_BAR2_TARGET_MAP 1'h1


// Name:           VF_BAR3_ENABLED_3
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_TYPE_3==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 3)
// Parameter Type: Feature Setting
// 
// Include the VF BAR3 registers in PF3
`define VF_BAR3_ENABLED_3 1'h0


`define VF_DEFAULT_BAR3_ENABLED_3 1'h0


// Name:           VF_MEM3_SPACE_DECODER_3
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR3_ENABLED_3==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 3)
// Parameter Type: Register Default Setting
// 
// BAR3 Memory Space Indicator
`define VF_MEM3_SPACE_DECODER_3 1'h0


// Name:           VF_PREFETCHABLE3_3
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_3==1 && VF_MEM3_SPACE_DECODER_3==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 3)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Memory Prefetchable 
//  When set indicates VF BAR3 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE3_3 1'h0


// Name:           VF_BAR3_TYPE_3
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 3; (bits [2:1] for a memory BAR).
`define VF_BAR3_TYPE_3 2'h0


// Name:           VF_BAR3_MASK_WRITABLE_3
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_3==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 3)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR3_MASK_WRITABLE_3 1'h0


// Name:           VF_BAR3_MASK_3
// Default:        0xffff (VF_MEM3_SPACE_DECODER_3==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR3_ENABLED_3==1 && VF_MEM3_SPACE_DECODER_3==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 3)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Mask 
//  Determines the default of the VF BAR Mask register for PF3. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR3_MASK_3 32'hffff


// Name:           VF_MEM_FUNC3_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR3_ENABLED_3==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 3)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF3 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC3_BAR3_TARGET_MAP 1'h1


// Name:           VF_BAR4_ENABLED_3
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 3)
// Parameter Type: Feature Setting
// 
// Include the VF BAR4 registers in PF3
`define VF_BAR4_ENABLED_3 1'h1


`define VF_DEFAULT_BAR4_ENABLED_3 1'h1


// Name:           VF_MEM4_SPACE_DECODER_3
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR4_ENABLED_3==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 3)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Space Indicator
`define VF_MEM4_SPACE_DECODER_3 1'h0


// Name:           VF_PREFETCHABLE4_3
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_3==1 && VF_MEM4_SPACE_DECODER_3==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 3)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Prefetchable 
//  When set indicates VF BAR4 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE4_3 1'h0


// Name:           VF_BAR4_TYPE_3
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR4_ENABLED_3==1 && VF_MEM4_SPACE_DECODER_3==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 3)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 3; (bits [2:1] for a memory BAR).
`define VF_BAR4_TYPE_3 2'h0


// Name:           VF_BAR4_MASK_WRITABLE_3
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_3==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 3)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR4_MASK_WRITABLE_3 1'h0


// Name:           VF_BAR4_MASK_3
// Default:        0xfff (VF_MEM4_SPACE_DECODER_3==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR4_ENABLED_3==1 && VF_MEM4_SPACE_DECODER_3==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 3)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Mask 
//  Determines the default of the VF BAR Mask register for PF3. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR4_MASK_3 64'hfff


// Name:           VF_MEM_FUNC3_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR4_ENABLED_3==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 3)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF3 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC3_BAR4_TARGET_MAP 1'h1


// Name:           VF_BAR5_ENABLED_3
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_TYPE_3==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 3)
// Parameter Type: Feature Setting
// 
// Include the VF BAR5 registers in PF3
`define VF_BAR5_ENABLED_3 1'h0


`define VF_DEFAULT_BAR5_ENABLED_3 1'h0


// Name:           VF_MEM5_SPACE_DECODER_3
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR5_ENABLED_3==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 3)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Space Indicator
`define VF_MEM5_SPACE_DECODER_3 1'h0


// Name:           VF_PREFETCHABLE5_3
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_3==1 && VF_MEM5_SPACE_DECODER_3==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 3)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Prefetchable 
//  When set indicates VF BAR5 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE5_3 1'h0


// Name:           VF_BAR5_TYPE_3
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 3; (bits [2:1] for a memory BAR).
`define VF_BAR5_TYPE_3 2'h0


// Name:           VF_BAR5_MASK_WRITABLE_3
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_3==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 3)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR5_MASK_WRITABLE_3 1'h0


// Name:           VF_BAR5_MASK_3
// Default:        0xffff (VF_MEM5_SPACE_DECODER_3==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR5_ENABLED_3==1 && VF_MEM5_SPACE_DECODER_3==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 3)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Mask 
//  Determines the default of the VF BAR Mask register for PF3. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR5_MASK_3 32'hffff


// Name:           VF_MEM_FUNC3_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR5_ENABLED_3==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 3)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF3 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC3_BAR5_TARGET_MAP 1'h1


`define VF_FUNC3_BARSIZE_32 128'h101000


`define VF_FUNC3_BARSIZE 128'h201000

//-/ END:   VF BAR CONFIGURATION
//-/===========================================

//-/ END:   SR-IOV CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: TPH CAPABILITIES CONFIGURATION


// Name:           TPH_IVEC_3
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Interrupt Vector Mode. If set indicates that the function supports the Interrupt Vector 
// Mode of operation. Function 3.
`define TPH_IVEC_3 1'h0


// Name:           TPH_DS_3
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Device Specific Mode. If set indicates that the function supports the Device Specific Mode 
// of operation. Function 3.
`define TPH_DS_3 1'h0


// Name:           TPH_ST_TABLE_LOC_3
// Default:        Not Present
// Values:         Not Present (0), TPH Requester Capability Structure (1), MSI-X 
//                 Table Structure (2)
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_DS_3 || TPH_IVEC_3))
// Parameter Type: Feature Setting
// 
// TLP Processing Hints Steering Tag Table Location. Value indicates if and where the ST Table is located. Function 3.
`define TPH_ST_TABLE_LOC_3 0

//located in the TPH Requester Capability structure. Please reduce the ST Table Size for this mode of operation"

// Name:           TPH_ST_TABLE_SIZE_3
// Default:        1
// Values:         1, ..., 2048
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_ST_TABLE_LOC_3 != 0))
// Parameter Type: Feature Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define TPH_ST_TABLE_SIZE_3 1


`define TPH_ST_TABLE_DEPTH_3 0

//-/ END:   TPH CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: ATS CAPABILITIES CONFIGURATION


// Name:           ATS_INV_Q_DPTH_3
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// The number of Invalidate Requests that the Function can accept before putting backpressure on the upstream connection. A 
// value of 0 indicates the function can accept 32 Invalidate requests. Function 3.
`define ATS_INV_Q_DPTH_3 5'd0


// Name:           ATS_STU_3
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// This value indicates to the Function the minimum number of 4096-byte blocks that is indicated in a Translation 
// Completion or Invalidate Request. This is a power of 2 multiplier and the number of blocks is 2^STU. A value of 0 indicates 1 block 
// and a value of 31 indicates 2^31 blocks (or 8 TB total). Function 3.
`define ATS_STU_3 5'd0

//-/ END:   ATS CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PRS CAPABILITIES CONFIGURATION


// Name:           CX_PRS_OUTSTANDING_CAPACITY_VALUE_3
// Default:        0x1
// Values:         0x0, ..., 0xffffffff
// Enabled:        (CX_PRS_ENABLE==1) && (CX_NFUNC > 3)
// Parameter Type: Register Default Setting
// 
// Register default for PRS Outstanding Capacity in PF3. 
// For more details, see the PRS_OUTSTANDING_CAPACITY field in the PRS_REQ_CAPACITY_REG register.
`define CX_PRS_OUTSTANDING_CAPACITY_VALUE_3 32'h1

//-/ END:   PRS CAPABILITIES CONFIGURATION
//-/===========================================


//-/===========================================
//--- START: RN


// Name:           CX_RN_IMM_VALUE_3
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 3)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for PF3.
`define CX_RN_IMM_VALUE_3 1'h0


// Name:           CX_RN_IMM_D0_VALUE_3
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 3)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for PF3.
`define CX_RN_IMM_D0_VALUE_3 1'h0


// Name:           CX_RN_FRS_VALUE_3
// Default:        0x0 (CX_RN_FRS_SUPPORTED==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_FRS_SUPPORTED==1) && (CX_NFUNC > 3)
// Parameter Type: Feature Setting
// 
// Function Readiness Status messaging supported for function PF3.
`define CX_RN_FRS_VALUE_3 1'h0


// Name:           CX_RN_RTR_VALID_3
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 3)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF3.
`define CX_RN_RTR_VALID_3 1'h0


// Name:           CX_RN_RTR_DL_UP_VALUE_3
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 3)
// Parameter Type: Register Default Setting
// 
// Register default for RTR DL Up Time field in PF3.
`define CX_RN_RTR_DL_UP_VALUE_3 12'h0


// Name:           CX_RN_RTR_RESET_VALUE_3
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 3)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF3.
`define CX_RN_RTR_RESET_VALUE_3 12'h0


// Name:           CX_RN_RTR_D3D0_VALUE_3
// Default:        0x0
// Values:         0x0, ..., 0x80a
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 3)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF3.
`define CX_RN_RTR_D3D0_VALUE_3 12'h0


// Name:           CX_RN_RTR_FLR_VALUE_3
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_FLR_ENABLE==1) && (CX_NFUNC > 3)
// Parameter Type: Register Default Setting
// 
// Register default for RTR FLR Time field in PF3.
`define CX_RN_RTR_FLR_VALUE_3 12'h0


// Name:           VF_RN_IMM_VALUE_3
// Default:        0x0 (CX_RN_IMM_VALUE_3 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 3))
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for VFs in PF3.
`define VF_RN_IMM_VALUE_3 1'h0


// Name:           VF_RN_IMM_D0_VALUE_3
// Default:        0x0 (CX_RN_IMM_D0_VALUE_3 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 3))
// Parameter Type: Register Default Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for VFs in PF3.
`define VF_RN_IMM_D0_VALUE_3 1'h0


// Name:           VF_RN_RTR_VALID_3
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 3) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF3 VFs.
`define VF_RN_RTR_VALID_3 1'h0


// Name:           VF_RN_RTR_RESET_VALUE_3
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_3)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 3) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF3 VFS.
`define VF_RN_RTR_RESET_VALUE_3 12'h0


// Name:           VF_RN_RTR_D3D0_VALUE_3
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_3)
// Values:         0x0, ..., 0x80a
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 3) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF3 VFS.
`define VF_RN_RTR_D3D0_VALUE_3 12'h0


// Name:           VF_RN_RTR_FLR_VALUE_3
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_3)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 3) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF3 VFs.
`define VF_RN_RTR_FLR_VALUE_3 12'h0


// Name:           EXT_VF_RN_RTR_VALID_3
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 3) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF3 VFs.
`define EXT_VF_RN_RTR_VALID_3 1'h0


// Name:           EXT_VF_RN_RTR_RESET_VALUE_3
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_3)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 3) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF3 VFS.
`define EXT_VF_RN_RTR_RESET_VALUE_3 12'h0


// Name:           EXT_VF_RN_RTR_D3D0_VALUE_3
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_3)
// Values:         0x0, ..., 0x80a
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 3) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF3 VFS.
`define EXT_VF_RN_RTR_D3D0_VALUE_3 12'h0


// Name:           EXT_VF_RN_RTR_FLR_VALUE_3
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_3)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 3) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF3 VFs.
`define EXT_VF_RN_RTR_FLR_VALUE_3 12'h0

//-/ END:   RN
//-/===========================================

//-/ START: LN CAPABILITIES CONFIGURATION
//-/===========================================


// Name:           CX_LN_REG_MAX_VALUE_3
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 3))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_64_SUPPORTED field in the LNR_CAP_OFF register for PF3.
`define CX_LN_REG_MAX_VALUE_3 5'h0


// Name:           CX_LN_128_SUPPORTED_VALUE_3
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 3))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_128_SUPPORTED field in the LNR_CAP_OFF register for PF3.
`define CX_LN_128_SUPPORTED_VALUE_3 1'h0


// Name:           CX_LN_64_SUPPORTED_VALUE_3
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 3))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_REGISTRATION_MAX field in the LNR_CAP_OFF register for PF3.
`define CX_LN_64_SUPPORTED_VALUE_3 1'h0

//-/ END:   LN CAPABILITIES CONFIGURATION
//-/===========================================




//-/==========================================
//-/ End FUNC3 Config
//-/==========================================

//-/===========================================
//-/ Function 4 Configuration Registers
//-/ ==========================================


// Name:         FUNC_4
// Default:      0 ((CX_NFUNC > 4) ? 1 : 0)
// Values:       0, 1
// 
// This parameter indicates that Function 4 is present
// `define FUNC_4

//-/===========================================
//-/ START: PCI-E CAPABILITIES CONFIGURATION


// Name:           PCIE_CAP_INT_MSG_NUM_4
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 4
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Message Number field in the PCI Express Capabilities Register. Function 4.
`define PCIE_CAP_INT_MSG_NUM_4 5'h0


// Name:           SLOT_IMPLEMENTED_4
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_NFUNC > 4))
// Parameter Type: Register Default Setting
// 
// Indicates that the PCI Express link associated with this Port is connected to a slot. Function 4.
`define SLOT_IMPLEMENTED_4 1'h0


// Name:           DEFAULT_PHANTOM_FUNC_SUPPORTED_4
// Default:        0x0
// Values:         0x0, ..., 0x3
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_PHANTOM_FUNC_SUPPORTED_4 2'h0


// Name:           DEFAULT_EXT_TAG_FIELD_SUPPORTED_4
// Default:        0x0 (DEFAULT_EXT_TAG_FIELD_SUPPORTED_0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 4
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_EXT_TAG_FIELD_SUPPORTED_4 1'h0



// Name:           DEFAULT_ATT_BUTT_PRE_4
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 4
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Button is present
`define DEFAULT_ATT_BUTT_PRE_4 1'h0


// Name:           DEFAULT_ATT_IND_PRE_4
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 4
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Indicator is present
`define DEFAULT_ATT_IND_PRE_4 1'h0


// Name:           DEFAULT_PWR_IND_PRE_4
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 4
// Parameter Type: Register Default Setting
// 
// When set indicates that a Power Indicator is present
`define DEFAULT_PWR_IND_PRE_4 1'h0


// Name:           DEFAULT_NO_SNOOP_SUPPORTED_4
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 4
// Parameter Type: Register Default Setting
// 
// Default value for the Enable No Snoop bit in the Device Control Register. Function 4.
`define DEFAULT_NO_SNOOP_SUPPORTED_4 1'h0


// Name:           ROOT_RCB_4
// Default:        64-bit
// Values:         64-bit (0x0), 128-bit (0x1)
// Parameter Type: Register Default Setting
// 
// Default value for the Read Completion Boundary (RCB) bit in the Link Control Register.
`define ROOT_RCB_4 1'h0


//-/ END:   PCI-E CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: MSI-X CAPABILITIES CONFIGURATION


// Name:           MSIX_TABLE_SIZE_4
// Default:        0x0
// Values:         0x0, ..., 0x7ff
// Enabled:        CX_NFUNC > 4 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the MSI-X Table Size field in the MSI-X Control Register. Function 4.
`define MSIX_TABLE_SIZE_4 11'h0


// Name:           MSIX_TABLE_BIR_4
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 4 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table BAR Indicator Register (BIR) field in the MSI-X Table Offset and BIR Register. Function 4.
`define MSIX_TABLE_BIR_4 3'h0


// Name:           MSIX_TABLE_OFFSET_4
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 4 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table Offset field in the MSI-X Table Offset and BIR Register. Function 4.
`define MSIX_TABLE_OFFSET_4 29'h0


// Name:           MSIX_PBA_BIR_4
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 4 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Pending Bit Array (PBA) BIR field in the MSI-X PBA Offset and BIR Register. Function 4.
`define MSIX_PBA_BIR_4 7'h0


// Name:           MSIX_PBA_OFFSET_4
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 4 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the PBA Offset field in the MSI-X PBA Offset and BIR Register. Function 4.
`define MSIX_PBA_OFFSET_4 29'h0

//-/ END:   MSI-X CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SATA CAPABILITIES CONFIGURATION


// Name:         SATA_HBA_OFFSET_4
// Default:      0x0
// Values:       0x0, ..., 0xfffff
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA Offset. Base address of the SATA HBA registers, 
//  as an offset from the base address of the BAR indicated 
//  by the SATA BAR field.
`define SATA_HBA_OFFSET_4 20'h0


// Name:         SATA_BAR_4
// Default:      0x0
// Values:       0x0, ..., 0xf
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA BAR. The bar that maps to SATA HBA registers,
`define SATA_BAR_4 4'h0

//-/ END:   SATA CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: AER CAPABILITIES CONFIGURATION


// Name:           DEFAULT_ECRC_CHK_CAP_4
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 4 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Check Capable bit in the Advanced Capabilities and Control Register. Function 4.
`define DEFAULT_ECRC_CHK_CAP_4 1'h1


// Name:           DEFAULT_ECRC_GEN_CAP_4
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 4 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Generation Capability bit in the Advanced Capabilities and Control Register. Function 4.
`define DEFAULT_ECRC_GEN_CAP_4 1'h1


// Name:           AER_INT_MSG_NUM_4
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Parameter Type: Register Default Setting
// 
// Default value for the Advanced Error Interrupt Message Number field of the Root Error Status Register. Function 4.
`define AER_INT_MSG_NUM_4 5'h0



// Name:           CX_HDR_LOG_DEPTH_4
// Default:        0x1
// Values:         0x1, 0x2, 0x4
// Enabled:        CX_NFUNC > 4 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Feature Setting.
// 
// Header Log Depth
`define CX_HDR_LOG_DEPTH_4 3'h1


`define CX_MULTIPLE_HDR_REC_CAP_4 1'h0

//-/ END:   AER CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PM CAPABILITIES CONFIGURATION


// Name:           PME_SUPPORT_4
// Default:        0x1b
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 4
// Parameter Type: Register Default Setting
// 
// Default value for the PME_Support field in the Power Management Capabilities Register. Function 4.
`define PME_SUPPORT_4 5'h1b


// Name:           D1_SUPPORT_4
// Default:        true
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 4
// Parameter Type: Register Default Setting
// 
// Default value for the D1 Support bit in the Power Management Capabilities Register. Function 4.
`define D1_SUPPORT_4 1'h1


// Name:           D2_SUPPORT_4
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 4
// Parameter Type: Register Default Setting
// 
// Default value for the D2 Support bit in the Power Management Capabilities Register. Function 4.
`define D2_SUPPORT_4 1'h0


// Name:           DEV_SPEC_INIT_4
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 4
// Parameter Type: Register Default Setting
// 
// Default value for the Device Specific Initialization (DSI) bit in the Power Management Capabilities Register. Function 
// 4.
`define DEV_SPEC_INIT_4 1'h0


// Name:           AUX_CURRENT_4
// Default:        375mA
// Values:         0mA (0x0), 55mA (0x1), 100mA (0x2), 160mA (0x3), 220mA (0x4), 270mA 
//                 (0x5), 320mA (0x6), 375mA (0x7)
// Enabled:        CX_NFUNC > 4
// Parameter Type: Register Default Setting
// 
// Default value for the Aux Current field in the Power Management Capabilities Register. Function 4.
`define AUX_CURRENT_4 3'h7


// Name:           DEFAULT_NO_SOFT_RESET_4
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 4
// Parameter Type: Register Default Setting
// 
// Default value for the No Soft Reset bit in the Power Management Control and Status Register. When set, you should not 
// reset any controller registers when transitioning from D3hot to D0. Therefore, you should not assert the non_sticky_rst_n 
// and sticky_rst_n inputs. Function 4.
`define DEFAULT_NO_SOFT_RESET_4 1'h0

//-/ END:   PM CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PCI BASIC CONFIGURATION


// Name:           CX_DEVICE_ID_4
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 4
// Parameter Type: Register Default Setting
// 
// Default value for the Device ID field in the Device ID and Vendor ID Register. Function 4.
`define CX_DEVICE_ID_4 16'h0


// Name:           CX_VENDOR_ID_4
// Default:        0x16c3
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 4
// Parameter Type: Register Default Setting
// 
// Default value for the Vendor ID field in the Device ID and Vendor ID Register. Function 4.
`define CX_VENDOR_ID_4 16'h16c3


// Name:           CX_REVISION_ID_4
// Default:        0x1
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 4
// Parameter Type: Register Default Setting
// 
// Default value for the Revision ID field in the Revision ID Register. Function 4.
`define CX_REVISION_ID_4 8'h1


// Name:           SUBSYS_DEV_ID_4
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 4
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 4.
`define SUBSYS_DEV_ID_4 16'h0


// Name:           SUBSYS_VENDOR_ID_4
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 4
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem Vendor ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 4.
`define SUBSYS_VENDOR_ID_4 16'h0


// Name:           BASE_CLASS_CODE_4
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 4
// Parameter Type: Register Default Setting
// 
// Default value for the Base Class Code field in the Class Code Register. Function 4.
`define BASE_CLASS_CODE_4 8'h0


// Name:           SUB_CLASS_CODE_4
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 4
// Parameter Type: Register Default Setting
// 
// Default value for the Subclass Code field in the Class Code Register. Function 4.
`define SUB_CLASS_CODE_4 8'h0


// Name:           IF_CODE_4
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 4
// Parameter Type: Register Default Setting
// 
// Default value for the Programming Interface field in the Class Code Register. Function 4.
`define IF_CODE_4 8'h0


// Name:           CARDBUS_CIS_PTR_4
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 4
// Parameter Type: Register Default Setting
// 
// Default value for the CardBus CIS Pointer Register. Function 4.
`define CARDBUS_CIS_PTR_4 16'h0


// Name:           INT_PIN_MAPPING_4
// Default:        INTA
// Values:         None (0x0), INTA (0x1), INTB (0x2), INTC (0x3), INTD (0x4)
// Enabled:        CX_NFUNC > 4
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Pin Register. Function 4.
`define INT_PIN_MAPPING_4 8'h1


// Name:           IO_DECODE_32_4
// Default:        16-bit
// Values:         16-bit (0x0), 32-bit (0x1)
// Enabled:        CX_NFUNC > 4
// Parameter Type: Register Default Setting
// 
// Default value for the 32-Bit I/O Space bit in the I/O Base and I/O Limit Register. Function 4.
`define IO_DECODE_32_4 1'h0


// Name:           MEM_DECODE_64_4
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x1)
// Enabled:        CX_NFUNC > 4
// Parameter Type: Register Default Setting
// 
// Default value for the 64-Bit Memory Addressing bit in the Prefetchable Memory Base and Limit Register. Function 4.
`define MEM_DECODE_64_4 1'h0


// Name:           ROM_BAR_ENABLED_4
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 4
// Parameter Type: Register Default Setting
// 
// Include the expansion ROM BAR registers. Function 4.
`define ROM_BAR_ENABLED_4 1'h1


`define DEFAULT_ROM_BAR_ENABLED_4 1'h1


// Name:           ROM_MASK_4
// Default:        0xffff
// Values:         0x7ff, ..., 0xffffff
// Enabled:        CX_NFUNC > 4 && ROM_BAR_ENABLED_4==1
// Parameter Type: Register Default Setting
// 
// Determines the default of the Expansion ROM BAR Mask register. Function 4. 
//  - The BAR Mask register specifies which bits of the Expansion ROM BAR are non-writable by host software, which 
//  determines the size of the BAR. 
//  - The maximum value for ROM_MASK_N is 0xFFFFFF because the maximum space that can be claimed by an Expansion ROM BAR 
//  is 16 MB. 
//  - For example: 32'hFFFF =BAR size of 2^16.
`define ROM_MASK_4 32'hffff


// Name:           ROM_MASK_WRITABLE_4
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 4 && ROM_BAR_ENABLED_4==1
// Parameter Type: Feature Setting
// 
// Determines if the Expansion ROM BAR Mask register for function 4 is writable by application software. If writing to a 
// Expansion ROM BAR Mask register is enabled, your application can write to the Expansion ROM BAR Mask register through the 
// DBI by asserting dbi_cs2 in addition to dbi_cs.
`define ROM_MASK_WRITABLE_4 1'h0


// Name:           ROM_FUNC4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 4 && ROM_BAR_ENABLED_4==1 && TRGT1_POPULATE==1))
// Parameter Type: Register Default Setting
// 
// Direct incoming requests that pass filtering and match the Expansion ROM BAR of function 4 to either RTRGT0 or RTRGT1. 
//  - For example, setting ROM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for the Expansion ROM BAR of function 
//  0 to RTRGT1. 
//  - If TRGT1_POPULATE =0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define ROM_FUNC4_TARGET_MAP 1'h1


// Name:           CX_PCI_HEADER_DEFAULTS_VISIBLE_4
// Default:        0
// Values:         0, 1
// Parameter Type: Register Default Setting
// 
// Select here if you want to configure the defaults for the other PCI Standard Header registers for function 4. 
//  An extra window will appear under this page. To access it, click the plus/minus symbol in the hierarchy view on the 
//  left panel. 
//  This is optional but not usually recommended. 
//  You can also change these register defaults using the DBI before (or after) the link comes up.
`define CX_PCI_HEADER_DEFAULTS_VISIBLE_4 0

//-/ END:   PCI BASIC CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: BAR CONFIGURATION


// Name:           BAR0_ENABLED_4
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 4
// Parameter Type: Feature Setting
// 
// Include the BAR0 registers for function 4.
`define BAR0_ENABLED_4 1'h1


`define DEFAULT_BAR0_ENABLED_4 1'h1


// Name:           MEM0_SPACE_DECODER_4
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 4 && BAR0_ENABLED_4==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 4.
`define MEM0_SPACE_DECODER_4 1'h0


// Name:           PREFETCHABLE0_4
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 4 && BAR0_ENABLED_4==1 && MEM0_SPACE_DECODER_4==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 4.
`define PREFETCHABLE0_4 1'h0


// Name:           BAR0_TYPE_4
// Default:        64-bit ((MEM0_SPACE_DECODER_4==1 || BAR0_ENABLED_4==0) ? 0 : 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 4 && BAR0_ENABLED_4==1 && MEM0_SPACE_DECODER_4==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 4.
`define BAR0_TYPE_4 2'h2


// Name:           BAR0_SIZING_SCHEME_4
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 4 && BAR0_ENABLED_4==1
// Parameter Type: Feature Setting
// 
// BAR0 Function 4 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR0_SIZING_SCHEME_4 2'h0


// Name:           CX_BAR0_RESIZABLE_4
// Default:        0x0 ((BAR0_SIZING_SCHEME_4==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR0_ENABLED_4==1) && (MEM0_SPACE_DECODER_4==0)
// Parameter Type: Feature Setting
// 
// Defines BAR0 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR0 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR0_RESIZABLE_4 1'h0


// Name:           CX_BAR0_RESOURCE_AVAIL_4
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 4 && CX_BAR0_RESIZABLE_4==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR0 of function 4. 
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
// Example: 0x00000030 indicates that BAR0 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR0_RESOURCE_AVAIL_4 64'h10


// Name:           BAR0_MASK_WRITABLE_4
// Default:        0x0 ((BAR0_ENABLED_4==1 && BAR0_SIZING_SCHEME_4 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 4 && BAR0_ENABLED_4==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR0 Mask through DBI
`define BAR0_MASK_WRITABLE_4 1'h0


// Name:           BAR0_MASK_4
// Default:        0xfffff (CX_BAR0_RESIZABLE_4==1 ? [calc_bar_mask 
//                 CX_BAR0_RESOURCE_AVAIL_4] : MEM0_SPACE_DECODER_4==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 4 && BAR0_ENABLED_4==1 && MEM0_SPACE_DECODER_4==0 && 
//                 CX_BAR0_RESIZABLE_4==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR0 Mask register of function 4. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR0_MASK_4 64'hfffff


// Name:           MEM_FUNC4_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 4 && BAR0_ENABLED_4==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_0 of function 4 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming Requests for BAR0 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC4_BAR0_TARGET_MAP 1'h1


// Name:           BAR1_ENABLED_4
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 4 && BAR0_TYPE_4==0
// Parameter Type: Feature Setting
// 
// Include the BAR1 registers for function 4.
`define BAR1_ENABLED_4 1'h0


`define DEFAULT_BAR1_ENABLED_4 1'h0


// Name:           MEM1_SPACE_DECODER_4
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 4 && BAR1_ENABLED_4==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 4.
`define MEM1_SPACE_DECODER_4 1'h0


// Name:           PREFETCHABLE1_4
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 4 && BAR1_ENABLED_4==1 && MEM1_SPACE_DECODER_4==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 4.
`define PREFETCHABLE1_4 1'h0


// Name:           BAR1_TYPE_4
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 4.
`define BAR1_TYPE_4 2'h0


// Name:           BAR1_SIZING_SCHEME_4
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 4 && BAR1_ENABLED_4==1
// Parameter Type: Feature Setting
// 
// BAR1 Function 4 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR1_SIZING_SCHEME_4 2'h0


// Name:           CX_BAR1_RESIZABLE_4
// Default:        0x0 ((BAR1_SIZING_SCHEME_4==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR1_ENABLED_4==1) && (MEM1_SPACE_DECODER_4==0)
// Parameter Type: Feature Setting
// 
// Defines BAR1 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR1 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR1_RESIZABLE_4 1'h0


// Name:           CX_BAR1_RESOURCE_AVAIL_4
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 4 && CX_BAR1_RESIZABLE_4==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR1 of function 4. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR1 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR1_RESOURCE_AVAIL_4 32'h10


// Name:           BAR1_MASK_WRITABLE_4
// Default:        0x0 ((BAR1_ENABLED_4==1 && BAR1_SIZING_SCHEME_4 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 4 && BAR1_ENABLED_4==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR1 Mask through DBI
`define BAR1_MASK_WRITABLE_4 1'h0


// Name:           BAR1_MASK_4
// Default:        0xffff (CX_BAR1_RESIZABLE_4==1 ? [calc_bar_mask 
//                 CX_BAR1_RESOURCE_AVAIL_4] : MEM1_SPACE_DECODER_4==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 4 && BAR1_ENABLED_4==1 && MEM1_SPACE_DECODER_4==0 && 
//                 CX_BAR1_RESIZABLE_4==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR1 Mask register of function 4. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR1_MASK_4 32'hffff


// Name:           MEM_FUNC4_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 4 && BAR1_ENABLED_4==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_1 of function 4 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR1_TARGET_MAP to 1 maps all incoming Requests for BAR1 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC4_BAR1_TARGET_MAP 1'h1


// Name:           BAR2_ENABLED_4
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 4
// Parameter Type: Feature Setting
// 
// Include the BAR2 registers for function 4.
`define BAR2_ENABLED_4 1'h1


`define DEFAULT_BAR2_ENABLED_4 1'h1


// Name:           MEM2_SPACE_DECODER_4
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 4 && BAR2_ENABLED_4==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 4.
`define MEM2_SPACE_DECODER_4 1'h0


// Name:           PREFETCHABLE2_4
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 4 && BAR2_ENABLED_4==1 && MEM2_SPACE_DECODER_4==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 4.
`define PREFETCHABLE2_4 1'h0


// Name:           BAR2_TYPE_4
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 4 && BAR2_ENABLED_4==1 && MEM2_SPACE_DECODER_4==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 4.
`define BAR2_TYPE_4 2'h0


// Name:           BAR2_SIZING_SCHEME_4
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 4 && BAR2_ENABLED_4==1
// Parameter Type: Feature Setting
// 
// BAR2 Function 4 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR2_SIZING_SCHEME_4 2'h0


// Name:           CX_BAR2_RESIZABLE_4
// Default:        0x0 ((BAR2_SIZING_SCHEME_4==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR2_ENABLED_4==1) && (MEM2_SPACE_DECODER_4==0)
// Parameter Type: Feature Setting
// 
// Defines BAR2 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR2 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR2_RESIZABLE_4 1'h0


// Name:           CX_BAR2_RESOURCE_AVAIL_4
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 4 && CX_BAR2_RESIZABLE_4==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR2 of function 4. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR2 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR2_RESOURCE_AVAIL_4 64'h10


// Name:           BAR2_MASK_WRITABLE_4
// Default:        0x0 ((BAR2_ENABLED_4==1 && BAR2_SIZING_SCHEME_4 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 4 && BAR2_ENABLED_4==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR2 Mask through DBI
`define BAR2_MASK_WRITABLE_4 1'h0


// Name:           BAR2_MASK_4
// Default:        0xfffff (CX_BAR2_RESIZABLE_4==1 ? [calc_bar_mask 
//                 CX_BAR2_RESOURCE_AVAIL_4] : MEM2_SPACE_DECODER_4==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 4 && BAR2_ENABLED_4==1 && MEM2_SPACE_DECODER_4==0 && 
//                 CX_BAR2_RESIZABLE_4==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR2 Mask register of function 4. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR2_MASK_4 64'hfffff


// Name:           MEM_FUNC4_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 4 && BAR2_ENABLED_4==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_2 of function 4 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR2_TARGET_MAP to 1 maps all incoming requests for BAR2 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC4_BAR2_TARGET_MAP 1'h1


// Name:           BAR3_ENABLED_4
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 4 && BAR2_TYPE_4==0
// Parameter Type: Feature Setting
// 
// Include the BAR3 registers for function 4.
`define BAR3_ENABLED_4 1'h0



`define DEFAULT_BAR3_ENABLED_4 1'h0


// Name:           MEM3_SPACE_DECODER_4
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 4 && BAR3_ENABLED_4==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 4.
`define MEM3_SPACE_DECODER_4 1'h0


// Name:           PREFETCHABLE3_4
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 4 && BAR3_ENABLED_4==1 && MEM3_SPACE_DECODER_4==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 4.
`define PREFETCHABLE3_4 1'h0


// Name:           BAR3_TYPE_4
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 4.
`define BAR3_TYPE_4 2'h0


// Name:           BAR3_SIZING_SCHEME_4
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 4 && BAR3_ENABLED_4==1
// Parameter Type: Feature Setting
// 
// BAR3 Function 4 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR3_SIZING_SCHEME_4 2'h0


// Name:           CX_BAR3_RESIZABLE_4
// Default:        0x0 ((BAR3_SIZING_SCHEME_4==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR3_ENABLED_4==1) && (MEM3_SPACE_DECODER_4==0)
// Parameter Type: Feature Setting
// 
// Defines BAR3 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR3 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR3_RESIZABLE_4 1'h0


// Name:           CX_BAR3_RESOURCE_AVAIL_4
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 4 && CX_BAR3_RESIZABLE_4==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR3 of function 4. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR3 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR3_RESOURCE_AVAIL_4 32'h10


// Name:           BAR3_MASK_WRITABLE_4
// Default:        0x0 ((BAR3_ENABLED_4==1 && BAR3_SIZING_SCHEME_4 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 4 && BAR3_ENABLED_4==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR3 Mask through DBI
`define BAR3_MASK_WRITABLE_4 1'h0


// Name:           BAR3_MASK_4
// Default:        0xffff (CX_BAR3_RESIZABLE_4==1 ? [calc_bar_mask 
//                 CX_BAR3_RESOURCE_AVAIL_4] : MEM3_SPACE_DECODER_4==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 4 && BAR3_ENABLED_4==1 && MEM3_SPACE_DECODER_4==0 && 
//                 CX_BAR3_RESIZABLE_4==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR3 Mask register of function 4. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR3_MASK_4 32'hffff


// Name:           MEM_FUNC4_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 4 && BAR3_ENABLED_4==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_3 of function 4 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR3_TARGET_MAP to 1 maps all incoming requests for BAR3 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC4_BAR3_TARGET_MAP 1'h1


// Name:           BAR4_ENABLED_4
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 4
// Parameter Type: Feature Setting
// 
// Include the BAR4 registers for function 4.
`define BAR4_ENABLED_4 1'h1


`define DEFAULT_BAR4_ENABLED_4 1'h1



// Name:           MEM4_SPACE_DECODER_4
// Default:        I/O (BAR4_ENABLED_4==1)
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 4 && BAR4_ENABLED_4==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 4.
`define MEM4_SPACE_DECODER_4 1'h1


// Name:           PREFETCHABLE4_4
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 4 && BAR4_ENABLED_4==1 && MEM4_SPACE_DECODER_4==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 4.
`define PREFETCHABLE4_4 1'h0


// Name:           BAR4_TYPE_4
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 4 && BAR4_ENABLED_4==1 && MEM4_SPACE_DECODER_4==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 4.
`define BAR4_TYPE_4 2'h0


// Name:           BAR4_SIZING_SCHEME_4
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 4 && BAR4_ENABLED_4==1
// Parameter Type: Feature Setting
// 
// BAR4  Function 4 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR4_SIZING_SCHEME_4 2'h0


// Name:           CX_BAR4_RESIZABLE_4
// Default:        0x0 ((BAR4_SIZING_SCHEME_4==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR4_ENABLED_4==1) && (MEM4_SPACE_DECODER_4==0)
// Parameter Type: Feature Setting
// 
// Defines BAR4 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR4 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR4_RESIZABLE_4 1'h0


// Name:           CX_BAR4_RESOURCE_AVAIL_4
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 4 &&  CX_BAR4_RESIZABLE_4==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR4 of function 4. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR4 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR4_RESOURCE_AVAIL_4 64'h10


// Name:           BAR4_MASK_WRITABLE_4
// Default:        0x0 ((BAR4_ENABLED_4==1 && BAR4_SIZING_SCHEME_4 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 4 && BAR4_ENABLED_4==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR4 Mask through DBI
`define BAR4_MASK_WRITABLE_4 1'h0


// Name:           BAR4_MASK_4
// Default:        0xff (CX_BAR4_RESIZABLE_4==1 ? [calc_bar_mask 
//                 CX_BAR4_RESOURCE_AVAIL_4] : MEM4_SPACE_DECODER_4==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 4 && BAR4_ENABLED_4==1 && MEM4_SPACE_DECODER_4==0 && 
//                 CX_BAR4_RESIZABLE_4==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR4 Mask register of function 4. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR4_MASK_4 64'hff


// Name:           MEM_FUNC4_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 4 && BAR4_ENABLED_4==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_4 of function 4 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR4_TARGET_MAP to 1 maps all incoming requests for BAR4 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC4_BAR4_TARGET_MAP 1'h1


// Name:           BAR5_ENABLED_4
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 4 && BAR4_TYPE_4==0
// Parameter Type: Feature Setting
// 
// Include the BAR5 registers for function 4.
`define BAR5_ENABLED_4 1'h0


`define DEFAULT_BAR5_ENABLED_4 1'h0


// Name:           MEM5_SPACE_DECODER_4
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 4 && BAR5_ENABLED_4==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 4.
`define MEM5_SPACE_DECODER_4 1'h0


// Name:           PREFETCHABLE5_4
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 4 && BAR5_ENABLED_4==1 && MEM5_SPACE_DECODER_4==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 4.
`define PREFETCHABLE5_4 1'h0


// Name:           BAR5_TYPE_4
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 4.
`define BAR5_TYPE_4 2'h0


// Name:           BAR5_SIZING_SCHEME_4
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 4 && BAR5_ENABLED_4==1
// Parameter Type: Feature Setting
// 
// BAR5  Function 4 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR5_SIZING_SCHEME_4 2'h0


// Name:           CX_BAR5_RESIZABLE_4
// Default:        0x0 ((BAR5_SIZING_SCHEME_4==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR5_ENABLED_4==1) && (MEM5_SPACE_DECODER_4==0)
// Parameter Type: Feature Setting
// 
// Defines BAR5 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR5 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR5_RESIZABLE_4 1'h0


// Name:           CX_BAR5_RESOURCE_AVAIL_4
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 4 && CX_BAR5_RESIZABLE_4==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR5 of function 4. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR5 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR5_RESOURCE_AVAIL_4 32'h10


// Name:           BAR5_MASK_WRITABLE_4
// Default:        0x0 ((BAR5_ENABLED_4==1 && BAR5_SIZING_SCHEME_4 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 4 && BAR5_ENABLED_4==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR5 Mask through DBI
`define BAR5_MASK_WRITABLE_4 1'h0


// Name:           BAR5_MASK_4
// Default:        0xffff (CX_BAR5_RESIZABLE_4==1 ? [calc_bar_mask 
//                 CX_BAR5_RESOURCE_AVAIL_4] : MEM5_SPACE_DECODER_4==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 4 && BAR5_ENABLED_4==1 && MEM5_SPACE_DECODER_4==0 && 
//                 CX_BAR5_RESIZABLE_4==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR5 Mask register of function 4. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR5_MASK_4 32'hffff


// Name:           MEM_FUNC4_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 4 && BAR5_ENABLED_4==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_5 of function 4 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR5_TARGET_MAP to 1 maps all incoming requests for BAR5 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC4_BAR5_TARGET_MAP 1'h1


`define FUNC4_BARSIZE_32 128'h0


`define FUNC4_BARSIZE 128'h0


`define FUNC4_BAR0_BARSIZE_TRGT1 128'h0


`define FUNC4_BAR2_BARSIZE_TRGT1 128'h0


`define FUNC4_BAR4_BARSIZE_TRGT1 128'h0


`define FUNC4_BAR0_TRGT1_ADDR_WIDTH 1


`define FUNC4_BAR2_TRGT1_ADDR_WIDTH 1


`define FUNC4_BAR4_TRGT1_ADDR_WIDTH 1


// Name:         CX_NUM_RBARS_4
// Default:      0 ([calc_num_rbars CX_BAR0_RESIZABLE_4 CX_BAR1_RESIZABLE_4 
//               CX_BAR2_RESIZABLE_4 CX_BAR3_RESIZABLE_4 CX_BAR4_RESIZABLE_4 
//               CX_BAR5_RESIZABLE_4])
// Values:       -2147483648, ..., 2147483647
// 
// Number of resizable BARs
`define CX_NUM_RBARS_4 0

//-/ END:   BAR CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SR-IOV CAPABILITIES CONFIGURATION


// Name:           CX_VF_DEPENDENCY_LINK_4
// Default:        0x4
// Values:         0x0, ..., 0xff
// Enabled:        CX_VF_DEPENDENCY_LINK_SUPP && (CX_NFUNC > 4) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Specifies the 8-bit VF dependency link for PF4. Valid only if CX_VF_DEPENDENCY_LINK_SUPP=1.
`define CX_VF_DEPENDENCY_LINK_4 8'h4


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER1_4
// Default:        0x2 ((CX_NFUNC>=17) ? 32 : (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : 
//                 (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF4 in an ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER1_4 16'h2


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER0_4
// Default:        0x100
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF4 
//  in a non-ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER0_4 16'h100


// Name:           VF_STRIDE_ARI_CAP_HIER1_4
// Default:        0x2 (CX_VF_STRIDE_ALWAYS_ONE) ? 1 : ((CX_NFUNC>=17) ? 32 : 
//                 (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF4 in an ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER1_4 16'h2


// Name:           VF_STRIDE_ARI_CAP_HIER0_4
// Default:        0x100 ((CX_VF_STRIDE_ALWAYS_ONE) ? 0x0001 : 0x0100)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF4 in a non-ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER0_4 16'h100


// Name:           CX_VF_DEVICE_ID_4
// Default:        0x0 (CX_DEVICE_ID_4)
// Values:         0x0, ..., 0xffff
// Enabled:        (CX_NFUNC > 4) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 16-bit virtual function Device ID for PF4. 
//  It might be different from the physical function's.
`define CX_VF_DEVICE_ID_4 16'h0


// Name:           CX_VF_SUPP_PAGE_SIZE_4
// Default:        0x553
// Values:         0x553, ..., 0xffff
// Enabled:        (CX_NFUNC > 4) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 32-bit supported page sizes for virtual functions for PF4
`define CX_VF_SUPP_PAGE_SIZE_4 32'h553


// Name:           CX_ARI_CAP_HIER_PRSVD_4
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Specifies if ARI Capable Hierarchy bit is preserved across certain power state transitions 
//  Only present in PF0. Read Only Zero in this PF4.
`define CX_ARI_CAP_HIER_PRSVD_4 1'h0

//-/===========================================
//-/ START: VF BAR CONFIGURATION


// Name:           VF_BAR0_ENABLED_4
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 4)
// Parameter Type: Feature Setting
// 
// Include the VF BAR0 registers in PF4
`define VF_BAR0_ENABLED_4 1'h1


`define VF_DEFAULT_BAR0_ENABLED_4 1'h1


// Name:           VF_MEM0_SPACE_DECODER_4
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR0_ENABLED_4 && CX_SRIOV_ENABLE && (CX_NFUNC > 4)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Space Indicator 
//  ALWAYS set to Memory for Virtual Functions
`define VF_MEM0_SPACE_DECODER_4 1'h0


// Name:           VF_PREFETCHABLE0_4
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_4==1 && VF_MEM0_SPACE_DECODER_4==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 4)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Prefetchable 
//  When set indicates VF BAR0 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE0_4 1'h0


// Name:           VF_BAR0_TYPE_4
// Default:        64-bit ((VF_MEM0_SPACE_DECODER_4==1 || VF_BAR0_ENABLED_4==0) ? 0 : 
//                 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR0_ENABLED_4==1 && VF_MEM0_SPACE_DECODER_4==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 4)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 4; (bits [2:1] for a memory BAR).
`define VF_BAR0_TYPE_4 2'h2


// Name:           VF_BAR0_MASK_WRITABLE_4
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_4==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 4)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR0_MASK_WRITABLE_4 1'h0


// Name:           VF_BAR0_MASK_4
// Default:        0xfffff (VF_MEM0_SPACE_DECODER_4==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR0_ENABLED_4==1 && VF_MEM0_SPACE_DECODER_4==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 4)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Mask 
//  Determines the default of the VF BAR Mask register for PF4. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR0_MASK_4 64'hfffff


// Name:           VF_MEM_FUNC4_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR0_ENABLED_4==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 4)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF4 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC4_BAR0_TARGET_MAP 1'h1


// Name:           VF_BAR1_ENABLED_4
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        (VF_BAR0_TYPE_4==0)  && CX_SRIOV_ENABLE && (CX_NFUNC > 4)
// Parameter Type: Feature Setting
// 
// Include the VF BAR1 registers in PF4
`define VF_BAR1_ENABLED_4 1'h0


`define VF_DEFAULT_BAR1_ENABLED_4 1'h0


// Name:           VF_MEM1_SPACE_DECODER_4
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR1_ENABLED_4==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 4)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Space Indicator
`define VF_MEM1_SPACE_DECODER_4 1'h0


// Name:           VF_PREFETCHABLE1_4
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_4==1 && VF_MEM1_SPACE_DECODER_4==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 4)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Prefetchable 
//  When set indicates VF BAR1 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE1_4 1'h0


// Name:           VF_BAR1_TYPE_4
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 4; (bits [2:1] for a memory BAR).
`define VF_BAR1_TYPE_4 2'h0


// Name:           VF_BAR1_MASK_WRITABLE_4
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_4==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 4)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR1_MASK_WRITABLE_4 1'h0


// Name:           VF_BAR1_MASK_4
// Default:        0xffff (VF_MEM1_SPACE_DECODER_4==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR1_ENABLED_4==1 && VF_MEM1_SPACE_DECODER_4==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 4)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Mask 
//  Determines the default of the VF BAR Mask register for PF4. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR1_MASK_4 32'hffff


// Name:           VF_MEM_FUNC4_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR1_ENABLED_4==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 4)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF4 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC4_BAR1_TARGET_MAP 1'h1


// Name:           VF_BAR2_ENABLED_4
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 4)
// Parameter Type: Feature Setting
// 
// Include the VF BAR2 registers in PF4
`define VF_BAR2_ENABLED_4 1'h1


`define VF_DEFAULT_BAR2_ENABLED_4 1'h1


// Name:           VF_MEM2_SPACE_DECODER_4
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR2_ENABLED_4==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 4)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Memory Space Indicator
`define VF_MEM2_SPACE_DECODER_4 1'h0


// Name:           VF_PREFETCHABLE2_4
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_4==1 && VF_MEM2_SPACE_DECODER_4==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 4)
// Parameter Type: Register Default Setting
// 
// BAR2 Memory Prefetchable 
//  When set indicates VF BAR2 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE2_4 1'h0


// Name:           VF_BAR2_TYPE_4
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR2_ENABLED_4==1 && VF_MEM2_SPACE_DECODER_4==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 4)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 4; (bits [2:1] for a memory BAR).
`define VF_BAR2_TYPE_4 2'h0


// Name:           VF_BAR2_MASK_WRITABLE_4
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_4==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 4)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR2_MASK_WRITABLE_4 1'h0


// Name:           VF_BAR2_MASK_4
// Default:        0xfffff (VF_MEM2_SPACE_DECODER_4==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR2_ENABLED_4==1 && VF_MEM2_SPACE_DECODER_4==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 4)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Mask 
//  Determines the default of the VF BAR Mask register for PF4. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR2_MASK_4 64'hfffff


// Name:           VF_MEM_FUNC4_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR2_ENABLED_4==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 4)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF4 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC4_BAR2_TARGET_MAP 1'h1


// Name:           VF_BAR3_ENABLED_4
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_TYPE_4==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 4)
// Parameter Type: Feature Setting
// 
// Include the VF BAR3 registers in PF4
`define VF_BAR3_ENABLED_4 1'h0


`define VF_DEFAULT_BAR3_ENABLED_4 1'h0


// Name:           VF_MEM3_SPACE_DECODER_4
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR3_ENABLED_4==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 4)
// Parameter Type: Register Default Setting
// 
// BAR3 Memory Space Indicator
`define VF_MEM3_SPACE_DECODER_4 1'h0


// Name:           VF_PREFETCHABLE3_4
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_4==1 && VF_MEM3_SPACE_DECODER_4==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 4)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Memory Prefetchable 
//  When set indicates VF BAR3 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE3_4 1'h0


// Name:           VF_BAR3_TYPE_4
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 4; (bits [2:1] for a memory BAR).
`define VF_BAR3_TYPE_4 2'h0


// Name:           VF_BAR3_MASK_WRITABLE_4
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_4==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 4)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR3_MASK_WRITABLE_4 1'h0


// Name:           VF_BAR3_MASK_4
// Default:        0xffff (VF_MEM3_SPACE_DECODER_4==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR3_ENABLED_4==1 && VF_MEM3_SPACE_DECODER_4==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 4)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Mask 
//  Determines the default of the VF BAR Mask register for PF4. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR3_MASK_4 32'hffff


// Name:           VF_MEM_FUNC4_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR3_ENABLED_4==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 4)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF4 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC4_BAR3_TARGET_MAP 1'h1


// Name:           VF_BAR4_ENABLED_4
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 4)
// Parameter Type: Feature Setting
// 
// Include the VF BAR4 registers in PF4
`define VF_BAR4_ENABLED_4 1'h1


`define VF_DEFAULT_BAR4_ENABLED_4 1'h1


// Name:           VF_MEM4_SPACE_DECODER_4
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR4_ENABLED_4==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 4)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Space Indicator
`define VF_MEM4_SPACE_DECODER_4 1'h0


// Name:           VF_PREFETCHABLE4_4
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_4==1 && VF_MEM4_SPACE_DECODER_4==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 4)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Prefetchable 
//  When set indicates VF BAR4 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE4_4 1'h0


// Name:           VF_BAR4_TYPE_4
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR4_ENABLED_4==1 && VF_MEM4_SPACE_DECODER_4==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 4)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 4; (bits [2:1] for a memory BAR).
`define VF_BAR4_TYPE_4 2'h0


// Name:           VF_BAR4_MASK_WRITABLE_4
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_4==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 4)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR4_MASK_WRITABLE_4 1'h0


// Name:           VF_BAR4_MASK_4
// Default:        0xfff (VF_MEM4_SPACE_DECODER_4==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR4_ENABLED_4==1 && VF_MEM4_SPACE_DECODER_4==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 4)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Mask 
//  Determines the default of the VF BAR Mask register for PF4. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR4_MASK_4 64'hfff


// Name:           VF_MEM_FUNC4_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR4_ENABLED_4==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 4)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF4 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC4_BAR4_TARGET_MAP 1'h1


// Name:           VF_BAR5_ENABLED_4
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_TYPE_4==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 4)
// Parameter Type: Feature Setting
// 
// Include the VF BAR5 registers in PF4
`define VF_BAR5_ENABLED_4 1'h0


`define VF_DEFAULT_BAR5_ENABLED_4 1'h0


// Name:           VF_MEM5_SPACE_DECODER_4
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR5_ENABLED_4==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 4)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Space Indicator
`define VF_MEM5_SPACE_DECODER_4 1'h0


// Name:           VF_PREFETCHABLE5_4
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_4==1 && VF_MEM5_SPACE_DECODER_4==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 4)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Prefetchable 
//  When set indicates VF BAR5 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE5_4 1'h0


// Name:           VF_BAR5_TYPE_4
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 4; (bits [2:1] for a memory BAR).
`define VF_BAR5_TYPE_4 2'h0


// Name:           VF_BAR5_MASK_WRITABLE_4
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_4==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 4)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR5_MASK_WRITABLE_4 1'h0


// Name:           VF_BAR5_MASK_4
// Default:        0xffff (VF_MEM5_SPACE_DECODER_4==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR5_ENABLED_4==1 && VF_MEM5_SPACE_DECODER_4==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 4)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Mask 
//  Determines the default of the VF BAR Mask register for PF4. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR5_MASK_4 32'hffff


// Name:           VF_MEM_FUNC4_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR5_ENABLED_4==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 4)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF4 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC4_BAR5_TARGET_MAP 1'h1


`define VF_FUNC4_BARSIZE_32 128'h101000


`define VF_FUNC4_BARSIZE 128'h201000

//-/ END:   VF BAR CONFIGURATION
//-/===========================================

//-/ END:   SR-IOV CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: TPH CAPABILITIES CONFIGURATION


// Name:           TPH_IVEC_4
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Interrupt Vector Mode. If set indicates that the function supports the Interrupt Vector 
// Mode of operation. Function 4.
`define TPH_IVEC_4 1'h0


// Name:           TPH_DS_4
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Device Specific Mode. If set indicates that the function supports the Device Specific Mode 
// of operation. Function 4.
`define TPH_DS_4 1'h0


// Name:           TPH_ST_TABLE_LOC_4
// Default:        Not Present
// Values:         Not Present (0), TPH Requester Capability Structure (1), MSI-X 
//                 Table Structure (2)
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_DS_4 || TPH_IVEC_4))
// Parameter Type: Feature Setting
// 
// TLP Processing Hints Steering Tag Table Location. Value indicates if and where the ST Table is located. Function 4.
`define TPH_ST_TABLE_LOC_4 0

//located in the TPH Requester Capability structure. Please reduce the ST Table Size for this mode of operation"

// Name:           TPH_ST_TABLE_SIZE_4
// Default:        1
// Values:         1, ..., 2048
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_ST_TABLE_LOC_4 != 0))
// Parameter Type: Feature Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define TPH_ST_TABLE_SIZE_4 1


`define TPH_ST_TABLE_DEPTH_4 0

//-/ END:   TPH CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: ATS CAPABILITIES CONFIGURATION


// Name:           ATS_INV_Q_DPTH_4
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// The number of Invalidate Requests that the Function can accept before putting backpressure on the upstream connection. A 
// value of 0 indicates the function can accept 32 Invalidate requests. Function 4.
`define ATS_INV_Q_DPTH_4 5'd0


// Name:           ATS_STU_4
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// This value indicates to the Function the minimum number of 4096-byte blocks that is indicated in a Translation 
// Completion or Invalidate Request. This is a power of 2 multiplier and the number of blocks is 2^STU. A value of 0 indicates 1 block 
// and a value of 31 indicates 2^31 blocks (or 8 TB total). Function 4.
`define ATS_STU_4 5'd0

//-/ END:   ATS CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PRS CAPABILITIES CONFIGURATION


// Name:           CX_PRS_OUTSTANDING_CAPACITY_VALUE_4
// Default:        0x1
// Values:         0x0, ..., 0xffffffff
// Enabled:        (CX_PRS_ENABLE==1) && (CX_NFUNC > 4)
// Parameter Type: Register Default Setting
// 
// Register default for PRS Outstanding Capacity in PF4. 
// For more details, see the PRS_OUTSTANDING_CAPACITY field in the PRS_REQ_CAPACITY_REG register.
`define CX_PRS_OUTSTANDING_CAPACITY_VALUE_4 32'h1

//-/ END:   PRS CAPABILITIES CONFIGURATION
//-/===========================================


//-/===========================================
//--- START: RN


// Name:           CX_RN_IMM_VALUE_4
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 4)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for PF4.
`define CX_RN_IMM_VALUE_4 1'h0


// Name:           CX_RN_IMM_D0_VALUE_4
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 4)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for PF4.
`define CX_RN_IMM_D0_VALUE_4 1'h0


// Name:           CX_RN_FRS_VALUE_4
// Default:        0x0 (CX_RN_FRS_SUPPORTED==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_FRS_SUPPORTED==1) && (CX_NFUNC > 4)
// Parameter Type: Feature Setting
// 
// Function Readiness Status messaging supported for function PF4.
`define CX_RN_FRS_VALUE_4 1'h0


// Name:           CX_RN_RTR_VALID_4
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 4)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF4.
`define CX_RN_RTR_VALID_4 1'h0


// Name:           CX_RN_RTR_DL_UP_VALUE_4
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 4)
// Parameter Type: Register Default Setting
// 
// Register default for RTR DL Up Time field in PF4.
`define CX_RN_RTR_DL_UP_VALUE_4 12'h0


// Name:           CX_RN_RTR_RESET_VALUE_4
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 4)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF4.
`define CX_RN_RTR_RESET_VALUE_4 12'h0


// Name:           CX_RN_RTR_D3D0_VALUE_4
// Default:        0x0
// Values:         0x0, ..., 0x80a
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 4)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF4.
`define CX_RN_RTR_D3D0_VALUE_4 12'h0


// Name:           CX_RN_RTR_FLR_VALUE_4
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_FLR_ENABLE==1) && (CX_NFUNC > 4)
// Parameter Type: Register Default Setting
// 
// Register default for RTR FLR Time field in PF4.
`define CX_RN_RTR_FLR_VALUE_4 12'h0


// Name:           VF_RN_IMM_VALUE_4
// Default:        0x0 (CX_RN_IMM_VALUE_4 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 4))
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for VFs in PF4.
`define VF_RN_IMM_VALUE_4 1'h0


// Name:           VF_RN_IMM_D0_VALUE_4
// Default:        0x0 (CX_RN_IMM_D0_VALUE_4 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 4))
// Parameter Type: Register Default Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for VFs in PF4.
`define VF_RN_IMM_D0_VALUE_4 1'h0


// Name:           VF_RN_RTR_VALID_4
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 4) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF4 VFs.
`define VF_RN_RTR_VALID_4 1'h0


// Name:           VF_RN_RTR_RESET_VALUE_4
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_4)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 4) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF4 VFS.
`define VF_RN_RTR_RESET_VALUE_4 12'h0


// Name:           VF_RN_RTR_D3D0_VALUE_4
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_4)
// Values:         0x0, ..., 0x80a
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 4) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF4 VFS.
`define VF_RN_RTR_D3D0_VALUE_4 12'h0


// Name:           VF_RN_RTR_FLR_VALUE_4
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_4)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 4) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF4 VFs.
`define VF_RN_RTR_FLR_VALUE_4 12'h0


// Name:           EXT_VF_RN_RTR_VALID_4
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 4) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF4 VFs.
`define EXT_VF_RN_RTR_VALID_4 1'h0


// Name:           EXT_VF_RN_RTR_RESET_VALUE_4
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_4)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 4) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF4 VFS.
`define EXT_VF_RN_RTR_RESET_VALUE_4 12'h0


// Name:           EXT_VF_RN_RTR_D3D0_VALUE_4
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_4)
// Values:         0x0, ..., 0x80a
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 4) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF4 VFS.
`define EXT_VF_RN_RTR_D3D0_VALUE_4 12'h0


// Name:           EXT_VF_RN_RTR_FLR_VALUE_4
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_4)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 4) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF4 VFs.
`define EXT_VF_RN_RTR_FLR_VALUE_4 12'h0

//-/ END:   RN
//-/===========================================

//-/ START: LN CAPABILITIES CONFIGURATION
//-/===========================================


// Name:           CX_LN_REG_MAX_VALUE_4
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 4))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_64_SUPPORTED field in the LNR_CAP_OFF register for PF4.
`define CX_LN_REG_MAX_VALUE_4 5'h0


// Name:           CX_LN_128_SUPPORTED_VALUE_4
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 4))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_128_SUPPORTED field in the LNR_CAP_OFF register for PF4.
`define CX_LN_128_SUPPORTED_VALUE_4 1'h0


// Name:           CX_LN_64_SUPPORTED_VALUE_4
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 4))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_REGISTRATION_MAX field in the LNR_CAP_OFF register for PF4.
`define CX_LN_64_SUPPORTED_VALUE_4 1'h0

//-/ END:   LN CAPABILITIES CONFIGURATION
//-/===========================================




//-/==========================================
//-/ End FUNC4 Config
//-/==========================================

//-/===========================================
//-/ Function 5 Configuration Registers
//-/ ==========================================


// Name:         FUNC_5
// Default:      0 ((CX_NFUNC > 5) ? 1 : 0)
// Values:       0, 1
// 
// This parameter indicates that Function 5 is present
// `define FUNC_5

//-/===========================================
//-/ START: PCI-E CAPABILITIES CONFIGURATION


// Name:           PCIE_CAP_INT_MSG_NUM_5
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 5
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Message Number field in the PCI Express Capabilities Register. Function 5.
`define PCIE_CAP_INT_MSG_NUM_5 5'h0


// Name:           SLOT_IMPLEMENTED_5
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_NFUNC > 5))
// Parameter Type: Register Default Setting
// 
// Indicates that the PCI Express link associated with this Port is connected to a slot. Function 5.
`define SLOT_IMPLEMENTED_5 1'h0


// Name:           DEFAULT_PHANTOM_FUNC_SUPPORTED_5
// Default:        0x0
// Values:         0x0, ..., 0x3
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_PHANTOM_FUNC_SUPPORTED_5 2'h0


// Name:           DEFAULT_EXT_TAG_FIELD_SUPPORTED_5
// Default:        0x0 (DEFAULT_EXT_TAG_FIELD_SUPPORTED_0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 5
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_EXT_TAG_FIELD_SUPPORTED_5 1'h0



// Name:           DEFAULT_ATT_BUTT_PRE_5
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 5
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Button is present
`define DEFAULT_ATT_BUTT_PRE_5 1'h0


// Name:           DEFAULT_ATT_IND_PRE_5
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 5
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Indicator is present
`define DEFAULT_ATT_IND_PRE_5 1'h0


// Name:           DEFAULT_PWR_IND_PRE_5
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 5
// Parameter Type: Register Default Setting
// 
// When set indicates that a Power Indicator is present
`define DEFAULT_PWR_IND_PRE_5 1'h0


// Name:           DEFAULT_NO_SNOOP_SUPPORTED_5
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 5
// Parameter Type: Register Default Setting
// 
// Default value for the Enable No Snoop bit in the Device Control Register. Function 5.
`define DEFAULT_NO_SNOOP_SUPPORTED_5 1'h0


// Name:           ROOT_RCB_5
// Default:        64-bit
// Values:         64-bit (0x0), 128-bit (0x1)
// Parameter Type: Register Default Setting
// 
// Default value for the Read Completion Boundary (RCB) bit in the Link Control Register.
`define ROOT_RCB_5 1'h0


//-/ END:   PCI-E CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: MSI-X CAPABILITIES CONFIGURATION


// Name:           MSIX_TABLE_SIZE_5
// Default:        0x0
// Values:         0x0, ..., 0x7ff
// Enabled:        CX_NFUNC > 5 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the MSI-X Table Size field in the MSI-X Control Register. Function 5.
`define MSIX_TABLE_SIZE_5 11'h0


// Name:           MSIX_TABLE_BIR_5
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 5 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table BAR Indicator Register (BIR) field in the MSI-X Table Offset and BIR Register. Function 5.
`define MSIX_TABLE_BIR_5 3'h0


// Name:           MSIX_TABLE_OFFSET_5
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 5 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table Offset field in the MSI-X Table Offset and BIR Register. Function 5.
`define MSIX_TABLE_OFFSET_5 29'h0


// Name:           MSIX_PBA_BIR_5
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 5 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Pending Bit Array (PBA) BIR field in the MSI-X PBA Offset and BIR Register. Function 5.
`define MSIX_PBA_BIR_5 7'h0


// Name:           MSIX_PBA_OFFSET_5
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 5 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the PBA Offset field in the MSI-X PBA Offset and BIR Register. Function 5.
`define MSIX_PBA_OFFSET_5 29'h0

//-/ END:   MSI-X CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SATA CAPABILITIES CONFIGURATION


// Name:         SATA_HBA_OFFSET_5
// Default:      0x0
// Values:       0x0, ..., 0xfffff
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA Offset. Base address of the SATA HBA registers, 
//  as an offset from the base address of the BAR indicated 
//  by the SATA BAR field.
`define SATA_HBA_OFFSET_5 20'h0


// Name:         SATA_BAR_5
// Default:      0x0
// Values:       0x0, ..., 0xf
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA BAR. The bar that maps to SATA HBA registers,
`define SATA_BAR_5 4'h0

//-/ END:   SATA CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: AER CAPABILITIES CONFIGURATION


// Name:           DEFAULT_ECRC_CHK_CAP_5
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 5 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Check Capable bit in the Advanced Capabilities and Control Register. Function 5.
`define DEFAULT_ECRC_CHK_CAP_5 1'h1


// Name:           DEFAULT_ECRC_GEN_CAP_5
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 5 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Generation Capability bit in the Advanced Capabilities and Control Register. Function 5.
`define DEFAULT_ECRC_GEN_CAP_5 1'h1


// Name:           AER_INT_MSG_NUM_5
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Parameter Type: Register Default Setting
// 
// Default value for the Advanced Error Interrupt Message Number field of the Root Error Status Register. Function 5.
`define AER_INT_MSG_NUM_5 5'h0



// Name:           CX_HDR_LOG_DEPTH_5
// Default:        0x1
// Values:         0x1, 0x2, 0x4
// Enabled:        CX_NFUNC > 5 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Feature Setting.
// 
// Header Log Depth
`define CX_HDR_LOG_DEPTH_5 3'h1


`define CX_MULTIPLE_HDR_REC_CAP_5 1'h0

//-/ END:   AER CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PM CAPABILITIES CONFIGURATION


// Name:           PME_SUPPORT_5
// Default:        0x1b
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 5
// Parameter Type: Register Default Setting
// 
// Default value for the PME_Support field in the Power Management Capabilities Register. Function 5.
`define PME_SUPPORT_5 5'h1b


// Name:           D1_SUPPORT_5
// Default:        true
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 5
// Parameter Type: Register Default Setting
// 
// Default value for the D1 Support bit in the Power Management Capabilities Register. Function 5.
`define D1_SUPPORT_5 1'h1


// Name:           D2_SUPPORT_5
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 5
// Parameter Type: Register Default Setting
// 
// Default value for the D2 Support bit in the Power Management Capabilities Register. Function 5.
`define D2_SUPPORT_5 1'h0


// Name:           DEV_SPEC_INIT_5
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 5
// Parameter Type: Register Default Setting
// 
// Default value for the Device Specific Initialization (DSI) bit in the Power Management Capabilities Register. Function 
// 5.
`define DEV_SPEC_INIT_5 1'h0


// Name:           AUX_CURRENT_5
// Default:        375mA
// Values:         0mA (0x0), 55mA (0x1), 100mA (0x2), 160mA (0x3), 220mA (0x4), 270mA 
//                 (0x5), 320mA (0x6), 375mA (0x7)
// Enabled:        CX_NFUNC > 5
// Parameter Type: Register Default Setting
// 
// Default value for the Aux Current field in the Power Management Capabilities Register. Function 5.
`define AUX_CURRENT_5 3'h7


// Name:           DEFAULT_NO_SOFT_RESET_5
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 5
// Parameter Type: Register Default Setting
// 
// Default value for the No Soft Reset bit in the Power Management Control and Status Register. When set, you should not 
// reset any controller registers when transitioning from D3hot to D0. Therefore, you should not assert the non_sticky_rst_n 
// and sticky_rst_n inputs. Function 5.
`define DEFAULT_NO_SOFT_RESET_5 1'h0

//-/ END:   PM CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PCI BASIC CONFIGURATION


// Name:           CX_DEVICE_ID_5
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 5
// Parameter Type: Register Default Setting
// 
// Default value for the Device ID field in the Device ID and Vendor ID Register. Function 5.
`define CX_DEVICE_ID_5 16'h0


// Name:           CX_VENDOR_ID_5
// Default:        0x16c3
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 5
// Parameter Type: Register Default Setting
// 
// Default value for the Vendor ID field in the Device ID and Vendor ID Register. Function 5.
`define CX_VENDOR_ID_5 16'h16c3


// Name:           CX_REVISION_ID_5
// Default:        0x1
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 5
// Parameter Type: Register Default Setting
// 
// Default value for the Revision ID field in the Revision ID Register. Function 5.
`define CX_REVISION_ID_5 8'h1


// Name:           SUBSYS_DEV_ID_5
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 5
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 5.
`define SUBSYS_DEV_ID_5 16'h0


// Name:           SUBSYS_VENDOR_ID_5
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 5
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem Vendor ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 5.
`define SUBSYS_VENDOR_ID_5 16'h0


// Name:           BASE_CLASS_CODE_5
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 5
// Parameter Type: Register Default Setting
// 
// Default value for the Base Class Code field in the Class Code Register. Function 5.
`define BASE_CLASS_CODE_5 8'h0


// Name:           SUB_CLASS_CODE_5
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 5
// Parameter Type: Register Default Setting
// 
// Default value for the Subclass Code field in the Class Code Register. Function 5.
`define SUB_CLASS_CODE_5 8'h0


// Name:           IF_CODE_5
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 5
// Parameter Type: Register Default Setting
// 
// Default value for the Programming Interface field in the Class Code Register. Function 5.
`define IF_CODE_5 8'h0


// Name:           CARDBUS_CIS_PTR_5
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 5
// Parameter Type: Register Default Setting
// 
// Default value for the CardBus CIS Pointer Register. Function 5.
`define CARDBUS_CIS_PTR_5 16'h0


// Name:           INT_PIN_MAPPING_5
// Default:        INTA
// Values:         None (0x0), INTA (0x1), INTB (0x2), INTC (0x3), INTD (0x4)
// Enabled:        CX_NFUNC > 5
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Pin Register. Function 5.
`define INT_PIN_MAPPING_5 8'h1


// Name:           IO_DECODE_32_5
// Default:        16-bit
// Values:         16-bit (0x0), 32-bit (0x1)
// Enabled:        CX_NFUNC > 5
// Parameter Type: Register Default Setting
// 
// Default value for the 32-Bit I/O Space bit in the I/O Base and I/O Limit Register. Function 5.
`define IO_DECODE_32_5 1'h0


// Name:           MEM_DECODE_64_5
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x1)
// Enabled:        CX_NFUNC > 5
// Parameter Type: Register Default Setting
// 
// Default value for the 64-Bit Memory Addressing bit in the Prefetchable Memory Base and Limit Register. Function 5.
`define MEM_DECODE_64_5 1'h0


// Name:           ROM_BAR_ENABLED_5
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 5
// Parameter Type: Register Default Setting
// 
// Include the expansion ROM BAR registers. Function 5.
`define ROM_BAR_ENABLED_5 1'h1


`define DEFAULT_ROM_BAR_ENABLED_5 1'h1


// Name:           ROM_MASK_5
// Default:        0xffff
// Values:         0x7ff, ..., 0xffffff
// Enabled:        CX_NFUNC > 5 && ROM_BAR_ENABLED_5==1
// Parameter Type: Register Default Setting
// 
// Determines the default of the Expansion ROM BAR Mask register. Function 5. 
//  - The BAR Mask register specifies which bits of the Expansion ROM BAR are non-writable by host software, which 
//  determines the size of the BAR. 
//  - The maximum value for ROM_MASK_N is 0xFFFFFF because the maximum space that can be claimed by an Expansion ROM BAR 
//  is 16 MB. 
//  - For example: 32'hFFFF =BAR size of 2^16.
`define ROM_MASK_5 32'hffff


// Name:           ROM_MASK_WRITABLE_5
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 5 && ROM_BAR_ENABLED_5==1
// Parameter Type: Feature Setting
// 
// Determines if the Expansion ROM BAR Mask register for function 5 is writable by application software. If writing to a 
// Expansion ROM BAR Mask register is enabled, your application can write to the Expansion ROM BAR Mask register through the 
// DBI by asserting dbi_cs2 in addition to dbi_cs.
`define ROM_MASK_WRITABLE_5 1'h0


// Name:           ROM_FUNC5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 5 && ROM_BAR_ENABLED_5==1 && TRGT1_POPULATE==1))
// Parameter Type: Register Default Setting
// 
// Direct incoming requests that pass filtering and match the Expansion ROM BAR of function 5 to either RTRGT0 or RTRGT1. 
//  - For example, setting ROM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for the Expansion ROM BAR of function 
//  0 to RTRGT1. 
//  - If TRGT1_POPULATE =0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define ROM_FUNC5_TARGET_MAP 1'h1


// Name:           CX_PCI_HEADER_DEFAULTS_VISIBLE_5
// Default:        0
// Values:         0, 1
// Parameter Type: Register Default Setting
// 
// Select here if you want to configure the defaults for the other PCI Standard Header registers for function 5. 
//  An extra window will appear under this page. To access it, click the plus/minus symbol in the hierarchy view on the 
//  left panel. 
//  This is optional but not usually recommended. 
//  You can also change these register defaults using the DBI before (or after) the link comes up.
`define CX_PCI_HEADER_DEFAULTS_VISIBLE_5 0

//-/ END:   PCI BASIC CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: BAR CONFIGURATION


// Name:           BAR0_ENABLED_5
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 5
// Parameter Type: Feature Setting
// 
// Include the BAR0 registers for function 5.
`define BAR0_ENABLED_5 1'h1


`define DEFAULT_BAR0_ENABLED_5 1'h1


// Name:           MEM0_SPACE_DECODER_5
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 5 && BAR0_ENABLED_5==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 5.
`define MEM0_SPACE_DECODER_5 1'h0


// Name:           PREFETCHABLE0_5
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 5 && BAR0_ENABLED_5==1 && MEM0_SPACE_DECODER_5==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 5.
`define PREFETCHABLE0_5 1'h0


// Name:           BAR0_TYPE_5
// Default:        64-bit ((MEM0_SPACE_DECODER_5==1 || BAR0_ENABLED_5==0) ? 0 : 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 5 && BAR0_ENABLED_5==1 && MEM0_SPACE_DECODER_5==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 5.
`define BAR0_TYPE_5 2'h2


// Name:           BAR0_SIZING_SCHEME_5
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 5 && BAR0_ENABLED_5==1
// Parameter Type: Feature Setting
// 
// BAR0 Function 5 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR0_SIZING_SCHEME_5 2'h0


// Name:           CX_BAR0_RESIZABLE_5
// Default:        0x0 ((BAR0_SIZING_SCHEME_5==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR0_ENABLED_5==1) && (MEM0_SPACE_DECODER_5==0)
// Parameter Type: Feature Setting
// 
// Defines BAR0 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR0 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR0_RESIZABLE_5 1'h0


// Name:           CX_BAR0_RESOURCE_AVAIL_5
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 5 && CX_BAR0_RESIZABLE_5==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR0 of function 5. 
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
// Example: 0x00000030 indicates that BAR0 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR0_RESOURCE_AVAIL_5 64'h10


// Name:           BAR0_MASK_WRITABLE_5
// Default:        0x0 ((BAR0_ENABLED_5==1 && BAR0_SIZING_SCHEME_5 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 5 && BAR0_ENABLED_5==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR0 Mask through DBI
`define BAR0_MASK_WRITABLE_5 1'h0


// Name:           BAR0_MASK_5
// Default:        0xfffff (CX_BAR0_RESIZABLE_5==1 ? [calc_bar_mask 
//                 CX_BAR0_RESOURCE_AVAIL_5] : MEM0_SPACE_DECODER_5==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 5 && BAR0_ENABLED_5==1 && MEM0_SPACE_DECODER_5==0 && 
//                 CX_BAR0_RESIZABLE_5==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR0 Mask register of function 5. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR0_MASK_5 64'hfffff


// Name:           MEM_FUNC5_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 5 && BAR0_ENABLED_5==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_0 of function 5 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming Requests for BAR0 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC5_BAR0_TARGET_MAP 1'h1


// Name:           BAR1_ENABLED_5
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 5 && BAR0_TYPE_5==0
// Parameter Type: Feature Setting
// 
// Include the BAR1 registers for function 5.
`define BAR1_ENABLED_5 1'h0


`define DEFAULT_BAR1_ENABLED_5 1'h0


// Name:           MEM1_SPACE_DECODER_5
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 5 && BAR1_ENABLED_5==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 5.
`define MEM1_SPACE_DECODER_5 1'h0


// Name:           PREFETCHABLE1_5
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 5 && BAR1_ENABLED_5==1 && MEM1_SPACE_DECODER_5==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 5.
`define PREFETCHABLE1_5 1'h0


// Name:           BAR1_TYPE_5
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 5.
`define BAR1_TYPE_5 2'h0


// Name:           BAR1_SIZING_SCHEME_5
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 5 && BAR1_ENABLED_5==1
// Parameter Type: Feature Setting
// 
// BAR1 Function 5 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR1_SIZING_SCHEME_5 2'h0


// Name:           CX_BAR1_RESIZABLE_5
// Default:        0x0 ((BAR1_SIZING_SCHEME_5==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR1_ENABLED_5==1) && (MEM1_SPACE_DECODER_5==0)
// Parameter Type: Feature Setting
// 
// Defines BAR1 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR1 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR1_RESIZABLE_5 1'h0


// Name:           CX_BAR1_RESOURCE_AVAIL_5
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 5 && CX_BAR1_RESIZABLE_5==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR1 of function 5. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR1 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR1_RESOURCE_AVAIL_5 32'h10


// Name:           BAR1_MASK_WRITABLE_5
// Default:        0x0 ((BAR1_ENABLED_5==1 && BAR1_SIZING_SCHEME_5 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 5 && BAR1_ENABLED_5==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR1 Mask through DBI
`define BAR1_MASK_WRITABLE_5 1'h0


// Name:           BAR1_MASK_5
// Default:        0xffff (CX_BAR1_RESIZABLE_5==1 ? [calc_bar_mask 
//                 CX_BAR1_RESOURCE_AVAIL_5] : MEM1_SPACE_DECODER_5==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 5 && BAR1_ENABLED_5==1 && MEM1_SPACE_DECODER_5==0 && 
//                 CX_BAR1_RESIZABLE_5==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR1 Mask register of function 5. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR1_MASK_5 32'hffff


// Name:           MEM_FUNC5_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 5 && BAR1_ENABLED_5==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_1 of function 5 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR1_TARGET_MAP to 1 maps all incoming Requests for BAR1 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC5_BAR1_TARGET_MAP 1'h1


// Name:           BAR2_ENABLED_5
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 5
// Parameter Type: Feature Setting
// 
// Include the BAR2 registers for function 5.
`define BAR2_ENABLED_5 1'h1


`define DEFAULT_BAR2_ENABLED_5 1'h1


// Name:           MEM2_SPACE_DECODER_5
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 5 && BAR2_ENABLED_5==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 5.
`define MEM2_SPACE_DECODER_5 1'h0


// Name:           PREFETCHABLE2_5
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 5 && BAR2_ENABLED_5==1 && MEM2_SPACE_DECODER_5==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 5.
`define PREFETCHABLE2_5 1'h0


// Name:           BAR2_TYPE_5
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 5 && BAR2_ENABLED_5==1 && MEM2_SPACE_DECODER_5==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 5.
`define BAR2_TYPE_5 2'h0


// Name:           BAR2_SIZING_SCHEME_5
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 5 && BAR2_ENABLED_5==1
// Parameter Type: Feature Setting
// 
// BAR2 Function 5 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR2_SIZING_SCHEME_5 2'h0


// Name:           CX_BAR2_RESIZABLE_5
// Default:        0x0 ((BAR2_SIZING_SCHEME_5==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR2_ENABLED_5==1) && (MEM2_SPACE_DECODER_5==0)
// Parameter Type: Feature Setting
// 
// Defines BAR2 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR2 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR2_RESIZABLE_5 1'h0


// Name:           CX_BAR2_RESOURCE_AVAIL_5
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 5 && CX_BAR2_RESIZABLE_5==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR2 of function 5. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR2 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR2_RESOURCE_AVAIL_5 64'h10


// Name:           BAR2_MASK_WRITABLE_5
// Default:        0x0 ((BAR2_ENABLED_5==1 && BAR2_SIZING_SCHEME_5 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 5 && BAR2_ENABLED_5==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR2 Mask through DBI
`define BAR2_MASK_WRITABLE_5 1'h0


// Name:           BAR2_MASK_5
// Default:        0xfffff (CX_BAR2_RESIZABLE_5==1 ? [calc_bar_mask 
//                 CX_BAR2_RESOURCE_AVAIL_5] : MEM2_SPACE_DECODER_5==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 5 && BAR2_ENABLED_5==1 && MEM2_SPACE_DECODER_5==0 && 
//                 CX_BAR2_RESIZABLE_5==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR2 Mask register of function 5. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR2_MASK_5 64'hfffff


// Name:           MEM_FUNC5_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 5 && BAR2_ENABLED_5==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_2 of function 5 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR2_TARGET_MAP to 1 maps all incoming requests for BAR2 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC5_BAR2_TARGET_MAP 1'h1


// Name:           BAR3_ENABLED_5
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 5 && BAR2_TYPE_5==0
// Parameter Type: Feature Setting
// 
// Include the BAR3 registers for function 5.
`define BAR3_ENABLED_5 1'h0



`define DEFAULT_BAR3_ENABLED_5 1'h0


// Name:           MEM3_SPACE_DECODER_5
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 5 && BAR3_ENABLED_5==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 5.
`define MEM3_SPACE_DECODER_5 1'h0


// Name:           PREFETCHABLE3_5
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 5 && BAR3_ENABLED_5==1 && MEM3_SPACE_DECODER_5==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 5.
`define PREFETCHABLE3_5 1'h0


// Name:           BAR3_TYPE_5
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 5.
`define BAR3_TYPE_5 2'h0


// Name:           BAR3_SIZING_SCHEME_5
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 5 && BAR3_ENABLED_5==1
// Parameter Type: Feature Setting
// 
// BAR3 Function 5 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR3_SIZING_SCHEME_5 2'h0


// Name:           CX_BAR3_RESIZABLE_5
// Default:        0x0 ((BAR3_SIZING_SCHEME_5==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR3_ENABLED_5==1) && (MEM3_SPACE_DECODER_5==0)
// Parameter Type: Feature Setting
// 
// Defines BAR3 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR3 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR3_RESIZABLE_5 1'h0


// Name:           CX_BAR3_RESOURCE_AVAIL_5
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 5 && CX_BAR3_RESIZABLE_5==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR3 of function 5. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR3 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR3_RESOURCE_AVAIL_5 32'h10


// Name:           BAR3_MASK_WRITABLE_5
// Default:        0x0 ((BAR3_ENABLED_5==1 && BAR3_SIZING_SCHEME_5 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 5 && BAR3_ENABLED_5==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR3 Mask through DBI
`define BAR3_MASK_WRITABLE_5 1'h0


// Name:           BAR3_MASK_5
// Default:        0xffff (CX_BAR3_RESIZABLE_5==1 ? [calc_bar_mask 
//                 CX_BAR3_RESOURCE_AVAIL_5] : MEM3_SPACE_DECODER_5==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 5 && BAR3_ENABLED_5==1 && MEM3_SPACE_DECODER_5==0 && 
//                 CX_BAR3_RESIZABLE_5==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR3 Mask register of function 5. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR3_MASK_5 32'hffff


// Name:           MEM_FUNC5_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 5 && BAR3_ENABLED_5==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_3 of function 5 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR3_TARGET_MAP to 1 maps all incoming requests for BAR3 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC5_BAR3_TARGET_MAP 1'h1


// Name:           BAR4_ENABLED_5
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 5
// Parameter Type: Feature Setting
// 
// Include the BAR4 registers for function 5.
`define BAR4_ENABLED_5 1'h1


`define DEFAULT_BAR4_ENABLED_5 1'h1



// Name:           MEM4_SPACE_DECODER_5
// Default:        I/O (BAR4_ENABLED_5==1)
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 5 && BAR4_ENABLED_5==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 5.
`define MEM4_SPACE_DECODER_5 1'h1


// Name:           PREFETCHABLE4_5
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 5 && BAR4_ENABLED_5==1 && MEM4_SPACE_DECODER_5==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 5.
`define PREFETCHABLE4_5 1'h0


// Name:           BAR4_TYPE_5
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 5 && BAR4_ENABLED_5==1 && MEM4_SPACE_DECODER_5==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 5.
`define BAR4_TYPE_5 2'h0


// Name:           BAR4_SIZING_SCHEME_5
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 5 && BAR4_ENABLED_5==1
// Parameter Type: Feature Setting
// 
// BAR4  Function 5 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR4_SIZING_SCHEME_5 2'h0


// Name:           CX_BAR4_RESIZABLE_5
// Default:        0x0 ((BAR4_SIZING_SCHEME_5==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR4_ENABLED_5==1) && (MEM4_SPACE_DECODER_5==0)
// Parameter Type: Feature Setting
// 
// Defines BAR4 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR4 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR4_RESIZABLE_5 1'h0


// Name:           CX_BAR4_RESOURCE_AVAIL_5
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 5 &&  CX_BAR4_RESIZABLE_5==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR4 of function 5. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR4 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR4_RESOURCE_AVAIL_5 64'h10


// Name:           BAR4_MASK_WRITABLE_5
// Default:        0x0 ((BAR4_ENABLED_5==1 && BAR4_SIZING_SCHEME_5 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 5 && BAR4_ENABLED_5==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR4 Mask through DBI
`define BAR4_MASK_WRITABLE_5 1'h0


// Name:           BAR4_MASK_5
// Default:        0xff (CX_BAR4_RESIZABLE_5==1 ? [calc_bar_mask 
//                 CX_BAR4_RESOURCE_AVAIL_5] : MEM4_SPACE_DECODER_5==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 5 && BAR4_ENABLED_5==1 && MEM4_SPACE_DECODER_5==0 && 
//                 CX_BAR4_RESIZABLE_5==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR4 Mask register of function 5. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR4_MASK_5 64'hff


// Name:           MEM_FUNC5_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 5 && BAR4_ENABLED_5==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_4 of function 5 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR4_TARGET_MAP to 1 maps all incoming requests for BAR4 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC5_BAR4_TARGET_MAP 1'h1


// Name:           BAR5_ENABLED_5
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 5 && BAR4_TYPE_5==0
// Parameter Type: Feature Setting
// 
// Include the BAR5 registers for function 5.
`define BAR5_ENABLED_5 1'h0


`define DEFAULT_BAR5_ENABLED_5 1'h0


// Name:           MEM5_SPACE_DECODER_5
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 5 && BAR5_ENABLED_5==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 5.
`define MEM5_SPACE_DECODER_5 1'h0


// Name:           PREFETCHABLE5_5
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 5 && BAR5_ENABLED_5==1 && MEM5_SPACE_DECODER_5==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 5.
`define PREFETCHABLE5_5 1'h0


// Name:           BAR5_TYPE_5
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 5.
`define BAR5_TYPE_5 2'h0


// Name:           BAR5_SIZING_SCHEME_5
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 5 && BAR5_ENABLED_5==1
// Parameter Type: Feature Setting
// 
// BAR5  Function 5 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR5_SIZING_SCHEME_5 2'h0


// Name:           CX_BAR5_RESIZABLE_5
// Default:        0x0 ((BAR5_SIZING_SCHEME_5==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR5_ENABLED_5==1) && (MEM5_SPACE_DECODER_5==0)
// Parameter Type: Feature Setting
// 
// Defines BAR5 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR5 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR5_RESIZABLE_5 1'h0


// Name:           CX_BAR5_RESOURCE_AVAIL_5
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 5 && CX_BAR5_RESIZABLE_5==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR5 of function 5. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR5 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR5_RESOURCE_AVAIL_5 32'h10


// Name:           BAR5_MASK_WRITABLE_5
// Default:        0x0 ((BAR5_ENABLED_5==1 && BAR5_SIZING_SCHEME_5 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 5 && BAR5_ENABLED_5==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR5 Mask through DBI
`define BAR5_MASK_WRITABLE_5 1'h0


// Name:           BAR5_MASK_5
// Default:        0xffff (CX_BAR5_RESIZABLE_5==1 ? [calc_bar_mask 
//                 CX_BAR5_RESOURCE_AVAIL_5] : MEM5_SPACE_DECODER_5==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 5 && BAR5_ENABLED_5==1 && MEM5_SPACE_DECODER_5==0 && 
//                 CX_BAR5_RESIZABLE_5==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR5 Mask register of function 5. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR5_MASK_5 32'hffff


// Name:           MEM_FUNC5_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 5 && BAR5_ENABLED_5==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_5 of function 5 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR5_TARGET_MAP to 1 maps all incoming requests for BAR5 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC5_BAR5_TARGET_MAP 1'h1


`define FUNC5_BARSIZE_32 128'h0


`define FUNC5_BARSIZE 128'h0


`define FUNC5_BAR0_BARSIZE_TRGT1 128'h0


`define FUNC5_BAR2_BARSIZE_TRGT1 128'h0


`define FUNC5_BAR4_BARSIZE_TRGT1 128'h0


`define FUNC5_BAR0_TRGT1_ADDR_WIDTH 1


`define FUNC5_BAR2_TRGT1_ADDR_WIDTH 1


`define FUNC5_BAR4_TRGT1_ADDR_WIDTH 1


// Name:         CX_NUM_RBARS_5
// Default:      0 ([calc_num_rbars CX_BAR0_RESIZABLE_5 CX_BAR1_RESIZABLE_5 
//               CX_BAR2_RESIZABLE_5 CX_BAR3_RESIZABLE_5 CX_BAR4_RESIZABLE_5 
//               CX_BAR5_RESIZABLE_5])
// Values:       -2147483648, ..., 2147483647
// 
// Number of resizable BARs
`define CX_NUM_RBARS_5 0

//-/ END:   BAR CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SR-IOV CAPABILITIES CONFIGURATION


// Name:           CX_VF_DEPENDENCY_LINK_5
// Default:        0x5
// Values:         0x0, ..., 0xff
// Enabled:        CX_VF_DEPENDENCY_LINK_SUPP && (CX_NFUNC > 5) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Specifies the 8-bit VF dependency link for PF5. Valid only if CX_VF_DEPENDENCY_LINK_SUPP=1.
`define CX_VF_DEPENDENCY_LINK_5 8'h5


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER1_5
// Default:        0x2 ((CX_NFUNC>=17) ? 32 : (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : 
//                 (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF5 in an ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER1_5 16'h2


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER0_5
// Default:        0x100
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF5 
//  in a non-ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER0_5 16'h100


// Name:           VF_STRIDE_ARI_CAP_HIER1_5
// Default:        0x2 (CX_VF_STRIDE_ALWAYS_ONE) ? 1 : ((CX_NFUNC>=17) ? 32 : 
//                 (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF5 in an ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER1_5 16'h2


// Name:           VF_STRIDE_ARI_CAP_HIER0_5
// Default:        0x100 ((CX_VF_STRIDE_ALWAYS_ONE) ? 0x0001 : 0x0100)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF5 in a non-ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER0_5 16'h100


// Name:           CX_VF_DEVICE_ID_5
// Default:        0x0 (CX_DEVICE_ID_5)
// Values:         0x0, ..., 0xffff
// Enabled:        (CX_NFUNC > 5) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 16-bit virtual function Device ID for PF5. 
//  It might be different from the physical function's.
`define CX_VF_DEVICE_ID_5 16'h0


// Name:           CX_VF_SUPP_PAGE_SIZE_5
// Default:        0x553
// Values:         0x553, ..., 0xffff
// Enabled:        (CX_NFUNC > 5) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 32-bit supported page sizes for virtual functions for PF5
`define CX_VF_SUPP_PAGE_SIZE_5 32'h553


// Name:           CX_ARI_CAP_HIER_PRSVD_5
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Specifies if ARI Capable Hierarchy bit is preserved across certain power state transitions 
//  Only present in PF0. Read Only Zero in this PF5.
`define CX_ARI_CAP_HIER_PRSVD_5 1'h0

//-/===========================================
//-/ START: VF BAR CONFIGURATION


// Name:           VF_BAR0_ENABLED_5
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 5)
// Parameter Type: Feature Setting
// 
// Include the VF BAR0 registers in PF5
`define VF_BAR0_ENABLED_5 1'h1


`define VF_DEFAULT_BAR0_ENABLED_5 1'h1


// Name:           VF_MEM0_SPACE_DECODER_5
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR0_ENABLED_5 && CX_SRIOV_ENABLE && (CX_NFUNC > 5)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Space Indicator 
//  ALWAYS set to Memory for Virtual Functions
`define VF_MEM0_SPACE_DECODER_5 1'h0


// Name:           VF_PREFETCHABLE0_5
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_5==1 && VF_MEM0_SPACE_DECODER_5==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 5)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Prefetchable 
//  When set indicates VF BAR0 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE0_5 1'h0


// Name:           VF_BAR0_TYPE_5
// Default:        64-bit ((VF_MEM0_SPACE_DECODER_5==1 || VF_BAR0_ENABLED_5==0) ? 0 : 
//                 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR0_ENABLED_5==1 && VF_MEM0_SPACE_DECODER_5==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 5)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 5; (bits [2:1] for a memory BAR).
`define VF_BAR0_TYPE_5 2'h2


// Name:           VF_BAR0_MASK_WRITABLE_5
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_5==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 5)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR0_MASK_WRITABLE_5 1'h0


// Name:           VF_BAR0_MASK_5
// Default:        0xfffff (VF_MEM0_SPACE_DECODER_5==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR0_ENABLED_5==1 && VF_MEM0_SPACE_DECODER_5==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 5)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Mask 
//  Determines the default of the VF BAR Mask register for PF5. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR0_MASK_5 64'hfffff


// Name:           VF_MEM_FUNC5_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR0_ENABLED_5==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 5)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF5 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC5_BAR0_TARGET_MAP 1'h1


// Name:           VF_BAR1_ENABLED_5
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        (VF_BAR0_TYPE_5==0)  && CX_SRIOV_ENABLE && (CX_NFUNC > 5)
// Parameter Type: Feature Setting
// 
// Include the VF BAR1 registers in PF5
`define VF_BAR1_ENABLED_5 1'h0


`define VF_DEFAULT_BAR1_ENABLED_5 1'h0


// Name:           VF_MEM1_SPACE_DECODER_5
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR1_ENABLED_5==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 5)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Space Indicator
`define VF_MEM1_SPACE_DECODER_5 1'h0


// Name:           VF_PREFETCHABLE1_5
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_5==1 && VF_MEM1_SPACE_DECODER_5==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 5)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Prefetchable 
//  When set indicates VF BAR1 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE1_5 1'h0


// Name:           VF_BAR1_TYPE_5
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 5; (bits [2:1] for a memory BAR).
`define VF_BAR1_TYPE_5 2'h0


// Name:           VF_BAR1_MASK_WRITABLE_5
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_5==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 5)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR1_MASK_WRITABLE_5 1'h0


// Name:           VF_BAR1_MASK_5
// Default:        0xffff (VF_MEM1_SPACE_DECODER_5==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR1_ENABLED_5==1 && VF_MEM1_SPACE_DECODER_5==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 5)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Mask 
//  Determines the default of the VF BAR Mask register for PF5. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR1_MASK_5 32'hffff


// Name:           VF_MEM_FUNC5_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR1_ENABLED_5==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 5)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF5 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC5_BAR1_TARGET_MAP 1'h1


// Name:           VF_BAR2_ENABLED_5
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 5)
// Parameter Type: Feature Setting
// 
// Include the VF BAR2 registers in PF5
`define VF_BAR2_ENABLED_5 1'h1


`define VF_DEFAULT_BAR2_ENABLED_5 1'h1


// Name:           VF_MEM2_SPACE_DECODER_5
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR2_ENABLED_5==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 5)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Memory Space Indicator
`define VF_MEM2_SPACE_DECODER_5 1'h0


// Name:           VF_PREFETCHABLE2_5
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_5==1 && VF_MEM2_SPACE_DECODER_5==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 5)
// Parameter Type: Register Default Setting
// 
// BAR2 Memory Prefetchable 
//  When set indicates VF BAR2 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE2_5 1'h0


// Name:           VF_BAR2_TYPE_5
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR2_ENABLED_5==1 && VF_MEM2_SPACE_DECODER_5==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 5)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 5; (bits [2:1] for a memory BAR).
`define VF_BAR2_TYPE_5 2'h0


// Name:           VF_BAR2_MASK_WRITABLE_5
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_5==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 5)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR2_MASK_WRITABLE_5 1'h0


// Name:           VF_BAR2_MASK_5
// Default:        0xfffff (VF_MEM2_SPACE_DECODER_5==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR2_ENABLED_5==1 && VF_MEM2_SPACE_DECODER_5==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 5)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Mask 
//  Determines the default of the VF BAR Mask register for PF5. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR2_MASK_5 64'hfffff


// Name:           VF_MEM_FUNC5_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR2_ENABLED_5==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 5)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF5 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC5_BAR2_TARGET_MAP 1'h1


// Name:           VF_BAR3_ENABLED_5
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_TYPE_5==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 5)
// Parameter Type: Feature Setting
// 
// Include the VF BAR3 registers in PF5
`define VF_BAR3_ENABLED_5 1'h0


`define VF_DEFAULT_BAR3_ENABLED_5 1'h0


// Name:           VF_MEM3_SPACE_DECODER_5
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR3_ENABLED_5==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 5)
// Parameter Type: Register Default Setting
// 
// BAR3 Memory Space Indicator
`define VF_MEM3_SPACE_DECODER_5 1'h0


// Name:           VF_PREFETCHABLE3_5
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_5==1 && VF_MEM3_SPACE_DECODER_5==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 5)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Memory Prefetchable 
//  When set indicates VF BAR3 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE3_5 1'h0


// Name:           VF_BAR3_TYPE_5
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 5; (bits [2:1] for a memory BAR).
`define VF_BAR3_TYPE_5 2'h0


// Name:           VF_BAR3_MASK_WRITABLE_5
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_5==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 5)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR3_MASK_WRITABLE_5 1'h0


// Name:           VF_BAR3_MASK_5
// Default:        0xffff (VF_MEM3_SPACE_DECODER_5==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR3_ENABLED_5==1 && VF_MEM3_SPACE_DECODER_5==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 5)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Mask 
//  Determines the default of the VF BAR Mask register for PF5. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR3_MASK_5 32'hffff


// Name:           VF_MEM_FUNC5_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR3_ENABLED_5==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 5)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF5 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC5_BAR3_TARGET_MAP 1'h1


// Name:           VF_BAR4_ENABLED_5
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 5)
// Parameter Type: Feature Setting
// 
// Include the VF BAR4 registers in PF5
`define VF_BAR4_ENABLED_5 1'h1


`define VF_DEFAULT_BAR4_ENABLED_5 1'h1


// Name:           VF_MEM4_SPACE_DECODER_5
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR4_ENABLED_5==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 5)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Space Indicator
`define VF_MEM4_SPACE_DECODER_5 1'h0


// Name:           VF_PREFETCHABLE4_5
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_5==1 && VF_MEM4_SPACE_DECODER_5==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 5)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Prefetchable 
//  When set indicates VF BAR4 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE4_5 1'h0


// Name:           VF_BAR4_TYPE_5
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR4_ENABLED_5==1 && VF_MEM4_SPACE_DECODER_5==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 5)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 5; (bits [2:1] for a memory BAR).
`define VF_BAR4_TYPE_5 2'h0


// Name:           VF_BAR4_MASK_WRITABLE_5
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_5==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 5)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR4_MASK_WRITABLE_5 1'h0


// Name:           VF_BAR4_MASK_5
// Default:        0xfff (VF_MEM4_SPACE_DECODER_5==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR4_ENABLED_5==1 && VF_MEM4_SPACE_DECODER_5==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 5)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Mask 
//  Determines the default of the VF BAR Mask register for PF5. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR4_MASK_5 64'hfff


// Name:           VF_MEM_FUNC5_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR4_ENABLED_5==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 5)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF5 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC5_BAR4_TARGET_MAP 1'h1


// Name:           VF_BAR5_ENABLED_5
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_TYPE_5==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 5)
// Parameter Type: Feature Setting
// 
// Include the VF BAR5 registers in PF5
`define VF_BAR5_ENABLED_5 1'h0


`define VF_DEFAULT_BAR5_ENABLED_5 1'h0


// Name:           VF_MEM5_SPACE_DECODER_5
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR5_ENABLED_5==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 5)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Space Indicator
`define VF_MEM5_SPACE_DECODER_5 1'h0


// Name:           VF_PREFETCHABLE5_5
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_5==1 && VF_MEM5_SPACE_DECODER_5==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 5)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Prefetchable 
//  When set indicates VF BAR5 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE5_5 1'h0


// Name:           VF_BAR5_TYPE_5
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 5; (bits [2:1] for a memory BAR).
`define VF_BAR5_TYPE_5 2'h0


// Name:           VF_BAR5_MASK_WRITABLE_5
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_5==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 5)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR5_MASK_WRITABLE_5 1'h0


// Name:           VF_BAR5_MASK_5
// Default:        0xffff (VF_MEM5_SPACE_DECODER_5==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR5_ENABLED_5==1 && VF_MEM5_SPACE_DECODER_5==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 5)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Mask 
//  Determines the default of the VF BAR Mask register for PF5. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR5_MASK_5 32'hffff


// Name:           VF_MEM_FUNC5_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR5_ENABLED_5==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 5)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF5 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC5_BAR5_TARGET_MAP 1'h1


`define VF_FUNC5_BARSIZE_32 128'h101000


`define VF_FUNC5_BARSIZE 128'h201000

//-/ END:   VF BAR CONFIGURATION
//-/===========================================

//-/ END:   SR-IOV CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: TPH CAPABILITIES CONFIGURATION


// Name:           TPH_IVEC_5
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Interrupt Vector Mode. If set indicates that the function supports the Interrupt Vector 
// Mode of operation. Function 5.
`define TPH_IVEC_5 1'h0


// Name:           TPH_DS_5
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Device Specific Mode. If set indicates that the function supports the Device Specific Mode 
// of operation. Function 5.
`define TPH_DS_5 1'h0


// Name:           TPH_ST_TABLE_LOC_5
// Default:        Not Present
// Values:         Not Present (0), TPH Requester Capability Structure (1), MSI-X 
//                 Table Structure (2)
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_DS_5 || TPH_IVEC_5))
// Parameter Type: Feature Setting
// 
// TLP Processing Hints Steering Tag Table Location. Value indicates if and where the ST Table is located. Function 5.
`define TPH_ST_TABLE_LOC_5 0

//located in the TPH Requester Capability structure. Please reduce the ST Table Size for this mode of operation"

// Name:           TPH_ST_TABLE_SIZE_5
// Default:        1
// Values:         1, ..., 2048
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_ST_TABLE_LOC_5 != 0))
// Parameter Type: Feature Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define TPH_ST_TABLE_SIZE_5 1


`define TPH_ST_TABLE_DEPTH_5 0

//-/ END:   TPH CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: ATS CAPABILITIES CONFIGURATION


// Name:           ATS_INV_Q_DPTH_5
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// The number of Invalidate Requests that the Function can accept before putting backpressure on the upstream connection. A 
// value of 0 indicates the function can accept 32 Invalidate requests. Function 5.
`define ATS_INV_Q_DPTH_5 5'd0


// Name:           ATS_STU_5
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// This value indicates to the Function the minimum number of 4096-byte blocks that is indicated in a Translation 
// Completion or Invalidate Request. This is a power of 2 multiplier and the number of blocks is 2^STU. A value of 0 indicates 1 block 
// and a value of 31 indicates 2^31 blocks (or 8 TB total). Function 5.
`define ATS_STU_5 5'd0

//-/ END:   ATS CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PRS CAPABILITIES CONFIGURATION


// Name:           CX_PRS_OUTSTANDING_CAPACITY_VALUE_5
// Default:        0x1
// Values:         0x0, ..., 0xffffffff
// Enabled:        (CX_PRS_ENABLE==1) && (CX_NFUNC > 5)
// Parameter Type: Register Default Setting
// 
// Register default for PRS Outstanding Capacity in PF5. 
// For more details, see the PRS_OUTSTANDING_CAPACITY field in the PRS_REQ_CAPACITY_REG register.
`define CX_PRS_OUTSTANDING_CAPACITY_VALUE_5 32'h1

//-/ END:   PRS CAPABILITIES CONFIGURATION
//-/===========================================


//-/===========================================
//--- START: RN


// Name:           CX_RN_IMM_VALUE_5
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 5)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for PF5.
`define CX_RN_IMM_VALUE_5 1'h0


// Name:           CX_RN_IMM_D0_VALUE_5
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 5)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for PF5.
`define CX_RN_IMM_D0_VALUE_5 1'h0


// Name:           CX_RN_FRS_VALUE_5
// Default:        0x0 (CX_RN_FRS_SUPPORTED==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_FRS_SUPPORTED==1) && (CX_NFUNC > 5)
// Parameter Type: Feature Setting
// 
// Function Readiness Status messaging supported for function PF5.
`define CX_RN_FRS_VALUE_5 1'h0


// Name:           CX_RN_RTR_VALID_5
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 5)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF5.
`define CX_RN_RTR_VALID_5 1'h0


// Name:           CX_RN_RTR_DL_UP_VALUE_5
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 5)
// Parameter Type: Register Default Setting
// 
// Register default for RTR DL Up Time field in PF5.
`define CX_RN_RTR_DL_UP_VALUE_5 12'h0


// Name:           CX_RN_RTR_RESET_VALUE_5
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 5)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF5.
`define CX_RN_RTR_RESET_VALUE_5 12'h0


// Name:           CX_RN_RTR_D3D0_VALUE_5
// Default:        0x0
// Values:         0x0, ..., 0x80a
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 5)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF5.
`define CX_RN_RTR_D3D0_VALUE_5 12'h0


// Name:           CX_RN_RTR_FLR_VALUE_5
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_FLR_ENABLE==1) && (CX_NFUNC > 5)
// Parameter Type: Register Default Setting
// 
// Register default for RTR FLR Time field in PF5.
`define CX_RN_RTR_FLR_VALUE_5 12'h0


// Name:           VF_RN_IMM_VALUE_5
// Default:        0x0 (CX_RN_IMM_VALUE_5 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 5))
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for VFs in PF5.
`define VF_RN_IMM_VALUE_5 1'h0


// Name:           VF_RN_IMM_D0_VALUE_5
// Default:        0x0 (CX_RN_IMM_D0_VALUE_5 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 5))
// Parameter Type: Register Default Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for VFs in PF5.
`define VF_RN_IMM_D0_VALUE_5 1'h0


// Name:           VF_RN_RTR_VALID_5
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 5) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF5 VFs.
`define VF_RN_RTR_VALID_5 1'h0


// Name:           VF_RN_RTR_RESET_VALUE_5
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_5)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 5) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF5 VFS.
`define VF_RN_RTR_RESET_VALUE_5 12'h0


// Name:           VF_RN_RTR_D3D0_VALUE_5
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_5)
// Values:         0x0, ..., 0x80a
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 5) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF5 VFS.
`define VF_RN_RTR_D3D0_VALUE_5 12'h0


// Name:           VF_RN_RTR_FLR_VALUE_5
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_5)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 5) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF5 VFs.
`define VF_RN_RTR_FLR_VALUE_5 12'h0


// Name:           EXT_VF_RN_RTR_VALID_5
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 5) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF5 VFs.
`define EXT_VF_RN_RTR_VALID_5 1'h0


// Name:           EXT_VF_RN_RTR_RESET_VALUE_5
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_5)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 5) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF5 VFS.
`define EXT_VF_RN_RTR_RESET_VALUE_5 12'h0


// Name:           EXT_VF_RN_RTR_D3D0_VALUE_5
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_5)
// Values:         0x0, ..., 0x80a
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 5) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF5 VFS.
`define EXT_VF_RN_RTR_D3D0_VALUE_5 12'h0


// Name:           EXT_VF_RN_RTR_FLR_VALUE_5
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_5)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 5) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF5 VFs.
`define EXT_VF_RN_RTR_FLR_VALUE_5 12'h0

//-/ END:   RN
//-/===========================================

//-/ START: LN CAPABILITIES CONFIGURATION
//-/===========================================


// Name:           CX_LN_REG_MAX_VALUE_5
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 5))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_64_SUPPORTED field in the LNR_CAP_OFF register for PF5.
`define CX_LN_REG_MAX_VALUE_5 5'h0


// Name:           CX_LN_128_SUPPORTED_VALUE_5
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 5))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_128_SUPPORTED field in the LNR_CAP_OFF register for PF5.
`define CX_LN_128_SUPPORTED_VALUE_5 1'h0


// Name:           CX_LN_64_SUPPORTED_VALUE_5
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 5))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_REGISTRATION_MAX field in the LNR_CAP_OFF register for PF5.
`define CX_LN_64_SUPPORTED_VALUE_5 1'h0

//-/ END:   LN CAPABILITIES CONFIGURATION
//-/===========================================




//-/==========================================
//-/ End FUNC5 Config
//-/==========================================

//-/===========================================
//-/ Function 6 Configuration Registers
//-/ ==========================================


// Name:         FUNC_6
// Default:      0 ((CX_NFUNC > 6) ? 1 : 0)
// Values:       0, 1
// 
// This parameter indicates that Function 6 is present
// `define FUNC_6

//-/===========================================
//-/ START: PCI-E CAPABILITIES CONFIGURATION


// Name:           PCIE_CAP_INT_MSG_NUM_6
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 6
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Message Number field in the PCI Express Capabilities Register. Function 6.
`define PCIE_CAP_INT_MSG_NUM_6 5'h0


// Name:           SLOT_IMPLEMENTED_6
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_NFUNC > 6))
// Parameter Type: Register Default Setting
// 
// Indicates that the PCI Express link associated with this Port is connected to a slot. Function 6.
`define SLOT_IMPLEMENTED_6 1'h0


// Name:           DEFAULT_PHANTOM_FUNC_SUPPORTED_6
// Default:        0x0
// Values:         0x0, ..., 0x3
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_PHANTOM_FUNC_SUPPORTED_6 2'h0


// Name:           DEFAULT_EXT_TAG_FIELD_SUPPORTED_6
// Default:        0x0 (DEFAULT_EXT_TAG_FIELD_SUPPORTED_0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 6
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_EXT_TAG_FIELD_SUPPORTED_6 1'h0



// Name:           DEFAULT_ATT_BUTT_PRE_6
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 6
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Button is present
`define DEFAULT_ATT_BUTT_PRE_6 1'h0


// Name:           DEFAULT_ATT_IND_PRE_6
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 6
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Indicator is present
`define DEFAULT_ATT_IND_PRE_6 1'h0


// Name:           DEFAULT_PWR_IND_PRE_6
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 6
// Parameter Type: Register Default Setting
// 
// When set indicates that a Power Indicator is present
`define DEFAULT_PWR_IND_PRE_6 1'h0


// Name:           DEFAULT_NO_SNOOP_SUPPORTED_6
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 6
// Parameter Type: Register Default Setting
// 
// Default value for the Enable No Snoop bit in the Device Control Register. Function 6.
`define DEFAULT_NO_SNOOP_SUPPORTED_6 1'h0


// Name:           ROOT_RCB_6
// Default:        64-bit
// Values:         64-bit (0x0), 128-bit (0x1)
// Parameter Type: Register Default Setting
// 
// Default value for the Read Completion Boundary (RCB) bit in the Link Control Register.
`define ROOT_RCB_6 1'h0


//-/ END:   PCI-E CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: MSI-X CAPABILITIES CONFIGURATION


// Name:           MSIX_TABLE_SIZE_6
// Default:        0x0
// Values:         0x0, ..., 0x7ff
// Enabled:        CX_NFUNC > 6 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the MSI-X Table Size field in the MSI-X Control Register. Function 6.
`define MSIX_TABLE_SIZE_6 11'h0


// Name:           MSIX_TABLE_BIR_6
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 6 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table BAR Indicator Register (BIR) field in the MSI-X Table Offset and BIR Register. Function 6.
`define MSIX_TABLE_BIR_6 3'h0


// Name:           MSIX_TABLE_OFFSET_6
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 6 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table Offset field in the MSI-X Table Offset and BIR Register. Function 6.
`define MSIX_TABLE_OFFSET_6 29'h0


// Name:           MSIX_PBA_BIR_6
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 6 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Pending Bit Array (PBA) BIR field in the MSI-X PBA Offset and BIR Register. Function 6.
`define MSIX_PBA_BIR_6 7'h0


// Name:           MSIX_PBA_OFFSET_6
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 6 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the PBA Offset field in the MSI-X PBA Offset and BIR Register. Function 6.
`define MSIX_PBA_OFFSET_6 29'h0

//-/ END:   MSI-X CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SATA CAPABILITIES CONFIGURATION


// Name:         SATA_HBA_OFFSET_6
// Default:      0x0
// Values:       0x0, ..., 0xfffff
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA Offset. Base address of the SATA HBA registers, 
//  as an offset from the base address of the BAR indicated 
//  by the SATA BAR field.
`define SATA_HBA_OFFSET_6 20'h0


// Name:         SATA_BAR_6
// Default:      0x0
// Values:       0x0, ..., 0xf
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA BAR. The bar that maps to SATA HBA registers,
`define SATA_BAR_6 4'h0

//-/ END:   SATA CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: AER CAPABILITIES CONFIGURATION


// Name:           DEFAULT_ECRC_CHK_CAP_6
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 6 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Check Capable bit in the Advanced Capabilities and Control Register. Function 6.
`define DEFAULT_ECRC_CHK_CAP_6 1'h1


// Name:           DEFAULT_ECRC_GEN_CAP_6
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 6 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Generation Capability bit in the Advanced Capabilities and Control Register. Function 6.
`define DEFAULT_ECRC_GEN_CAP_6 1'h1


// Name:           AER_INT_MSG_NUM_6
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Parameter Type: Register Default Setting
// 
// Default value for the Advanced Error Interrupt Message Number field of the Root Error Status Register. Function 6.
`define AER_INT_MSG_NUM_6 5'h0



// Name:           CX_HDR_LOG_DEPTH_6
// Default:        0x1
// Values:         0x1, 0x2, 0x4
// Enabled:        CX_NFUNC > 6 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Feature Setting.
// 
// Header Log Depth
`define CX_HDR_LOG_DEPTH_6 3'h1


`define CX_MULTIPLE_HDR_REC_CAP_6 1'h0

//-/ END:   AER CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PM CAPABILITIES CONFIGURATION


// Name:           PME_SUPPORT_6
// Default:        0x1b
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 6
// Parameter Type: Register Default Setting
// 
// Default value for the PME_Support field in the Power Management Capabilities Register. Function 6.
`define PME_SUPPORT_6 5'h1b


// Name:           D1_SUPPORT_6
// Default:        true
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 6
// Parameter Type: Register Default Setting
// 
// Default value for the D1 Support bit in the Power Management Capabilities Register. Function 6.
`define D1_SUPPORT_6 1'h1


// Name:           D2_SUPPORT_6
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 6
// Parameter Type: Register Default Setting
// 
// Default value for the D2 Support bit in the Power Management Capabilities Register. Function 6.
`define D2_SUPPORT_6 1'h0


// Name:           DEV_SPEC_INIT_6
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 6
// Parameter Type: Register Default Setting
// 
// Default value for the Device Specific Initialization (DSI) bit in the Power Management Capabilities Register. Function 
// 6.
`define DEV_SPEC_INIT_6 1'h0


// Name:           AUX_CURRENT_6
// Default:        375mA
// Values:         0mA (0x0), 55mA (0x1), 100mA (0x2), 160mA (0x3), 220mA (0x4), 270mA 
//                 (0x5), 320mA (0x6), 375mA (0x7)
// Enabled:        CX_NFUNC > 6
// Parameter Type: Register Default Setting
// 
// Default value for the Aux Current field in the Power Management Capabilities Register. Function 6.
`define AUX_CURRENT_6 3'h7


// Name:           DEFAULT_NO_SOFT_RESET_6
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 6
// Parameter Type: Register Default Setting
// 
// Default value for the No Soft Reset bit in the Power Management Control and Status Register. When set, you should not 
// reset any controller registers when transitioning from D3hot to D0. Therefore, you should not assert the non_sticky_rst_n 
// and sticky_rst_n inputs. Function 6.
`define DEFAULT_NO_SOFT_RESET_6 1'h0

//-/ END:   PM CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PCI BASIC CONFIGURATION


// Name:           CX_DEVICE_ID_6
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 6
// Parameter Type: Register Default Setting
// 
// Default value for the Device ID field in the Device ID and Vendor ID Register. Function 6.
`define CX_DEVICE_ID_6 16'h0


// Name:           CX_VENDOR_ID_6
// Default:        0x16c3
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 6
// Parameter Type: Register Default Setting
// 
// Default value for the Vendor ID field in the Device ID and Vendor ID Register. Function 6.
`define CX_VENDOR_ID_6 16'h16c3


// Name:           CX_REVISION_ID_6
// Default:        0x1
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 6
// Parameter Type: Register Default Setting
// 
// Default value for the Revision ID field in the Revision ID Register. Function 6.
`define CX_REVISION_ID_6 8'h1


// Name:           SUBSYS_DEV_ID_6
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 6
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 6.
`define SUBSYS_DEV_ID_6 16'h0


// Name:           SUBSYS_VENDOR_ID_6
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 6
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem Vendor ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 6.
`define SUBSYS_VENDOR_ID_6 16'h0


// Name:           BASE_CLASS_CODE_6
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 6
// Parameter Type: Register Default Setting
// 
// Default value for the Base Class Code field in the Class Code Register. Function 6.
`define BASE_CLASS_CODE_6 8'h0


// Name:           SUB_CLASS_CODE_6
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 6
// Parameter Type: Register Default Setting
// 
// Default value for the Subclass Code field in the Class Code Register. Function 6.
`define SUB_CLASS_CODE_6 8'h0


// Name:           IF_CODE_6
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 6
// Parameter Type: Register Default Setting
// 
// Default value for the Programming Interface field in the Class Code Register. Function 6.
`define IF_CODE_6 8'h0


// Name:           CARDBUS_CIS_PTR_6
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 6
// Parameter Type: Register Default Setting
// 
// Default value for the CardBus CIS Pointer Register. Function 6.
`define CARDBUS_CIS_PTR_6 16'h0


// Name:           INT_PIN_MAPPING_6
// Default:        INTA
// Values:         None (0x0), INTA (0x1), INTB (0x2), INTC (0x3), INTD (0x4)
// Enabled:        CX_NFUNC > 6
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Pin Register. Function 6.
`define INT_PIN_MAPPING_6 8'h1


// Name:           IO_DECODE_32_6
// Default:        16-bit
// Values:         16-bit (0x0), 32-bit (0x1)
// Enabled:        CX_NFUNC > 6
// Parameter Type: Register Default Setting
// 
// Default value for the 32-Bit I/O Space bit in the I/O Base and I/O Limit Register. Function 6.
`define IO_DECODE_32_6 1'h0


// Name:           MEM_DECODE_64_6
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x1)
// Enabled:        CX_NFUNC > 6
// Parameter Type: Register Default Setting
// 
// Default value for the 64-Bit Memory Addressing bit in the Prefetchable Memory Base and Limit Register. Function 6.
`define MEM_DECODE_64_6 1'h0


// Name:           ROM_BAR_ENABLED_6
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 6
// Parameter Type: Register Default Setting
// 
// Include the expansion ROM BAR registers. Function 6.
`define ROM_BAR_ENABLED_6 1'h1


`define DEFAULT_ROM_BAR_ENABLED_6 1'h1


// Name:           ROM_MASK_6
// Default:        0xffff
// Values:         0x7ff, ..., 0xffffff
// Enabled:        CX_NFUNC > 6 && ROM_BAR_ENABLED_6==1
// Parameter Type: Register Default Setting
// 
// Determines the default of the Expansion ROM BAR Mask register. Function 6. 
//  - The BAR Mask register specifies which bits of the Expansion ROM BAR are non-writable by host software, which 
//  determines the size of the BAR. 
//  - The maximum value for ROM_MASK_N is 0xFFFFFF because the maximum space that can be claimed by an Expansion ROM BAR 
//  is 16 MB. 
//  - For example: 32'hFFFF =BAR size of 2^16.
`define ROM_MASK_6 32'hffff


// Name:           ROM_MASK_WRITABLE_6
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 6 && ROM_BAR_ENABLED_6==1
// Parameter Type: Feature Setting
// 
// Determines if the Expansion ROM BAR Mask register for function 6 is writable by application software. If writing to a 
// Expansion ROM BAR Mask register is enabled, your application can write to the Expansion ROM BAR Mask register through the 
// DBI by asserting dbi_cs2 in addition to dbi_cs.
`define ROM_MASK_WRITABLE_6 1'h0


// Name:           ROM_FUNC6_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 6 && ROM_BAR_ENABLED_6==1 && TRGT1_POPULATE==1))
// Parameter Type: Register Default Setting
// 
// Direct incoming requests that pass filtering and match the Expansion ROM BAR of function 6 to either RTRGT0 or RTRGT1. 
//  - For example, setting ROM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for the Expansion ROM BAR of function 
//  0 to RTRGT1. 
//  - If TRGT1_POPULATE =0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define ROM_FUNC6_TARGET_MAP 1'h1


// Name:           CX_PCI_HEADER_DEFAULTS_VISIBLE_6
// Default:        0
// Values:         0, 1
// Parameter Type: Register Default Setting
// 
// Select here if you want to configure the defaults for the other PCI Standard Header registers for function 6. 
//  An extra window will appear under this page. To access it, click the plus/minus symbol in the hierarchy view on the 
//  left panel. 
//  This is optional but not usually recommended. 
//  You can also change these register defaults using the DBI before (or after) the link comes up.
`define CX_PCI_HEADER_DEFAULTS_VISIBLE_6 0

//-/ END:   PCI BASIC CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: BAR CONFIGURATION


// Name:           BAR0_ENABLED_6
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 6
// Parameter Type: Feature Setting
// 
// Include the BAR0 registers for function 6.
`define BAR0_ENABLED_6 1'h1


`define DEFAULT_BAR0_ENABLED_6 1'h1


// Name:           MEM0_SPACE_DECODER_6
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 6 && BAR0_ENABLED_6==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 6.
`define MEM0_SPACE_DECODER_6 1'h0


// Name:           PREFETCHABLE0_6
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 6 && BAR0_ENABLED_6==1 && MEM0_SPACE_DECODER_6==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 6.
`define PREFETCHABLE0_6 1'h0


// Name:           BAR0_TYPE_6
// Default:        64-bit ((MEM0_SPACE_DECODER_6==1 || BAR0_ENABLED_6==0) ? 0 : 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 6 && BAR0_ENABLED_6==1 && MEM0_SPACE_DECODER_6==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 6.
`define BAR0_TYPE_6 2'h2


// Name:           BAR0_SIZING_SCHEME_6
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 6 && BAR0_ENABLED_6==1
// Parameter Type: Feature Setting
// 
// BAR0 Function 6 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR0_SIZING_SCHEME_6 2'h0


// Name:           CX_BAR0_RESIZABLE_6
// Default:        0x0 ((BAR0_SIZING_SCHEME_6==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR0_ENABLED_6==1) && (MEM0_SPACE_DECODER_6==0)
// Parameter Type: Feature Setting
// 
// Defines BAR0 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR0 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR0_RESIZABLE_6 1'h0


// Name:           CX_BAR0_RESOURCE_AVAIL_6
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 6 && CX_BAR0_RESIZABLE_6==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR0 of function 6. 
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
// Example: 0x00000030 indicates that BAR0 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR0_RESOURCE_AVAIL_6 64'h10


// Name:           BAR0_MASK_WRITABLE_6
// Default:        0x0 ((BAR0_ENABLED_6==1 && BAR0_SIZING_SCHEME_6 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 6 && BAR0_ENABLED_6==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR0 Mask through DBI
`define BAR0_MASK_WRITABLE_6 1'h0


// Name:           BAR0_MASK_6
// Default:        0xfffff (CX_BAR0_RESIZABLE_6==1 ? [calc_bar_mask 
//                 CX_BAR0_RESOURCE_AVAIL_6] : MEM0_SPACE_DECODER_6==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 6 && BAR0_ENABLED_6==1 && MEM0_SPACE_DECODER_6==0 && 
//                 CX_BAR0_RESIZABLE_6==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR0 Mask register of function 6. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR0_MASK_6 64'hfffff


// Name:           MEM_FUNC6_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 6 && BAR0_ENABLED_6==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_0 of function 6 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming Requests for BAR0 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC6_BAR0_TARGET_MAP 1'h1


// Name:           BAR1_ENABLED_6
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 6 && BAR0_TYPE_6==0
// Parameter Type: Feature Setting
// 
// Include the BAR1 registers for function 6.
`define BAR1_ENABLED_6 1'h0


`define DEFAULT_BAR1_ENABLED_6 1'h0


// Name:           MEM1_SPACE_DECODER_6
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 6 && BAR1_ENABLED_6==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 6.
`define MEM1_SPACE_DECODER_6 1'h0


// Name:           PREFETCHABLE1_6
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 6 && BAR1_ENABLED_6==1 && MEM1_SPACE_DECODER_6==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 6.
`define PREFETCHABLE1_6 1'h0


// Name:           BAR1_TYPE_6
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 6.
`define BAR1_TYPE_6 2'h0


// Name:           BAR1_SIZING_SCHEME_6
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 6 && BAR1_ENABLED_6==1
// Parameter Type: Feature Setting
// 
// BAR1 Function 6 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR1_SIZING_SCHEME_6 2'h0


// Name:           CX_BAR1_RESIZABLE_6
// Default:        0x0 ((BAR1_SIZING_SCHEME_6==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR1_ENABLED_6==1) && (MEM1_SPACE_DECODER_6==0)
// Parameter Type: Feature Setting
// 
// Defines BAR1 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR1 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR1_RESIZABLE_6 1'h0


// Name:           CX_BAR1_RESOURCE_AVAIL_6
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 6 && CX_BAR1_RESIZABLE_6==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR1 of function 6. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR1 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR1_RESOURCE_AVAIL_6 32'h10


// Name:           BAR1_MASK_WRITABLE_6
// Default:        0x0 ((BAR1_ENABLED_6==1 && BAR1_SIZING_SCHEME_6 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 6 && BAR1_ENABLED_6==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR1 Mask through DBI
`define BAR1_MASK_WRITABLE_6 1'h0


// Name:           BAR1_MASK_6
// Default:        0xffff (CX_BAR1_RESIZABLE_6==1 ? [calc_bar_mask 
//                 CX_BAR1_RESOURCE_AVAIL_6] : MEM1_SPACE_DECODER_6==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 6 && BAR1_ENABLED_6==1 && MEM1_SPACE_DECODER_6==0 && 
//                 CX_BAR1_RESIZABLE_6==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR1 Mask register of function 6. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR1_MASK_6 32'hffff


// Name:           MEM_FUNC6_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 6 && BAR1_ENABLED_6==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_1 of function 6 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR1_TARGET_MAP to 1 maps all incoming Requests for BAR1 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC6_BAR1_TARGET_MAP 1'h1


// Name:           BAR2_ENABLED_6
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 6
// Parameter Type: Feature Setting
// 
// Include the BAR2 registers for function 6.
`define BAR2_ENABLED_6 1'h1


`define DEFAULT_BAR2_ENABLED_6 1'h1


// Name:           MEM2_SPACE_DECODER_6
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 6 && BAR2_ENABLED_6==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 6.
`define MEM2_SPACE_DECODER_6 1'h0


// Name:           PREFETCHABLE2_6
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 6 && BAR2_ENABLED_6==1 && MEM2_SPACE_DECODER_6==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 6.
`define PREFETCHABLE2_6 1'h0


// Name:           BAR2_TYPE_6
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 6 && BAR2_ENABLED_6==1 && MEM2_SPACE_DECODER_6==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 6.
`define BAR2_TYPE_6 2'h0


// Name:           BAR2_SIZING_SCHEME_6
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 6 && BAR2_ENABLED_6==1
// Parameter Type: Feature Setting
// 
// BAR2 Function 6 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR2_SIZING_SCHEME_6 2'h0


// Name:           CX_BAR2_RESIZABLE_6
// Default:        0x0 ((BAR2_SIZING_SCHEME_6==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR2_ENABLED_6==1) && (MEM2_SPACE_DECODER_6==0)
// Parameter Type: Feature Setting
// 
// Defines BAR2 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR2 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR2_RESIZABLE_6 1'h0


// Name:           CX_BAR2_RESOURCE_AVAIL_6
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 6 && CX_BAR2_RESIZABLE_6==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR2 of function 6. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR2 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR2_RESOURCE_AVAIL_6 64'h10


// Name:           BAR2_MASK_WRITABLE_6
// Default:        0x0 ((BAR2_ENABLED_6==1 && BAR2_SIZING_SCHEME_6 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 6 && BAR2_ENABLED_6==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR2 Mask through DBI
`define BAR2_MASK_WRITABLE_6 1'h0


// Name:           BAR2_MASK_6
// Default:        0xfffff (CX_BAR2_RESIZABLE_6==1 ? [calc_bar_mask 
//                 CX_BAR2_RESOURCE_AVAIL_6] : MEM2_SPACE_DECODER_6==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 6 && BAR2_ENABLED_6==1 && MEM2_SPACE_DECODER_6==0 && 
//                 CX_BAR2_RESIZABLE_6==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR2 Mask register of function 6. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR2_MASK_6 64'hfffff


// Name:           MEM_FUNC6_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 6 && BAR2_ENABLED_6==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_2 of function 6 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR2_TARGET_MAP to 1 maps all incoming requests for BAR2 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC6_BAR2_TARGET_MAP 1'h1


// Name:           BAR3_ENABLED_6
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 6 && BAR2_TYPE_6==0
// Parameter Type: Feature Setting
// 
// Include the BAR3 registers for function 6.
`define BAR3_ENABLED_6 1'h0



`define DEFAULT_BAR3_ENABLED_6 1'h0


// Name:           MEM3_SPACE_DECODER_6
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 6 && BAR3_ENABLED_6==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 6.
`define MEM3_SPACE_DECODER_6 1'h0


// Name:           PREFETCHABLE3_6
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 6 && BAR3_ENABLED_6==1 && MEM3_SPACE_DECODER_6==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 6.
`define PREFETCHABLE3_6 1'h0


// Name:           BAR3_TYPE_6
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 6.
`define BAR3_TYPE_6 2'h0


// Name:           BAR3_SIZING_SCHEME_6
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 6 && BAR3_ENABLED_6==1
// Parameter Type: Feature Setting
// 
// BAR3 Function 6 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR3_SIZING_SCHEME_6 2'h0


// Name:           CX_BAR3_RESIZABLE_6
// Default:        0x0 ((BAR3_SIZING_SCHEME_6==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR3_ENABLED_6==1) && (MEM3_SPACE_DECODER_6==0)
// Parameter Type: Feature Setting
// 
// Defines BAR3 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR3 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR3_RESIZABLE_6 1'h0


// Name:           CX_BAR3_RESOURCE_AVAIL_6
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 6 && CX_BAR3_RESIZABLE_6==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR3 of function 6. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR3 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR3_RESOURCE_AVAIL_6 32'h10


// Name:           BAR3_MASK_WRITABLE_6
// Default:        0x0 ((BAR3_ENABLED_6==1 && BAR3_SIZING_SCHEME_6 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 6 && BAR3_ENABLED_6==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR3 Mask through DBI
`define BAR3_MASK_WRITABLE_6 1'h0


// Name:           BAR3_MASK_6
// Default:        0xffff (CX_BAR3_RESIZABLE_6==1 ? [calc_bar_mask 
//                 CX_BAR3_RESOURCE_AVAIL_6] : MEM3_SPACE_DECODER_6==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 6 && BAR3_ENABLED_6==1 && MEM3_SPACE_DECODER_6==0 && 
//                 CX_BAR3_RESIZABLE_6==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR3 Mask register of function 6. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR3_MASK_6 32'hffff


// Name:           MEM_FUNC6_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 6 && BAR3_ENABLED_6==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_3 of function 6 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR3_TARGET_MAP to 1 maps all incoming requests for BAR3 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC6_BAR3_TARGET_MAP 1'h1


// Name:           BAR4_ENABLED_6
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 6
// Parameter Type: Feature Setting
// 
// Include the BAR4 registers for function 6.
`define BAR4_ENABLED_6 1'h1


`define DEFAULT_BAR4_ENABLED_6 1'h1



// Name:           MEM4_SPACE_DECODER_6
// Default:        I/O (BAR4_ENABLED_6==1)
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 6 && BAR4_ENABLED_6==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 6.
`define MEM4_SPACE_DECODER_6 1'h1


// Name:           PREFETCHABLE4_6
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 6 && BAR4_ENABLED_6==1 && MEM4_SPACE_DECODER_6==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 6.
`define PREFETCHABLE4_6 1'h0


// Name:           BAR4_TYPE_6
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 6 && BAR4_ENABLED_6==1 && MEM4_SPACE_DECODER_6==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 6.
`define BAR4_TYPE_6 2'h0


// Name:           BAR4_SIZING_SCHEME_6
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 6 && BAR4_ENABLED_6==1
// Parameter Type: Feature Setting
// 
// BAR4  Function 6 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR4_SIZING_SCHEME_6 2'h0


// Name:           CX_BAR4_RESIZABLE_6
// Default:        0x0 ((BAR4_SIZING_SCHEME_6==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR4_ENABLED_6==1) && (MEM4_SPACE_DECODER_6==0)
// Parameter Type: Feature Setting
// 
// Defines BAR4 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR4 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR4_RESIZABLE_6 1'h0


// Name:           CX_BAR4_RESOURCE_AVAIL_6
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 6 &&  CX_BAR4_RESIZABLE_6==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR4 of function 6. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR4 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR4_RESOURCE_AVAIL_6 64'h10


// Name:           BAR4_MASK_WRITABLE_6
// Default:        0x0 ((BAR4_ENABLED_6==1 && BAR4_SIZING_SCHEME_6 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 6 && BAR4_ENABLED_6==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR4 Mask through DBI
`define BAR4_MASK_WRITABLE_6 1'h0


// Name:           BAR4_MASK_6
// Default:        0xff (CX_BAR4_RESIZABLE_6==1 ? [calc_bar_mask 
//                 CX_BAR4_RESOURCE_AVAIL_6] : MEM4_SPACE_DECODER_6==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 6 && BAR4_ENABLED_6==1 && MEM4_SPACE_DECODER_6==0 && 
//                 CX_BAR4_RESIZABLE_6==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR4 Mask register of function 6. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR4_MASK_6 64'hff


// Name:           MEM_FUNC6_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 6 && BAR4_ENABLED_6==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_4 of function 6 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR4_TARGET_MAP to 1 maps all incoming requests for BAR4 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC6_BAR4_TARGET_MAP 1'h1


// Name:           BAR5_ENABLED_6
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 6 && BAR4_TYPE_6==0
// Parameter Type: Feature Setting
// 
// Include the BAR5 registers for function 6.
`define BAR5_ENABLED_6 1'h0


`define DEFAULT_BAR5_ENABLED_6 1'h0


// Name:           MEM5_SPACE_DECODER_6
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 6 && BAR5_ENABLED_6==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 6.
`define MEM5_SPACE_DECODER_6 1'h0


// Name:           PREFETCHABLE5_6
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 6 && BAR5_ENABLED_6==1 && MEM5_SPACE_DECODER_6==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 6.
`define PREFETCHABLE5_6 1'h0


// Name:           BAR5_TYPE_6
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 6.
`define BAR5_TYPE_6 2'h0


// Name:           BAR5_SIZING_SCHEME_6
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 6 && BAR5_ENABLED_6==1
// Parameter Type: Feature Setting
// 
// BAR5  Function 6 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR5_SIZING_SCHEME_6 2'h0


// Name:           CX_BAR5_RESIZABLE_6
// Default:        0x0 ((BAR5_SIZING_SCHEME_6==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR5_ENABLED_6==1) && (MEM5_SPACE_DECODER_6==0)
// Parameter Type: Feature Setting
// 
// Defines BAR5 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR5 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR5_RESIZABLE_6 1'h0


// Name:           CX_BAR5_RESOURCE_AVAIL_6
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 6 && CX_BAR5_RESIZABLE_6==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR5 of function 6. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR5 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR5_RESOURCE_AVAIL_6 32'h10


// Name:           BAR5_MASK_WRITABLE_6
// Default:        0x0 ((BAR5_ENABLED_6==1 && BAR5_SIZING_SCHEME_6 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 6 && BAR5_ENABLED_6==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR5 Mask through DBI
`define BAR5_MASK_WRITABLE_6 1'h0


// Name:           BAR5_MASK_6
// Default:        0xffff (CX_BAR5_RESIZABLE_6==1 ? [calc_bar_mask 
//                 CX_BAR5_RESOURCE_AVAIL_6] : MEM5_SPACE_DECODER_6==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 6 && BAR5_ENABLED_6==1 && MEM5_SPACE_DECODER_6==0 && 
//                 CX_BAR5_RESIZABLE_6==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR5 Mask register of function 6. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR5_MASK_6 32'hffff


// Name:           MEM_FUNC6_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 6 && BAR5_ENABLED_6==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_5 of function 6 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR5_TARGET_MAP to 1 maps all incoming requests for BAR5 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC6_BAR5_TARGET_MAP 1'h1


`define FUNC6_BARSIZE_32 128'h0


`define FUNC6_BARSIZE 128'h0


`define FUNC6_BAR0_BARSIZE_TRGT1 128'h0


`define FUNC6_BAR2_BARSIZE_TRGT1 128'h0


`define FUNC6_BAR4_BARSIZE_TRGT1 128'h0


`define FUNC6_BAR0_TRGT1_ADDR_WIDTH 1


`define FUNC6_BAR2_TRGT1_ADDR_WIDTH 1


`define FUNC6_BAR4_TRGT1_ADDR_WIDTH 1


// Name:         CX_NUM_RBARS_6
// Default:      0 ([calc_num_rbars CX_BAR0_RESIZABLE_6 CX_BAR1_RESIZABLE_6 
//               CX_BAR2_RESIZABLE_6 CX_BAR3_RESIZABLE_6 CX_BAR4_RESIZABLE_6 
//               CX_BAR5_RESIZABLE_6])
// Values:       -2147483648, ..., 2147483647
// 
// Number of resizable BARs
`define CX_NUM_RBARS_6 0

//-/ END:   BAR CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SR-IOV CAPABILITIES CONFIGURATION


// Name:           CX_VF_DEPENDENCY_LINK_6
// Default:        0x6
// Values:         0x0, ..., 0xff
// Enabled:        CX_VF_DEPENDENCY_LINK_SUPP && (CX_NFUNC > 6) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Specifies the 8-bit VF dependency link for PF6. Valid only if CX_VF_DEPENDENCY_LINK_SUPP=1.
`define CX_VF_DEPENDENCY_LINK_6 8'h6


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER1_6
// Default:        0x2 ((CX_NFUNC>=17) ? 32 : (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : 
//                 (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF6 in an ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER1_6 16'h2


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER0_6
// Default:        0x100
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF6 
//  in a non-ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER0_6 16'h100


// Name:           VF_STRIDE_ARI_CAP_HIER1_6
// Default:        0x2 (CX_VF_STRIDE_ALWAYS_ONE) ? 1 : ((CX_NFUNC>=17) ? 32 : 
//                 (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF6 in an ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER1_6 16'h2


// Name:           VF_STRIDE_ARI_CAP_HIER0_6
// Default:        0x100 ((CX_VF_STRIDE_ALWAYS_ONE) ? 0x0001 : 0x0100)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF6 in a non-ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER0_6 16'h100


// Name:           CX_VF_DEVICE_ID_6
// Default:        0x0 (CX_DEVICE_ID_6)
// Values:         0x0, ..., 0xffff
// Enabled:        (CX_NFUNC > 6) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 16-bit virtual function Device ID for PF6. 
//  It might be different from the physical function's.
`define CX_VF_DEVICE_ID_6 16'h0


// Name:           CX_VF_SUPP_PAGE_SIZE_6
// Default:        0x553
// Values:         0x553, ..., 0xffff
// Enabled:        (CX_NFUNC > 6) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 32-bit supported page sizes for virtual functions for PF6
`define CX_VF_SUPP_PAGE_SIZE_6 32'h553


// Name:           CX_ARI_CAP_HIER_PRSVD_6
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Specifies if ARI Capable Hierarchy bit is preserved across certain power state transitions 
//  Only present in PF0. Read Only Zero in this PF6.
`define CX_ARI_CAP_HIER_PRSVD_6 1'h0

//-/===========================================
//-/ START: VF BAR CONFIGURATION


// Name:           VF_BAR0_ENABLED_6
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 6)
// Parameter Type: Feature Setting
// 
// Include the VF BAR0 registers in PF6
`define VF_BAR0_ENABLED_6 1'h1


`define VF_DEFAULT_BAR0_ENABLED_6 1'h1


// Name:           VF_MEM0_SPACE_DECODER_6
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR0_ENABLED_6 && CX_SRIOV_ENABLE && (CX_NFUNC > 6)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Space Indicator 
//  ALWAYS set to Memory for Virtual Functions
`define VF_MEM0_SPACE_DECODER_6 1'h0


// Name:           VF_PREFETCHABLE0_6
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_6==1 && VF_MEM0_SPACE_DECODER_6==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 6)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Prefetchable 
//  When set indicates VF BAR0 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE0_6 1'h0


// Name:           VF_BAR0_TYPE_6
// Default:        64-bit ((VF_MEM0_SPACE_DECODER_6==1 || VF_BAR0_ENABLED_6==0) ? 0 : 
//                 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR0_ENABLED_6==1 && VF_MEM0_SPACE_DECODER_6==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 6)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 6; (bits [2:1] for a memory BAR).
`define VF_BAR0_TYPE_6 2'h2


// Name:           VF_BAR0_MASK_WRITABLE_6
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_6==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 6)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR0_MASK_WRITABLE_6 1'h0


// Name:           VF_BAR0_MASK_6
// Default:        0xfffff (VF_MEM0_SPACE_DECODER_6==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR0_ENABLED_6==1 && VF_MEM0_SPACE_DECODER_6==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 6)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Mask 
//  Determines the default of the VF BAR Mask register for PF6. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR0_MASK_6 64'hfffff


// Name:           VF_MEM_FUNC6_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR0_ENABLED_6==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 6)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF6 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC6_BAR0_TARGET_MAP 1'h1


// Name:           VF_BAR1_ENABLED_6
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        (VF_BAR0_TYPE_6==0)  && CX_SRIOV_ENABLE && (CX_NFUNC > 6)
// Parameter Type: Feature Setting
// 
// Include the VF BAR1 registers in PF6
`define VF_BAR1_ENABLED_6 1'h0


`define VF_DEFAULT_BAR1_ENABLED_6 1'h0


// Name:           VF_MEM1_SPACE_DECODER_6
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR1_ENABLED_6==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 6)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Space Indicator
`define VF_MEM1_SPACE_DECODER_6 1'h0


// Name:           VF_PREFETCHABLE1_6
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_6==1 && VF_MEM1_SPACE_DECODER_6==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 6)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Prefetchable 
//  When set indicates VF BAR1 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE1_6 1'h0


// Name:           VF_BAR1_TYPE_6
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 6; (bits [2:1] for a memory BAR).
`define VF_BAR1_TYPE_6 2'h0


// Name:           VF_BAR1_MASK_WRITABLE_6
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_6==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 6)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR1_MASK_WRITABLE_6 1'h0


// Name:           VF_BAR1_MASK_6
// Default:        0xffff (VF_MEM1_SPACE_DECODER_6==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR1_ENABLED_6==1 && VF_MEM1_SPACE_DECODER_6==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 6)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Mask 
//  Determines the default of the VF BAR Mask register for PF6. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR1_MASK_6 32'hffff


// Name:           VF_MEM_FUNC6_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR1_ENABLED_6==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 6)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF6 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC6_BAR1_TARGET_MAP 1'h1


// Name:           VF_BAR2_ENABLED_6
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 6)
// Parameter Type: Feature Setting
// 
// Include the VF BAR2 registers in PF6
`define VF_BAR2_ENABLED_6 1'h1


`define VF_DEFAULT_BAR2_ENABLED_6 1'h1


// Name:           VF_MEM2_SPACE_DECODER_6
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR2_ENABLED_6==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 6)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Memory Space Indicator
`define VF_MEM2_SPACE_DECODER_6 1'h0


// Name:           VF_PREFETCHABLE2_6
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_6==1 && VF_MEM2_SPACE_DECODER_6==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 6)
// Parameter Type: Register Default Setting
// 
// BAR2 Memory Prefetchable 
//  When set indicates VF BAR2 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE2_6 1'h0


// Name:           VF_BAR2_TYPE_6
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR2_ENABLED_6==1 && VF_MEM2_SPACE_DECODER_6==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 6)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 6; (bits [2:1] for a memory BAR).
`define VF_BAR2_TYPE_6 2'h0


// Name:           VF_BAR2_MASK_WRITABLE_6
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_6==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 6)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR2_MASK_WRITABLE_6 1'h0


// Name:           VF_BAR2_MASK_6
// Default:        0xfffff (VF_MEM2_SPACE_DECODER_6==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR2_ENABLED_6==1 && VF_MEM2_SPACE_DECODER_6==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 6)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Mask 
//  Determines the default of the VF BAR Mask register for PF6. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR2_MASK_6 64'hfffff


// Name:           VF_MEM_FUNC6_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR2_ENABLED_6==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 6)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF6 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC6_BAR2_TARGET_MAP 1'h1


// Name:           VF_BAR3_ENABLED_6
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_TYPE_6==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 6)
// Parameter Type: Feature Setting
// 
// Include the VF BAR3 registers in PF6
`define VF_BAR3_ENABLED_6 1'h0


`define VF_DEFAULT_BAR3_ENABLED_6 1'h0


// Name:           VF_MEM3_SPACE_DECODER_6
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR3_ENABLED_6==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 6)
// Parameter Type: Register Default Setting
// 
// BAR3 Memory Space Indicator
`define VF_MEM3_SPACE_DECODER_6 1'h0


// Name:           VF_PREFETCHABLE3_6
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_6==1 && VF_MEM3_SPACE_DECODER_6==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 6)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Memory Prefetchable 
//  When set indicates VF BAR3 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE3_6 1'h0


// Name:           VF_BAR3_TYPE_6
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 6; (bits [2:1] for a memory BAR).
`define VF_BAR3_TYPE_6 2'h0


// Name:           VF_BAR3_MASK_WRITABLE_6
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_6==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 6)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR3_MASK_WRITABLE_6 1'h0


// Name:           VF_BAR3_MASK_6
// Default:        0xffff (VF_MEM3_SPACE_DECODER_6==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR3_ENABLED_6==1 && VF_MEM3_SPACE_DECODER_6==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 6)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Mask 
//  Determines the default of the VF BAR Mask register for PF6. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR3_MASK_6 32'hffff


// Name:           VF_MEM_FUNC6_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR3_ENABLED_6==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 6)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF6 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC6_BAR3_TARGET_MAP 1'h1


// Name:           VF_BAR4_ENABLED_6
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 6)
// Parameter Type: Feature Setting
// 
// Include the VF BAR4 registers in PF6
`define VF_BAR4_ENABLED_6 1'h1


`define VF_DEFAULT_BAR4_ENABLED_6 1'h1


// Name:           VF_MEM4_SPACE_DECODER_6
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR4_ENABLED_6==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 6)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Space Indicator
`define VF_MEM4_SPACE_DECODER_6 1'h0


// Name:           VF_PREFETCHABLE4_6
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_6==1 && VF_MEM4_SPACE_DECODER_6==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 6)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Prefetchable 
//  When set indicates VF BAR4 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE4_6 1'h0


// Name:           VF_BAR4_TYPE_6
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR4_ENABLED_6==1 && VF_MEM4_SPACE_DECODER_6==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 6)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 6; (bits [2:1] for a memory BAR).
`define VF_BAR4_TYPE_6 2'h0


// Name:           VF_BAR4_MASK_WRITABLE_6
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_6==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 6)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR4_MASK_WRITABLE_6 1'h0


// Name:           VF_BAR4_MASK_6
// Default:        0xfff (VF_MEM4_SPACE_DECODER_6==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR4_ENABLED_6==1 && VF_MEM4_SPACE_DECODER_6==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 6)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Mask 
//  Determines the default of the VF BAR Mask register for PF6. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR4_MASK_6 64'hfff


// Name:           VF_MEM_FUNC6_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR4_ENABLED_6==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 6)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF6 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC6_BAR4_TARGET_MAP 1'h1


// Name:           VF_BAR5_ENABLED_6
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_TYPE_6==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 6)
// Parameter Type: Feature Setting
// 
// Include the VF BAR5 registers in PF6
`define VF_BAR5_ENABLED_6 1'h0


`define VF_DEFAULT_BAR5_ENABLED_6 1'h0


// Name:           VF_MEM5_SPACE_DECODER_6
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR5_ENABLED_6==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 6)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Space Indicator
`define VF_MEM5_SPACE_DECODER_6 1'h0


// Name:           VF_PREFETCHABLE5_6
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_6==1 && VF_MEM5_SPACE_DECODER_6==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 6)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Prefetchable 
//  When set indicates VF BAR5 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE5_6 1'h0


// Name:           VF_BAR5_TYPE_6
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 6; (bits [2:1] for a memory BAR).
`define VF_BAR5_TYPE_6 2'h0


// Name:           VF_BAR5_MASK_WRITABLE_6
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_6==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 6)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR5_MASK_WRITABLE_6 1'h0


// Name:           VF_BAR5_MASK_6
// Default:        0xffff (VF_MEM5_SPACE_DECODER_6==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR5_ENABLED_6==1 && VF_MEM5_SPACE_DECODER_6==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 6)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Mask 
//  Determines the default of the VF BAR Mask register for PF6. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR5_MASK_6 32'hffff


// Name:           VF_MEM_FUNC6_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR5_ENABLED_6==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 6)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF6 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC6_BAR5_TARGET_MAP 1'h1


`define VF_FUNC6_BARSIZE_32 128'h101000


`define VF_FUNC6_BARSIZE 128'h201000

//-/ END:   VF BAR CONFIGURATION
//-/===========================================

//-/ END:   SR-IOV CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: TPH CAPABILITIES CONFIGURATION


// Name:           TPH_IVEC_6
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Interrupt Vector Mode. If set indicates that the function supports the Interrupt Vector 
// Mode of operation. Function 6.
`define TPH_IVEC_6 1'h0


// Name:           TPH_DS_6
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Device Specific Mode. If set indicates that the function supports the Device Specific Mode 
// of operation. Function 6.
`define TPH_DS_6 1'h0


// Name:           TPH_ST_TABLE_LOC_6
// Default:        Not Present
// Values:         Not Present (0), TPH Requester Capability Structure (1), MSI-X 
//                 Table Structure (2)
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_DS_6 || TPH_IVEC_6))
// Parameter Type: Feature Setting
// 
// TLP Processing Hints Steering Tag Table Location. Value indicates if and where the ST Table is located. Function 6.
`define TPH_ST_TABLE_LOC_6 0

//located in the TPH Requester Capability structure. Please reduce the ST Table Size for this mode of operation"

// Name:           TPH_ST_TABLE_SIZE_6
// Default:        1
// Values:         1, ..., 2048
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_ST_TABLE_LOC_6 != 0))
// Parameter Type: Feature Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define TPH_ST_TABLE_SIZE_6 1


`define TPH_ST_TABLE_DEPTH_6 0

//-/ END:   TPH CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: ATS CAPABILITIES CONFIGURATION


// Name:           ATS_INV_Q_DPTH_6
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// The number of Invalidate Requests that the Function can accept before putting backpressure on the upstream connection. A 
// value of 0 indicates the function can accept 32 Invalidate requests. Function 6.
`define ATS_INV_Q_DPTH_6 5'd0


// Name:           ATS_STU_6
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// This value indicates to the Function the minimum number of 4096-byte blocks that is indicated in a Translation 
// Completion or Invalidate Request. This is a power of 2 multiplier and the number of blocks is 2^STU. A value of 0 indicates 1 block 
// and a value of 31 indicates 2^31 blocks (or 8 TB total). Function 6.
`define ATS_STU_6 5'd0

//-/ END:   ATS CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PRS CAPABILITIES CONFIGURATION


// Name:           CX_PRS_OUTSTANDING_CAPACITY_VALUE_6
// Default:        0x1
// Values:         0x0, ..., 0xffffffff
// Enabled:        (CX_PRS_ENABLE==1) && (CX_NFUNC > 6)
// Parameter Type: Register Default Setting
// 
// Register default for PRS Outstanding Capacity in PF6. 
// For more details, see the PRS_OUTSTANDING_CAPACITY field in the PRS_REQ_CAPACITY_REG register.
`define CX_PRS_OUTSTANDING_CAPACITY_VALUE_6 32'h1

//-/ END:   PRS CAPABILITIES CONFIGURATION
//-/===========================================


//-/===========================================
//--- START: RN


// Name:           CX_RN_IMM_VALUE_6
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 6)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for PF6.
`define CX_RN_IMM_VALUE_6 1'h0


// Name:           CX_RN_IMM_D0_VALUE_6
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 6)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for PF6.
`define CX_RN_IMM_D0_VALUE_6 1'h0


// Name:           CX_RN_FRS_VALUE_6
// Default:        0x0 (CX_RN_FRS_SUPPORTED==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_FRS_SUPPORTED==1) && (CX_NFUNC > 6)
// Parameter Type: Feature Setting
// 
// Function Readiness Status messaging supported for function PF6.
`define CX_RN_FRS_VALUE_6 1'h0


// Name:           CX_RN_RTR_VALID_6
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 6)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF6.
`define CX_RN_RTR_VALID_6 1'h0


// Name:           CX_RN_RTR_DL_UP_VALUE_6
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 6)
// Parameter Type: Register Default Setting
// 
// Register default for RTR DL Up Time field in PF6.
`define CX_RN_RTR_DL_UP_VALUE_6 12'h0


// Name:           CX_RN_RTR_RESET_VALUE_6
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 6)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF6.
`define CX_RN_RTR_RESET_VALUE_6 12'h0


// Name:           CX_RN_RTR_D3D0_VALUE_6
// Default:        0x0
// Values:         0x0, ..., 0x80a
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 6)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF6.
`define CX_RN_RTR_D3D0_VALUE_6 12'h0


// Name:           CX_RN_RTR_FLR_VALUE_6
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_FLR_ENABLE==1) && (CX_NFUNC > 6)
// Parameter Type: Register Default Setting
// 
// Register default for RTR FLR Time field in PF6.
`define CX_RN_RTR_FLR_VALUE_6 12'h0


// Name:           VF_RN_IMM_VALUE_6
// Default:        0x0 (CX_RN_IMM_VALUE_6 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 6))
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for VFs in PF6.
`define VF_RN_IMM_VALUE_6 1'h0


// Name:           VF_RN_IMM_D0_VALUE_6
// Default:        0x0 (CX_RN_IMM_D0_VALUE_6 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 6))
// Parameter Type: Register Default Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for VFs in PF6.
`define VF_RN_IMM_D0_VALUE_6 1'h0


// Name:           VF_RN_RTR_VALID_6
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 6) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF6 VFs.
`define VF_RN_RTR_VALID_6 1'h0


// Name:           VF_RN_RTR_RESET_VALUE_6
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_6)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 6) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF6 VFS.
`define VF_RN_RTR_RESET_VALUE_6 12'h0


// Name:           VF_RN_RTR_D3D0_VALUE_6
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_6)
// Values:         0x0, ..., 0x80a
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 6) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF6 VFS.
`define VF_RN_RTR_D3D0_VALUE_6 12'h0


// Name:           VF_RN_RTR_FLR_VALUE_6
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_6)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 6) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF6 VFs.
`define VF_RN_RTR_FLR_VALUE_6 12'h0


// Name:           EXT_VF_RN_RTR_VALID_6
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 6) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF6 VFs.
`define EXT_VF_RN_RTR_VALID_6 1'h0


// Name:           EXT_VF_RN_RTR_RESET_VALUE_6
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_6)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 6) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF6 VFS.
`define EXT_VF_RN_RTR_RESET_VALUE_6 12'h0


// Name:           EXT_VF_RN_RTR_D3D0_VALUE_6
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_6)
// Values:         0x0, ..., 0x80a
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 6) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF6 VFS.
`define EXT_VF_RN_RTR_D3D0_VALUE_6 12'h0


// Name:           EXT_VF_RN_RTR_FLR_VALUE_6
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_6)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 6) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF6 VFs.
`define EXT_VF_RN_RTR_FLR_VALUE_6 12'h0

//-/ END:   RN
//-/===========================================

//-/ START: LN CAPABILITIES CONFIGURATION
//-/===========================================


// Name:           CX_LN_REG_MAX_VALUE_6
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 6))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_64_SUPPORTED field in the LNR_CAP_OFF register for PF6.
`define CX_LN_REG_MAX_VALUE_6 5'h0


// Name:           CX_LN_128_SUPPORTED_VALUE_6
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 6))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_128_SUPPORTED field in the LNR_CAP_OFF register for PF6.
`define CX_LN_128_SUPPORTED_VALUE_6 1'h0


// Name:           CX_LN_64_SUPPORTED_VALUE_6
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 6))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_REGISTRATION_MAX field in the LNR_CAP_OFF register for PF6.
`define CX_LN_64_SUPPORTED_VALUE_6 1'h0

//-/ END:   LN CAPABILITIES CONFIGURATION
//-/===========================================




//-/==========================================
//-/ End FUNC6 Config
//-/==========================================

//-/===========================================
//-/ Function 7 Configuration Registers
//-/ ==========================================


// Name:         FUNC_7
// Default:      0 ((CX_NFUNC > 7) ? 1 : 0)
// Values:       0, 1
// 
// This parameter indicates that Function 7 is present
// `define FUNC_7

//-/===========================================
//-/ START: PCI-E CAPABILITIES CONFIGURATION


// Name:           PCIE_CAP_INT_MSG_NUM_7
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 7
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Message Number field in the PCI Express Capabilities Register. Function 7.
`define PCIE_CAP_INT_MSG_NUM_7 5'h0


// Name:           SLOT_IMPLEMENTED_7
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_NFUNC > 7))
// Parameter Type: Register Default Setting
// 
// Indicates that the PCI Express link associated with this Port is connected to a slot. Function 7.
`define SLOT_IMPLEMENTED_7 1'h0


// Name:           DEFAULT_PHANTOM_FUNC_SUPPORTED_7
// Default:        0x0
// Values:         0x0, ..., 0x3
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_PHANTOM_FUNC_SUPPORTED_7 2'h0


// Name:           DEFAULT_EXT_TAG_FIELD_SUPPORTED_7
// Default:        0x0 (DEFAULT_EXT_TAG_FIELD_SUPPORTED_0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 7
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_EXT_TAG_FIELD_SUPPORTED_7 1'h0



// Name:           DEFAULT_ATT_BUTT_PRE_7
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 7
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Button is present
`define DEFAULT_ATT_BUTT_PRE_7 1'h0


// Name:           DEFAULT_ATT_IND_PRE_7
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 7
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Indicator is present
`define DEFAULT_ATT_IND_PRE_7 1'h0


// Name:           DEFAULT_PWR_IND_PRE_7
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 7
// Parameter Type: Register Default Setting
// 
// When set indicates that a Power Indicator is present
`define DEFAULT_PWR_IND_PRE_7 1'h0


// Name:           DEFAULT_NO_SNOOP_SUPPORTED_7
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 7
// Parameter Type: Register Default Setting
// 
// Default value for the Enable No Snoop bit in the Device Control Register. Function 7.
`define DEFAULT_NO_SNOOP_SUPPORTED_7 1'h0


// Name:           ROOT_RCB_7
// Default:        64-bit
// Values:         64-bit (0x0), 128-bit (0x1)
// Parameter Type: Register Default Setting
// 
// Default value for the Read Completion Boundary (RCB) bit in the Link Control Register.
`define ROOT_RCB_7 1'h0


//-/ END:   PCI-E CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: MSI-X CAPABILITIES CONFIGURATION


// Name:           MSIX_TABLE_SIZE_7
// Default:        0x0
// Values:         0x0, ..., 0x7ff
// Enabled:        CX_NFUNC > 7 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the MSI-X Table Size field in the MSI-X Control Register. Function 7.
`define MSIX_TABLE_SIZE_7 11'h0


// Name:           MSIX_TABLE_BIR_7
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 7 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table BAR Indicator Register (BIR) field in the MSI-X Table Offset and BIR Register. Function 7.
`define MSIX_TABLE_BIR_7 3'h0


// Name:           MSIX_TABLE_OFFSET_7
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 7 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table Offset field in the MSI-X Table Offset and BIR Register. Function 7.
`define MSIX_TABLE_OFFSET_7 29'h0


// Name:           MSIX_PBA_BIR_7
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 7 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Pending Bit Array (PBA) BIR field in the MSI-X PBA Offset and BIR Register. Function 7.
`define MSIX_PBA_BIR_7 7'h0


// Name:           MSIX_PBA_OFFSET_7
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 7 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the PBA Offset field in the MSI-X PBA Offset and BIR Register. Function 7.
`define MSIX_PBA_OFFSET_7 29'h0

//-/ END:   MSI-X CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SATA CAPABILITIES CONFIGURATION


// Name:         SATA_HBA_OFFSET_7
// Default:      0x0
// Values:       0x0, ..., 0xfffff
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA Offset. Base address of the SATA HBA registers, 
//  as an offset from the base address of the BAR indicated 
//  by the SATA BAR field.
`define SATA_HBA_OFFSET_7 20'h0


// Name:         SATA_BAR_7
// Default:      0x0
// Values:       0x0, ..., 0xf
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA BAR. The bar that maps to SATA HBA registers,
`define SATA_BAR_7 4'h0

//-/ END:   SATA CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: AER CAPABILITIES CONFIGURATION


// Name:           DEFAULT_ECRC_CHK_CAP_7
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 7 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Check Capable bit in the Advanced Capabilities and Control Register. Function 7.
`define DEFAULT_ECRC_CHK_CAP_7 1'h1


// Name:           DEFAULT_ECRC_GEN_CAP_7
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 7 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Generation Capability bit in the Advanced Capabilities and Control Register. Function 7.
`define DEFAULT_ECRC_GEN_CAP_7 1'h1


// Name:           AER_INT_MSG_NUM_7
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Parameter Type: Register Default Setting
// 
// Default value for the Advanced Error Interrupt Message Number field of the Root Error Status Register. Function 7.
`define AER_INT_MSG_NUM_7 5'h0



// Name:           CX_HDR_LOG_DEPTH_7
// Default:        0x1
// Values:         0x1, 0x2, 0x4
// Enabled:        CX_NFUNC > 7 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Feature Setting.
// 
// Header Log Depth
`define CX_HDR_LOG_DEPTH_7 3'h1


`define CX_MULTIPLE_HDR_REC_CAP_7 1'h0

//-/ END:   AER CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PM CAPABILITIES CONFIGURATION


// Name:           PME_SUPPORT_7
// Default:        0x1b
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 7
// Parameter Type: Register Default Setting
// 
// Default value for the PME_Support field in the Power Management Capabilities Register. Function 7.
`define PME_SUPPORT_7 5'h1b


// Name:           D1_SUPPORT_7
// Default:        true
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 7
// Parameter Type: Register Default Setting
// 
// Default value for the D1 Support bit in the Power Management Capabilities Register. Function 7.
`define D1_SUPPORT_7 1'h1


// Name:           D2_SUPPORT_7
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 7
// Parameter Type: Register Default Setting
// 
// Default value for the D2 Support bit in the Power Management Capabilities Register. Function 7.
`define D2_SUPPORT_7 1'h0


// Name:           DEV_SPEC_INIT_7
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 7
// Parameter Type: Register Default Setting
// 
// Default value for the Device Specific Initialization (DSI) bit in the Power Management Capabilities Register. Function 
// 7.
`define DEV_SPEC_INIT_7 1'h0


// Name:           AUX_CURRENT_7
// Default:        375mA
// Values:         0mA (0x0), 55mA (0x1), 100mA (0x2), 160mA (0x3), 220mA (0x4), 270mA 
//                 (0x5), 320mA (0x6), 375mA (0x7)
// Enabled:        CX_NFUNC > 7
// Parameter Type: Register Default Setting
// 
// Default value for the Aux Current field in the Power Management Capabilities Register. Function 7.
`define AUX_CURRENT_7 3'h7


// Name:           DEFAULT_NO_SOFT_RESET_7
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 7
// Parameter Type: Register Default Setting
// 
// Default value for the No Soft Reset bit in the Power Management Control and Status Register. When set, you should not 
// reset any controller registers when transitioning from D3hot to D0. Therefore, you should not assert the non_sticky_rst_n 
// and sticky_rst_n inputs. Function 7.
`define DEFAULT_NO_SOFT_RESET_7 1'h0

//-/ END:   PM CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PCI BASIC CONFIGURATION


// Name:           CX_DEVICE_ID_7
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 7
// Parameter Type: Register Default Setting
// 
// Default value for the Device ID field in the Device ID and Vendor ID Register. Function 7.
`define CX_DEVICE_ID_7 16'h0


// Name:           CX_VENDOR_ID_7
// Default:        0x16c3
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 7
// Parameter Type: Register Default Setting
// 
// Default value for the Vendor ID field in the Device ID and Vendor ID Register. Function 7.
`define CX_VENDOR_ID_7 16'h16c3


// Name:           CX_REVISION_ID_7
// Default:        0x1
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 7
// Parameter Type: Register Default Setting
// 
// Default value for the Revision ID field in the Revision ID Register. Function 7.
`define CX_REVISION_ID_7 8'h1


// Name:           SUBSYS_DEV_ID_7
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 7
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 7.
`define SUBSYS_DEV_ID_7 16'h0


// Name:           SUBSYS_VENDOR_ID_7
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 7
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem Vendor ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 7.
`define SUBSYS_VENDOR_ID_7 16'h0


// Name:           BASE_CLASS_CODE_7
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 7
// Parameter Type: Register Default Setting
// 
// Default value for the Base Class Code field in the Class Code Register. Function 7.
`define BASE_CLASS_CODE_7 8'h0


// Name:           SUB_CLASS_CODE_7
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 7
// Parameter Type: Register Default Setting
// 
// Default value for the Subclass Code field in the Class Code Register. Function 7.
`define SUB_CLASS_CODE_7 8'h0


// Name:           IF_CODE_7
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 7
// Parameter Type: Register Default Setting
// 
// Default value for the Programming Interface field in the Class Code Register. Function 7.
`define IF_CODE_7 8'h0


// Name:           CARDBUS_CIS_PTR_7
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 7
// Parameter Type: Register Default Setting
// 
// Default value for the CardBus CIS Pointer Register. Function 7.
`define CARDBUS_CIS_PTR_7 16'h0


// Name:           INT_PIN_MAPPING_7
// Default:        INTA
// Values:         None (0x0), INTA (0x1), INTB (0x2), INTC (0x3), INTD (0x4)
// Enabled:        CX_NFUNC > 7
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Pin Register. Function 7.
`define INT_PIN_MAPPING_7 8'h1


// Name:           IO_DECODE_32_7
// Default:        16-bit
// Values:         16-bit (0x0), 32-bit (0x1)
// Enabled:        CX_NFUNC > 7
// Parameter Type: Register Default Setting
// 
// Default value for the 32-Bit I/O Space bit in the I/O Base and I/O Limit Register. Function 7.
`define IO_DECODE_32_7 1'h0


// Name:           MEM_DECODE_64_7
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x1)
// Enabled:        CX_NFUNC > 7
// Parameter Type: Register Default Setting
// 
// Default value for the 64-Bit Memory Addressing bit in the Prefetchable Memory Base and Limit Register. Function 7.
`define MEM_DECODE_64_7 1'h0


// Name:           ROM_BAR_ENABLED_7
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 7
// Parameter Type: Register Default Setting
// 
// Include the expansion ROM BAR registers. Function 7.
`define ROM_BAR_ENABLED_7 1'h1


`define DEFAULT_ROM_BAR_ENABLED_7 1'h1


// Name:           ROM_MASK_7
// Default:        0xffff
// Values:         0x7ff, ..., 0xffffff
// Enabled:        CX_NFUNC > 7 && ROM_BAR_ENABLED_7==1
// Parameter Type: Register Default Setting
// 
// Determines the default of the Expansion ROM BAR Mask register. Function 7. 
//  - The BAR Mask register specifies which bits of the Expansion ROM BAR are non-writable by host software, which 
//  determines the size of the BAR. 
//  - The maximum value for ROM_MASK_N is 0xFFFFFF because the maximum space that can be claimed by an Expansion ROM BAR 
//  is 16 MB. 
//  - For example: 32'hFFFF =BAR size of 2^16.
`define ROM_MASK_7 32'hffff


// Name:           ROM_MASK_WRITABLE_7
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 7 && ROM_BAR_ENABLED_7==1
// Parameter Type: Feature Setting
// 
// Determines if the Expansion ROM BAR Mask register for function 7 is writable by application software. If writing to a 
// Expansion ROM BAR Mask register is enabled, your application can write to the Expansion ROM BAR Mask register through the 
// DBI by asserting dbi_cs2 in addition to dbi_cs.
`define ROM_MASK_WRITABLE_7 1'h0


// Name:           ROM_FUNC7_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 7 && ROM_BAR_ENABLED_7==1 && TRGT1_POPULATE==1))
// Parameter Type: Register Default Setting
// 
// Direct incoming requests that pass filtering and match the Expansion ROM BAR of function 7 to either RTRGT0 or RTRGT1. 
//  - For example, setting ROM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for the Expansion ROM BAR of function 
//  0 to RTRGT1. 
//  - If TRGT1_POPULATE =0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define ROM_FUNC7_TARGET_MAP 1'h1


// Name:           CX_PCI_HEADER_DEFAULTS_VISIBLE_7
// Default:        0
// Values:         0, 1
// Parameter Type: Register Default Setting
// 
// Select here if you want to configure the defaults for the other PCI Standard Header registers for function 7. 
//  An extra window will appear under this page. To access it, click the plus/minus symbol in the hierarchy view on the 
//  left panel. 
//  This is optional but not usually recommended. 
//  You can also change these register defaults using the DBI before (or after) the link comes up.
`define CX_PCI_HEADER_DEFAULTS_VISIBLE_7 0

//-/ END:   PCI BASIC CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: BAR CONFIGURATION


// Name:           BAR0_ENABLED_7
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 7
// Parameter Type: Feature Setting
// 
// Include the BAR0 registers for function 7.
`define BAR0_ENABLED_7 1'h1


`define DEFAULT_BAR0_ENABLED_7 1'h1


// Name:           MEM0_SPACE_DECODER_7
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 7 && BAR0_ENABLED_7==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 7.
`define MEM0_SPACE_DECODER_7 1'h0


// Name:           PREFETCHABLE0_7
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 7 && BAR0_ENABLED_7==1 && MEM0_SPACE_DECODER_7==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 7.
`define PREFETCHABLE0_7 1'h0


// Name:           BAR0_TYPE_7
// Default:        64-bit ((MEM0_SPACE_DECODER_7==1 || BAR0_ENABLED_7==0) ? 0 : 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 7 && BAR0_ENABLED_7==1 && MEM0_SPACE_DECODER_7==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 7.
`define BAR0_TYPE_7 2'h2


// Name:           BAR0_SIZING_SCHEME_7
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 7 && BAR0_ENABLED_7==1
// Parameter Type: Feature Setting
// 
// BAR0 Function 7 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR0_SIZING_SCHEME_7 2'h0


// Name:           CX_BAR0_RESIZABLE_7
// Default:        0x0 ((BAR0_SIZING_SCHEME_7==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR0_ENABLED_7==1) && (MEM0_SPACE_DECODER_7==0)
// Parameter Type: Feature Setting
// 
// Defines BAR0 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR0 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR0_RESIZABLE_7 1'h0


// Name:           CX_BAR0_RESOURCE_AVAIL_7
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 7 && CX_BAR0_RESIZABLE_7==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR0 of function 7. 
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
// Example: 0x00000030 indicates that BAR0 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR0_RESOURCE_AVAIL_7 64'h10


// Name:           BAR0_MASK_WRITABLE_7
// Default:        0x0 ((BAR0_ENABLED_7==1 && BAR0_SIZING_SCHEME_7 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 7 && BAR0_ENABLED_7==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR0 Mask through DBI
`define BAR0_MASK_WRITABLE_7 1'h0


// Name:           BAR0_MASK_7
// Default:        0xfffff (CX_BAR0_RESIZABLE_7==1 ? [calc_bar_mask 
//                 CX_BAR0_RESOURCE_AVAIL_7] : MEM0_SPACE_DECODER_7==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 7 && BAR0_ENABLED_7==1 && MEM0_SPACE_DECODER_7==0 && 
//                 CX_BAR0_RESIZABLE_7==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR0 Mask register of function 7. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR0_MASK_7 64'hfffff


// Name:           MEM_FUNC7_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 7 && BAR0_ENABLED_7==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_0 of function 7 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming Requests for BAR0 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC7_BAR0_TARGET_MAP 1'h1


// Name:           BAR1_ENABLED_7
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 7 && BAR0_TYPE_7==0
// Parameter Type: Feature Setting
// 
// Include the BAR1 registers for function 7.
`define BAR1_ENABLED_7 1'h0


`define DEFAULT_BAR1_ENABLED_7 1'h0


// Name:           MEM1_SPACE_DECODER_7
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 7 && BAR1_ENABLED_7==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 7.
`define MEM1_SPACE_DECODER_7 1'h0


// Name:           PREFETCHABLE1_7
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 7 && BAR1_ENABLED_7==1 && MEM1_SPACE_DECODER_7==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 7.
`define PREFETCHABLE1_7 1'h0


// Name:           BAR1_TYPE_7
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 7.
`define BAR1_TYPE_7 2'h0


// Name:           BAR1_SIZING_SCHEME_7
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 7 && BAR1_ENABLED_7==1
// Parameter Type: Feature Setting
// 
// BAR1 Function 7 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR1_SIZING_SCHEME_7 2'h0


// Name:           CX_BAR1_RESIZABLE_7
// Default:        0x0 ((BAR1_SIZING_SCHEME_7==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR1_ENABLED_7==1) && (MEM1_SPACE_DECODER_7==0)
// Parameter Type: Feature Setting
// 
// Defines BAR1 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR1 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR1_RESIZABLE_7 1'h0


// Name:           CX_BAR1_RESOURCE_AVAIL_7
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 7 && CX_BAR1_RESIZABLE_7==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR1 of function 7. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR1 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR1_RESOURCE_AVAIL_7 32'h10


// Name:           BAR1_MASK_WRITABLE_7
// Default:        0x0 ((BAR1_ENABLED_7==1 && BAR1_SIZING_SCHEME_7 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 7 && BAR1_ENABLED_7==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR1 Mask through DBI
`define BAR1_MASK_WRITABLE_7 1'h0


// Name:           BAR1_MASK_7
// Default:        0xffff (CX_BAR1_RESIZABLE_7==1 ? [calc_bar_mask 
//                 CX_BAR1_RESOURCE_AVAIL_7] : MEM1_SPACE_DECODER_7==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 7 && BAR1_ENABLED_7==1 && MEM1_SPACE_DECODER_7==0 && 
//                 CX_BAR1_RESIZABLE_7==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR1 Mask register of function 7. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR1_MASK_7 32'hffff


// Name:           MEM_FUNC7_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 7 && BAR1_ENABLED_7==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_1 of function 7 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR1_TARGET_MAP to 1 maps all incoming Requests for BAR1 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC7_BAR1_TARGET_MAP 1'h1


// Name:           BAR2_ENABLED_7
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 7
// Parameter Type: Feature Setting
// 
// Include the BAR2 registers for function 7.
`define BAR2_ENABLED_7 1'h1


`define DEFAULT_BAR2_ENABLED_7 1'h1


// Name:           MEM2_SPACE_DECODER_7
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 7 && BAR2_ENABLED_7==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 7.
`define MEM2_SPACE_DECODER_7 1'h0


// Name:           PREFETCHABLE2_7
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 7 && BAR2_ENABLED_7==1 && MEM2_SPACE_DECODER_7==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 7.
`define PREFETCHABLE2_7 1'h0


// Name:           BAR2_TYPE_7
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 7 && BAR2_ENABLED_7==1 && MEM2_SPACE_DECODER_7==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 7.
`define BAR2_TYPE_7 2'h0


// Name:           BAR2_SIZING_SCHEME_7
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 7 && BAR2_ENABLED_7==1
// Parameter Type: Feature Setting
// 
// BAR2 Function 7 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR2_SIZING_SCHEME_7 2'h0


// Name:           CX_BAR2_RESIZABLE_7
// Default:        0x0 ((BAR2_SIZING_SCHEME_7==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR2_ENABLED_7==1) && (MEM2_SPACE_DECODER_7==0)
// Parameter Type: Feature Setting
// 
// Defines BAR2 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR2 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR2_RESIZABLE_7 1'h0


// Name:           CX_BAR2_RESOURCE_AVAIL_7
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 7 && CX_BAR2_RESIZABLE_7==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR2 of function 7. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR2 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR2_RESOURCE_AVAIL_7 64'h10


// Name:           BAR2_MASK_WRITABLE_7
// Default:        0x0 ((BAR2_ENABLED_7==1 && BAR2_SIZING_SCHEME_7 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 7 && BAR2_ENABLED_7==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR2 Mask through DBI
`define BAR2_MASK_WRITABLE_7 1'h0


// Name:           BAR2_MASK_7
// Default:        0xfffff (CX_BAR2_RESIZABLE_7==1 ? [calc_bar_mask 
//                 CX_BAR2_RESOURCE_AVAIL_7] : MEM2_SPACE_DECODER_7==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 7 && BAR2_ENABLED_7==1 && MEM2_SPACE_DECODER_7==0 && 
//                 CX_BAR2_RESIZABLE_7==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR2 Mask register of function 7. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR2_MASK_7 64'hfffff


// Name:           MEM_FUNC7_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 7 && BAR2_ENABLED_7==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_2 of function 7 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR2_TARGET_MAP to 1 maps all incoming requests for BAR2 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC7_BAR2_TARGET_MAP 1'h1


// Name:           BAR3_ENABLED_7
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 7 && BAR2_TYPE_7==0
// Parameter Type: Feature Setting
// 
// Include the BAR3 registers for function 7.
`define BAR3_ENABLED_7 1'h0



`define DEFAULT_BAR3_ENABLED_7 1'h0


// Name:           MEM3_SPACE_DECODER_7
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 7 && BAR3_ENABLED_7==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 7.
`define MEM3_SPACE_DECODER_7 1'h0


// Name:           PREFETCHABLE3_7
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 7 && BAR3_ENABLED_7==1 && MEM3_SPACE_DECODER_7==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 7.
`define PREFETCHABLE3_7 1'h0


// Name:           BAR3_TYPE_7
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 7.
`define BAR3_TYPE_7 2'h0


// Name:           BAR3_SIZING_SCHEME_7
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 7 && BAR3_ENABLED_7==1
// Parameter Type: Feature Setting
// 
// BAR3 Function 7 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR3_SIZING_SCHEME_7 2'h0


// Name:           CX_BAR3_RESIZABLE_7
// Default:        0x0 ((BAR3_SIZING_SCHEME_7==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR3_ENABLED_7==1) && (MEM3_SPACE_DECODER_7==0)
// Parameter Type: Feature Setting
// 
// Defines BAR3 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR3 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR3_RESIZABLE_7 1'h0


// Name:           CX_BAR3_RESOURCE_AVAIL_7
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 7 && CX_BAR3_RESIZABLE_7==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR3 of function 7. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR3 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR3_RESOURCE_AVAIL_7 32'h10


// Name:           BAR3_MASK_WRITABLE_7
// Default:        0x0 ((BAR3_ENABLED_7==1 && BAR3_SIZING_SCHEME_7 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 7 && BAR3_ENABLED_7==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR3 Mask through DBI
`define BAR3_MASK_WRITABLE_7 1'h0


// Name:           BAR3_MASK_7
// Default:        0xffff (CX_BAR3_RESIZABLE_7==1 ? [calc_bar_mask 
//                 CX_BAR3_RESOURCE_AVAIL_7] : MEM3_SPACE_DECODER_7==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 7 && BAR3_ENABLED_7==1 && MEM3_SPACE_DECODER_7==0 && 
//                 CX_BAR3_RESIZABLE_7==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR3 Mask register of function 7. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR3_MASK_7 32'hffff


// Name:           MEM_FUNC7_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 7 && BAR3_ENABLED_7==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_3 of function 7 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR3_TARGET_MAP to 1 maps all incoming requests for BAR3 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC7_BAR3_TARGET_MAP 1'h1


// Name:           BAR4_ENABLED_7
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 7
// Parameter Type: Feature Setting
// 
// Include the BAR4 registers for function 7.
`define BAR4_ENABLED_7 1'h1


`define DEFAULT_BAR4_ENABLED_7 1'h1



// Name:           MEM4_SPACE_DECODER_7
// Default:        I/O (BAR4_ENABLED_7==1)
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 7 && BAR4_ENABLED_7==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 7.
`define MEM4_SPACE_DECODER_7 1'h1


// Name:           PREFETCHABLE4_7
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 7 && BAR4_ENABLED_7==1 && MEM4_SPACE_DECODER_7==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 7.
`define PREFETCHABLE4_7 1'h0


// Name:           BAR4_TYPE_7
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 7 && BAR4_ENABLED_7==1 && MEM4_SPACE_DECODER_7==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 7.
`define BAR4_TYPE_7 2'h0


// Name:           BAR4_SIZING_SCHEME_7
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 7 && BAR4_ENABLED_7==1
// Parameter Type: Feature Setting
// 
// BAR4  Function 7 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR4_SIZING_SCHEME_7 2'h0


// Name:           CX_BAR4_RESIZABLE_7
// Default:        0x0 ((BAR4_SIZING_SCHEME_7==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR4_ENABLED_7==1) && (MEM4_SPACE_DECODER_7==0)
// Parameter Type: Feature Setting
// 
// Defines BAR4 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR4 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR4_RESIZABLE_7 1'h0


// Name:           CX_BAR4_RESOURCE_AVAIL_7
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 7 &&  CX_BAR4_RESIZABLE_7==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR4 of function 7. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR4 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR4_RESOURCE_AVAIL_7 64'h10


// Name:           BAR4_MASK_WRITABLE_7
// Default:        0x0 ((BAR4_ENABLED_7==1 && BAR4_SIZING_SCHEME_7 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 7 && BAR4_ENABLED_7==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR4 Mask through DBI
`define BAR4_MASK_WRITABLE_7 1'h0


// Name:           BAR4_MASK_7
// Default:        0xff (CX_BAR4_RESIZABLE_7==1 ? [calc_bar_mask 
//                 CX_BAR4_RESOURCE_AVAIL_7] : MEM4_SPACE_DECODER_7==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 7 && BAR4_ENABLED_7==1 && MEM4_SPACE_DECODER_7==0 && 
//                 CX_BAR4_RESIZABLE_7==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR4 Mask register of function 7. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR4_MASK_7 64'hff


// Name:           MEM_FUNC7_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 7 && BAR4_ENABLED_7==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_4 of function 7 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR4_TARGET_MAP to 1 maps all incoming requests for BAR4 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC7_BAR4_TARGET_MAP 1'h1


// Name:           BAR5_ENABLED_7
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 7 && BAR4_TYPE_7==0
// Parameter Type: Feature Setting
// 
// Include the BAR5 registers for function 7.
`define BAR5_ENABLED_7 1'h0


`define DEFAULT_BAR5_ENABLED_7 1'h0


// Name:           MEM5_SPACE_DECODER_7
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 7 && BAR5_ENABLED_7==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 7.
`define MEM5_SPACE_DECODER_7 1'h0


// Name:           PREFETCHABLE5_7
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 7 && BAR5_ENABLED_7==1 && MEM5_SPACE_DECODER_7==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 7.
`define PREFETCHABLE5_7 1'h0


// Name:           BAR5_TYPE_7
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 7.
`define BAR5_TYPE_7 2'h0


// Name:           BAR5_SIZING_SCHEME_7
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 7 && BAR5_ENABLED_7==1
// Parameter Type: Feature Setting
// 
// BAR5  Function 7 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR5_SIZING_SCHEME_7 2'h0


// Name:           CX_BAR5_RESIZABLE_7
// Default:        0x0 ((BAR5_SIZING_SCHEME_7==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR5_ENABLED_7==1) && (MEM5_SPACE_DECODER_7==0)
// Parameter Type: Feature Setting
// 
// Defines BAR5 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR5 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR5_RESIZABLE_7 1'h0


// Name:           CX_BAR5_RESOURCE_AVAIL_7
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 7 && CX_BAR5_RESIZABLE_7==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR5 of function 7. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR5 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR5_RESOURCE_AVAIL_7 32'h10


// Name:           BAR5_MASK_WRITABLE_7
// Default:        0x0 ((BAR5_ENABLED_7==1 && BAR5_SIZING_SCHEME_7 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 7 && BAR5_ENABLED_7==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR5 Mask through DBI
`define BAR5_MASK_WRITABLE_7 1'h0


// Name:           BAR5_MASK_7
// Default:        0xffff (CX_BAR5_RESIZABLE_7==1 ? [calc_bar_mask 
//                 CX_BAR5_RESOURCE_AVAIL_7] : MEM5_SPACE_DECODER_7==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 7 && BAR5_ENABLED_7==1 && MEM5_SPACE_DECODER_7==0 && 
//                 CX_BAR5_RESIZABLE_7==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR5 Mask register of function 7. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR5_MASK_7 32'hffff


// Name:           MEM_FUNC7_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 7 && BAR5_ENABLED_7==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_5 of function 7 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR5_TARGET_MAP to 1 maps all incoming requests for BAR5 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC7_BAR5_TARGET_MAP 1'h1


`define FUNC7_BARSIZE_32 128'h0


`define FUNC7_BARSIZE 128'h0


`define FUNC7_BAR0_BARSIZE_TRGT1 128'h0


`define FUNC7_BAR2_BARSIZE_TRGT1 128'h0


`define FUNC7_BAR4_BARSIZE_TRGT1 128'h0


`define FUNC7_BAR0_TRGT1_ADDR_WIDTH 1


`define FUNC7_BAR2_TRGT1_ADDR_WIDTH 1


`define FUNC7_BAR4_TRGT1_ADDR_WIDTH 1


// Name:         CX_NUM_RBARS_7
// Default:      0 ([calc_num_rbars CX_BAR0_RESIZABLE_7 CX_BAR1_RESIZABLE_7 
//               CX_BAR2_RESIZABLE_7 CX_BAR3_RESIZABLE_7 CX_BAR4_RESIZABLE_7 
//               CX_BAR5_RESIZABLE_7])
// Values:       -2147483648, ..., 2147483647
// 
// Number of resizable BARs
`define CX_NUM_RBARS_7 0

//-/ END:   BAR CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SR-IOV CAPABILITIES CONFIGURATION


// Name:           CX_VF_DEPENDENCY_LINK_7
// Default:        0x7
// Values:         0x0, ..., 0xff
// Enabled:        CX_VF_DEPENDENCY_LINK_SUPP && (CX_NFUNC > 7) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Specifies the 8-bit VF dependency link for PF7. Valid only if CX_VF_DEPENDENCY_LINK_SUPP=1.
`define CX_VF_DEPENDENCY_LINK_7 8'h7


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER1_7
// Default:        0x2 ((CX_NFUNC>=17) ? 32 : (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : 
//                 (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF7 in an ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER1_7 16'h2


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER0_7
// Default:        0x100
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF7 
//  in a non-ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER0_7 16'h100


// Name:           VF_STRIDE_ARI_CAP_HIER1_7
// Default:        0x2 (CX_VF_STRIDE_ALWAYS_ONE) ? 1 : ((CX_NFUNC>=17) ? 32 : 
//                 (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF7 in an ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER1_7 16'h2


// Name:           VF_STRIDE_ARI_CAP_HIER0_7
// Default:        0x100 ((CX_VF_STRIDE_ALWAYS_ONE) ? 0x0001 : 0x0100)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF7 in a non-ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER0_7 16'h100


// Name:           CX_VF_DEVICE_ID_7
// Default:        0x0 (CX_DEVICE_ID_7)
// Values:         0x0, ..., 0xffff
// Enabled:        (CX_NFUNC > 7) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 16-bit virtual function Device ID for PF7. 
//  It might be different from the physical function's.
`define CX_VF_DEVICE_ID_7 16'h0


// Name:           CX_VF_SUPP_PAGE_SIZE_7
// Default:        0x553
// Values:         0x553, ..., 0xffff
// Enabled:        (CX_NFUNC > 7) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 32-bit supported page sizes for virtual functions for PF7
`define CX_VF_SUPP_PAGE_SIZE_7 32'h553


// Name:           CX_ARI_CAP_HIER_PRSVD_7
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Specifies if ARI Capable Hierarchy bit is preserved across certain power state transitions 
//  Only present in PF0. Read Only Zero in this PF7.
`define CX_ARI_CAP_HIER_PRSVD_7 1'h0

//-/===========================================
//-/ START: VF BAR CONFIGURATION


// Name:           VF_BAR0_ENABLED_7
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 7)
// Parameter Type: Feature Setting
// 
// Include the VF BAR0 registers in PF7
`define VF_BAR0_ENABLED_7 1'h1


`define VF_DEFAULT_BAR0_ENABLED_7 1'h1


// Name:           VF_MEM0_SPACE_DECODER_7
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR0_ENABLED_7 && CX_SRIOV_ENABLE && (CX_NFUNC > 7)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Space Indicator 
//  ALWAYS set to Memory for Virtual Functions
`define VF_MEM0_SPACE_DECODER_7 1'h0


// Name:           VF_PREFETCHABLE0_7
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_7==1 && VF_MEM0_SPACE_DECODER_7==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 7)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Prefetchable 
//  When set indicates VF BAR0 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE0_7 1'h0


// Name:           VF_BAR0_TYPE_7
// Default:        64-bit ((VF_MEM0_SPACE_DECODER_7==1 || VF_BAR0_ENABLED_7==0) ? 0 : 
//                 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR0_ENABLED_7==1 && VF_MEM0_SPACE_DECODER_7==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 7)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 7; (bits [2:1] for a memory BAR).
`define VF_BAR0_TYPE_7 2'h2


// Name:           VF_BAR0_MASK_WRITABLE_7
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_7==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 7)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR0_MASK_WRITABLE_7 1'h0


// Name:           VF_BAR0_MASK_7
// Default:        0xfffff (VF_MEM0_SPACE_DECODER_7==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR0_ENABLED_7==1 && VF_MEM0_SPACE_DECODER_7==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 7)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Mask 
//  Determines the default of the VF BAR Mask register for PF7. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR0_MASK_7 64'hfffff


// Name:           VF_MEM_FUNC7_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR0_ENABLED_7==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 7)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF7 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC7_BAR0_TARGET_MAP 1'h1


// Name:           VF_BAR1_ENABLED_7
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        (VF_BAR0_TYPE_7==0)  && CX_SRIOV_ENABLE && (CX_NFUNC > 7)
// Parameter Type: Feature Setting
// 
// Include the VF BAR1 registers in PF7
`define VF_BAR1_ENABLED_7 1'h0


`define VF_DEFAULT_BAR1_ENABLED_7 1'h0


// Name:           VF_MEM1_SPACE_DECODER_7
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR1_ENABLED_7==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 7)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Space Indicator
`define VF_MEM1_SPACE_DECODER_7 1'h0


// Name:           VF_PREFETCHABLE1_7
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_7==1 && VF_MEM1_SPACE_DECODER_7==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 7)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Prefetchable 
//  When set indicates VF BAR1 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE1_7 1'h0


// Name:           VF_BAR1_TYPE_7
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 7; (bits [2:1] for a memory BAR).
`define VF_BAR1_TYPE_7 2'h0


// Name:           VF_BAR1_MASK_WRITABLE_7
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_7==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 7)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR1_MASK_WRITABLE_7 1'h0


// Name:           VF_BAR1_MASK_7
// Default:        0xffff (VF_MEM1_SPACE_DECODER_7==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR1_ENABLED_7==1 && VF_MEM1_SPACE_DECODER_7==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 7)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Mask 
//  Determines the default of the VF BAR Mask register for PF7. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR1_MASK_7 32'hffff


// Name:           VF_MEM_FUNC7_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR1_ENABLED_7==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 7)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF7 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC7_BAR1_TARGET_MAP 1'h1


// Name:           VF_BAR2_ENABLED_7
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 7)
// Parameter Type: Feature Setting
// 
// Include the VF BAR2 registers in PF7
`define VF_BAR2_ENABLED_7 1'h1


`define VF_DEFAULT_BAR2_ENABLED_7 1'h1


// Name:           VF_MEM2_SPACE_DECODER_7
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR2_ENABLED_7==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 7)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Memory Space Indicator
`define VF_MEM2_SPACE_DECODER_7 1'h0


// Name:           VF_PREFETCHABLE2_7
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_7==1 && VF_MEM2_SPACE_DECODER_7==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 7)
// Parameter Type: Register Default Setting
// 
// BAR2 Memory Prefetchable 
//  When set indicates VF BAR2 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE2_7 1'h0


// Name:           VF_BAR2_TYPE_7
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR2_ENABLED_7==1 && VF_MEM2_SPACE_DECODER_7==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 7)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 7; (bits [2:1] for a memory BAR).
`define VF_BAR2_TYPE_7 2'h0


// Name:           VF_BAR2_MASK_WRITABLE_7
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_7==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 7)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR2_MASK_WRITABLE_7 1'h0


// Name:           VF_BAR2_MASK_7
// Default:        0xfffff (VF_MEM2_SPACE_DECODER_7==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR2_ENABLED_7==1 && VF_MEM2_SPACE_DECODER_7==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 7)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Mask 
//  Determines the default of the VF BAR Mask register for PF7. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR2_MASK_7 64'hfffff


// Name:           VF_MEM_FUNC7_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR2_ENABLED_7==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 7)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF7 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC7_BAR2_TARGET_MAP 1'h1


// Name:           VF_BAR3_ENABLED_7
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_TYPE_7==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 7)
// Parameter Type: Feature Setting
// 
// Include the VF BAR3 registers in PF7
`define VF_BAR3_ENABLED_7 1'h0


`define VF_DEFAULT_BAR3_ENABLED_7 1'h0


// Name:           VF_MEM3_SPACE_DECODER_7
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR3_ENABLED_7==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 7)
// Parameter Type: Register Default Setting
// 
// BAR3 Memory Space Indicator
`define VF_MEM3_SPACE_DECODER_7 1'h0


// Name:           VF_PREFETCHABLE3_7
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_7==1 && VF_MEM3_SPACE_DECODER_7==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 7)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Memory Prefetchable 
//  When set indicates VF BAR3 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE3_7 1'h0


// Name:           VF_BAR3_TYPE_7
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 7; (bits [2:1] for a memory BAR).
`define VF_BAR3_TYPE_7 2'h0


// Name:           VF_BAR3_MASK_WRITABLE_7
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_7==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 7)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR3_MASK_WRITABLE_7 1'h0


// Name:           VF_BAR3_MASK_7
// Default:        0xffff (VF_MEM3_SPACE_DECODER_7==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR3_ENABLED_7==1 && VF_MEM3_SPACE_DECODER_7==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 7)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Mask 
//  Determines the default of the VF BAR Mask register for PF7. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR3_MASK_7 32'hffff


// Name:           VF_MEM_FUNC7_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR3_ENABLED_7==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 7)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF7 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC7_BAR3_TARGET_MAP 1'h1


// Name:           VF_BAR4_ENABLED_7
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 7)
// Parameter Type: Feature Setting
// 
// Include the VF BAR4 registers in PF7
`define VF_BAR4_ENABLED_7 1'h1


`define VF_DEFAULT_BAR4_ENABLED_7 1'h1


// Name:           VF_MEM4_SPACE_DECODER_7
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR4_ENABLED_7==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 7)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Space Indicator
`define VF_MEM4_SPACE_DECODER_7 1'h0


// Name:           VF_PREFETCHABLE4_7
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_7==1 && VF_MEM4_SPACE_DECODER_7==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 7)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Prefetchable 
//  When set indicates VF BAR4 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE4_7 1'h0


// Name:           VF_BAR4_TYPE_7
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR4_ENABLED_7==1 && VF_MEM4_SPACE_DECODER_7==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 7)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 7; (bits [2:1] for a memory BAR).
`define VF_BAR4_TYPE_7 2'h0


// Name:           VF_BAR4_MASK_WRITABLE_7
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_7==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 7)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR4_MASK_WRITABLE_7 1'h0


// Name:           VF_BAR4_MASK_7
// Default:        0xfff (VF_MEM4_SPACE_DECODER_7==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR4_ENABLED_7==1 && VF_MEM4_SPACE_DECODER_7==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 7)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Mask 
//  Determines the default of the VF BAR Mask register for PF7. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR4_MASK_7 64'hfff


// Name:           VF_MEM_FUNC7_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR4_ENABLED_7==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 7)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF7 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC7_BAR4_TARGET_MAP 1'h1


// Name:           VF_BAR5_ENABLED_7
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_TYPE_7==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 7)
// Parameter Type: Feature Setting
// 
// Include the VF BAR5 registers in PF7
`define VF_BAR5_ENABLED_7 1'h0


`define VF_DEFAULT_BAR5_ENABLED_7 1'h0


// Name:           VF_MEM5_SPACE_DECODER_7
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR5_ENABLED_7==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 7)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Space Indicator
`define VF_MEM5_SPACE_DECODER_7 1'h0


// Name:           VF_PREFETCHABLE5_7
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_7==1 && VF_MEM5_SPACE_DECODER_7==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 7)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Prefetchable 
//  When set indicates VF BAR5 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE5_7 1'h0


// Name:           VF_BAR5_TYPE_7
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 7; (bits [2:1] for a memory BAR).
`define VF_BAR5_TYPE_7 2'h0


// Name:           VF_BAR5_MASK_WRITABLE_7
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_7==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 7)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR5_MASK_WRITABLE_7 1'h0


// Name:           VF_BAR5_MASK_7
// Default:        0xffff (VF_MEM5_SPACE_DECODER_7==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR5_ENABLED_7==1 && VF_MEM5_SPACE_DECODER_7==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 7)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Mask 
//  Determines the default of the VF BAR Mask register for PF7. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR5_MASK_7 32'hffff


// Name:           VF_MEM_FUNC7_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR5_ENABLED_7==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 7)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF7 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC7_BAR5_TARGET_MAP 1'h1


`define VF_FUNC7_BARSIZE_32 128'h101000


`define VF_FUNC7_BARSIZE 128'h201000

//-/ END:   VF BAR CONFIGURATION
//-/===========================================

//-/ END:   SR-IOV CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: TPH CAPABILITIES CONFIGURATION


// Name:           TPH_IVEC_7
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Interrupt Vector Mode. If set indicates that the function supports the Interrupt Vector 
// Mode of operation. Function 7.
`define TPH_IVEC_7 1'h0


// Name:           TPH_DS_7
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Device Specific Mode. If set indicates that the function supports the Device Specific Mode 
// of operation. Function 7.
`define TPH_DS_7 1'h0


// Name:           TPH_ST_TABLE_LOC_7
// Default:        Not Present
// Values:         Not Present (0), TPH Requester Capability Structure (1), MSI-X 
//                 Table Structure (2)
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_DS_7 || TPH_IVEC_7))
// Parameter Type: Feature Setting
// 
// TLP Processing Hints Steering Tag Table Location. Value indicates if and where the ST Table is located. Function 7.
`define TPH_ST_TABLE_LOC_7 0

//located in the TPH Requester Capability structure. Please reduce the ST Table Size for this mode of operation"

// Name:           TPH_ST_TABLE_SIZE_7
// Default:        1
// Values:         1, ..., 2048
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_ST_TABLE_LOC_7 != 0))
// Parameter Type: Feature Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define TPH_ST_TABLE_SIZE_7 1


`define TPH_ST_TABLE_DEPTH_7 0

//-/ END:   TPH CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: ATS CAPABILITIES CONFIGURATION


// Name:           ATS_INV_Q_DPTH_7
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// The number of Invalidate Requests that the Function can accept before putting backpressure on the upstream connection. A 
// value of 0 indicates the function can accept 32 Invalidate requests. Function 7.
`define ATS_INV_Q_DPTH_7 5'd0


// Name:           ATS_STU_7
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// This value indicates to the Function the minimum number of 4096-byte blocks that is indicated in a Translation 
// Completion or Invalidate Request. This is a power of 2 multiplier and the number of blocks is 2^STU. A value of 0 indicates 1 block 
// and a value of 31 indicates 2^31 blocks (or 8 TB total). Function 7.
`define ATS_STU_7 5'd0

//-/ END:   ATS CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PRS CAPABILITIES CONFIGURATION


// Name:           CX_PRS_OUTSTANDING_CAPACITY_VALUE_7
// Default:        0x1
// Values:         0x0, ..., 0xffffffff
// Enabled:        (CX_PRS_ENABLE==1) && (CX_NFUNC > 7)
// Parameter Type: Register Default Setting
// 
// Register default for PRS Outstanding Capacity in PF7. 
// For more details, see the PRS_OUTSTANDING_CAPACITY field in the PRS_REQ_CAPACITY_REG register.
`define CX_PRS_OUTSTANDING_CAPACITY_VALUE_7 32'h1

//-/ END:   PRS CAPABILITIES CONFIGURATION
//-/===========================================


//-/===========================================
//--- START: RN


// Name:           CX_RN_IMM_VALUE_7
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 7)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for PF7.
`define CX_RN_IMM_VALUE_7 1'h0


// Name:           CX_RN_IMM_D0_VALUE_7
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 7)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for PF7.
`define CX_RN_IMM_D0_VALUE_7 1'h0


// Name:           CX_RN_FRS_VALUE_7
// Default:        0x0 (CX_RN_FRS_SUPPORTED==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_FRS_SUPPORTED==1) && (CX_NFUNC > 7)
// Parameter Type: Feature Setting
// 
// Function Readiness Status messaging supported for function PF7.
`define CX_RN_FRS_VALUE_7 1'h0


// Name:           CX_RN_RTR_VALID_7
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 7)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF7.
`define CX_RN_RTR_VALID_7 1'h0


// Name:           CX_RN_RTR_DL_UP_VALUE_7
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 7)
// Parameter Type: Register Default Setting
// 
// Register default for RTR DL Up Time field in PF7.
`define CX_RN_RTR_DL_UP_VALUE_7 12'h0


// Name:           CX_RN_RTR_RESET_VALUE_7
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 7)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF7.
`define CX_RN_RTR_RESET_VALUE_7 12'h0


// Name:           CX_RN_RTR_D3D0_VALUE_7
// Default:        0x0
// Values:         0x0, ..., 0x80a
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 7)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF7.
`define CX_RN_RTR_D3D0_VALUE_7 12'h0


// Name:           CX_RN_RTR_FLR_VALUE_7
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_FLR_ENABLE==1) && (CX_NFUNC > 7)
// Parameter Type: Register Default Setting
// 
// Register default for RTR FLR Time field in PF7.
`define CX_RN_RTR_FLR_VALUE_7 12'h0


// Name:           VF_RN_IMM_VALUE_7
// Default:        0x0 (CX_RN_IMM_VALUE_7 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 7))
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for VFs in PF7.
`define VF_RN_IMM_VALUE_7 1'h0


// Name:           VF_RN_IMM_D0_VALUE_7
// Default:        0x0 (CX_RN_IMM_D0_VALUE_7 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 7))
// Parameter Type: Register Default Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for VFs in PF7.
`define VF_RN_IMM_D0_VALUE_7 1'h0


// Name:           VF_RN_RTR_VALID_7
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 7) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF7 VFs.
`define VF_RN_RTR_VALID_7 1'h0


// Name:           VF_RN_RTR_RESET_VALUE_7
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_7)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 7) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF7 VFS.
`define VF_RN_RTR_RESET_VALUE_7 12'h0


// Name:           VF_RN_RTR_D3D0_VALUE_7
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_7)
// Values:         0x0, ..., 0x80a
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 7) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF7 VFS.
`define VF_RN_RTR_D3D0_VALUE_7 12'h0


// Name:           VF_RN_RTR_FLR_VALUE_7
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_7)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 7) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF7 VFs.
`define VF_RN_RTR_FLR_VALUE_7 12'h0


// Name:           EXT_VF_RN_RTR_VALID_7
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 7) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF7 VFs.
`define EXT_VF_RN_RTR_VALID_7 1'h0


// Name:           EXT_VF_RN_RTR_RESET_VALUE_7
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_7)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 7) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF7 VFS.
`define EXT_VF_RN_RTR_RESET_VALUE_7 12'h0


// Name:           EXT_VF_RN_RTR_D3D0_VALUE_7
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_7)
// Values:         0x0, ..., 0x80a
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 7) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF7 VFS.
`define EXT_VF_RN_RTR_D3D0_VALUE_7 12'h0


// Name:           EXT_VF_RN_RTR_FLR_VALUE_7
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_7)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 7) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF7 VFs.
`define EXT_VF_RN_RTR_FLR_VALUE_7 12'h0

//-/ END:   RN
//-/===========================================

//-/ START: LN CAPABILITIES CONFIGURATION
//-/===========================================


// Name:           CX_LN_REG_MAX_VALUE_7
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 7))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_64_SUPPORTED field in the LNR_CAP_OFF register for PF7.
`define CX_LN_REG_MAX_VALUE_7 5'h0


// Name:           CX_LN_128_SUPPORTED_VALUE_7
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 7))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_128_SUPPORTED field in the LNR_CAP_OFF register for PF7.
`define CX_LN_128_SUPPORTED_VALUE_7 1'h0


// Name:           CX_LN_64_SUPPORTED_VALUE_7
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 7))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_REGISTRATION_MAX field in the LNR_CAP_OFF register for PF7.
`define CX_LN_64_SUPPORTED_VALUE_7 1'h0

//-/ END:   LN CAPABILITIES CONFIGURATION
//-/===========================================




//-/==========================================
//-/ End FUNC7 Config
//-/==========================================

//-/===========================================
//-/ Function 8 Configuration Registers
//-/ ==========================================


// Name:         FUNC_8
// Default:      0 ((CX_NFUNC > 8) ? 1 : 0)
// Values:       0, 1
// 
// This parameter indicates that Function 8 is present
// `define FUNC_8

//-/===========================================
//-/ START: PCI-E CAPABILITIES CONFIGURATION


// Name:           PCIE_CAP_INT_MSG_NUM_8
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 8
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Message Number field in the PCI Express Capabilities Register. Function 8.
`define PCIE_CAP_INT_MSG_NUM_8 5'h0


// Name:           SLOT_IMPLEMENTED_8
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_NFUNC > 8))
// Parameter Type: Register Default Setting
// 
// Indicates that the PCI Express link associated with this Port is connected to a slot. Function 8.
`define SLOT_IMPLEMENTED_8 1'h0


// Name:           DEFAULT_PHANTOM_FUNC_SUPPORTED_8
// Default:        0x0
// Values:         0x0, ..., 0x3
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_PHANTOM_FUNC_SUPPORTED_8 2'h0


// Name:           DEFAULT_EXT_TAG_FIELD_SUPPORTED_8
// Default:        0x0 (DEFAULT_EXT_TAG_FIELD_SUPPORTED_0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 8
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_EXT_TAG_FIELD_SUPPORTED_8 1'h0



// Name:           DEFAULT_ATT_BUTT_PRE_8
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 8
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Button is present
`define DEFAULT_ATT_BUTT_PRE_8 1'h0


// Name:           DEFAULT_ATT_IND_PRE_8
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 8
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Indicator is present
`define DEFAULT_ATT_IND_PRE_8 1'h0


// Name:           DEFAULT_PWR_IND_PRE_8
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 8
// Parameter Type: Register Default Setting
// 
// When set indicates that a Power Indicator is present
`define DEFAULT_PWR_IND_PRE_8 1'h0


// Name:           DEFAULT_NO_SNOOP_SUPPORTED_8
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 8
// Parameter Type: Register Default Setting
// 
// Default value for the Enable No Snoop bit in the Device Control Register. Function 8.
`define DEFAULT_NO_SNOOP_SUPPORTED_8 1'h0


// Name:           ROOT_RCB_8
// Default:        64-bit
// Values:         64-bit (0x0), 128-bit (0x1)
// Parameter Type: Register Default Setting
// 
// Default value for the Read Completion Boundary (RCB) bit in the Link Control Register.
`define ROOT_RCB_8 1'h0


//-/ END:   PCI-E CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: MSI-X CAPABILITIES CONFIGURATION


// Name:           MSIX_TABLE_SIZE_8
// Default:        0x0
// Values:         0x0, ..., 0x7ff
// Enabled:        CX_NFUNC > 8 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the MSI-X Table Size field in the MSI-X Control Register. Function 8.
`define MSIX_TABLE_SIZE_8 11'h0


// Name:           MSIX_TABLE_BIR_8
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 8 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table BAR Indicator Register (BIR) field in the MSI-X Table Offset and BIR Register. Function 8.
`define MSIX_TABLE_BIR_8 3'h0


// Name:           MSIX_TABLE_OFFSET_8
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 8 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table Offset field in the MSI-X Table Offset and BIR Register. Function 8.
`define MSIX_TABLE_OFFSET_8 29'h0


// Name:           MSIX_PBA_BIR_8
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 8 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Pending Bit Array (PBA) BIR field in the MSI-X PBA Offset and BIR Register. Function 8.
`define MSIX_PBA_BIR_8 7'h0


// Name:           MSIX_PBA_OFFSET_8
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 8 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the PBA Offset field in the MSI-X PBA Offset and BIR Register. Function 8.
`define MSIX_PBA_OFFSET_8 29'h0

//-/ END:   MSI-X CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SATA CAPABILITIES CONFIGURATION


// Name:         SATA_HBA_OFFSET_8
// Default:      0x0
// Values:       0x0, ..., 0xfffff
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA Offset. Base address of the SATA HBA registers, 
//  as an offset from the base address of the BAR indicated 
//  by the SATA BAR field.
`define SATA_HBA_OFFSET_8 20'h0


// Name:         SATA_BAR_8
// Default:      0x0
// Values:       0x0, ..., 0xf
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA BAR. The bar that maps to SATA HBA registers,
`define SATA_BAR_8 4'h0

//-/ END:   SATA CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: AER CAPABILITIES CONFIGURATION


// Name:           DEFAULT_ECRC_CHK_CAP_8
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 8 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Check Capable bit in the Advanced Capabilities and Control Register. Function 8.
`define DEFAULT_ECRC_CHK_CAP_8 1'h1


// Name:           DEFAULT_ECRC_GEN_CAP_8
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 8 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Generation Capability bit in the Advanced Capabilities and Control Register. Function 8.
`define DEFAULT_ECRC_GEN_CAP_8 1'h1


// Name:           AER_INT_MSG_NUM_8
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Parameter Type: Register Default Setting
// 
// Default value for the Advanced Error Interrupt Message Number field of the Root Error Status Register. Function 8.
`define AER_INT_MSG_NUM_8 5'h0



// Name:           CX_HDR_LOG_DEPTH_8
// Default:        0x1
// Values:         0x1, 0x2, 0x4
// Enabled:        CX_NFUNC > 8 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Feature Setting.
// 
// Header Log Depth
`define CX_HDR_LOG_DEPTH_8 3'h1


`define CX_MULTIPLE_HDR_REC_CAP_8 1'h0

//-/ END:   AER CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PM CAPABILITIES CONFIGURATION


// Name:           PME_SUPPORT_8
// Default:        0x1b
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 8
// Parameter Type: Register Default Setting
// 
// Default value for the PME_Support field in the Power Management Capabilities Register. Function 8.
`define PME_SUPPORT_8 5'h1b


// Name:           D1_SUPPORT_8
// Default:        true
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 8
// Parameter Type: Register Default Setting
// 
// Default value for the D1 Support bit in the Power Management Capabilities Register. Function 8.
`define D1_SUPPORT_8 1'h1


// Name:           D2_SUPPORT_8
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 8
// Parameter Type: Register Default Setting
// 
// Default value for the D2 Support bit in the Power Management Capabilities Register. Function 8.
`define D2_SUPPORT_8 1'h0


// Name:           DEV_SPEC_INIT_8
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 8
// Parameter Type: Register Default Setting
// 
// Default value for the Device Specific Initialization (DSI) bit in the Power Management Capabilities Register. Function 
// 8.
`define DEV_SPEC_INIT_8 1'h0


// Name:           AUX_CURRENT_8
// Default:        375mA
// Values:         0mA (0x0), 55mA (0x1), 100mA (0x2), 160mA (0x3), 220mA (0x4), 270mA 
//                 (0x5), 320mA (0x6), 375mA (0x7)
// Enabled:        CX_NFUNC > 8
// Parameter Type: Register Default Setting
// 
// Default value for the Aux Current field in the Power Management Capabilities Register. Function 8.
`define AUX_CURRENT_8 3'h7


// Name:           DEFAULT_NO_SOFT_RESET_8
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 8
// Parameter Type: Register Default Setting
// 
// Default value for the No Soft Reset bit in the Power Management Control and Status Register. When set, you should not 
// reset any controller registers when transitioning from D3hot to D0. Therefore, you should not assert the non_sticky_rst_n 
// and sticky_rst_n inputs. Function 8.
`define DEFAULT_NO_SOFT_RESET_8 1'h0

//-/ END:   PM CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PCI BASIC CONFIGURATION


// Name:           CX_DEVICE_ID_8
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 8
// Parameter Type: Register Default Setting
// 
// Default value for the Device ID field in the Device ID and Vendor ID Register. Function 8.
`define CX_DEVICE_ID_8 16'h0


// Name:           CX_VENDOR_ID_8
// Default:        0x16c3
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 8
// Parameter Type: Register Default Setting
// 
// Default value for the Vendor ID field in the Device ID and Vendor ID Register. Function 8.
`define CX_VENDOR_ID_8 16'h16c3


// Name:           CX_REVISION_ID_8
// Default:        0x1
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 8
// Parameter Type: Register Default Setting
// 
// Default value for the Revision ID field in the Revision ID Register. Function 8.
`define CX_REVISION_ID_8 8'h1


// Name:           SUBSYS_DEV_ID_8
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 8
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 8.
`define SUBSYS_DEV_ID_8 16'h0


// Name:           SUBSYS_VENDOR_ID_8
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 8
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem Vendor ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 8.
`define SUBSYS_VENDOR_ID_8 16'h0


// Name:           BASE_CLASS_CODE_8
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 8
// Parameter Type: Register Default Setting
// 
// Default value for the Base Class Code field in the Class Code Register. Function 8.
`define BASE_CLASS_CODE_8 8'h0


// Name:           SUB_CLASS_CODE_8
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 8
// Parameter Type: Register Default Setting
// 
// Default value for the Subclass Code field in the Class Code Register. Function 8.
`define SUB_CLASS_CODE_8 8'h0


// Name:           IF_CODE_8
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 8
// Parameter Type: Register Default Setting
// 
// Default value for the Programming Interface field in the Class Code Register. Function 8.
`define IF_CODE_8 8'h0


// Name:           CARDBUS_CIS_PTR_8
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 8
// Parameter Type: Register Default Setting
// 
// Default value for the CardBus CIS Pointer Register. Function 8.
`define CARDBUS_CIS_PTR_8 16'h0


// Name:           INT_PIN_MAPPING_8
// Default:        INTA
// Values:         None (0x0), INTA (0x1), INTB (0x2), INTC (0x3), INTD (0x4)
// Enabled:        CX_NFUNC > 8
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Pin Register. Function 8.
`define INT_PIN_MAPPING_8 8'h1


// Name:           IO_DECODE_32_8
// Default:        16-bit
// Values:         16-bit (0x0), 32-bit (0x1)
// Enabled:        CX_NFUNC > 8
// Parameter Type: Register Default Setting
// 
// Default value for the 32-Bit I/O Space bit in the I/O Base and I/O Limit Register. Function 8.
`define IO_DECODE_32_8 1'h0


// Name:           MEM_DECODE_64_8
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x1)
// Enabled:        CX_NFUNC > 8
// Parameter Type: Register Default Setting
// 
// Default value for the 64-Bit Memory Addressing bit in the Prefetchable Memory Base and Limit Register. Function 8.
`define MEM_DECODE_64_8 1'h0


// Name:           ROM_BAR_ENABLED_8
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 8
// Parameter Type: Register Default Setting
// 
// Include the expansion ROM BAR registers. Function 8.
`define ROM_BAR_ENABLED_8 1'h1


`define DEFAULT_ROM_BAR_ENABLED_8 1'h1


// Name:           ROM_MASK_8
// Default:        0xffff
// Values:         0x7ff, ..., 0xffffff
// Enabled:        CX_NFUNC > 8 && ROM_BAR_ENABLED_8==1
// Parameter Type: Register Default Setting
// 
// Determines the default of the Expansion ROM BAR Mask register. Function 8. 
//  - The BAR Mask register specifies which bits of the Expansion ROM BAR are non-writable by host software, which 
//  determines the size of the BAR. 
//  - The maximum value for ROM_MASK_N is 0xFFFFFF because the maximum space that can be claimed by an Expansion ROM BAR 
//  is 16 MB. 
//  - For example: 32'hFFFF =BAR size of 2^16.
`define ROM_MASK_8 32'hffff


// Name:           ROM_MASK_WRITABLE_8
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 8 && ROM_BAR_ENABLED_8==1
// Parameter Type: Feature Setting
// 
// Determines if the Expansion ROM BAR Mask register for function 8 is writable by application software. If writing to a 
// Expansion ROM BAR Mask register is enabled, your application can write to the Expansion ROM BAR Mask register through the 
// DBI by asserting dbi_cs2 in addition to dbi_cs.
`define ROM_MASK_WRITABLE_8 1'h0


// Name:           ROM_FUNC8_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 8 && ROM_BAR_ENABLED_8==1 && TRGT1_POPULATE==1))
// Parameter Type: Register Default Setting
// 
// Direct incoming requests that pass filtering and match the Expansion ROM BAR of function 8 to either RTRGT0 or RTRGT1. 
//  - For example, setting ROM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for the Expansion ROM BAR of function 
//  0 to RTRGT1. 
//  - If TRGT1_POPULATE =0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define ROM_FUNC8_TARGET_MAP 1'h1


// Name:           CX_PCI_HEADER_DEFAULTS_VISIBLE_8
// Default:        0
// Values:         0, 1
// Parameter Type: Register Default Setting
// 
// Select here if you want to configure the defaults for the other PCI Standard Header registers for function 8. 
//  An extra window will appear under this page. To access it, click the plus/minus symbol in the hierarchy view on the 
//  left panel. 
//  This is optional but not usually recommended. 
//  You can also change these register defaults using the DBI before (or after) the link comes up.
`define CX_PCI_HEADER_DEFAULTS_VISIBLE_8 0

//-/ END:   PCI BASIC CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: BAR CONFIGURATION


// Name:           BAR0_ENABLED_8
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 8
// Parameter Type: Feature Setting
// 
// Include the BAR0 registers for function 8.
`define BAR0_ENABLED_8 1'h1


`define DEFAULT_BAR0_ENABLED_8 1'h1


// Name:           MEM0_SPACE_DECODER_8
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 8 && BAR0_ENABLED_8==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 8.
`define MEM0_SPACE_DECODER_8 1'h0


// Name:           PREFETCHABLE0_8
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 8 && BAR0_ENABLED_8==1 && MEM0_SPACE_DECODER_8==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 8.
`define PREFETCHABLE0_8 1'h0


// Name:           BAR0_TYPE_8
// Default:        64-bit ((MEM0_SPACE_DECODER_8==1 || BAR0_ENABLED_8==0) ? 0 : 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 8 && BAR0_ENABLED_8==1 && MEM0_SPACE_DECODER_8==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 8.
`define BAR0_TYPE_8 2'h2


// Name:           BAR0_SIZING_SCHEME_8
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 8 && BAR0_ENABLED_8==1
// Parameter Type: Feature Setting
// 
// BAR0 Function 8 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR0_SIZING_SCHEME_8 2'h0


// Name:           CX_BAR0_RESIZABLE_8
// Default:        0x0 ((BAR0_SIZING_SCHEME_8==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR0_ENABLED_8==1) && (MEM0_SPACE_DECODER_8==0)
// Parameter Type: Feature Setting
// 
// Defines BAR0 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR0 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR0_RESIZABLE_8 1'h0


// Name:           CX_BAR0_RESOURCE_AVAIL_8
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 8 && CX_BAR0_RESIZABLE_8==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR0 of function 8. 
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
// Example: 0x00000030 indicates that BAR0 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR0_RESOURCE_AVAIL_8 64'h10


// Name:           BAR0_MASK_WRITABLE_8
// Default:        0x0 ((BAR0_ENABLED_8==1 && BAR0_SIZING_SCHEME_8 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 8 && BAR0_ENABLED_8==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR0 Mask through DBI
`define BAR0_MASK_WRITABLE_8 1'h0


// Name:           BAR0_MASK_8
// Default:        0xfffff (CX_BAR0_RESIZABLE_8==1 ? [calc_bar_mask 
//                 CX_BAR0_RESOURCE_AVAIL_8] : MEM0_SPACE_DECODER_8==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 8 && BAR0_ENABLED_8==1 && MEM0_SPACE_DECODER_8==0 && 
//                 CX_BAR0_RESIZABLE_8==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR0 Mask register of function 8. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR0_MASK_8 64'hfffff


// Name:           MEM_FUNC8_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 8 && BAR0_ENABLED_8==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_0 of function 8 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming Requests for BAR0 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC8_BAR0_TARGET_MAP 1'h1


// Name:           BAR1_ENABLED_8
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 8 && BAR0_TYPE_8==0
// Parameter Type: Feature Setting
// 
// Include the BAR1 registers for function 8.
`define BAR1_ENABLED_8 1'h0


`define DEFAULT_BAR1_ENABLED_8 1'h0


// Name:           MEM1_SPACE_DECODER_8
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 8 && BAR1_ENABLED_8==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 8.
`define MEM1_SPACE_DECODER_8 1'h0


// Name:           PREFETCHABLE1_8
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 8 && BAR1_ENABLED_8==1 && MEM1_SPACE_DECODER_8==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 8.
`define PREFETCHABLE1_8 1'h0


// Name:           BAR1_TYPE_8
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 8.
`define BAR1_TYPE_8 2'h0


// Name:           BAR1_SIZING_SCHEME_8
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 8 && BAR1_ENABLED_8==1
// Parameter Type: Feature Setting
// 
// BAR1 Function 8 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR1_SIZING_SCHEME_8 2'h0


// Name:           CX_BAR1_RESIZABLE_8
// Default:        0x0 ((BAR1_SIZING_SCHEME_8==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR1_ENABLED_8==1) && (MEM1_SPACE_DECODER_8==0)
// Parameter Type: Feature Setting
// 
// Defines BAR1 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR1 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR1_RESIZABLE_8 1'h0


// Name:           CX_BAR1_RESOURCE_AVAIL_8
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 8 && CX_BAR1_RESIZABLE_8==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR1 of function 8. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR1 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR1_RESOURCE_AVAIL_8 32'h10


// Name:           BAR1_MASK_WRITABLE_8
// Default:        0x0 ((BAR1_ENABLED_8==1 && BAR1_SIZING_SCHEME_8 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 8 && BAR1_ENABLED_8==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR1 Mask through DBI
`define BAR1_MASK_WRITABLE_8 1'h0


// Name:           BAR1_MASK_8
// Default:        0xffff (CX_BAR1_RESIZABLE_8==1 ? [calc_bar_mask 
//                 CX_BAR1_RESOURCE_AVAIL_8] : MEM1_SPACE_DECODER_8==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 8 && BAR1_ENABLED_8==1 && MEM1_SPACE_DECODER_8==0 && 
//                 CX_BAR1_RESIZABLE_8==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR1 Mask register of function 8. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR1_MASK_8 32'hffff


// Name:           MEM_FUNC8_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 8 && BAR1_ENABLED_8==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_1 of function 8 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR1_TARGET_MAP to 1 maps all incoming Requests for BAR1 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC8_BAR1_TARGET_MAP 1'h1


// Name:           BAR2_ENABLED_8
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 8
// Parameter Type: Feature Setting
// 
// Include the BAR2 registers for function 8.
`define BAR2_ENABLED_8 1'h1


`define DEFAULT_BAR2_ENABLED_8 1'h1


// Name:           MEM2_SPACE_DECODER_8
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 8 && BAR2_ENABLED_8==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 8.
`define MEM2_SPACE_DECODER_8 1'h0


// Name:           PREFETCHABLE2_8
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 8 && BAR2_ENABLED_8==1 && MEM2_SPACE_DECODER_8==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 8.
`define PREFETCHABLE2_8 1'h0


// Name:           BAR2_TYPE_8
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 8 && BAR2_ENABLED_8==1 && MEM2_SPACE_DECODER_8==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 8.
`define BAR2_TYPE_8 2'h0


// Name:           BAR2_SIZING_SCHEME_8
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 8 && BAR2_ENABLED_8==1
// Parameter Type: Feature Setting
// 
// BAR2 Function 8 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR2_SIZING_SCHEME_8 2'h0


// Name:           CX_BAR2_RESIZABLE_8
// Default:        0x0 ((BAR2_SIZING_SCHEME_8==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR2_ENABLED_8==1) && (MEM2_SPACE_DECODER_8==0)
// Parameter Type: Feature Setting
// 
// Defines BAR2 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR2 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR2_RESIZABLE_8 1'h0


// Name:           CX_BAR2_RESOURCE_AVAIL_8
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 8 && CX_BAR2_RESIZABLE_8==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR2 of function 8. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR2 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR2_RESOURCE_AVAIL_8 64'h10


// Name:           BAR2_MASK_WRITABLE_8
// Default:        0x0 ((BAR2_ENABLED_8==1 && BAR2_SIZING_SCHEME_8 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 8 && BAR2_ENABLED_8==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR2 Mask through DBI
`define BAR2_MASK_WRITABLE_8 1'h0


// Name:           BAR2_MASK_8
// Default:        0xfffff (CX_BAR2_RESIZABLE_8==1 ? [calc_bar_mask 
//                 CX_BAR2_RESOURCE_AVAIL_8] : MEM2_SPACE_DECODER_8==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 8 && BAR2_ENABLED_8==1 && MEM2_SPACE_DECODER_8==0 && 
//                 CX_BAR2_RESIZABLE_8==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR2 Mask register of function 8. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR2_MASK_8 64'hfffff


// Name:           MEM_FUNC8_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 8 && BAR2_ENABLED_8==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_2 of function 8 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR2_TARGET_MAP to 1 maps all incoming requests for BAR2 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC8_BAR2_TARGET_MAP 1'h1


// Name:           BAR3_ENABLED_8
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 8 && BAR2_TYPE_8==0
// Parameter Type: Feature Setting
// 
// Include the BAR3 registers for function 8.
`define BAR3_ENABLED_8 1'h0



`define DEFAULT_BAR3_ENABLED_8 1'h0


// Name:           MEM3_SPACE_DECODER_8
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 8 && BAR3_ENABLED_8==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 8.
`define MEM3_SPACE_DECODER_8 1'h0


// Name:           PREFETCHABLE3_8
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 8 && BAR3_ENABLED_8==1 && MEM3_SPACE_DECODER_8==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 8.
`define PREFETCHABLE3_8 1'h0


// Name:           BAR3_TYPE_8
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 8.
`define BAR3_TYPE_8 2'h0


// Name:           BAR3_SIZING_SCHEME_8
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 8 && BAR3_ENABLED_8==1
// Parameter Type: Feature Setting
// 
// BAR3 Function 8 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR3_SIZING_SCHEME_8 2'h0


// Name:           CX_BAR3_RESIZABLE_8
// Default:        0x0 ((BAR3_SIZING_SCHEME_8==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR3_ENABLED_8==1) && (MEM3_SPACE_DECODER_8==0)
// Parameter Type: Feature Setting
// 
// Defines BAR3 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR3 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR3_RESIZABLE_8 1'h0


// Name:           CX_BAR3_RESOURCE_AVAIL_8
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 8 && CX_BAR3_RESIZABLE_8==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR3 of function 8. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR3 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR3_RESOURCE_AVAIL_8 32'h10


// Name:           BAR3_MASK_WRITABLE_8
// Default:        0x0 ((BAR3_ENABLED_8==1 && BAR3_SIZING_SCHEME_8 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 8 && BAR3_ENABLED_8==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR3 Mask through DBI
`define BAR3_MASK_WRITABLE_8 1'h0


// Name:           BAR3_MASK_8
// Default:        0xffff (CX_BAR3_RESIZABLE_8==1 ? [calc_bar_mask 
//                 CX_BAR3_RESOURCE_AVAIL_8] : MEM3_SPACE_DECODER_8==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 8 && BAR3_ENABLED_8==1 && MEM3_SPACE_DECODER_8==0 && 
//                 CX_BAR3_RESIZABLE_8==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR3 Mask register of function 8. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR3_MASK_8 32'hffff


// Name:           MEM_FUNC8_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 8 && BAR3_ENABLED_8==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_3 of function 8 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR3_TARGET_MAP to 1 maps all incoming requests for BAR3 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC8_BAR3_TARGET_MAP 1'h1


// Name:           BAR4_ENABLED_8
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 8
// Parameter Type: Feature Setting
// 
// Include the BAR4 registers for function 8.
`define BAR4_ENABLED_8 1'h1


`define DEFAULT_BAR4_ENABLED_8 1'h1



// Name:           MEM4_SPACE_DECODER_8
// Default:        I/O (BAR4_ENABLED_8==1)
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 8 && BAR4_ENABLED_8==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 8.
`define MEM4_SPACE_DECODER_8 1'h1


// Name:           PREFETCHABLE4_8
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 8 && BAR4_ENABLED_8==1 && MEM4_SPACE_DECODER_8==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 8.
`define PREFETCHABLE4_8 1'h0


// Name:           BAR4_TYPE_8
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 8 && BAR4_ENABLED_8==1 && MEM4_SPACE_DECODER_8==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 8.
`define BAR4_TYPE_8 2'h0


// Name:           BAR4_SIZING_SCHEME_8
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 8 && BAR4_ENABLED_8==1
// Parameter Type: Feature Setting
// 
// BAR4  Function 8 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR4_SIZING_SCHEME_8 2'h0


// Name:           CX_BAR4_RESIZABLE_8
// Default:        0x0 ((BAR4_SIZING_SCHEME_8==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR4_ENABLED_8==1) && (MEM4_SPACE_DECODER_8==0)
// Parameter Type: Feature Setting
// 
// Defines BAR4 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR4 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR4_RESIZABLE_8 1'h0


// Name:           CX_BAR4_RESOURCE_AVAIL_8
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 8 &&  CX_BAR4_RESIZABLE_8==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR4 of function 8. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR4 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR4_RESOURCE_AVAIL_8 64'h10


// Name:           BAR4_MASK_WRITABLE_8
// Default:        0x0 ((BAR4_ENABLED_8==1 && BAR4_SIZING_SCHEME_8 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 8 && BAR4_ENABLED_8==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR4 Mask through DBI
`define BAR4_MASK_WRITABLE_8 1'h0


// Name:           BAR4_MASK_8
// Default:        0xff (CX_BAR4_RESIZABLE_8==1 ? [calc_bar_mask 
//                 CX_BAR4_RESOURCE_AVAIL_8] : MEM4_SPACE_DECODER_8==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 8 && BAR4_ENABLED_8==1 && MEM4_SPACE_DECODER_8==0 && 
//                 CX_BAR4_RESIZABLE_8==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR4 Mask register of function 8. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR4_MASK_8 64'hff


// Name:           MEM_FUNC8_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 8 && BAR4_ENABLED_8==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_4 of function 8 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR4_TARGET_MAP to 1 maps all incoming requests for BAR4 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC8_BAR4_TARGET_MAP 1'h1


// Name:           BAR5_ENABLED_8
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 8 && BAR4_TYPE_8==0
// Parameter Type: Feature Setting
// 
// Include the BAR5 registers for function 8.
`define BAR5_ENABLED_8 1'h0


`define DEFAULT_BAR5_ENABLED_8 1'h0


// Name:           MEM5_SPACE_DECODER_8
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 8 && BAR5_ENABLED_8==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 8.
`define MEM5_SPACE_DECODER_8 1'h0


// Name:           PREFETCHABLE5_8
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 8 && BAR5_ENABLED_8==1 && MEM5_SPACE_DECODER_8==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 8.
`define PREFETCHABLE5_8 1'h0


// Name:           BAR5_TYPE_8
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 8.
`define BAR5_TYPE_8 2'h0


// Name:           BAR5_SIZING_SCHEME_8
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 8 && BAR5_ENABLED_8==1
// Parameter Type: Feature Setting
// 
// BAR5  Function 8 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR5_SIZING_SCHEME_8 2'h0


// Name:           CX_BAR5_RESIZABLE_8
// Default:        0x0 ((BAR5_SIZING_SCHEME_8==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR5_ENABLED_8==1) && (MEM5_SPACE_DECODER_8==0)
// Parameter Type: Feature Setting
// 
// Defines BAR5 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR5 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR5_RESIZABLE_8 1'h0


// Name:           CX_BAR5_RESOURCE_AVAIL_8
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 8 && CX_BAR5_RESIZABLE_8==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR5 of function 8. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR5 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR5_RESOURCE_AVAIL_8 32'h10


// Name:           BAR5_MASK_WRITABLE_8
// Default:        0x0 ((BAR5_ENABLED_8==1 && BAR5_SIZING_SCHEME_8 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 8 && BAR5_ENABLED_8==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR5 Mask through DBI
`define BAR5_MASK_WRITABLE_8 1'h0


// Name:           BAR5_MASK_8
// Default:        0xffff (CX_BAR5_RESIZABLE_8==1 ? [calc_bar_mask 
//                 CX_BAR5_RESOURCE_AVAIL_8] : MEM5_SPACE_DECODER_8==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 8 && BAR5_ENABLED_8==1 && MEM5_SPACE_DECODER_8==0 && 
//                 CX_BAR5_RESIZABLE_8==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR5 Mask register of function 8. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR5_MASK_8 32'hffff


// Name:           MEM_FUNC8_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 8 && BAR5_ENABLED_8==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_5 of function 8 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR5_TARGET_MAP to 1 maps all incoming requests for BAR5 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC8_BAR5_TARGET_MAP 1'h1


`define FUNC8_BARSIZE_32 128'h0


`define FUNC8_BARSIZE 128'h0


`define FUNC8_BAR0_BARSIZE_TRGT1 128'h0


`define FUNC8_BAR2_BARSIZE_TRGT1 128'h0


`define FUNC8_BAR4_BARSIZE_TRGT1 128'h0


`define FUNC8_BAR0_TRGT1_ADDR_WIDTH 1


`define FUNC8_BAR2_TRGT1_ADDR_WIDTH 1


`define FUNC8_BAR4_TRGT1_ADDR_WIDTH 1


// Name:         CX_NUM_RBARS_8
// Default:      0 ([calc_num_rbars CX_BAR0_RESIZABLE_8 CX_BAR1_RESIZABLE_8 
//               CX_BAR2_RESIZABLE_8 CX_BAR3_RESIZABLE_8 CX_BAR4_RESIZABLE_8 
//               CX_BAR5_RESIZABLE_8])
// Values:       -2147483648, ..., 2147483647
// 
// Number of resizable BARs
`define CX_NUM_RBARS_8 0

//-/ END:   BAR CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SR-IOV CAPABILITIES CONFIGURATION


// Name:           CX_VF_DEPENDENCY_LINK_8
// Default:        0x8
// Values:         0x0, ..., 0xff
// Enabled:        CX_VF_DEPENDENCY_LINK_SUPP && (CX_NFUNC > 8) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Specifies the 8-bit VF dependency link for PF8. Valid only if CX_VF_DEPENDENCY_LINK_SUPP=1.
`define CX_VF_DEPENDENCY_LINK_8 8'h8


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER1_8
// Default:        0x2 ((CX_NFUNC>=17) ? 32 : (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : 
//                 (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF8 in an ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER1_8 16'h2


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER0_8
// Default:        0x100
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF8 
//  in a non-ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER0_8 16'h100


// Name:           VF_STRIDE_ARI_CAP_HIER1_8
// Default:        0x2 (CX_VF_STRIDE_ALWAYS_ONE) ? 1 : ((CX_NFUNC>=17) ? 32 : 
//                 (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF8 in an ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER1_8 16'h2


// Name:           VF_STRIDE_ARI_CAP_HIER0_8
// Default:        0x100 ((CX_VF_STRIDE_ALWAYS_ONE) ? 0x0001 : 0x0100)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF8 in a non-ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER0_8 16'h100


// Name:           CX_VF_DEVICE_ID_8
// Default:        0x0 (CX_DEVICE_ID_8)
// Values:         0x0, ..., 0xffff
// Enabled:        (CX_NFUNC > 8) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 16-bit virtual function Device ID for PF8. 
//  It might be different from the physical function's.
`define CX_VF_DEVICE_ID_8 16'h0


// Name:           CX_VF_SUPP_PAGE_SIZE_8
// Default:        0x553
// Values:         0x553, ..., 0xffff
// Enabled:        (CX_NFUNC > 8) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 32-bit supported page sizes for virtual functions for PF8
`define CX_VF_SUPP_PAGE_SIZE_8 32'h553


// Name:           CX_ARI_CAP_HIER_PRSVD_8
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Specifies if ARI Capable Hierarchy bit is preserved across certain power state transitions 
//  Only present in PF0. Read Only Zero in this PF8.
`define CX_ARI_CAP_HIER_PRSVD_8 1'h0

//-/===========================================
//-/ START: VF BAR CONFIGURATION


// Name:           VF_BAR0_ENABLED_8
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 8)
// Parameter Type: Feature Setting
// 
// Include the VF BAR0 registers in PF8
`define VF_BAR0_ENABLED_8 1'h1


`define VF_DEFAULT_BAR0_ENABLED_8 1'h1


// Name:           VF_MEM0_SPACE_DECODER_8
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR0_ENABLED_8 && CX_SRIOV_ENABLE && (CX_NFUNC > 8)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Space Indicator 
//  ALWAYS set to Memory for Virtual Functions
`define VF_MEM0_SPACE_DECODER_8 1'h0


// Name:           VF_PREFETCHABLE0_8
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_8==1 && VF_MEM0_SPACE_DECODER_8==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 8)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Prefetchable 
//  When set indicates VF BAR0 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE0_8 1'h0


// Name:           VF_BAR0_TYPE_8
// Default:        64-bit ((VF_MEM0_SPACE_DECODER_8==1 || VF_BAR0_ENABLED_8==0) ? 0 : 
//                 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR0_ENABLED_8==1 && VF_MEM0_SPACE_DECODER_8==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 8)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 8; (bits [2:1] for a memory BAR).
`define VF_BAR0_TYPE_8 2'h2


// Name:           VF_BAR0_MASK_WRITABLE_8
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_8==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 8)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR0_MASK_WRITABLE_8 1'h0


// Name:           VF_BAR0_MASK_8
// Default:        0xfffff (VF_MEM0_SPACE_DECODER_8==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR0_ENABLED_8==1 && VF_MEM0_SPACE_DECODER_8==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 8)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Mask 
//  Determines the default of the VF BAR Mask register for PF8. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR0_MASK_8 64'hfffff


// Name:           VF_MEM_FUNC8_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR0_ENABLED_8==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 8)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF8 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC8_BAR0_TARGET_MAP 1'h1


// Name:           VF_BAR1_ENABLED_8
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        (VF_BAR0_TYPE_8==0)  && CX_SRIOV_ENABLE && (CX_NFUNC > 8)
// Parameter Type: Feature Setting
// 
// Include the VF BAR1 registers in PF8
`define VF_BAR1_ENABLED_8 1'h0


`define VF_DEFAULT_BAR1_ENABLED_8 1'h0


// Name:           VF_MEM1_SPACE_DECODER_8
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR1_ENABLED_8==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 8)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Space Indicator
`define VF_MEM1_SPACE_DECODER_8 1'h0


// Name:           VF_PREFETCHABLE1_8
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_8==1 && VF_MEM1_SPACE_DECODER_8==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 8)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Prefetchable 
//  When set indicates VF BAR1 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE1_8 1'h0


// Name:           VF_BAR1_TYPE_8
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 8; (bits [2:1] for a memory BAR).
`define VF_BAR1_TYPE_8 2'h0


// Name:           VF_BAR1_MASK_WRITABLE_8
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_8==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 8)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR1_MASK_WRITABLE_8 1'h0


// Name:           VF_BAR1_MASK_8
// Default:        0xffff (VF_MEM1_SPACE_DECODER_8==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR1_ENABLED_8==1 && VF_MEM1_SPACE_DECODER_8==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 8)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Mask 
//  Determines the default of the VF BAR Mask register for PF8. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR1_MASK_8 32'hffff


// Name:           VF_MEM_FUNC8_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR1_ENABLED_8==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 8)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF8 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC8_BAR1_TARGET_MAP 1'h1


// Name:           VF_BAR2_ENABLED_8
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 8)
// Parameter Type: Feature Setting
// 
// Include the VF BAR2 registers in PF8
`define VF_BAR2_ENABLED_8 1'h1


`define VF_DEFAULT_BAR2_ENABLED_8 1'h1


// Name:           VF_MEM2_SPACE_DECODER_8
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR2_ENABLED_8==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 8)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Memory Space Indicator
`define VF_MEM2_SPACE_DECODER_8 1'h0


// Name:           VF_PREFETCHABLE2_8
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_8==1 && VF_MEM2_SPACE_DECODER_8==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 8)
// Parameter Type: Register Default Setting
// 
// BAR2 Memory Prefetchable 
//  When set indicates VF BAR2 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE2_8 1'h0


// Name:           VF_BAR2_TYPE_8
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR2_ENABLED_8==1 && VF_MEM2_SPACE_DECODER_8==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 8)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 8; (bits [2:1] for a memory BAR).
`define VF_BAR2_TYPE_8 2'h0


// Name:           VF_BAR2_MASK_WRITABLE_8
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_8==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 8)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR2_MASK_WRITABLE_8 1'h0


// Name:           VF_BAR2_MASK_8
// Default:        0xfffff (VF_MEM2_SPACE_DECODER_8==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR2_ENABLED_8==1 && VF_MEM2_SPACE_DECODER_8==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 8)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Mask 
//  Determines the default of the VF BAR Mask register for PF8. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR2_MASK_8 64'hfffff


// Name:           VF_MEM_FUNC8_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR2_ENABLED_8==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 8)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF8 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC8_BAR2_TARGET_MAP 1'h1


// Name:           VF_BAR3_ENABLED_8
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_TYPE_8==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 8)
// Parameter Type: Feature Setting
// 
// Include the VF BAR3 registers in PF8
`define VF_BAR3_ENABLED_8 1'h0


`define VF_DEFAULT_BAR3_ENABLED_8 1'h0


// Name:           VF_MEM3_SPACE_DECODER_8
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR3_ENABLED_8==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 8)
// Parameter Type: Register Default Setting
// 
// BAR3 Memory Space Indicator
`define VF_MEM3_SPACE_DECODER_8 1'h0


// Name:           VF_PREFETCHABLE3_8
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_8==1 && VF_MEM3_SPACE_DECODER_8==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 8)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Memory Prefetchable 
//  When set indicates VF BAR3 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE3_8 1'h0


// Name:           VF_BAR3_TYPE_8
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 8; (bits [2:1] for a memory BAR).
`define VF_BAR3_TYPE_8 2'h0


// Name:           VF_BAR3_MASK_WRITABLE_8
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_8==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 8)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR3_MASK_WRITABLE_8 1'h0


// Name:           VF_BAR3_MASK_8
// Default:        0xffff (VF_MEM3_SPACE_DECODER_8==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR3_ENABLED_8==1 && VF_MEM3_SPACE_DECODER_8==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 8)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Mask 
//  Determines the default of the VF BAR Mask register for PF8. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR3_MASK_8 32'hffff


// Name:           VF_MEM_FUNC8_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR3_ENABLED_8==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 8)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF8 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC8_BAR3_TARGET_MAP 1'h1


// Name:           VF_BAR4_ENABLED_8
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 8)
// Parameter Type: Feature Setting
// 
// Include the VF BAR4 registers in PF8
`define VF_BAR4_ENABLED_8 1'h1


`define VF_DEFAULT_BAR4_ENABLED_8 1'h1


// Name:           VF_MEM4_SPACE_DECODER_8
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR4_ENABLED_8==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 8)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Space Indicator
`define VF_MEM4_SPACE_DECODER_8 1'h0


// Name:           VF_PREFETCHABLE4_8
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_8==1 && VF_MEM4_SPACE_DECODER_8==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 8)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Prefetchable 
//  When set indicates VF BAR4 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE4_8 1'h0


// Name:           VF_BAR4_TYPE_8
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR4_ENABLED_8==1 && VF_MEM4_SPACE_DECODER_8==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 8)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 8; (bits [2:1] for a memory BAR).
`define VF_BAR4_TYPE_8 2'h0


// Name:           VF_BAR4_MASK_WRITABLE_8
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_8==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 8)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR4_MASK_WRITABLE_8 1'h0


// Name:           VF_BAR4_MASK_8
// Default:        0xfff (VF_MEM4_SPACE_DECODER_8==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR4_ENABLED_8==1 && VF_MEM4_SPACE_DECODER_8==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 8)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Mask 
//  Determines the default of the VF BAR Mask register for PF8. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR4_MASK_8 64'hfff


// Name:           VF_MEM_FUNC8_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR4_ENABLED_8==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 8)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF8 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC8_BAR4_TARGET_MAP 1'h1


// Name:           VF_BAR5_ENABLED_8
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_TYPE_8==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 8)
// Parameter Type: Feature Setting
// 
// Include the VF BAR5 registers in PF8
`define VF_BAR5_ENABLED_8 1'h0


`define VF_DEFAULT_BAR5_ENABLED_8 1'h0


// Name:           VF_MEM5_SPACE_DECODER_8
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR5_ENABLED_8==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 8)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Space Indicator
`define VF_MEM5_SPACE_DECODER_8 1'h0


// Name:           VF_PREFETCHABLE5_8
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_8==1 && VF_MEM5_SPACE_DECODER_8==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 8)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Prefetchable 
//  When set indicates VF BAR5 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE5_8 1'h0


// Name:           VF_BAR5_TYPE_8
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 8; (bits [2:1] for a memory BAR).
`define VF_BAR5_TYPE_8 2'h0


// Name:           VF_BAR5_MASK_WRITABLE_8
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_8==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 8)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR5_MASK_WRITABLE_8 1'h0


// Name:           VF_BAR5_MASK_8
// Default:        0xffff (VF_MEM5_SPACE_DECODER_8==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR5_ENABLED_8==1 && VF_MEM5_SPACE_DECODER_8==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 8)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Mask 
//  Determines the default of the VF BAR Mask register for PF8. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR5_MASK_8 32'hffff


// Name:           VF_MEM_FUNC8_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR5_ENABLED_8==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 8)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF8 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC8_BAR5_TARGET_MAP 1'h1


`define VF_FUNC8_BARSIZE_32 128'h101000


`define VF_FUNC8_BARSIZE 128'h201000

//-/ END:   VF BAR CONFIGURATION
//-/===========================================

//-/ END:   SR-IOV CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: TPH CAPABILITIES CONFIGURATION


// Name:           TPH_IVEC_8
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Interrupt Vector Mode. If set indicates that the function supports the Interrupt Vector 
// Mode of operation. Function 8.
`define TPH_IVEC_8 1'h0


// Name:           TPH_DS_8
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Device Specific Mode. If set indicates that the function supports the Device Specific Mode 
// of operation. Function 8.
`define TPH_DS_8 1'h0


// Name:           TPH_ST_TABLE_LOC_8
// Default:        Not Present
// Values:         Not Present (0), TPH Requester Capability Structure (1), MSI-X 
//                 Table Structure (2)
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_DS_8 || TPH_IVEC_8))
// Parameter Type: Feature Setting
// 
// TLP Processing Hints Steering Tag Table Location. Value indicates if and where the ST Table is located. Function 8.
`define TPH_ST_TABLE_LOC_8 0

//located in the TPH Requester Capability structure. Please reduce the ST Table Size for this mode of operation"

// Name:           TPH_ST_TABLE_SIZE_8
// Default:        1
// Values:         1, ..., 2048
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_ST_TABLE_LOC_8 != 0))
// Parameter Type: Feature Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define TPH_ST_TABLE_SIZE_8 1


`define TPH_ST_TABLE_DEPTH_8 0

//-/ END:   TPH CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: ATS CAPABILITIES CONFIGURATION


// Name:           ATS_INV_Q_DPTH_8
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// The number of Invalidate Requests that the Function can accept before putting backpressure on the upstream connection. A 
// value of 0 indicates the function can accept 32 Invalidate requests. Function 8.
`define ATS_INV_Q_DPTH_8 5'd0


// Name:           ATS_STU_8
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// This value indicates to the Function the minimum number of 4096-byte blocks that is indicated in a Translation 
// Completion or Invalidate Request. This is a power of 2 multiplier and the number of blocks is 2^STU. A value of 0 indicates 1 block 
// and a value of 31 indicates 2^31 blocks (or 8 TB total). Function 8.
`define ATS_STU_8 5'd0

//-/ END:   ATS CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PRS CAPABILITIES CONFIGURATION


// Name:           CX_PRS_OUTSTANDING_CAPACITY_VALUE_8
// Default:        0x1
// Values:         0x0, ..., 0xffffffff
// Enabled:        (CX_PRS_ENABLE==1) && (CX_NFUNC > 8)
// Parameter Type: Register Default Setting
// 
// Register default for PRS Outstanding Capacity in PF8. 
// For more details, see the PRS_OUTSTANDING_CAPACITY field in the PRS_REQ_CAPACITY_REG register.
`define CX_PRS_OUTSTANDING_CAPACITY_VALUE_8 32'h1

//-/ END:   PRS CAPABILITIES CONFIGURATION
//-/===========================================


//-/===========================================
//--- START: RN


// Name:           CX_RN_IMM_VALUE_8
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 8)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for PF8.
`define CX_RN_IMM_VALUE_8 1'h0


// Name:           CX_RN_IMM_D0_VALUE_8
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 8)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for PF8.
`define CX_RN_IMM_D0_VALUE_8 1'h0


// Name:           CX_RN_FRS_VALUE_8
// Default:        0x0 (CX_RN_FRS_SUPPORTED==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_FRS_SUPPORTED==1) && (CX_NFUNC > 8)
// Parameter Type: Feature Setting
// 
// Function Readiness Status messaging supported for function PF8.
`define CX_RN_FRS_VALUE_8 1'h0


// Name:           CX_RN_RTR_VALID_8
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 8)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF8.
`define CX_RN_RTR_VALID_8 1'h0


// Name:           CX_RN_RTR_DL_UP_VALUE_8
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 8)
// Parameter Type: Register Default Setting
// 
// Register default for RTR DL Up Time field in PF8.
`define CX_RN_RTR_DL_UP_VALUE_8 12'h0


// Name:           CX_RN_RTR_RESET_VALUE_8
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 8)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF8.
`define CX_RN_RTR_RESET_VALUE_8 12'h0


// Name:           CX_RN_RTR_D3D0_VALUE_8
// Default:        0x0
// Values:         0x0, ..., 0x80a
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 8)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF8.
`define CX_RN_RTR_D3D0_VALUE_8 12'h0


// Name:           CX_RN_RTR_FLR_VALUE_8
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_FLR_ENABLE==1) && (CX_NFUNC > 8)
// Parameter Type: Register Default Setting
// 
// Register default for RTR FLR Time field in PF8.
`define CX_RN_RTR_FLR_VALUE_8 12'h0


// Name:           VF_RN_IMM_VALUE_8
// Default:        0x0 (CX_RN_IMM_VALUE_8 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 8))
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for VFs in PF8.
`define VF_RN_IMM_VALUE_8 1'h0


// Name:           VF_RN_IMM_D0_VALUE_8
// Default:        0x0 (CX_RN_IMM_D0_VALUE_8 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 8))
// Parameter Type: Register Default Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for VFs in PF8.
`define VF_RN_IMM_D0_VALUE_8 1'h0


// Name:           VF_RN_RTR_VALID_8
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 8) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF8 VFs.
`define VF_RN_RTR_VALID_8 1'h0


// Name:           VF_RN_RTR_RESET_VALUE_8
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_8)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 8) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF8 VFS.
`define VF_RN_RTR_RESET_VALUE_8 12'h0


// Name:           VF_RN_RTR_D3D0_VALUE_8
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_8)
// Values:         0x0, ..., 0x80a
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 8) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF8 VFS.
`define VF_RN_RTR_D3D0_VALUE_8 12'h0


// Name:           VF_RN_RTR_FLR_VALUE_8
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_8)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 8) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF8 VFs.
`define VF_RN_RTR_FLR_VALUE_8 12'h0


// Name:           EXT_VF_RN_RTR_VALID_8
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 8) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF8 VFs.
`define EXT_VF_RN_RTR_VALID_8 1'h0


// Name:           EXT_VF_RN_RTR_RESET_VALUE_8
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_8)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 8) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF8 VFS.
`define EXT_VF_RN_RTR_RESET_VALUE_8 12'h0


// Name:           EXT_VF_RN_RTR_D3D0_VALUE_8
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_8)
// Values:         0x0, ..., 0x80a
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 8) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF8 VFS.
`define EXT_VF_RN_RTR_D3D0_VALUE_8 12'h0


// Name:           EXT_VF_RN_RTR_FLR_VALUE_8
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_8)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 8) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF8 VFs.
`define EXT_VF_RN_RTR_FLR_VALUE_8 12'h0

//-/ END:   RN
//-/===========================================

//-/ START: LN CAPABILITIES CONFIGURATION
//-/===========================================


// Name:           CX_LN_REG_MAX_VALUE_8
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 8))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_64_SUPPORTED field in the LNR_CAP_OFF register for PF8.
`define CX_LN_REG_MAX_VALUE_8 5'h0


// Name:           CX_LN_128_SUPPORTED_VALUE_8
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 8))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_128_SUPPORTED field in the LNR_CAP_OFF register for PF8.
`define CX_LN_128_SUPPORTED_VALUE_8 1'h0


// Name:           CX_LN_64_SUPPORTED_VALUE_8
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 8))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_REGISTRATION_MAX field in the LNR_CAP_OFF register for PF8.
`define CX_LN_64_SUPPORTED_VALUE_8 1'h0

//-/ END:   LN CAPABILITIES CONFIGURATION
//-/===========================================




//-/==========================================
//-/ End FUNC8 Config
//-/==========================================

//-/===========================================
//-/ Function 9 Configuration Registers
//-/ ==========================================


// Name:         FUNC_9
// Default:      0 ((CX_NFUNC > 9) ? 1 : 0)
// Values:       0, 1
// 
// This parameter indicates that Function 9 is present
// `define FUNC_9

//-/===========================================
//-/ START: PCI-E CAPABILITIES CONFIGURATION


// Name:           PCIE_CAP_INT_MSG_NUM_9
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 9
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Message Number field in the PCI Express Capabilities Register. Function 9.
`define PCIE_CAP_INT_MSG_NUM_9 5'h0


// Name:           SLOT_IMPLEMENTED_9
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_NFUNC > 9))
// Parameter Type: Register Default Setting
// 
// Indicates that the PCI Express link associated with this Port is connected to a slot. Function 9.
`define SLOT_IMPLEMENTED_9 1'h0


// Name:           DEFAULT_PHANTOM_FUNC_SUPPORTED_9
// Default:        0x0
// Values:         0x0, ..., 0x3
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_PHANTOM_FUNC_SUPPORTED_9 2'h0


// Name:           DEFAULT_EXT_TAG_FIELD_SUPPORTED_9
// Default:        0x0 (DEFAULT_EXT_TAG_FIELD_SUPPORTED_0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 9
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_EXT_TAG_FIELD_SUPPORTED_9 1'h0



// Name:           DEFAULT_ATT_BUTT_PRE_9
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 9
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Button is present
`define DEFAULT_ATT_BUTT_PRE_9 1'h0


// Name:           DEFAULT_ATT_IND_PRE_9
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 9
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Indicator is present
`define DEFAULT_ATT_IND_PRE_9 1'h0


// Name:           DEFAULT_PWR_IND_PRE_9
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 9
// Parameter Type: Register Default Setting
// 
// When set indicates that a Power Indicator is present
`define DEFAULT_PWR_IND_PRE_9 1'h0


// Name:           DEFAULT_NO_SNOOP_SUPPORTED_9
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 9
// Parameter Type: Register Default Setting
// 
// Default value for the Enable No Snoop bit in the Device Control Register. Function 9.
`define DEFAULT_NO_SNOOP_SUPPORTED_9 1'h0


// Name:           ROOT_RCB_9
// Default:        64-bit
// Values:         64-bit (0x0), 128-bit (0x1)
// Parameter Type: Register Default Setting
// 
// Default value for the Read Completion Boundary (RCB) bit in the Link Control Register.
`define ROOT_RCB_9 1'h0


//-/ END:   PCI-E CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: MSI-X CAPABILITIES CONFIGURATION


// Name:           MSIX_TABLE_SIZE_9
// Default:        0x0
// Values:         0x0, ..., 0x7ff
// Enabled:        CX_NFUNC > 9 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the MSI-X Table Size field in the MSI-X Control Register. Function 9.
`define MSIX_TABLE_SIZE_9 11'h0


// Name:           MSIX_TABLE_BIR_9
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 9 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table BAR Indicator Register (BIR) field in the MSI-X Table Offset and BIR Register. Function 9.
`define MSIX_TABLE_BIR_9 3'h0


// Name:           MSIX_TABLE_OFFSET_9
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 9 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table Offset field in the MSI-X Table Offset and BIR Register. Function 9.
`define MSIX_TABLE_OFFSET_9 29'h0


// Name:           MSIX_PBA_BIR_9
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 9 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Pending Bit Array (PBA) BIR field in the MSI-X PBA Offset and BIR Register. Function 9.
`define MSIX_PBA_BIR_9 7'h0


// Name:           MSIX_PBA_OFFSET_9
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 9 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the PBA Offset field in the MSI-X PBA Offset and BIR Register. Function 9.
`define MSIX_PBA_OFFSET_9 29'h0

//-/ END:   MSI-X CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SATA CAPABILITIES CONFIGURATION


// Name:         SATA_HBA_OFFSET_9
// Default:      0x0
// Values:       0x0, ..., 0xfffff
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA Offset. Base address of the SATA HBA registers, 
//  as an offset from the base address of the BAR indicated 
//  by the SATA BAR field.
`define SATA_HBA_OFFSET_9 20'h0


// Name:         SATA_BAR_9
// Default:      0x0
// Values:       0x0, ..., 0xf
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA BAR. The bar that maps to SATA HBA registers,
`define SATA_BAR_9 4'h0

//-/ END:   SATA CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: AER CAPABILITIES CONFIGURATION


// Name:           DEFAULT_ECRC_CHK_CAP_9
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 9 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Check Capable bit in the Advanced Capabilities and Control Register. Function 9.
`define DEFAULT_ECRC_CHK_CAP_9 1'h1


// Name:           DEFAULT_ECRC_GEN_CAP_9
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 9 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Generation Capability bit in the Advanced Capabilities and Control Register. Function 9.
`define DEFAULT_ECRC_GEN_CAP_9 1'h1


// Name:           AER_INT_MSG_NUM_9
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Parameter Type: Register Default Setting
// 
// Default value for the Advanced Error Interrupt Message Number field of the Root Error Status Register. Function 9.
`define AER_INT_MSG_NUM_9 5'h0



// Name:           CX_HDR_LOG_DEPTH_9
// Default:        0x1
// Values:         0x1, 0x2, 0x4
// Enabled:        CX_NFUNC > 9 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Feature Setting.
// 
// Header Log Depth
`define CX_HDR_LOG_DEPTH_9 3'h1


`define CX_MULTIPLE_HDR_REC_CAP_9 1'h0

//-/ END:   AER CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PM CAPABILITIES CONFIGURATION


// Name:           PME_SUPPORT_9
// Default:        0x1b
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 9
// Parameter Type: Register Default Setting
// 
// Default value for the PME_Support field in the Power Management Capabilities Register. Function 9.
`define PME_SUPPORT_9 5'h1b


// Name:           D1_SUPPORT_9
// Default:        true
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 9
// Parameter Type: Register Default Setting
// 
// Default value for the D1 Support bit in the Power Management Capabilities Register. Function 9.
`define D1_SUPPORT_9 1'h1


// Name:           D2_SUPPORT_9
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 9
// Parameter Type: Register Default Setting
// 
// Default value for the D2 Support bit in the Power Management Capabilities Register. Function 9.
`define D2_SUPPORT_9 1'h0


// Name:           DEV_SPEC_INIT_9
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 9
// Parameter Type: Register Default Setting
// 
// Default value for the Device Specific Initialization (DSI) bit in the Power Management Capabilities Register. Function 
// 9.
`define DEV_SPEC_INIT_9 1'h0


// Name:           AUX_CURRENT_9
// Default:        375mA
// Values:         0mA (0x0), 55mA (0x1), 100mA (0x2), 160mA (0x3), 220mA (0x4), 270mA 
//                 (0x5), 320mA (0x6), 375mA (0x7)
// Enabled:        CX_NFUNC > 9
// Parameter Type: Register Default Setting
// 
// Default value for the Aux Current field in the Power Management Capabilities Register. Function 9.
`define AUX_CURRENT_9 3'h7


// Name:           DEFAULT_NO_SOFT_RESET_9
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 9
// Parameter Type: Register Default Setting
// 
// Default value for the No Soft Reset bit in the Power Management Control and Status Register. When set, you should not 
// reset any controller registers when transitioning from D3hot to D0. Therefore, you should not assert the non_sticky_rst_n 
// and sticky_rst_n inputs. Function 9.
`define DEFAULT_NO_SOFT_RESET_9 1'h0

//-/ END:   PM CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PCI BASIC CONFIGURATION


// Name:           CX_DEVICE_ID_9
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 9
// Parameter Type: Register Default Setting
// 
// Default value for the Device ID field in the Device ID and Vendor ID Register. Function 9.
`define CX_DEVICE_ID_9 16'h0


// Name:           CX_VENDOR_ID_9
// Default:        0x16c3
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 9
// Parameter Type: Register Default Setting
// 
// Default value for the Vendor ID field in the Device ID and Vendor ID Register. Function 9.
`define CX_VENDOR_ID_9 16'h16c3


// Name:           CX_REVISION_ID_9
// Default:        0x1
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 9
// Parameter Type: Register Default Setting
// 
// Default value for the Revision ID field in the Revision ID Register. Function 9.
`define CX_REVISION_ID_9 8'h1


// Name:           SUBSYS_DEV_ID_9
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 9
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 9.
`define SUBSYS_DEV_ID_9 16'h0


// Name:           SUBSYS_VENDOR_ID_9
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 9
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem Vendor ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 9.
`define SUBSYS_VENDOR_ID_9 16'h0


// Name:           BASE_CLASS_CODE_9
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 9
// Parameter Type: Register Default Setting
// 
// Default value for the Base Class Code field in the Class Code Register. Function 9.
`define BASE_CLASS_CODE_9 8'h0


// Name:           SUB_CLASS_CODE_9
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 9
// Parameter Type: Register Default Setting
// 
// Default value for the Subclass Code field in the Class Code Register. Function 9.
`define SUB_CLASS_CODE_9 8'h0


// Name:           IF_CODE_9
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 9
// Parameter Type: Register Default Setting
// 
// Default value for the Programming Interface field in the Class Code Register. Function 9.
`define IF_CODE_9 8'h0


// Name:           CARDBUS_CIS_PTR_9
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 9
// Parameter Type: Register Default Setting
// 
// Default value for the CardBus CIS Pointer Register. Function 9.
`define CARDBUS_CIS_PTR_9 16'h0


// Name:           INT_PIN_MAPPING_9
// Default:        INTA
// Values:         None (0x0), INTA (0x1), INTB (0x2), INTC (0x3), INTD (0x4)
// Enabled:        CX_NFUNC > 9
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Pin Register. Function 9.
`define INT_PIN_MAPPING_9 8'h1


// Name:           IO_DECODE_32_9
// Default:        16-bit
// Values:         16-bit (0x0), 32-bit (0x1)
// Enabled:        CX_NFUNC > 9
// Parameter Type: Register Default Setting
// 
// Default value for the 32-Bit I/O Space bit in the I/O Base and I/O Limit Register. Function 9.
`define IO_DECODE_32_9 1'h0


// Name:           MEM_DECODE_64_9
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x1)
// Enabled:        CX_NFUNC > 9
// Parameter Type: Register Default Setting
// 
// Default value for the 64-Bit Memory Addressing bit in the Prefetchable Memory Base and Limit Register. Function 9.
`define MEM_DECODE_64_9 1'h0


// Name:           ROM_BAR_ENABLED_9
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 9
// Parameter Type: Register Default Setting
// 
// Include the expansion ROM BAR registers. Function 9.
`define ROM_BAR_ENABLED_9 1'h1


`define DEFAULT_ROM_BAR_ENABLED_9 1'h1


// Name:           ROM_MASK_9
// Default:        0xffff
// Values:         0x7ff, ..., 0xffffff
// Enabled:        CX_NFUNC > 9 && ROM_BAR_ENABLED_9==1
// Parameter Type: Register Default Setting
// 
// Determines the default of the Expansion ROM BAR Mask register. Function 9. 
//  - The BAR Mask register specifies which bits of the Expansion ROM BAR are non-writable by host software, which 
//  determines the size of the BAR. 
//  - The maximum value for ROM_MASK_N is 0xFFFFFF because the maximum space that can be claimed by an Expansion ROM BAR 
//  is 16 MB. 
//  - For example: 32'hFFFF =BAR size of 2^16.
`define ROM_MASK_9 32'hffff


// Name:           ROM_MASK_WRITABLE_9
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 9 && ROM_BAR_ENABLED_9==1
// Parameter Type: Feature Setting
// 
// Determines if the Expansion ROM BAR Mask register for function 9 is writable by application software. If writing to a 
// Expansion ROM BAR Mask register is enabled, your application can write to the Expansion ROM BAR Mask register through the 
// DBI by asserting dbi_cs2 in addition to dbi_cs.
`define ROM_MASK_WRITABLE_9 1'h0


// Name:           ROM_FUNC9_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 9 && ROM_BAR_ENABLED_9==1 && TRGT1_POPULATE==1))
// Parameter Type: Register Default Setting
// 
// Direct incoming requests that pass filtering and match the Expansion ROM BAR of function 9 to either RTRGT0 or RTRGT1. 
//  - For example, setting ROM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for the Expansion ROM BAR of function 
//  0 to RTRGT1. 
//  - If TRGT1_POPULATE =0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define ROM_FUNC9_TARGET_MAP 1'h1


// Name:           CX_PCI_HEADER_DEFAULTS_VISIBLE_9
// Default:        0
// Values:         0, 1
// Parameter Type: Register Default Setting
// 
// Select here if you want to configure the defaults for the other PCI Standard Header registers for function 9. 
//  An extra window will appear under this page. To access it, click the plus/minus symbol in the hierarchy view on the 
//  left panel. 
//  This is optional but not usually recommended. 
//  You can also change these register defaults using the DBI before (or after) the link comes up.
`define CX_PCI_HEADER_DEFAULTS_VISIBLE_9 0

//-/ END:   PCI BASIC CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: BAR CONFIGURATION


// Name:           BAR0_ENABLED_9
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 9
// Parameter Type: Feature Setting
// 
// Include the BAR0 registers for function 9.
`define BAR0_ENABLED_9 1'h1


`define DEFAULT_BAR0_ENABLED_9 1'h1


// Name:           MEM0_SPACE_DECODER_9
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 9 && BAR0_ENABLED_9==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 9.
`define MEM0_SPACE_DECODER_9 1'h0


// Name:           PREFETCHABLE0_9
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 9 && BAR0_ENABLED_9==1 && MEM0_SPACE_DECODER_9==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 9.
`define PREFETCHABLE0_9 1'h0


// Name:           BAR0_TYPE_9
// Default:        64-bit ((MEM0_SPACE_DECODER_9==1 || BAR0_ENABLED_9==0) ? 0 : 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 9 && BAR0_ENABLED_9==1 && MEM0_SPACE_DECODER_9==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 9.
`define BAR0_TYPE_9 2'h2


// Name:           BAR0_SIZING_SCHEME_9
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 9 && BAR0_ENABLED_9==1
// Parameter Type: Feature Setting
// 
// BAR0 Function 9 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR0_SIZING_SCHEME_9 2'h0


// Name:           CX_BAR0_RESIZABLE_9
// Default:        0x0 ((BAR0_SIZING_SCHEME_9==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR0_ENABLED_9==1) && (MEM0_SPACE_DECODER_9==0)
// Parameter Type: Feature Setting
// 
// Defines BAR0 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR0 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR0_RESIZABLE_9 1'h0


// Name:           CX_BAR0_RESOURCE_AVAIL_9
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 9 && CX_BAR0_RESIZABLE_9==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR0 of function 9. 
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
// Example: 0x00000030 indicates that BAR0 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR0_RESOURCE_AVAIL_9 64'h10


// Name:           BAR0_MASK_WRITABLE_9
// Default:        0x0 ((BAR0_ENABLED_9==1 && BAR0_SIZING_SCHEME_9 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 9 && BAR0_ENABLED_9==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR0 Mask through DBI
`define BAR0_MASK_WRITABLE_9 1'h0


// Name:           BAR0_MASK_9
// Default:        0xfffff (CX_BAR0_RESIZABLE_9==1 ? [calc_bar_mask 
//                 CX_BAR0_RESOURCE_AVAIL_9] : MEM0_SPACE_DECODER_9==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 9 && BAR0_ENABLED_9==1 && MEM0_SPACE_DECODER_9==0 && 
//                 CX_BAR0_RESIZABLE_9==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR0 Mask register of function 9. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR0_MASK_9 64'hfffff


// Name:           MEM_FUNC9_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 9 && BAR0_ENABLED_9==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_0 of function 9 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming Requests for BAR0 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC9_BAR0_TARGET_MAP 1'h1


// Name:           BAR1_ENABLED_9
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 9 && BAR0_TYPE_9==0
// Parameter Type: Feature Setting
// 
// Include the BAR1 registers for function 9.
`define BAR1_ENABLED_9 1'h0


`define DEFAULT_BAR1_ENABLED_9 1'h0


// Name:           MEM1_SPACE_DECODER_9
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 9 && BAR1_ENABLED_9==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 9.
`define MEM1_SPACE_DECODER_9 1'h0


// Name:           PREFETCHABLE1_9
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 9 && BAR1_ENABLED_9==1 && MEM1_SPACE_DECODER_9==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 9.
`define PREFETCHABLE1_9 1'h0


// Name:           BAR1_TYPE_9
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 9.
`define BAR1_TYPE_9 2'h0


// Name:           BAR1_SIZING_SCHEME_9
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 9 && BAR1_ENABLED_9==1
// Parameter Type: Feature Setting
// 
// BAR1 Function 9 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR1_SIZING_SCHEME_9 2'h0


// Name:           CX_BAR1_RESIZABLE_9
// Default:        0x0 ((BAR1_SIZING_SCHEME_9==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR1_ENABLED_9==1) && (MEM1_SPACE_DECODER_9==0)
// Parameter Type: Feature Setting
// 
// Defines BAR1 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR1 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR1_RESIZABLE_9 1'h0


// Name:           CX_BAR1_RESOURCE_AVAIL_9
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 9 && CX_BAR1_RESIZABLE_9==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR1 of function 9. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR1 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR1_RESOURCE_AVAIL_9 32'h10


// Name:           BAR1_MASK_WRITABLE_9
// Default:        0x0 ((BAR1_ENABLED_9==1 && BAR1_SIZING_SCHEME_9 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 9 && BAR1_ENABLED_9==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR1 Mask through DBI
`define BAR1_MASK_WRITABLE_9 1'h0


// Name:           BAR1_MASK_9
// Default:        0xffff (CX_BAR1_RESIZABLE_9==1 ? [calc_bar_mask 
//                 CX_BAR1_RESOURCE_AVAIL_9] : MEM1_SPACE_DECODER_9==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 9 && BAR1_ENABLED_9==1 && MEM1_SPACE_DECODER_9==0 && 
//                 CX_BAR1_RESIZABLE_9==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR1 Mask register of function 9. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR1_MASK_9 32'hffff


// Name:           MEM_FUNC9_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 9 && BAR1_ENABLED_9==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_1 of function 9 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR1_TARGET_MAP to 1 maps all incoming Requests for BAR1 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC9_BAR1_TARGET_MAP 1'h1


// Name:           BAR2_ENABLED_9
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 9
// Parameter Type: Feature Setting
// 
// Include the BAR2 registers for function 9.
`define BAR2_ENABLED_9 1'h1


`define DEFAULT_BAR2_ENABLED_9 1'h1


// Name:           MEM2_SPACE_DECODER_9
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 9 && BAR2_ENABLED_9==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 9.
`define MEM2_SPACE_DECODER_9 1'h0


// Name:           PREFETCHABLE2_9
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 9 && BAR2_ENABLED_9==1 && MEM2_SPACE_DECODER_9==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 9.
`define PREFETCHABLE2_9 1'h0


// Name:           BAR2_TYPE_9
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 9 && BAR2_ENABLED_9==1 && MEM2_SPACE_DECODER_9==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 9.
`define BAR2_TYPE_9 2'h0


// Name:           BAR2_SIZING_SCHEME_9
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 9 && BAR2_ENABLED_9==1
// Parameter Type: Feature Setting
// 
// BAR2 Function 9 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR2_SIZING_SCHEME_9 2'h0


// Name:           CX_BAR2_RESIZABLE_9
// Default:        0x0 ((BAR2_SIZING_SCHEME_9==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR2_ENABLED_9==1) && (MEM2_SPACE_DECODER_9==0)
// Parameter Type: Feature Setting
// 
// Defines BAR2 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR2 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR2_RESIZABLE_9 1'h0


// Name:           CX_BAR2_RESOURCE_AVAIL_9
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 9 && CX_BAR2_RESIZABLE_9==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR2 of function 9. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR2 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR2_RESOURCE_AVAIL_9 64'h10


// Name:           BAR2_MASK_WRITABLE_9
// Default:        0x0 ((BAR2_ENABLED_9==1 && BAR2_SIZING_SCHEME_9 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 9 && BAR2_ENABLED_9==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR2 Mask through DBI
`define BAR2_MASK_WRITABLE_9 1'h0


// Name:           BAR2_MASK_9
// Default:        0xfffff (CX_BAR2_RESIZABLE_9==1 ? [calc_bar_mask 
//                 CX_BAR2_RESOURCE_AVAIL_9] : MEM2_SPACE_DECODER_9==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 9 && BAR2_ENABLED_9==1 && MEM2_SPACE_DECODER_9==0 && 
//                 CX_BAR2_RESIZABLE_9==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR2 Mask register of function 9. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR2_MASK_9 64'hfffff


// Name:           MEM_FUNC9_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 9 && BAR2_ENABLED_9==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_2 of function 9 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR2_TARGET_MAP to 1 maps all incoming requests for BAR2 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC9_BAR2_TARGET_MAP 1'h1


// Name:           BAR3_ENABLED_9
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 9 && BAR2_TYPE_9==0
// Parameter Type: Feature Setting
// 
// Include the BAR3 registers for function 9.
`define BAR3_ENABLED_9 1'h0



`define DEFAULT_BAR3_ENABLED_9 1'h0


// Name:           MEM3_SPACE_DECODER_9
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 9 && BAR3_ENABLED_9==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 9.
`define MEM3_SPACE_DECODER_9 1'h0


// Name:           PREFETCHABLE3_9
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 9 && BAR3_ENABLED_9==1 && MEM3_SPACE_DECODER_9==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 9.
`define PREFETCHABLE3_9 1'h0


// Name:           BAR3_TYPE_9
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 9.
`define BAR3_TYPE_9 2'h0


// Name:           BAR3_SIZING_SCHEME_9
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 9 && BAR3_ENABLED_9==1
// Parameter Type: Feature Setting
// 
// BAR3 Function 9 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR3_SIZING_SCHEME_9 2'h0


// Name:           CX_BAR3_RESIZABLE_9
// Default:        0x0 ((BAR3_SIZING_SCHEME_9==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR3_ENABLED_9==1) && (MEM3_SPACE_DECODER_9==0)
// Parameter Type: Feature Setting
// 
// Defines BAR3 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR3 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR3_RESIZABLE_9 1'h0


// Name:           CX_BAR3_RESOURCE_AVAIL_9
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 9 && CX_BAR3_RESIZABLE_9==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR3 of function 9. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR3 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR3_RESOURCE_AVAIL_9 32'h10


// Name:           BAR3_MASK_WRITABLE_9
// Default:        0x0 ((BAR3_ENABLED_9==1 && BAR3_SIZING_SCHEME_9 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 9 && BAR3_ENABLED_9==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR3 Mask through DBI
`define BAR3_MASK_WRITABLE_9 1'h0


// Name:           BAR3_MASK_9
// Default:        0xffff (CX_BAR3_RESIZABLE_9==1 ? [calc_bar_mask 
//                 CX_BAR3_RESOURCE_AVAIL_9] : MEM3_SPACE_DECODER_9==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 9 && BAR3_ENABLED_9==1 && MEM3_SPACE_DECODER_9==0 && 
//                 CX_BAR3_RESIZABLE_9==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR3 Mask register of function 9. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR3_MASK_9 32'hffff


// Name:           MEM_FUNC9_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 9 && BAR3_ENABLED_9==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_3 of function 9 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR3_TARGET_MAP to 1 maps all incoming requests for BAR3 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC9_BAR3_TARGET_MAP 1'h1


// Name:           BAR4_ENABLED_9
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 9
// Parameter Type: Feature Setting
// 
// Include the BAR4 registers for function 9.
`define BAR4_ENABLED_9 1'h1


`define DEFAULT_BAR4_ENABLED_9 1'h1



// Name:           MEM4_SPACE_DECODER_9
// Default:        I/O (BAR4_ENABLED_9==1)
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 9 && BAR4_ENABLED_9==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 9.
`define MEM4_SPACE_DECODER_9 1'h1


// Name:           PREFETCHABLE4_9
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 9 && BAR4_ENABLED_9==1 && MEM4_SPACE_DECODER_9==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 9.
`define PREFETCHABLE4_9 1'h0


// Name:           BAR4_TYPE_9
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 9 && BAR4_ENABLED_9==1 && MEM4_SPACE_DECODER_9==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 9.
`define BAR4_TYPE_9 2'h0


// Name:           BAR4_SIZING_SCHEME_9
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 9 && BAR4_ENABLED_9==1
// Parameter Type: Feature Setting
// 
// BAR4  Function 9 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR4_SIZING_SCHEME_9 2'h0


// Name:           CX_BAR4_RESIZABLE_9
// Default:        0x0 ((BAR4_SIZING_SCHEME_9==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR4_ENABLED_9==1) && (MEM4_SPACE_DECODER_9==0)
// Parameter Type: Feature Setting
// 
// Defines BAR4 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR4 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR4_RESIZABLE_9 1'h0


// Name:           CX_BAR4_RESOURCE_AVAIL_9
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 9 &&  CX_BAR4_RESIZABLE_9==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR4 of function 9. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR4 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR4_RESOURCE_AVAIL_9 64'h10


// Name:           BAR4_MASK_WRITABLE_9
// Default:        0x0 ((BAR4_ENABLED_9==1 && BAR4_SIZING_SCHEME_9 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 9 && BAR4_ENABLED_9==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR4 Mask through DBI
`define BAR4_MASK_WRITABLE_9 1'h0


// Name:           BAR4_MASK_9
// Default:        0xff (CX_BAR4_RESIZABLE_9==1 ? [calc_bar_mask 
//                 CX_BAR4_RESOURCE_AVAIL_9] : MEM4_SPACE_DECODER_9==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 9 && BAR4_ENABLED_9==1 && MEM4_SPACE_DECODER_9==0 && 
//                 CX_BAR4_RESIZABLE_9==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR4 Mask register of function 9. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR4_MASK_9 64'hff


// Name:           MEM_FUNC9_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 9 && BAR4_ENABLED_9==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_4 of function 9 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR4_TARGET_MAP to 1 maps all incoming requests for BAR4 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC9_BAR4_TARGET_MAP 1'h1


// Name:           BAR5_ENABLED_9
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 9 && BAR4_TYPE_9==0
// Parameter Type: Feature Setting
// 
// Include the BAR5 registers for function 9.
`define BAR5_ENABLED_9 1'h0


`define DEFAULT_BAR5_ENABLED_9 1'h0


// Name:           MEM5_SPACE_DECODER_9
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 9 && BAR5_ENABLED_9==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 9.
`define MEM5_SPACE_DECODER_9 1'h0


// Name:           PREFETCHABLE5_9
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 9 && BAR5_ENABLED_9==1 && MEM5_SPACE_DECODER_9==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 9.
`define PREFETCHABLE5_9 1'h0


// Name:           BAR5_TYPE_9
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 9.
`define BAR5_TYPE_9 2'h0


// Name:           BAR5_SIZING_SCHEME_9
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 9 && BAR5_ENABLED_9==1
// Parameter Type: Feature Setting
// 
// BAR5  Function 9 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR5_SIZING_SCHEME_9 2'h0


// Name:           CX_BAR5_RESIZABLE_9
// Default:        0x0 ((BAR5_SIZING_SCHEME_9==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR5_ENABLED_9==1) && (MEM5_SPACE_DECODER_9==0)
// Parameter Type: Feature Setting
// 
// Defines BAR5 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR5 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR5_RESIZABLE_9 1'h0


// Name:           CX_BAR5_RESOURCE_AVAIL_9
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 9 && CX_BAR5_RESIZABLE_9==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR5 of function 9. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR5 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR5_RESOURCE_AVAIL_9 32'h10


// Name:           BAR5_MASK_WRITABLE_9
// Default:        0x0 ((BAR5_ENABLED_9==1 && BAR5_SIZING_SCHEME_9 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 9 && BAR5_ENABLED_9==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR5 Mask through DBI
`define BAR5_MASK_WRITABLE_9 1'h0


// Name:           BAR5_MASK_9
// Default:        0xffff (CX_BAR5_RESIZABLE_9==1 ? [calc_bar_mask 
//                 CX_BAR5_RESOURCE_AVAIL_9] : MEM5_SPACE_DECODER_9==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 9 && BAR5_ENABLED_9==1 && MEM5_SPACE_DECODER_9==0 && 
//                 CX_BAR5_RESIZABLE_9==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR5 Mask register of function 9. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR5_MASK_9 32'hffff


// Name:           MEM_FUNC9_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 9 && BAR5_ENABLED_9==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_5 of function 9 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR5_TARGET_MAP to 1 maps all incoming requests for BAR5 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC9_BAR5_TARGET_MAP 1'h1


`define FUNC9_BARSIZE_32 128'h0


`define FUNC9_BARSIZE 128'h0


`define FUNC9_BAR0_BARSIZE_TRGT1 128'h0


`define FUNC9_BAR2_BARSIZE_TRGT1 128'h0


`define FUNC9_BAR4_BARSIZE_TRGT1 128'h0


`define FUNC9_BAR0_TRGT1_ADDR_WIDTH 1


`define FUNC9_BAR2_TRGT1_ADDR_WIDTH 1


`define FUNC9_BAR4_TRGT1_ADDR_WIDTH 1


// Name:         CX_NUM_RBARS_9
// Default:      0 ([calc_num_rbars CX_BAR0_RESIZABLE_9 CX_BAR1_RESIZABLE_9 
//               CX_BAR2_RESIZABLE_9 CX_BAR3_RESIZABLE_9 CX_BAR4_RESIZABLE_9 
//               CX_BAR5_RESIZABLE_9])
// Values:       -2147483648, ..., 2147483647
// 
// Number of resizable BARs
`define CX_NUM_RBARS_9 0

//-/ END:   BAR CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SR-IOV CAPABILITIES CONFIGURATION


// Name:           CX_VF_DEPENDENCY_LINK_9
// Default:        0x9
// Values:         0x0, ..., 0xff
// Enabled:        CX_VF_DEPENDENCY_LINK_SUPP && (CX_NFUNC > 9) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Specifies the 8-bit VF dependency link for PF9. Valid only if CX_VF_DEPENDENCY_LINK_SUPP=1.
`define CX_VF_DEPENDENCY_LINK_9 8'h9


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER1_9
// Default:        0x2 ((CX_NFUNC>=17) ? 32 : (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : 
//                 (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF9 in an ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER1_9 16'h2


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER0_9
// Default:        0x100
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF9 
//  in a non-ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER0_9 16'h100


// Name:           VF_STRIDE_ARI_CAP_HIER1_9
// Default:        0x2 (CX_VF_STRIDE_ALWAYS_ONE) ? 1 : ((CX_NFUNC>=17) ? 32 : 
//                 (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF9 in an ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER1_9 16'h2


// Name:           VF_STRIDE_ARI_CAP_HIER0_9
// Default:        0x100 ((CX_VF_STRIDE_ALWAYS_ONE) ? 0x0001 : 0x0100)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF9 in a non-ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER0_9 16'h100


// Name:           CX_VF_DEVICE_ID_9
// Default:        0x0 (CX_DEVICE_ID_9)
// Values:         0x0, ..., 0xffff
// Enabled:        (CX_NFUNC > 9) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 16-bit virtual function Device ID for PF9. 
//  It might be different from the physical function's.
`define CX_VF_DEVICE_ID_9 16'h0


// Name:           CX_VF_SUPP_PAGE_SIZE_9
// Default:        0x553
// Values:         0x553, ..., 0xffff
// Enabled:        (CX_NFUNC > 9) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 32-bit supported page sizes for virtual functions for PF9
`define CX_VF_SUPP_PAGE_SIZE_9 32'h553


// Name:           CX_ARI_CAP_HIER_PRSVD_9
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Specifies if ARI Capable Hierarchy bit is preserved across certain power state transitions 
//  Only present in PF0. Read Only Zero in this PF9.
`define CX_ARI_CAP_HIER_PRSVD_9 1'h0

//-/===========================================
//-/ START: VF BAR CONFIGURATION


// Name:           VF_BAR0_ENABLED_9
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 9)
// Parameter Type: Feature Setting
// 
// Include the VF BAR0 registers in PF9
`define VF_BAR0_ENABLED_9 1'h1


`define VF_DEFAULT_BAR0_ENABLED_9 1'h1


// Name:           VF_MEM0_SPACE_DECODER_9
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR0_ENABLED_9 && CX_SRIOV_ENABLE && (CX_NFUNC > 9)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Space Indicator 
//  ALWAYS set to Memory for Virtual Functions
`define VF_MEM0_SPACE_DECODER_9 1'h0


// Name:           VF_PREFETCHABLE0_9
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_9==1 && VF_MEM0_SPACE_DECODER_9==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 9)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Prefetchable 
//  When set indicates VF BAR0 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE0_9 1'h0


// Name:           VF_BAR0_TYPE_9
// Default:        64-bit ((VF_MEM0_SPACE_DECODER_9==1 || VF_BAR0_ENABLED_9==0) ? 0 : 
//                 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR0_ENABLED_9==1 && VF_MEM0_SPACE_DECODER_9==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 9)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 9; (bits [2:1] for a memory BAR).
`define VF_BAR0_TYPE_9 2'h2


// Name:           VF_BAR0_MASK_WRITABLE_9
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_9==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 9)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR0_MASK_WRITABLE_9 1'h0


// Name:           VF_BAR0_MASK_9
// Default:        0xfffff (VF_MEM0_SPACE_DECODER_9==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR0_ENABLED_9==1 && VF_MEM0_SPACE_DECODER_9==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 9)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Mask 
//  Determines the default of the VF BAR Mask register for PF9. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR0_MASK_9 64'hfffff


// Name:           VF_MEM_FUNC9_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR0_ENABLED_9==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 9)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF9 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC9_BAR0_TARGET_MAP 1'h1


// Name:           VF_BAR1_ENABLED_9
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        (VF_BAR0_TYPE_9==0)  && CX_SRIOV_ENABLE && (CX_NFUNC > 9)
// Parameter Type: Feature Setting
// 
// Include the VF BAR1 registers in PF9
`define VF_BAR1_ENABLED_9 1'h0


`define VF_DEFAULT_BAR1_ENABLED_9 1'h0


// Name:           VF_MEM1_SPACE_DECODER_9
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR1_ENABLED_9==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 9)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Space Indicator
`define VF_MEM1_SPACE_DECODER_9 1'h0


// Name:           VF_PREFETCHABLE1_9
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_9==1 && VF_MEM1_SPACE_DECODER_9==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 9)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Prefetchable 
//  When set indicates VF BAR1 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE1_9 1'h0


// Name:           VF_BAR1_TYPE_9
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 9; (bits [2:1] for a memory BAR).
`define VF_BAR1_TYPE_9 2'h0


// Name:           VF_BAR1_MASK_WRITABLE_9
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_9==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 9)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR1_MASK_WRITABLE_9 1'h0


// Name:           VF_BAR1_MASK_9
// Default:        0xffff (VF_MEM1_SPACE_DECODER_9==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR1_ENABLED_9==1 && VF_MEM1_SPACE_DECODER_9==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 9)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Mask 
//  Determines the default of the VF BAR Mask register for PF9. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR1_MASK_9 32'hffff


// Name:           VF_MEM_FUNC9_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR1_ENABLED_9==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 9)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF9 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC9_BAR1_TARGET_MAP 1'h1


// Name:           VF_BAR2_ENABLED_9
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 9)
// Parameter Type: Feature Setting
// 
// Include the VF BAR2 registers in PF9
`define VF_BAR2_ENABLED_9 1'h1


`define VF_DEFAULT_BAR2_ENABLED_9 1'h1


// Name:           VF_MEM2_SPACE_DECODER_9
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR2_ENABLED_9==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 9)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Memory Space Indicator
`define VF_MEM2_SPACE_DECODER_9 1'h0


// Name:           VF_PREFETCHABLE2_9
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_9==1 && VF_MEM2_SPACE_DECODER_9==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 9)
// Parameter Type: Register Default Setting
// 
// BAR2 Memory Prefetchable 
//  When set indicates VF BAR2 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE2_9 1'h0


// Name:           VF_BAR2_TYPE_9
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR2_ENABLED_9==1 && VF_MEM2_SPACE_DECODER_9==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 9)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 9; (bits [2:1] for a memory BAR).
`define VF_BAR2_TYPE_9 2'h0


// Name:           VF_BAR2_MASK_WRITABLE_9
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_9==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 9)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR2_MASK_WRITABLE_9 1'h0


// Name:           VF_BAR2_MASK_9
// Default:        0xfffff (VF_MEM2_SPACE_DECODER_9==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR2_ENABLED_9==1 && VF_MEM2_SPACE_DECODER_9==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 9)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Mask 
//  Determines the default of the VF BAR Mask register for PF9. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR2_MASK_9 64'hfffff


// Name:           VF_MEM_FUNC9_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR2_ENABLED_9==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 9)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF9 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC9_BAR2_TARGET_MAP 1'h1


// Name:           VF_BAR3_ENABLED_9
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_TYPE_9==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 9)
// Parameter Type: Feature Setting
// 
// Include the VF BAR3 registers in PF9
`define VF_BAR3_ENABLED_9 1'h0


`define VF_DEFAULT_BAR3_ENABLED_9 1'h0


// Name:           VF_MEM3_SPACE_DECODER_9
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR3_ENABLED_9==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 9)
// Parameter Type: Register Default Setting
// 
// BAR3 Memory Space Indicator
`define VF_MEM3_SPACE_DECODER_9 1'h0


// Name:           VF_PREFETCHABLE3_9
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_9==1 && VF_MEM3_SPACE_DECODER_9==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 9)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Memory Prefetchable 
//  When set indicates VF BAR3 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE3_9 1'h0


// Name:           VF_BAR3_TYPE_9
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 9; (bits [2:1] for a memory BAR).
`define VF_BAR3_TYPE_9 2'h0


// Name:           VF_BAR3_MASK_WRITABLE_9
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_9==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 9)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR3_MASK_WRITABLE_9 1'h0


// Name:           VF_BAR3_MASK_9
// Default:        0xffff (VF_MEM3_SPACE_DECODER_9==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR3_ENABLED_9==1 && VF_MEM3_SPACE_DECODER_9==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 9)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Mask 
//  Determines the default of the VF BAR Mask register for PF9. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR3_MASK_9 32'hffff


// Name:           VF_MEM_FUNC9_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR3_ENABLED_9==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 9)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF9 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC9_BAR3_TARGET_MAP 1'h1


// Name:           VF_BAR4_ENABLED_9
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 9)
// Parameter Type: Feature Setting
// 
// Include the VF BAR4 registers in PF9
`define VF_BAR4_ENABLED_9 1'h1


`define VF_DEFAULT_BAR4_ENABLED_9 1'h1


// Name:           VF_MEM4_SPACE_DECODER_9
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR4_ENABLED_9==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 9)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Space Indicator
`define VF_MEM4_SPACE_DECODER_9 1'h0


// Name:           VF_PREFETCHABLE4_9
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_9==1 && VF_MEM4_SPACE_DECODER_9==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 9)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Prefetchable 
//  When set indicates VF BAR4 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE4_9 1'h0


// Name:           VF_BAR4_TYPE_9
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR4_ENABLED_9==1 && VF_MEM4_SPACE_DECODER_9==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 9)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 9; (bits [2:1] for a memory BAR).
`define VF_BAR4_TYPE_9 2'h0


// Name:           VF_BAR4_MASK_WRITABLE_9
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_9==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 9)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR4_MASK_WRITABLE_9 1'h0


// Name:           VF_BAR4_MASK_9
// Default:        0xfff (VF_MEM4_SPACE_DECODER_9==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR4_ENABLED_9==1 && VF_MEM4_SPACE_DECODER_9==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 9)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Mask 
//  Determines the default of the VF BAR Mask register for PF9. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR4_MASK_9 64'hfff


// Name:           VF_MEM_FUNC9_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR4_ENABLED_9==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 9)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF9 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC9_BAR4_TARGET_MAP 1'h1


// Name:           VF_BAR5_ENABLED_9
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_TYPE_9==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 9)
// Parameter Type: Feature Setting
// 
// Include the VF BAR5 registers in PF9
`define VF_BAR5_ENABLED_9 1'h0


`define VF_DEFAULT_BAR5_ENABLED_9 1'h0


// Name:           VF_MEM5_SPACE_DECODER_9
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR5_ENABLED_9==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 9)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Space Indicator
`define VF_MEM5_SPACE_DECODER_9 1'h0


// Name:           VF_PREFETCHABLE5_9
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_9==1 && VF_MEM5_SPACE_DECODER_9==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 9)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Prefetchable 
//  When set indicates VF BAR5 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE5_9 1'h0


// Name:           VF_BAR5_TYPE_9
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 9; (bits [2:1] for a memory BAR).
`define VF_BAR5_TYPE_9 2'h0


// Name:           VF_BAR5_MASK_WRITABLE_9
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_9==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 9)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR5_MASK_WRITABLE_9 1'h0


// Name:           VF_BAR5_MASK_9
// Default:        0xffff (VF_MEM5_SPACE_DECODER_9==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR5_ENABLED_9==1 && VF_MEM5_SPACE_DECODER_9==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 9)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Mask 
//  Determines the default of the VF BAR Mask register for PF9. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR5_MASK_9 32'hffff


// Name:           VF_MEM_FUNC9_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR5_ENABLED_9==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 9)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF9 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 (no 
// RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC9_BAR5_TARGET_MAP 1'h1


`define VF_FUNC9_BARSIZE_32 128'h101000


`define VF_FUNC9_BARSIZE 128'h201000

//-/ END:   VF BAR CONFIGURATION
//-/===========================================

//-/ END:   SR-IOV CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: TPH CAPABILITIES CONFIGURATION


// Name:           TPH_IVEC_9
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Interrupt Vector Mode. If set indicates that the function supports the Interrupt Vector 
// Mode of operation. Function 9.
`define TPH_IVEC_9 1'h0


// Name:           TPH_DS_9
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Device Specific Mode. If set indicates that the function supports the Device Specific Mode 
// of operation. Function 9.
`define TPH_DS_9 1'h0


// Name:           TPH_ST_TABLE_LOC_9
// Default:        Not Present
// Values:         Not Present (0), TPH Requester Capability Structure (1), MSI-X 
//                 Table Structure (2)
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_DS_9 || TPH_IVEC_9))
// Parameter Type: Feature Setting
// 
// TLP Processing Hints Steering Tag Table Location. Value indicates if and where the ST Table is located. Function 9.
`define TPH_ST_TABLE_LOC_9 0

//located in the TPH Requester Capability structure. Please reduce the ST Table Size for this mode of operation"

// Name:           TPH_ST_TABLE_SIZE_9
// Default:        1
// Values:         1, ..., 2048
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_ST_TABLE_LOC_9 != 0))
// Parameter Type: Feature Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define TPH_ST_TABLE_SIZE_9 1


`define TPH_ST_TABLE_DEPTH_9 0

//-/ END:   TPH CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: ATS CAPABILITIES CONFIGURATION


// Name:           ATS_INV_Q_DPTH_9
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// The number of Invalidate Requests that the Function can accept before putting backpressure on the upstream connection. A 
// value of 0 indicates the function can accept 32 Invalidate requests. Function 9.
`define ATS_INV_Q_DPTH_9 5'd0


// Name:           ATS_STU_9
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// This value indicates to the Function the minimum number of 4096-byte blocks that is indicated in a Translation 
// Completion or Invalidate Request. This is a power of 2 multiplier and the number of blocks is 2^STU. A value of 0 indicates 1 block 
// and a value of 31 indicates 2^31 blocks (or 8 TB total). Function 9.
`define ATS_STU_9 5'd0

//-/ END:   ATS CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PRS CAPABILITIES CONFIGURATION


// Name:           CX_PRS_OUTSTANDING_CAPACITY_VALUE_9
// Default:        0x1
// Values:         0x0, ..., 0xffffffff
// Enabled:        (CX_PRS_ENABLE==1) && (CX_NFUNC > 9)
// Parameter Type: Register Default Setting
// 
// Register default for PRS Outstanding Capacity in PF9. 
// For more details, see the PRS_OUTSTANDING_CAPACITY field in the PRS_REQ_CAPACITY_REG register.
`define CX_PRS_OUTSTANDING_CAPACITY_VALUE_9 32'h1

//-/ END:   PRS CAPABILITIES CONFIGURATION
//-/===========================================


//-/===========================================
//--- START: RN


// Name:           CX_RN_IMM_VALUE_9
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 9)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for PF9.
`define CX_RN_IMM_VALUE_9 1'h0


// Name:           CX_RN_IMM_D0_VALUE_9
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 9)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for PF9.
`define CX_RN_IMM_D0_VALUE_9 1'h0


// Name:           CX_RN_FRS_VALUE_9
// Default:        0x0 (CX_RN_FRS_SUPPORTED==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_FRS_SUPPORTED==1) && (CX_NFUNC > 9)
// Parameter Type: Feature Setting
// 
// Function Readiness Status messaging supported for function PF9.
`define CX_RN_FRS_VALUE_9 1'h0


// Name:           CX_RN_RTR_VALID_9
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 9)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF9.
`define CX_RN_RTR_VALID_9 1'h0


// Name:           CX_RN_RTR_DL_UP_VALUE_9
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 9)
// Parameter Type: Register Default Setting
// 
// Register default for RTR DL Up Time field in PF9.
`define CX_RN_RTR_DL_UP_VALUE_9 12'h0


// Name:           CX_RN_RTR_RESET_VALUE_9
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 9)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF9.
`define CX_RN_RTR_RESET_VALUE_9 12'h0


// Name:           CX_RN_RTR_D3D0_VALUE_9
// Default:        0x0
// Values:         0x0, ..., 0x80a
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 9)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF9.
`define CX_RN_RTR_D3D0_VALUE_9 12'h0


// Name:           CX_RN_RTR_FLR_VALUE_9
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_FLR_ENABLE==1) && (CX_NFUNC > 9)
// Parameter Type: Register Default Setting
// 
// Register default for RTR FLR Time field in PF9.
`define CX_RN_RTR_FLR_VALUE_9 12'h0


// Name:           VF_RN_IMM_VALUE_9
// Default:        0x0 (CX_RN_IMM_VALUE_9 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 9))
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for VFs in PF9.
`define VF_RN_IMM_VALUE_9 1'h0


// Name:           VF_RN_IMM_D0_VALUE_9
// Default:        0x0 (CX_RN_IMM_D0_VALUE_9 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 9))
// Parameter Type: Register Default Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for VFs in PF9.
`define VF_RN_IMM_D0_VALUE_9 1'h0


// Name:           VF_RN_RTR_VALID_9
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 9) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF9 VFs.
`define VF_RN_RTR_VALID_9 1'h0


// Name:           VF_RN_RTR_RESET_VALUE_9
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_9)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 9) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF9 VFS.
`define VF_RN_RTR_RESET_VALUE_9 12'h0


// Name:           VF_RN_RTR_D3D0_VALUE_9
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_9)
// Values:         0x0, ..., 0x80a
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 9) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF9 VFS.
`define VF_RN_RTR_D3D0_VALUE_9 12'h0


// Name:           VF_RN_RTR_FLR_VALUE_9
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_9)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 9) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF9 VFs.
`define VF_RN_RTR_FLR_VALUE_9 12'h0


// Name:           EXT_VF_RN_RTR_VALID_9
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 9) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF9 VFs.
`define EXT_VF_RN_RTR_VALID_9 1'h0


// Name:           EXT_VF_RN_RTR_RESET_VALUE_9
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_9)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 9) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF9 VFS.
`define EXT_VF_RN_RTR_RESET_VALUE_9 12'h0


// Name:           EXT_VF_RN_RTR_D3D0_VALUE_9
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_9)
// Values:         0x0, ..., 0x80a
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 9) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF9 VFS.
`define EXT_VF_RN_RTR_D3D0_VALUE_9 12'h0


// Name:           EXT_VF_RN_RTR_FLR_VALUE_9
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_9)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 9) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF9 VFs.
`define EXT_VF_RN_RTR_FLR_VALUE_9 12'h0

//-/ END:   RN
//-/===========================================

//-/ START: LN CAPABILITIES CONFIGURATION
//-/===========================================


// Name:           CX_LN_REG_MAX_VALUE_9
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 9))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_64_SUPPORTED field in the LNR_CAP_OFF register for PF9.
`define CX_LN_REG_MAX_VALUE_9 5'h0


// Name:           CX_LN_128_SUPPORTED_VALUE_9
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 9))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_128_SUPPORTED field in the LNR_CAP_OFF register for PF9.
`define CX_LN_128_SUPPORTED_VALUE_9 1'h0


// Name:           CX_LN_64_SUPPORTED_VALUE_9
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 9))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_REGISTRATION_MAX field in the LNR_CAP_OFF register for PF9.
`define CX_LN_64_SUPPORTED_VALUE_9 1'h0

//-/ END:   LN CAPABILITIES CONFIGURATION
//-/===========================================




//-/==========================================
//-/ End FUNC9 Config
//-/==========================================

//-/===========================================
//-/ Function 10 Configuration Registers
//-/ ==========================================


// Name:         FUNC_10
// Default:      0 ((CX_NFUNC > 10) ? 1 : 0)
// Values:       0, 1
// 
// This parameter indicates that Function 10 is present
// `define FUNC_10

//-/===========================================
//-/ START: PCI-E CAPABILITIES CONFIGURATION


// Name:           PCIE_CAP_INT_MSG_NUM_10
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 10
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Message Number field in the PCI Express Capabilities Register. Function 10.
`define PCIE_CAP_INT_MSG_NUM_10 5'h0


// Name:           SLOT_IMPLEMENTED_10
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_NFUNC > 10))
// Parameter Type: Register Default Setting
// 
// Indicates that the PCI Express link associated with this Port is connected to a slot. Function 10.
`define SLOT_IMPLEMENTED_10 1'h0


// Name:           DEFAULT_PHANTOM_FUNC_SUPPORTED_10
// Default:        0x0
// Values:         0x0, ..., 0x3
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_PHANTOM_FUNC_SUPPORTED_10 2'h0


// Name:           DEFAULT_EXT_TAG_FIELD_SUPPORTED_10
// Default:        0x0 (DEFAULT_EXT_TAG_FIELD_SUPPORTED_0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 10
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_EXT_TAG_FIELD_SUPPORTED_10 1'h0



// Name:           DEFAULT_ATT_BUTT_PRE_10
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 10
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Button is present
`define DEFAULT_ATT_BUTT_PRE_10 1'h0


// Name:           DEFAULT_ATT_IND_PRE_10
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 10
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Indicator is present
`define DEFAULT_ATT_IND_PRE_10 1'h0


// Name:           DEFAULT_PWR_IND_PRE_10
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 10
// Parameter Type: Register Default Setting
// 
// When set indicates that a Power Indicator is present
`define DEFAULT_PWR_IND_PRE_10 1'h0


// Name:           DEFAULT_NO_SNOOP_SUPPORTED_10
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 10
// Parameter Type: Register Default Setting
// 
// Default value for the Enable No Snoop bit in the Device Control Register. Function 10.
`define DEFAULT_NO_SNOOP_SUPPORTED_10 1'h0


// Name:           ROOT_RCB_10
// Default:        64-bit
// Values:         64-bit (0x0), 128-bit (0x1)
// Parameter Type: Register Default Setting
// 
// Default value for the Read Completion Boundary (RCB) bit in the Link Control Register.
`define ROOT_RCB_10 1'h0


//-/ END:   PCI-E CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: MSI-X CAPABILITIES CONFIGURATION


// Name:           MSIX_TABLE_SIZE_10
// Default:        0x0
// Values:         0x0, ..., 0x7ff
// Enabled:        CX_NFUNC > 10 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the MSI-X Table Size field in the MSI-X Control Register. Function 10.
`define MSIX_TABLE_SIZE_10 11'h0


// Name:           MSIX_TABLE_BIR_10
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 10 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table BAR Indicator Register (BIR) field in the MSI-X Table Offset and BIR Register. Function 10.
`define MSIX_TABLE_BIR_10 3'h0


// Name:           MSIX_TABLE_OFFSET_10
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 10 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table Offset field in the MSI-X Table Offset and BIR Register. Function 10.
`define MSIX_TABLE_OFFSET_10 29'h0


// Name:           MSIX_PBA_BIR_10
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 10 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Pending Bit Array (PBA) BIR field in the MSI-X PBA Offset and BIR Register. Function 10.
`define MSIX_PBA_BIR_10 7'h0


// Name:           MSIX_PBA_OFFSET_10
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 10 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the PBA Offset field in the MSI-X PBA Offset and BIR Register. Function 10.
`define MSIX_PBA_OFFSET_10 29'h0

//-/ END:   MSI-X CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SATA CAPABILITIES CONFIGURATION


// Name:         SATA_HBA_OFFSET_10
// Default:      0x0
// Values:       0x0, ..., 0xfffff
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA Offset. Base address of the SATA HBA registers, 
//  as an offset from the base address of the BAR indicated 
//  by the SATA BAR field.
`define SATA_HBA_OFFSET_10 20'h0


// Name:         SATA_BAR_10
// Default:      0x0
// Values:       0x0, ..., 0xf
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA BAR. The bar that maps to SATA HBA registers,
`define SATA_BAR_10 4'h0

//-/ END:   SATA CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: AER CAPABILITIES CONFIGURATION


// Name:           DEFAULT_ECRC_CHK_CAP_10
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 10 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Check Capable bit in the Advanced Capabilities and Control Register. Function 10.
`define DEFAULT_ECRC_CHK_CAP_10 1'h1


// Name:           DEFAULT_ECRC_GEN_CAP_10
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 10 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Generation Capability bit in the Advanced Capabilities and Control Register. Function 10.
`define DEFAULT_ECRC_GEN_CAP_10 1'h1


// Name:           AER_INT_MSG_NUM_10
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Parameter Type: Register Default Setting
// 
// Default value for the Advanced Error Interrupt Message Number field of the Root Error Status Register. Function 10.
`define AER_INT_MSG_NUM_10 5'h0



// Name:           CX_HDR_LOG_DEPTH_10
// Default:        0x1
// Values:         0x1, 0x2, 0x4
// Enabled:        CX_NFUNC > 10 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Feature Setting.
// 
// Header Log Depth
`define CX_HDR_LOG_DEPTH_10 3'h1


`define CX_MULTIPLE_HDR_REC_CAP_10 1'h0

//-/ END:   AER CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PM CAPABILITIES CONFIGURATION


// Name:           PME_SUPPORT_10
// Default:        0x1b
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 10
// Parameter Type: Register Default Setting
// 
// Default value for the PME_Support field in the Power Management Capabilities Register. Function 10.
`define PME_SUPPORT_10 5'h1b


// Name:           D1_SUPPORT_10
// Default:        true
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 10
// Parameter Type: Register Default Setting
// 
// Default value for the D1 Support bit in the Power Management Capabilities Register. Function 10.
`define D1_SUPPORT_10 1'h1


// Name:           D2_SUPPORT_10
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 10
// Parameter Type: Register Default Setting
// 
// Default value for the D2 Support bit in the Power Management Capabilities Register. Function 10.
`define D2_SUPPORT_10 1'h0


// Name:           DEV_SPEC_INIT_10
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 10
// Parameter Type: Register Default Setting
// 
// Default value for the Device Specific Initialization (DSI) bit in the Power Management Capabilities Register. Function 
// 10.
`define DEV_SPEC_INIT_10 1'h0


// Name:           AUX_CURRENT_10
// Default:        375mA
// Values:         0mA (0x0), 55mA (0x1), 100mA (0x2), 160mA (0x3), 220mA (0x4), 270mA 
//                 (0x5), 320mA (0x6), 375mA (0x7)
// Enabled:        CX_NFUNC > 10
// Parameter Type: Register Default Setting
// 
// Default value for the Aux Current field in the Power Management Capabilities Register. Function 10.
`define AUX_CURRENT_10 3'h7


// Name:           DEFAULT_NO_SOFT_RESET_10
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 10
// Parameter Type: Register Default Setting
// 
// Default value for the No Soft Reset bit in the Power Management Control and Status Register. When set, you should not 
// reset any controller registers when transitioning from D3hot to D0. Therefore, you should not assert the non_sticky_rst_n 
// and sticky_rst_n inputs. Function 10.
`define DEFAULT_NO_SOFT_RESET_10 1'h0

//-/ END:   PM CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PCI BASIC CONFIGURATION


// Name:           CX_DEVICE_ID_10
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 10
// Parameter Type: Register Default Setting
// 
// Default value for the Device ID field in the Device ID and Vendor ID Register. Function 10.
`define CX_DEVICE_ID_10 16'h0


// Name:           CX_VENDOR_ID_10
// Default:        0x16c3
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 10
// Parameter Type: Register Default Setting
// 
// Default value for the Vendor ID field in the Device ID and Vendor ID Register. Function 10.
`define CX_VENDOR_ID_10 16'h16c3


// Name:           CX_REVISION_ID_10
// Default:        0x1
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 10
// Parameter Type: Register Default Setting
// 
// Default value for the Revision ID field in the Revision ID Register. Function 10.
`define CX_REVISION_ID_10 8'h1


// Name:           SUBSYS_DEV_ID_10
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 10
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 10.
`define SUBSYS_DEV_ID_10 16'h0


// Name:           SUBSYS_VENDOR_ID_10
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 10
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem Vendor ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 10.
`define SUBSYS_VENDOR_ID_10 16'h0


// Name:           BASE_CLASS_CODE_10
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 10
// Parameter Type: Register Default Setting
// 
// Default value for the Base Class Code field in the Class Code Register. Function 10.
`define BASE_CLASS_CODE_10 8'h0


// Name:           SUB_CLASS_CODE_10
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 10
// Parameter Type: Register Default Setting
// 
// Default value for the Subclass Code field in the Class Code Register. Function 10.
`define SUB_CLASS_CODE_10 8'h0


// Name:           IF_CODE_10
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 10
// Parameter Type: Register Default Setting
// 
// Default value for the Programming Interface field in the Class Code Register. Function 10.
`define IF_CODE_10 8'h0


// Name:           CARDBUS_CIS_PTR_10
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 10
// Parameter Type: Register Default Setting
// 
// Default value for the CardBus CIS Pointer Register. Function 10.
`define CARDBUS_CIS_PTR_10 16'h0


// Name:           INT_PIN_MAPPING_10
// Default:        INTA
// Values:         None (0x0), INTA (0x1), INTB (0x2), INTC (0x3), INTD (0x4)
// Enabled:        CX_NFUNC > 10
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Pin Register. Function 10.
`define INT_PIN_MAPPING_10 8'h1


// Name:           IO_DECODE_32_10
// Default:        16-bit
// Values:         16-bit (0x0), 32-bit (0x1)
// Enabled:        CX_NFUNC > 10
// Parameter Type: Register Default Setting
// 
// Default value for the 32-Bit I/O Space bit in the I/O Base and I/O Limit Register. Function 10.
`define IO_DECODE_32_10 1'h0


// Name:           MEM_DECODE_64_10
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x1)
// Enabled:        CX_NFUNC > 10
// Parameter Type: Register Default Setting
// 
// Default value for the 64-Bit Memory Addressing bit in the Prefetchable Memory Base and Limit Register. Function 10.
`define MEM_DECODE_64_10 1'h0


// Name:           ROM_BAR_ENABLED_10
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 10
// Parameter Type: Register Default Setting
// 
// Include the expansion ROM BAR registers. Function 10.
`define ROM_BAR_ENABLED_10 1'h1


`define DEFAULT_ROM_BAR_ENABLED_10 1'h1


// Name:           ROM_MASK_10
// Default:        0xffff
// Values:         0x7ff, ..., 0xffffff
// Enabled:        CX_NFUNC > 10 && ROM_BAR_ENABLED_10==1
// Parameter Type: Register Default Setting
// 
// Determines the default of the Expansion ROM BAR Mask register. Function 10. 
//  - The BAR Mask register specifies which bits of the Expansion ROM BAR are non-writable by host software, which 
//  determines the size of the BAR. 
//  - The maximum value for ROM_MASK_N is 0xFFFFFF because the maximum space that can be claimed by an Expansion ROM BAR 
//  is 16 MB. 
//  - For example: 32'hFFFF =BAR size of 2^16.
`define ROM_MASK_10 32'hffff


// Name:           ROM_MASK_WRITABLE_10
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 10 && ROM_BAR_ENABLED_10==1
// Parameter Type: Feature Setting
// 
// Determines if the Expansion ROM BAR Mask register for function 10 is writable by application software. If writing to a 
// Expansion ROM BAR Mask register is enabled, your application can write to the Expansion ROM BAR Mask register through the 
// DBI by asserting dbi_cs2 in addition to dbi_cs.
`define ROM_MASK_WRITABLE_10 1'h0


// Name:           ROM_FUNC10_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 10 && ROM_BAR_ENABLED_10==1 && TRGT1_POPULATE==1))
// Parameter Type: Register Default Setting
// 
// Direct incoming requests that pass filtering and match the Expansion ROM BAR of function 10 to either RTRGT0 or RTRGT1. 
//  - For example, setting ROM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for the Expansion ROM BAR of function 
//  0 to RTRGT1. 
//  - If TRGT1_POPULATE =0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define ROM_FUNC10_TARGET_MAP 1'h1


// Name:           CX_PCI_HEADER_DEFAULTS_VISIBLE_10
// Default:        0
// Values:         0, 1
// Parameter Type: Register Default Setting
// 
// Select here if you want to configure the defaults for the other PCI Standard Header registers for function 10. 
//  An extra window will appear under this page. To access it, click the plus/minus symbol in the hierarchy view on the 
//  left panel. 
//  This is optional but not usually recommended. 
//  You can also change these register defaults using the DBI before (or after) the link comes up.
`define CX_PCI_HEADER_DEFAULTS_VISIBLE_10 0

//-/ END:   PCI BASIC CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: BAR CONFIGURATION


// Name:           BAR0_ENABLED_10
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 10
// Parameter Type: Feature Setting
// 
// Include the BAR0 registers for function 10.
`define BAR0_ENABLED_10 1'h1


`define DEFAULT_BAR0_ENABLED_10 1'h1


// Name:           MEM0_SPACE_DECODER_10
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 10 && BAR0_ENABLED_10==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 10.
`define MEM0_SPACE_DECODER_10 1'h0


// Name:           PREFETCHABLE0_10
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 10 && BAR0_ENABLED_10==1 && MEM0_SPACE_DECODER_10==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 10.
`define PREFETCHABLE0_10 1'h0


// Name:           BAR0_TYPE_10
// Default:        64-bit ((MEM0_SPACE_DECODER_10==1 || BAR0_ENABLED_10==0) ? 0 : 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 10 && BAR0_ENABLED_10==1 && MEM0_SPACE_DECODER_10==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 10.
`define BAR0_TYPE_10 2'h2


// Name:           BAR0_SIZING_SCHEME_10
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 10 && BAR0_ENABLED_10==1
// Parameter Type: Feature Setting
// 
// BAR0 Function 10 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR0_SIZING_SCHEME_10 2'h0


// Name:           CX_BAR0_RESIZABLE_10
// Default:        0x0 ((BAR0_SIZING_SCHEME_10==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR0_ENABLED_10==1) && (MEM0_SPACE_DECODER_10==0)
// Parameter Type: Feature Setting
// 
// Defines BAR0 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR0 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR0_RESIZABLE_10 1'h0


// Name:           CX_BAR0_RESOURCE_AVAIL_10
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 10 && CX_BAR0_RESIZABLE_10==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR0 of function 10. 
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
// Example: 0x00000030 indicates that BAR0 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR0_RESOURCE_AVAIL_10 64'h10


// Name:           BAR0_MASK_WRITABLE_10
// Default:        0x0 ((BAR0_ENABLED_10==1 && BAR0_SIZING_SCHEME_10 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 10 && BAR0_ENABLED_10==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR0 Mask through DBI
`define BAR0_MASK_WRITABLE_10 1'h0


// Name:           BAR0_MASK_10
// Default:        0xfffff (CX_BAR0_RESIZABLE_10==1 ? [calc_bar_mask 
//                 CX_BAR0_RESOURCE_AVAIL_10] : MEM0_SPACE_DECODER_10==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 10 && BAR0_ENABLED_10==1 && MEM0_SPACE_DECODER_10==0 && 
//                 CX_BAR0_RESIZABLE_10==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR0 Mask register of function 10. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR0_MASK_10 64'hfffff


// Name:           MEM_FUNC10_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 10 && BAR0_ENABLED_10==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_0 of function 10 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming Requests for BAR0 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC10_BAR0_TARGET_MAP 1'h1


// Name:           BAR1_ENABLED_10
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 10 && BAR0_TYPE_10==0
// Parameter Type: Feature Setting
// 
// Include the BAR1 registers for function 10.
`define BAR1_ENABLED_10 1'h0


`define DEFAULT_BAR1_ENABLED_10 1'h0


// Name:           MEM1_SPACE_DECODER_10
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 10 && BAR1_ENABLED_10==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 10.
`define MEM1_SPACE_DECODER_10 1'h0


// Name:           PREFETCHABLE1_10
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 10 && BAR1_ENABLED_10==1 && MEM1_SPACE_DECODER_10==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 10.
`define PREFETCHABLE1_10 1'h0


// Name:           BAR1_TYPE_10
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 10.
`define BAR1_TYPE_10 2'h0


// Name:           BAR1_SIZING_SCHEME_10
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 10 && BAR1_ENABLED_10==1
// Parameter Type: Feature Setting
// 
// BAR1 Function 10 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR1_SIZING_SCHEME_10 2'h0


// Name:           CX_BAR1_RESIZABLE_10
// Default:        0x0 ((BAR1_SIZING_SCHEME_10==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR1_ENABLED_10==1) && (MEM1_SPACE_DECODER_10==0)
// Parameter Type: Feature Setting
// 
// Defines BAR1 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR1 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR1_RESIZABLE_10 1'h0


// Name:           CX_BAR1_RESOURCE_AVAIL_10
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 10 && CX_BAR1_RESIZABLE_10==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR1 of function 10. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR1 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR1_RESOURCE_AVAIL_10 32'h10


// Name:           BAR1_MASK_WRITABLE_10
// Default:        0x0 ((BAR1_ENABLED_10==1 && BAR1_SIZING_SCHEME_10 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 10 && BAR1_ENABLED_10==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR1 Mask through DBI
`define BAR1_MASK_WRITABLE_10 1'h0


// Name:           BAR1_MASK_10
// Default:        0xffff (CX_BAR1_RESIZABLE_10==1 ? [calc_bar_mask 
//                 CX_BAR1_RESOURCE_AVAIL_10] : MEM1_SPACE_DECODER_10==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 10 && BAR1_ENABLED_10==1 && MEM1_SPACE_DECODER_10==0 && 
//                 CX_BAR1_RESIZABLE_10==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR1 Mask register of function 10. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR1_MASK_10 32'hffff


// Name:           MEM_FUNC10_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 10 && BAR1_ENABLED_10==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_1 of function 10 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR1_TARGET_MAP to 1 maps all incoming Requests for BAR1 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC10_BAR1_TARGET_MAP 1'h1


// Name:           BAR2_ENABLED_10
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 10
// Parameter Type: Feature Setting
// 
// Include the BAR2 registers for function 10.
`define BAR2_ENABLED_10 1'h1


`define DEFAULT_BAR2_ENABLED_10 1'h1


// Name:           MEM2_SPACE_DECODER_10
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 10 && BAR2_ENABLED_10==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 10.
`define MEM2_SPACE_DECODER_10 1'h0


// Name:           PREFETCHABLE2_10
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 10 && BAR2_ENABLED_10==1 && MEM2_SPACE_DECODER_10==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 10.
`define PREFETCHABLE2_10 1'h0


// Name:           BAR2_TYPE_10
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 10 && BAR2_ENABLED_10==1 && MEM2_SPACE_DECODER_10==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 10.
`define BAR2_TYPE_10 2'h0


// Name:           BAR2_SIZING_SCHEME_10
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 10 && BAR2_ENABLED_10==1
// Parameter Type: Feature Setting
// 
// BAR2 Function 10 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR2_SIZING_SCHEME_10 2'h0


// Name:           CX_BAR2_RESIZABLE_10
// Default:        0x0 ((BAR2_SIZING_SCHEME_10==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR2_ENABLED_10==1) && (MEM2_SPACE_DECODER_10==0)
// Parameter Type: Feature Setting
// 
// Defines BAR2 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR2 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR2_RESIZABLE_10 1'h0


// Name:           CX_BAR2_RESOURCE_AVAIL_10
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 10 && CX_BAR2_RESIZABLE_10==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR2 of function 10. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR2 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR2_RESOURCE_AVAIL_10 64'h10


// Name:           BAR2_MASK_WRITABLE_10
// Default:        0x0 ((BAR2_ENABLED_10==1 && BAR2_SIZING_SCHEME_10 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 10 && BAR2_ENABLED_10==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR2 Mask through DBI
`define BAR2_MASK_WRITABLE_10 1'h0


// Name:           BAR2_MASK_10
// Default:        0xfffff (CX_BAR2_RESIZABLE_10==1 ? [calc_bar_mask 
//                 CX_BAR2_RESOURCE_AVAIL_10] : MEM2_SPACE_DECODER_10==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 10 && BAR2_ENABLED_10==1 && MEM2_SPACE_DECODER_10==0 && 
//                 CX_BAR2_RESIZABLE_10==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR2 Mask register of function 10. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR2_MASK_10 64'hfffff


// Name:           MEM_FUNC10_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 10 && BAR2_ENABLED_10==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_2 of function 10 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR2_TARGET_MAP to 1 maps all incoming requests for BAR2 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC10_BAR2_TARGET_MAP 1'h1


// Name:           BAR3_ENABLED_10
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 10 && BAR2_TYPE_10==0
// Parameter Type: Feature Setting
// 
// Include the BAR3 registers for function 10.
`define BAR3_ENABLED_10 1'h0



`define DEFAULT_BAR3_ENABLED_10 1'h0


// Name:           MEM3_SPACE_DECODER_10
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 10 && BAR3_ENABLED_10==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 10.
`define MEM3_SPACE_DECODER_10 1'h0


// Name:           PREFETCHABLE3_10
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 10 && BAR3_ENABLED_10==1 && MEM3_SPACE_DECODER_10==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 10.
`define PREFETCHABLE3_10 1'h0


// Name:           BAR3_TYPE_10
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 10.
`define BAR3_TYPE_10 2'h0


// Name:           BAR3_SIZING_SCHEME_10
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 10 && BAR3_ENABLED_10==1
// Parameter Type: Feature Setting
// 
// BAR3 Function 10 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR3_SIZING_SCHEME_10 2'h0


// Name:           CX_BAR3_RESIZABLE_10
// Default:        0x0 ((BAR3_SIZING_SCHEME_10==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR3_ENABLED_10==1) && (MEM3_SPACE_DECODER_10==0)
// Parameter Type: Feature Setting
// 
// Defines BAR3 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR3 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR3_RESIZABLE_10 1'h0


// Name:           CX_BAR3_RESOURCE_AVAIL_10
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 10 && CX_BAR3_RESIZABLE_10==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR3 of function 10. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR3 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR3_RESOURCE_AVAIL_10 32'h10


// Name:           BAR3_MASK_WRITABLE_10
// Default:        0x0 ((BAR3_ENABLED_10==1 && BAR3_SIZING_SCHEME_10 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 10 && BAR3_ENABLED_10==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR3 Mask through DBI
`define BAR3_MASK_WRITABLE_10 1'h0


// Name:           BAR3_MASK_10
// Default:        0xffff (CX_BAR3_RESIZABLE_10==1 ? [calc_bar_mask 
//                 CX_BAR3_RESOURCE_AVAIL_10] : MEM3_SPACE_DECODER_10==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 10 && BAR3_ENABLED_10==1 && MEM3_SPACE_DECODER_10==0 && 
//                 CX_BAR3_RESIZABLE_10==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR3 Mask register of function 10. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR3_MASK_10 32'hffff


// Name:           MEM_FUNC10_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 10 && BAR3_ENABLED_10==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_3 of function 10 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR3_TARGET_MAP to 1 maps all incoming requests for BAR3 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC10_BAR3_TARGET_MAP 1'h1


// Name:           BAR4_ENABLED_10
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 10
// Parameter Type: Feature Setting
// 
// Include the BAR4 registers for function 10.
`define BAR4_ENABLED_10 1'h1


`define DEFAULT_BAR4_ENABLED_10 1'h1



// Name:           MEM4_SPACE_DECODER_10
// Default:        I/O (BAR4_ENABLED_10==1)
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 10 && BAR4_ENABLED_10==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 10.
`define MEM4_SPACE_DECODER_10 1'h1


// Name:           PREFETCHABLE4_10
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 10 && BAR4_ENABLED_10==1 && MEM4_SPACE_DECODER_10==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 10.
`define PREFETCHABLE4_10 1'h0


// Name:           BAR4_TYPE_10
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 10 && BAR4_ENABLED_10==1 && MEM4_SPACE_DECODER_10==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 10.
`define BAR4_TYPE_10 2'h0


// Name:           BAR4_SIZING_SCHEME_10
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 10 && BAR4_ENABLED_10==1
// Parameter Type: Feature Setting
// 
// BAR4  Function 10 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR4_SIZING_SCHEME_10 2'h0


// Name:           CX_BAR4_RESIZABLE_10
// Default:        0x0 ((BAR4_SIZING_SCHEME_10==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR4_ENABLED_10==1) && (MEM4_SPACE_DECODER_10==0)
// Parameter Type: Feature Setting
// 
// Defines BAR4 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR4 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR4_RESIZABLE_10 1'h0


// Name:           CX_BAR4_RESOURCE_AVAIL_10
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 10 &&  CX_BAR4_RESIZABLE_10==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR4 of function 10. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR4 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR4_RESOURCE_AVAIL_10 64'h10


// Name:           BAR4_MASK_WRITABLE_10
// Default:        0x0 ((BAR4_ENABLED_10==1 && BAR4_SIZING_SCHEME_10 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 10 && BAR4_ENABLED_10==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR4 Mask through DBI
`define BAR4_MASK_WRITABLE_10 1'h0


// Name:           BAR4_MASK_10
// Default:        0xff (CX_BAR4_RESIZABLE_10==1 ? [calc_bar_mask 
//                 CX_BAR4_RESOURCE_AVAIL_10] : MEM4_SPACE_DECODER_10==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 10 && BAR4_ENABLED_10==1 && MEM4_SPACE_DECODER_10==0 && 
//                 CX_BAR4_RESIZABLE_10==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR4 Mask register of function 10. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR4_MASK_10 64'hff


// Name:           MEM_FUNC10_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 10 && BAR4_ENABLED_10==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_4 of function 10 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR4_TARGET_MAP to 1 maps all incoming requests for BAR4 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC10_BAR4_TARGET_MAP 1'h1


// Name:           BAR5_ENABLED_10
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 10 && BAR4_TYPE_10==0
// Parameter Type: Feature Setting
// 
// Include the BAR5 registers for function 10.
`define BAR5_ENABLED_10 1'h0


`define DEFAULT_BAR5_ENABLED_10 1'h0


// Name:           MEM5_SPACE_DECODER_10
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 10 && BAR5_ENABLED_10==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 10.
`define MEM5_SPACE_DECODER_10 1'h0


// Name:           PREFETCHABLE5_10
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 10 && BAR5_ENABLED_10==1 && MEM5_SPACE_DECODER_10==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 10.
`define PREFETCHABLE5_10 1'h0


// Name:           BAR5_TYPE_10
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 10.
`define BAR5_TYPE_10 2'h0


// Name:           BAR5_SIZING_SCHEME_10
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 10 && BAR5_ENABLED_10==1
// Parameter Type: Feature Setting
// 
// BAR5  Function 10 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR5_SIZING_SCHEME_10 2'h0


// Name:           CX_BAR5_RESIZABLE_10
// Default:        0x0 ((BAR5_SIZING_SCHEME_10==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR5_ENABLED_10==1) && (MEM5_SPACE_DECODER_10==0)
// Parameter Type: Feature Setting
// 
// Defines BAR5 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR5 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR5_RESIZABLE_10 1'h0


// Name:           CX_BAR5_RESOURCE_AVAIL_10
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 10 && CX_BAR5_RESIZABLE_10==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR5 of function 10. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR5 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR5_RESOURCE_AVAIL_10 32'h10


// Name:           BAR5_MASK_WRITABLE_10
// Default:        0x0 ((BAR5_ENABLED_10==1 && BAR5_SIZING_SCHEME_10 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 10 && BAR5_ENABLED_10==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR5 Mask through DBI
`define BAR5_MASK_WRITABLE_10 1'h0


// Name:           BAR5_MASK_10
// Default:        0xffff (CX_BAR5_RESIZABLE_10==1 ? [calc_bar_mask 
//                 CX_BAR5_RESOURCE_AVAIL_10] : MEM5_SPACE_DECODER_10==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 10 && BAR5_ENABLED_10==1 && MEM5_SPACE_DECODER_10==0 && 
//                 CX_BAR5_RESIZABLE_10==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR5 Mask register of function 10. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR5_MASK_10 32'hffff


// Name:           MEM_FUNC10_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 10 && BAR5_ENABLED_10==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_5 of function 10 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR5_TARGET_MAP to 1 maps all incoming requests for BAR5 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC10_BAR5_TARGET_MAP 1'h1


`define FUNC10_BARSIZE_32 128'h0


`define FUNC10_BARSIZE 128'h0


`define FUNC10_BAR0_BARSIZE_TRGT1 128'h0


`define FUNC10_BAR2_BARSIZE_TRGT1 128'h0


`define FUNC10_BAR4_BARSIZE_TRGT1 128'h0


`define FUNC10_BAR0_TRGT1_ADDR_WIDTH 1


`define FUNC10_BAR2_TRGT1_ADDR_WIDTH 1


`define FUNC10_BAR4_TRGT1_ADDR_WIDTH 1


// Name:         CX_NUM_RBARS_10
// Default:      0 ([calc_num_rbars CX_BAR0_RESIZABLE_10 CX_BAR1_RESIZABLE_10 
//               CX_BAR2_RESIZABLE_10 CX_BAR3_RESIZABLE_10 CX_BAR4_RESIZABLE_10 
//               CX_BAR5_RESIZABLE_10])
// Values:       -2147483648, ..., 2147483647
// 
// Number of resizable BARs
`define CX_NUM_RBARS_10 0

//-/ END:   BAR CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SR-IOV CAPABILITIES CONFIGURATION


// Name:           CX_VF_DEPENDENCY_LINK_10
// Default:        0x10
// Values:         0x0, ..., 0xff
// Enabled:        CX_VF_DEPENDENCY_LINK_SUPP && (CX_NFUNC > 10) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Specifies the 8-bit VF dependency link for PF10. Valid only if CX_VF_DEPENDENCY_LINK_SUPP=1.
`define CX_VF_DEPENDENCY_LINK_10 8'h10


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER1_10
// Default:        0x2 ((CX_NFUNC>=17) ? 32 : (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : 
//                 (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF10 in an ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER1_10 16'h2


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER0_10
// Default:        0x100
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF10 
//  in a non-ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER0_10 16'h100


// Name:           VF_STRIDE_ARI_CAP_HIER1_10
// Default:        0x2 (CX_VF_STRIDE_ALWAYS_ONE) ? 1 : ((CX_NFUNC>=17) ? 32 : 
//                 (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF10 in an ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER1_10 16'h2


// Name:           VF_STRIDE_ARI_CAP_HIER0_10
// Default:        0x100 ((CX_VF_STRIDE_ALWAYS_ONE) ? 0x0001 : 0x0100)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF10 in a non-ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER0_10 16'h100


// Name:           CX_VF_DEVICE_ID_10
// Default:        0x0 (CX_DEVICE_ID_10)
// Values:         0x0, ..., 0xffff
// Enabled:        (CX_NFUNC > 10) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 16-bit virtual function Device ID for PF10. 
//  It might be different from the physical function's.
`define CX_VF_DEVICE_ID_10 16'h0


// Name:           CX_VF_SUPP_PAGE_SIZE_10
// Default:        0x553
// Values:         0x553, ..., 0xffff
// Enabled:        (CX_NFUNC > 10) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 32-bit supported page sizes for virtual functions for PF10
`define CX_VF_SUPP_PAGE_SIZE_10 32'h553


// Name:           CX_ARI_CAP_HIER_PRSVD_10
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Specifies if ARI Capable Hierarchy bit is preserved across certain power state transitions 
//  Only present in PF0. Read Only Zero in this PF10.
`define CX_ARI_CAP_HIER_PRSVD_10 1'h0

//-/===========================================
//-/ START: VF BAR CONFIGURATION


// Name:           VF_BAR0_ENABLED_10
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 10)
// Parameter Type: Feature Setting
// 
// Include the VF BAR0 registers in PF10
`define VF_BAR0_ENABLED_10 1'h1


`define VF_DEFAULT_BAR0_ENABLED_10 1'h1


// Name:           VF_MEM0_SPACE_DECODER_10
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR0_ENABLED_10 && CX_SRIOV_ENABLE && (CX_NFUNC > 10)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Space Indicator 
//  ALWAYS set to Memory for Virtual Functions
`define VF_MEM0_SPACE_DECODER_10 1'h0


// Name:           VF_PREFETCHABLE0_10
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_10==1 && VF_MEM0_SPACE_DECODER_10==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 10)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Prefetchable 
//  When set indicates VF BAR0 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE0_10 1'h0


// Name:           VF_BAR0_TYPE_10
// Default:        64-bit ((VF_MEM0_SPACE_DECODER_10==1 || VF_BAR0_ENABLED_10==0) ? 0 
//                 : 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR0_ENABLED_10==1 && VF_MEM0_SPACE_DECODER_10==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 10)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 10; (bits [2:1] for a memory BAR).
`define VF_BAR0_TYPE_10 2'h2


// Name:           VF_BAR0_MASK_WRITABLE_10
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_10==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 10)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR0_MASK_WRITABLE_10 1'h0


// Name:           VF_BAR0_MASK_10
// Default:        0xfffff (VF_MEM0_SPACE_DECODER_10==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR0_ENABLED_10==1 && VF_MEM0_SPACE_DECODER_10==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 10)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Mask 
//  Determines the default of the VF BAR Mask register for PF10. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR0_MASK_10 64'hfffff


// Name:           VF_MEM_FUNC10_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR0_ENABLED_10==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE 
//                 && (CX_NFUNC > 10)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF10 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC10_BAR0_TARGET_MAP 1'h1


// Name:           VF_BAR1_ENABLED_10
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        (VF_BAR0_TYPE_10==0)  && CX_SRIOV_ENABLE && (CX_NFUNC > 10)
// Parameter Type: Feature Setting
// 
// Include the VF BAR1 registers in PF10
`define VF_BAR1_ENABLED_10 1'h0


`define VF_DEFAULT_BAR1_ENABLED_10 1'h0


// Name:           VF_MEM1_SPACE_DECODER_10
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR1_ENABLED_10==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 10)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Space Indicator
`define VF_MEM1_SPACE_DECODER_10 1'h0


// Name:           VF_PREFETCHABLE1_10
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_10==1 && VF_MEM1_SPACE_DECODER_10==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 10)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Prefetchable 
//  When set indicates VF BAR1 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE1_10 1'h0


// Name:           VF_BAR1_TYPE_10
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 10; (bits [2:1] for a memory BAR).
`define VF_BAR1_TYPE_10 2'h0


// Name:           VF_BAR1_MASK_WRITABLE_10
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_10==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 10)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR1_MASK_WRITABLE_10 1'h0


// Name:           VF_BAR1_MASK_10
// Default:        0xffff (VF_MEM1_SPACE_DECODER_10==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR1_ENABLED_10==1 && VF_MEM1_SPACE_DECODER_10==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 10)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Mask 
//  Determines the default of the VF BAR Mask register for PF10. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR1_MASK_10 32'hffff


// Name:           VF_MEM_FUNC10_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR1_ENABLED_10==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE 
//                 && (CX_NFUNC > 10)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF10 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC10_BAR1_TARGET_MAP 1'h1


// Name:           VF_BAR2_ENABLED_10
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 10)
// Parameter Type: Feature Setting
// 
// Include the VF BAR2 registers in PF10
`define VF_BAR2_ENABLED_10 1'h1


`define VF_DEFAULT_BAR2_ENABLED_10 1'h1


// Name:           VF_MEM2_SPACE_DECODER_10
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR2_ENABLED_10==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 10)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Memory Space Indicator
`define VF_MEM2_SPACE_DECODER_10 1'h0


// Name:           VF_PREFETCHABLE2_10
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_10==1 && VF_MEM2_SPACE_DECODER_10==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 10)
// Parameter Type: Register Default Setting
// 
// BAR2 Memory Prefetchable 
//  When set indicates VF BAR2 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE2_10 1'h0


// Name:           VF_BAR2_TYPE_10
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR2_ENABLED_10==1 && VF_MEM2_SPACE_DECODER_10==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 10)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 10; (bits [2:1] for a memory BAR).
`define VF_BAR2_TYPE_10 2'h0


// Name:           VF_BAR2_MASK_WRITABLE_10
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_10==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 10)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR2_MASK_WRITABLE_10 1'h0


// Name:           VF_BAR2_MASK_10
// Default:        0xfffff (VF_MEM2_SPACE_DECODER_10==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR2_ENABLED_10==1 && VF_MEM2_SPACE_DECODER_10==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 10)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Mask 
//  Determines the default of the VF BAR Mask register for PF10. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR2_MASK_10 64'hfffff


// Name:           VF_MEM_FUNC10_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR2_ENABLED_10==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 10)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF10 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC10_BAR2_TARGET_MAP 1'h1


// Name:           VF_BAR3_ENABLED_10
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_TYPE_10==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 10)
// Parameter Type: Feature Setting
// 
// Include the VF BAR3 registers in PF10
`define VF_BAR3_ENABLED_10 1'h0


`define VF_DEFAULT_BAR3_ENABLED_10 1'h0


// Name:           VF_MEM3_SPACE_DECODER_10
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR3_ENABLED_10==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 10)
// Parameter Type: Register Default Setting
// 
// BAR3 Memory Space Indicator
`define VF_MEM3_SPACE_DECODER_10 1'h0


// Name:           VF_PREFETCHABLE3_10
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_10==1 && VF_MEM3_SPACE_DECODER_10==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 10)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Memory Prefetchable 
//  When set indicates VF BAR3 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE3_10 1'h0


// Name:           VF_BAR3_TYPE_10
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 10; (bits [2:1] for a memory BAR).
`define VF_BAR3_TYPE_10 2'h0


// Name:           VF_BAR3_MASK_WRITABLE_10
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_10==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 10)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR3_MASK_WRITABLE_10 1'h0


// Name:           VF_BAR3_MASK_10
// Default:        0xffff (VF_MEM3_SPACE_DECODER_10==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR3_ENABLED_10==1 && VF_MEM3_SPACE_DECODER_10==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 10)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Mask 
//  Determines the default of the VF BAR Mask register for PF10. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR3_MASK_10 32'hffff


// Name:           VF_MEM_FUNC10_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR3_ENABLED_10==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 10)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF10 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC10_BAR3_TARGET_MAP 1'h1


// Name:           VF_BAR4_ENABLED_10
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 10)
// Parameter Type: Feature Setting
// 
// Include the VF BAR4 registers in PF10
`define VF_BAR4_ENABLED_10 1'h1


`define VF_DEFAULT_BAR4_ENABLED_10 1'h1


// Name:           VF_MEM4_SPACE_DECODER_10
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR4_ENABLED_10==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 10)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Space Indicator
`define VF_MEM4_SPACE_DECODER_10 1'h0


// Name:           VF_PREFETCHABLE4_10
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_10==1 && VF_MEM4_SPACE_DECODER_10==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 10)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Prefetchable 
//  When set indicates VF BAR4 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE4_10 1'h0


// Name:           VF_BAR4_TYPE_10
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR4_ENABLED_10==1 && VF_MEM4_SPACE_DECODER_10==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 10)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 10; (bits [2:1] for a memory BAR).
`define VF_BAR4_TYPE_10 2'h0


// Name:           VF_BAR4_MASK_WRITABLE_10
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_10==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 10)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR4_MASK_WRITABLE_10 1'h0


// Name:           VF_BAR4_MASK_10
// Default:        0xfff (VF_MEM4_SPACE_DECODER_10==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR4_ENABLED_10==1 && VF_MEM4_SPACE_DECODER_10==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 10)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Mask 
//  Determines the default of the VF BAR Mask register for PF10. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR4_MASK_10 64'hfff


// Name:           VF_MEM_FUNC10_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR4_ENABLED_10==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 10)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF10 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC10_BAR4_TARGET_MAP 1'h1


// Name:           VF_BAR5_ENABLED_10
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_TYPE_10==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 10)
// Parameter Type: Feature Setting
// 
// Include the VF BAR5 registers in PF10
`define VF_BAR5_ENABLED_10 1'h0


`define VF_DEFAULT_BAR5_ENABLED_10 1'h0


// Name:           VF_MEM5_SPACE_DECODER_10
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR5_ENABLED_10==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 10)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Space Indicator
`define VF_MEM5_SPACE_DECODER_10 1'h0


// Name:           VF_PREFETCHABLE5_10
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_10==1 && VF_MEM5_SPACE_DECODER_10==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 10)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Prefetchable 
//  When set indicates VF BAR5 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE5_10 1'h0


// Name:           VF_BAR5_TYPE_10
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 10; (bits [2:1] for a memory BAR).
`define VF_BAR5_TYPE_10 2'h0


// Name:           VF_BAR5_MASK_WRITABLE_10
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_10==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 10)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR5_MASK_WRITABLE_10 1'h0


// Name:           VF_BAR5_MASK_10
// Default:        0xffff (VF_MEM5_SPACE_DECODER_10==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR5_ENABLED_10==1 && VF_MEM5_SPACE_DECODER_10==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 10)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Mask 
//  Determines the default of the VF BAR Mask register for PF10. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR5_MASK_10 32'hffff


// Name:           VF_MEM_FUNC10_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR5_ENABLED_10==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 10)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF10 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC10_BAR5_TARGET_MAP 1'h1


`define VF_FUNC10_BARSIZE_32 128'h101000


`define VF_FUNC10_BARSIZE 128'h201000

//-/ END:   VF BAR CONFIGURATION
//-/===========================================

//-/ END:   SR-IOV CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: TPH CAPABILITIES CONFIGURATION


// Name:           TPH_IVEC_10
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Interrupt Vector Mode. If set indicates that the function supports the Interrupt Vector 
// Mode of operation. Function 10.
`define TPH_IVEC_10 1'h0


// Name:           TPH_DS_10
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Device Specific Mode. If set indicates that the function supports the Device Specific Mode 
// of operation. Function 10.
`define TPH_DS_10 1'h0


// Name:           TPH_ST_TABLE_LOC_10
// Default:        Not Present
// Values:         Not Present (0), TPH Requester Capability Structure (1), MSI-X 
//                 Table Structure (2)
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_DS_10 || TPH_IVEC_10))
// Parameter Type: Feature Setting
// 
// TLP Processing Hints Steering Tag Table Location. Value indicates if and where the ST Table is located. Function 10.
`define TPH_ST_TABLE_LOC_10 0

//located in the TPH Requester Capability structure. Please reduce the ST Table Size for this mode of operation"

// Name:           TPH_ST_TABLE_SIZE_10
// Default:        1
// Values:         1, ..., 2048
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_ST_TABLE_LOC_10 != 0))
// Parameter Type: Feature Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define TPH_ST_TABLE_SIZE_10 1


`define TPH_ST_TABLE_DEPTH_10 0

//-/ END:   TPH CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: ATS CAPABILITIES CONFIGURATION


// Name:           ATS_INV_Q_DPTH_10
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// The number of Invalidate Requests that the Function can accept before putting backpressure on the upstream connection. A 
// value of 0 indicates the function can accept 32 Invalidate requests. Function 10.
`define ATS_INV_Q_DPTH_10 5'd0


// Name:           ATS_STU_10
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// This value indicates to the Function the minimum number of 4096-byte blocks that is indicated in a Translation 
// Completion or Invalidate Request. This is a power of 2 multiplier and the number of blocks is 2^STU. A value of 0 indicates 1 block 
// and a value of 31 indicates 2^31 blocks (or 8 TB total). Function 10.
`define ATS_STU_10 5'd0

//-/ END:   ATS CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PRS CAPABILITIES CONFIGURATION


// Name:           CX_PRS_OUTSTANDING_CAPACITY_VALUE_10
// Default:        0x1
// Values:         0x0, ..., 0xffffffff
// Enabled:        (CX_PRS_ENABLE==1) && (CX_NFUNC > 10)
// Parameter Type: Register Default Setting
// 
// Register default for PRS Outstanding Capacity in PF10. 
// For more details, see the PRS_OUTSTANDING_CAPACITY field in the PRS_REQ_CAPACITY_REG register.
`define CX_PRS_OUTSTANDING_CAPACITY_VALUE_10 32'h1

//-/ END:   PRS CAPABILITIES CONFIGURATION
//-/===========================================


//-/===========================================
//--- START: RN


// Name:           CX_RN_IMM_VALUE_10
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 10)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for PF10.
`define CX_RN_IMM_VALUE_10 1'h0


// Name:           CX_RN_IMM_D0_VALUE_10
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 10)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for PF10.
`define CX_RN_IMM_D0_VALUE_10 1'h0


// Name:           CX_RN_FRS_VALUE_10
// Default:        0x0 (CX_RN_FRS_SUPPORTED==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_FRS_SUPPORTED==1) && (CX_NFUNC > 10)
// Parameter Type: Feature Setting
// 
// Function Readiness Status messaging supported for function PF10.
`define CX_RN_FRS_VALUE_10 1'h0


// Name:           CX_RN_RTR_VALID_10
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 10)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF10.
`define CX_RN_RTR_VALID_10 1'h0


// Name:           CX_RN_RTR_DL_UP_VALUE_10
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 10)
// Parameter Type: Register Default Setting
// 
// Register default for RTR DL Up Time field in PF10.
`define CX_RN_RTR_DL_UP_VALUE_10 12'h0


// Name:           CX_RN_RTR_RESET_VALUE_10
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 10)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF10.
`define CX_RN_RTR_RESET_VALUE_10 12'h0


// Name:           CX_RN_RTR_D3D0_VALUE_10
// Default:        0x0
// Values:         0x0, ..., 0x80a
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 10)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF10.
`define CX_RN_RTR_D3D0_VALUE_10 12'h0


// Name:           CX_RN_RTR_FLR_VALUE_10
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_FLR_ENABLE==1) && (CX_NFUNC > 10)
// Parameter Type: Register Default Setting
// 
// Register default for RTR FLR Time field in PF10.
`define CX_RN_RTR_FLR_VALUE_10 12'h0


// Name:           VF_RN_IMM_VALUE_10
// Default:        0x0 (CX_RN_IMM_VALUE_10 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 10))
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for VFs in PF10.
`define VF_RN_IMM_VALUE_10 1'h0


// Name:           VF_RN_IMM_D0_VALUE_10
// Default:        0x0 (CX_RN_IMM_D0_VALUE_10 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 10))
// Parameter Type: Register Default Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for VFs in PF10.
`define VF_RN_IMM_D0_VALUE_10 1'h0


// Name:           VF_RN_RTR_VALID_10
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 10) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF10 VFs.
`define VF_RN_RTR_VALID_10 1'h0


// Name:           VF_RN_RTR_RESET_VALUE_10
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_10)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 10) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF10 VFS.
`define VF_RN_RTR_RESET_VALUE_10 12'h0


// Name:           VF_RN_RTR_D3D0_VALUE_10
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_10)
// Values:         0x0, ..., 0x80a
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 10) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF10 VFS.
`define VF_RN_RTR_D3D0_VALUE_10 12'h0


// Name:           VF_RN_RTR_FLR_VALUE_10
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_10)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 10) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF10 VFs.
`define VF_RN_RTR_FLR_VALUE_10 12'h0


// Name:           EXT_VF_RN_RTR_VALID_10
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 10) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF10 VFs.
`define EXT_VF_RN_RTR_VALID_10 1'h0


// Name:           EXT_VF_RN_RTR_RESET_VALUE_10
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_10)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 10) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF10 VFS.
`define EXT_VF_RN_RTR_RESET_VALUE_10 12'h0


// Name:           EXT_VF_RN_RTR_D3D0_VALUE_10
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_10)
// Values:         0x0, ..., 0x80a
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 10) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF10 VFS.
`define EXT_VF_RN_RTR_D3D0_VALUE_10 12'h0


// Name:           EXT_VF_RN_RTR_FLR_VALUE_10
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_10)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 10) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF10 VFs.
`define EXT_VF_RN_RTR_FLR_VALUE_10 12'h0

//-/ END:   RN
//-/===========================================

//-/ START: LN CAPABILITIES CONFIGURATION
//-/===========================================


// Name:           CX_LN_REG_MAX_VALUE_10
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 10))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_64_SUPPORTED field in the LNR_CAP_OFF register for PF10.
`define CX_LN_REG_MAX_VALUE_10 5'h0


// Name:           CX_LN_128_SUPPORTED_VALUE_10
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 10))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_128_SUPPORTED field in the LNR_CAP_OFF register for PF10.
`define CX_LN_128_SUPPORTED_VALUE_10 1'h0


// Name:           CX_LN_64_SUPPORTED_VALUE_10
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 10))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_REGISTRATION_MAX field in the LNR_CAP_OFF register for PF10.
`define CX_LN_64_SUPPORTED_VALUE_10 1'h0

//-/ END:   LN CAPABILITIES CONFIGURATION
//-/===========================================




//-/==========================================
//-/ End FUNC10 Config
//-/==========================================

//-/===========================================
//-/ Function 11 Configuration Registers
//-/ ==========================================


// Name:         FUNC_11
// Default:      0 ((CX_NFUNC > 11) ? 1 : 0)
// Values:       0, 1
// 
// This parameter indicates that Function 11 is present
// `define FUNC_11

//-/===========================================
//-/ START: PCI-E CAPABILITIES CONFIGURATION


// Name:           PCIE_CAP_INT_MSG_NUM_11
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 11
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Message Number field in the PCI Express Capabilities Register. Function 11.
`define PCIE_CAP_INT_MSG_NUM_11 5'h0


// Name:           SLOT_IMPLEMENTED_11
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_NFUNC > 11))
// Parameter Type: Register Default Setting
// 
// Indicates that the PCI Express link associated with this Port is connected to a slot. Function 11.
`define SLOT_IMPLEMENTED_11 1'h0


// Name:           DEFAULT_PHANTOM_FUNC_SUPPORTED_11
// Default:        0x0
// Values:         0x0, ..., 0x3
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_PHANTOM_FUNC_SUPPORTED_11 2'h0


// Name:           DEFAULT_EXT_TAG_FIELD_SUPPORTED_11
// Default:        0x0 (DEFAULT_EXT_TAG_FIELD_SUPPORTED_0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 11
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_EXT_TAG_FIELD_SUPPORTED_11 1'h0



// Name:           DEFAULT_ATT_BUTT_PRE_11
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 11
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Button is present
`define DEFAULT_ATT_BUTT_PRE_11 1'h0


// Name:           DEFAULT_ATT_IND_PRE_11
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 11
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Indicator is present
`define DEFAULT_ATT_IND_PRE_11 1'h0


// Name:           DEFAULT_PWR_IND_PRE_11
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 11
// Parameter Type: Register Default Setting
// 
// When set indicates that a Power Indicator is present
`define DEFAULT_PWR_IND_PRE_11 1'h0


// Name:           DEFAULT_NO_SNOOP_SUPPORTED_11
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 11
// Parameter Type: Register Default Setting
// 
// Default value for the Enable No Snoop bit in the Device Control Register. Function 11.
`define DEFAULT_NO_SNOOP_SUPPORTED_11 1'h0


// Name:           ROOT_RCB_11
// Default:        64-bit
// Values:         64-bit (0x0), 128-bit (0x1)
// Parameter Type: Register Default Setting
// 
// Default value for the Read Completion Boundary (RCB) bit in the Link Control Register.
`define ROOT_RCB_11 1'h0


//-/ END:   PCI-E CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: MSI-X CAPABILITIES CONFIGURATION


// Name:           MSIX_TABLE_SIZE_11
// Default:        0x0
// Values:         0x0, ..., 0x7ff
// Enabled:        CX_NFUNC > 11 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the MSI-X Table Size field in the MSI-X Control Register. Function 11.
`define MSIX_TABLE_SIZE_11 11'h0


// Name:           MSIX_TABLE_BIR_11
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 11 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table BAR Indicator Register (BIR) field in the MSI-X Table Offset and BIR Register. Function 11.
`define MSIX_TABLE_BIR_11 3'h0


// Name:           MSIX_TABLE_OFFSET_11
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 11 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table Offset field in the MSI-X Table Offset and BIR Register. Function 11.
`define MSIX_TABLE_OFFSET_11 29'h0


// Name:           MSIX_PBA_BIR_11
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 11 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Pending Bit Array (PBA) BIR field in the MSI-X PBA Offset and BIR Register. Function 11.
`define MSIX_PBA_BIR_11 7'h0


// Name:           MSIX_PBA_OFFSET_11
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 11 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the PBA Offset field in the MSI-X PBA Offset and BIR Register. Function 11.
`define MSIX_PBA_OFFSET_11 29'h0

//-/ END:   MSI-X CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SATA CAPABILITIES CONFIGURATION


// Name:         SATA_HBA_OFFSET_11
// Default:      0x0
// Values:       0x0, ..., 0xfffff
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA Offset. Base address of the SATA HBA registers, 
//  as an offset from the base address of the BAR indicated 
//  by the SATA BAR field.
`define SATA_HBA_OFFSET_11 20'h0


// Name:         SATA_BAR_11
// Default:      0x0
// Values:       0x0, ..., 0xf
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA BAR. The bar that maps to SATA HBA registers,
`define SATA_BAR_11 4'h0

//-/ END:   SATA CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: AER CAPABILITIES CONFIGURATION


// Name:           DEFAULT_ECRC_CHK_CAP_11
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 11 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Check Capable bit in the Advanced Capabilities and Control Register. Function 11.
`define DEFAULT_ECRC_CHK_CAP_11 1'h1


// Name:           DEFAULT_ECRC_GEN_CAP_11
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 11 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Generation Capability bit in the Advanced Capabilities and Control Register. Function 11.
`define DEFAULT_ECRC_GEN_CAP_11 1'h1


// Name:           AER_INT_MSG_NUM_11
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Parameter Type: Register Default Setting
// 
// Default value for the Advanced Error Interrupt Message Number field of the Root Error Status Register. Function 11.
`define AER_INT_MSG_NUM_11 5'h0



// Name:           CX_HDR_LOG_DEPTH_11
// Default:        0x1
// Values:         0x1, 0x2, 0x4
// Enabled:        CX_NFUNC > 11 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Feature Setting.
// 
// Header Log Depth
`define CX_HDR_LOG_DEPTH_11 3'h1


`define CX_MULTIPLE_HDR_REC_CAP_11 1'h0

//-/ END:   AER CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PM CAPABILITIES CONFIGURATION


// Name:           PME_SUPPORT_11
// Default:        0x1b
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 11
// Parameter Type: Register Default Setting
// 
// Default value for the PME_Support field in the Power Management Capabilities Register. Function 11.
`define PME_SUPPORT_11 5'h1b


// Name:           D1_SUPPORT_11
// Default:        true
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 11
// Parameter Type: Register Default Setting
// 
// Default value for the D1 Support bit in the Power Management Capabilities Register. Function 11.
`define D1_SUPPORT_11 1'h1


// Name:           D2_SUPPORT_11
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 11
// Parameter Type: Register Default Setting
// 
// Default value for the D2 Support bit in the Power Management Capabilities Register. Function 11.
`define D2_SUPPORT_11 1'h0


// Name:           DEV_SPEC_INIT_11
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 11
// Parameter Type: Register Default Setting
// 
// Default value for the Device Specific Initialization (DSI) bit in the Power Management Capabilities Register. Function 
// 11.
`define DEV_SPEC_INIT_11 1'h0


// Name:           AUX_CURRENT_11
// Default:        375mA
// Values:         0mA (0x0), 55mA (0x1), 100mA (0x2), 160mA (0x3), 220mA (0x4), 270mA 
//                 (0x5), 320mA (0x6), 375mA (0x7)
// Enabled:        CX_NFUNC > 11
// Parameter Type: Register Default Setting
// 
// Default value for the Aux Current field in the Power Management Capabilities Register. Function 11.
`define AUX_CURRENT_11 3'h7


// Name:           DEFAULT_NO_SOFT_RESET_11
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 11
// Parameter Type: Register Default Setting
// 
// Default value for the No Soft Reset bit in the Power Management Control and Status Register. When set, you should not 
// reset any controller registers when transitioning from D3hot to D0. Therefore, you should not assert the non_sticky_rst_n 
// and sticky_rst_n inputs. Function 11.
`define DEFAULT_NO_SOFT_RESET_11 1'h0

//-/ END:   PM CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PCI BASIC CONFIGURATION


// Name:           CX_DEVICE_ID_11
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 11
// Parameter Type: Register Default Setting
// 
// Default value for the Device ID field in the Device ID and Vendor ID Register. Function 11.
`define CX_DEVICE_ID_11 16'h0


// Name:           CX_VENDOR_ID_11
// Default:        0x16c3
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 11
// Parameter Type: Register Default Setting
// 
// Default value for the Vendor ID field in the Device ID and Vendor ID Register. Function 11.
`define CX_VENDOR_ID_11 16'h16c3


// Name:           CX_REVISION_ID_11
// Default:        0x1
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 11
// Parameter Type: Register Default Setting
// 
// Default value for the Revision ID field in the Revision ID Register. Function 11.
`define CX_REVISION_ID_11 8'h1


// Name:           SUBSYS_DEV_ID_11
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 11
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 11.
`define SUBSYS_DEV_ID_11 16'h0


// Name:           SUBSYS_VENDOR_ID_11
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 11
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem Vendor ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 11.
`define SUBSYS_VENDOR_ID_11 16'h0


// Name:           BASE_CLASS_CODE_11
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 11
// Parameter Type: Register Default Setting
// 
// Default value for the Base Class Code field in the Class Code Register. Function 11.
`define BASE_CLASS_CODE_11 8'h0


// Name:           SUB_CLASS_CODE_11
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 11
// Parameter Type: Register Default Setting
// 
// Default value for the Subclass Code field in the Class Code Register. Function 11.
`define SUB_CLASS_CODE_11 8'h0


// Name:           IF_CODE_11
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 11
// Parameter Type: Register Default Setting
// 
// Default value for the Programming Interface field in the Class Code Register. Function 11.
`define IF_CODE_11 8'h0


// Name:           CARDBUS_CIS_PTR_11
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 11
// Parameter Type: Register Default Setting
// 
// Default value for the CardBus CIS Pointer Register. Function 11.
`define CARDBUS_CIS_PTR_11 16'h0


// Name:           INT_PIN_MAPPING_11
// Default:        INTA
// Values:         None (0x0), INTA (0x1), INTB (0x2), INTC (0x3), INTD (0x4)
// Enabled:        CX_NFUNC > 11
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Pin Register. Function 11.
`define INT_PIN_MAPPING_11 8'h1


// Name:           IO_DECODE_32_11
// Default:        16-bit
// Values:         16-bit (0x0), 32-bit (0x1)
// Enabled:        CX_NFUNC > 11
// Parameter Type: Register Default Setting
// 
// Default value for the 32-Bit I/O Space bit in the I/O Base and I/O Limit Register. Function 11.
`define IO_DECODE_32_11 1'h0


// Name:           MEM_DECODE_64_11
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x1)
// Enabled:        CX_NFUNC > 11
// Parameter Type: Register Default Setting
// 
// Default value for the 64-Bit Memory Addressing bit in the Prefetchable Memory Base and Limit Register. Function 11.
`define MEM_DECODE_64_11 1'h0


// Name:           ROM_BAR_ENABLED_11
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 11
// Parameter Type: Register Default Setting
// 
// Include the expansion ROM BAR registers. Function 11.
`define ROM_BAR_ENABLED_11 1'h1


`define DEFAULT_ROM_BAR_ENABLED_11 1'h1


// Name:           ROM_MASK_11
// Default:        0xffff
// Values:         0x7ff, ..., 0xffffff
// Enabled:        CX_NFUNC > 11 && ROM_BAR_ENABLED_11==1
// Parameter Type: Register Default Setting
// 
// Determines the default of the Expansion ROM BAR Mask register. Function 11. 
//  - The BAR Mask register specifies which bits of the Expansion ROM BAR are non-writable by host software, which 
//  determines the size of the BAR. 
//  - The maximum value for ROM_MASK_N is 0xFFFFFF because the maximum space that can be claimed by an Expansion ROM BAR 
//  is 16 MB. 
//  - For example: 32'hFFFF =BAR size of 2^16.
`define ROM_MASK_11 32'hffff


// Name:           ROM_MASK_WRITABLE_11
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 11 && ROM_BAR_ENABLED_11==1
// Parameter Type: Feature Setting
// 
// Determines if the Expansion ROM BAR Mask register for function 11 is writable by application software. If writing to a 
// Expansion ROM BAR Mask register is enabled, your application can write to the Expansion ROM BAR Mask register through the 
// DBI by asserting dbi_cs2 in addition to dbi_cs.
`define ROM_MASK_WRITABLE_11 1'h0


// Name:           ROM_FUNC11_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 11 && ROM_BAR_ENABLED_11==1 && TRGT1_POPULATE==1))
// Parameter Type: Register Default Setting
// 
// Direct incoming requests that pass filtering and match the Expansion ROM BAR of function 11 to either RTRGT0 or RTRGT1. 
//  - For example, setting ROM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for the Expansion ROM BAR of function 
//  0 to RTRGT1. 
//  - If TRGT1_POPULATE =0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define ROM_FUNC11_TARGET_MAP 1'h1


// Name:           CX_PCI_HEADER_DEFAULTS_VISIBLE_11
// Default:        0
// Values:         0, 1
// Parameter Type: Register Default Setting
// 
// Select here if you want to configure the defaults for the other PCI Standard Header registers for function 11. 
//  An extra window will appear under this page. To access it, click the plus/minus symbol in the hierarchy view on the 
//  left panel. 
//  This is optional but not usually recommended. 
//  You can also change these register defaults using the DBI before (or after) the link comes up.
`define CX_PCI_HEADER_DEFAULTS_VISIBLE_11 0

//-/ END:   PCI BASIC CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: BAR CONFIGURATION


// Name:           BAR0_ENABLED_11
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 11
// Parameter Type: Feature Setting
// 
// Include the BAR0 registers for function 11.
`define BAR0_ENABLED_11 1'h1


`define DEFAULT_BAR0_ENABLED_11 1'h1


// Name:           MEM0_SPACE_DECODER_11
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 11 && BAR0_ENABLED_11==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 11.
`define MEM0_SPACE_DECODER_11 1'h0


// Name:           PREFETCHABLE0_11
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 11 && BAR0_ENABLED_11==1 && MEM0_SPACE_DECODER_11==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 11.
`define PREFETCHABLE0_11 1'h0


// Name:           BAR0_TYPE_11
// Default:        64-bit ((MEM0_SPACE_DECODER_11==1 || BAR0_ENABLED_11==0) ? 0 : 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 11 && BAR0_ENABLED_11==1 && MEM0_SPACE_DECODER_11==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 11.
`define BAR0_TYPE_11 2'h2


// Name:           BAR0_SIZING_SCHEME_11
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 11 && BAR0_ENABLED_11==1
// Parameter Type: Feature Setting
// 
// BAR0 Function 11 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR0_SIZING_SCHEME_11 2'h0


// Name:           CX_BAR0_RESIZABLE_11
// Default:        0x0 ((BAR0_SIZING_SCHEME_11==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR0_ENABLED_11==1) && (MEM0_SPACE_DECODER_11==0)
// Parameter Type: Feature Setting
// 
// Defines BAR0 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR0 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR0_RESIZABLE_11 1'h0


// Name:           CX_BAR0_RESOURCE_AVAIL_11
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 11 && CX_BAR0_RESIZABLE_11==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR0 of function 11. 
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
// Example: 0x00000030 indicates that BAR0 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR0_RESOURCE_AVAIL_11 64'h10


// Name:           BAR0_MASK_WRITABLE_11
// Default:        0x0 ((BAR0_ENABLED_11==1 && BAR0_SIZING_SCHEME_11 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 11 && BAR0_ENABLED_11==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR0 Mask through DBI
`define BAR0_MASK_WRITABLE_11 1'h0


// Name:           BAR0_MASK_11
// Default:        0xfffff (CX_BAR0_RESIZABLE_11==1 ? [calc_bar_mask 
//                 CX_BAR0_RESOURCE_AVAIL_11] : MEM0_SPACE_DECODER_11==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 11 && BAR0_ENABLED_11==1 && MEM0_SPACE_DECODER_11==0 && 
//                 CX_BAR0_RESIZABLE_11==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR0 Mask register of function 11. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR0_MASK_11 64'hfffff


// Name:           MEM_FUNC11_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 11 && BAR0_ENABLED_11==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_0 of function 11 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming Requests for BAR0 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC11_BAR0_TARGET_MAP 1'h1


// Name:           BAR1_ENABLED_11
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 11 && BAR0_TYPE_11==0
// Parameter Type: Feature Setting
// 
// Include the BAR1 registers for function 11.
`define BAR1_ENABLED_11 1'h0


`define DEFAULT_BAR1_ENABLED_11 1'h0


// Name:           MEM1_SPACE_DECODER_11
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 11 && BAR1_ENABLED_11==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 11.
`define MEM1_SPACE_DECODER_11 1'h0


// Name:           PREFETCHABLE1_11
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 11 && BAR1_ENABLED_11==1 && MEM1_SPACE_DECODER_11==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 11.
`define PREFETCHABLE1_11 1'h0


// Name:           BAR1_TYPE_11
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 11.
`define BAR1_TYPE_11 2'h0


// Name:           BAR1_SIZING_SCHEME_11
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 11 && BAR1_ENABLED_11==1
// Parameter Type: Feature Setting
// 
// BAR1 Function 11 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR1_SIZING_SCHEME_11 2'h0


// Name:           CX_BAR1_RESIZABLE_11
// Default:        0x0 ((BAR1_SIZING_SCHEME_11==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR1_ENABLED_11==1) && (MEM1_SPACE_DECODER_11==0)
// Parameter Type: Feature Setting
// 
// Defines BAR1 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR1 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR1_RESIZABLE_11 1'h0


// Name:           CX_BAR1_RESOURCE_AVAIL_11
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 11 && CX_BAR1_RESIZABLE_11==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR1 of function 11. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR1 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR1_RESOURCE_AVAIL_11 32'h10


// Name:           BAR1_MASK_WRITABLE_11
// Default:        0x0 ((BAR1_ENABLED_11==1 && BAR1_SIZING_SCHEME_11 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 11 && BAR1_ENABLED_11==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR1 Mask through DBI
`define BAR1_MASK_WRITABLE_11 1'h0


// Name:           BAR1_MASK_11
// Default:        0xffff (CX_BAR1_RESIZABLE_11==1 ? [calc_bar_mask 
//                 CX_BAR1_RESOURCE_AVAIL_11] : MEM1_SPACE_DECODER_11==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 11 && BAR1_ENABLED_11==1 && MEM1_SPACE_DECODER_11==0 && 
//                 CX_BAR1_RESIZABLE_11==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR1 Mask register of function 11. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR1_MASK_11 32'hffff


// Name:           MEM_FUNC11_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 11 && BAR1_ENABLED_11==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_1 of function 11 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR1_TARGET_MAP to 1 maps all incoming Requests for BAR1 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC11_BAR1_TARGET_MAP 1'h1


// Name:           BAR2_ENABLED_11
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 11
// Parameter Type: Feature Setting
// 
// Include the BAR2 registers for function 11.
`define BAR2_ENABLED_11 1'h1


`define DEFAULT_BAR2_ENABLED_11 1'h1


// Name:           MEM2_SPACE_DECODER_11
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 11 && BAR2_ENABLED_11==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 11.
`define MEM2_SPACE_DECODER_11 1'h0


// Name:           PREFETCHABLE2_11
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 11 && BAR2_ENABLED_11==1 && MEM2_SPACE_DECODER_11==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 11.
`define PREFETCHABLE2_11 1'h0


// Name:           BAR2_TYPE_11
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 11 && BAR2_ENABLED_11==1 && MEM2_SPACE_DECODER_11==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 11.
`define BAR2_TYPE_11 2'h0


// Name:           BAR2_SIZING_SCHEME_11
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 11 && BAR2_ENABLED_11==1
// Parameter Type: Feature Setting
// 
// BAR2 Function 11 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR2_SIZING_SCHEME_11 2'h0


// Name:           CX_BAR2_RESIZABLE_11
// Default:        0x0 ((BAR2_SIZING_SCHEME_11==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR2_ENABLED_11==1) && (MEM2_SPACE_DECODER_11==0)
// Parameter Type: Feature Setting
// 
// Defines BAR2 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR2 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR2_RESIZABLE_11 1'h0


// Name:           CX_BAR2_RESOURCE_AVAIL_11
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 11 && CX_BAR2_RESIZABLE_11==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR2 of function 11. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR2 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR2_RESOURCE_AVAIL_11 64'h10


// Name:           BAR2_MASK_WRITABLE_11
// Default:        0x0 ((BAR2_ENABLED_11==1 && BAR2_SIZING_SCHEME_11 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 11 && BAR2_ENABLED_11==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR2 Mask through DBI
`define BAR2_MASK_WRITABLE_11 1'h0


// Name:           BAR2_MASK_11
// Default:        0xfffff (CX_BAR2_RESIZABLE_11==1 ? [calc_bar_mask 
//                 CX_BAR2_RESOURCE_AVAIL_11] : MEM2_SPACE_DECODER_11==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 11 && BAR2_ENABLED_11==1 && MEM2_SPACE_DECODER_11==0 && 
//                 CX_BAR2_RESIZABLE_11==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR2 Mask register of function 11. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR2_MASK_11 64'hfffff


// Name:           MEM_FUNC11_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 11 && BAR2_ENABLED_11==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_2 of function 11 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR2_TARGET_MAP to 1 maps all incoming requests for BAR2 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC11_BAR2_TARGET_MAP 1'h1


// Name:           BAR3_ENABLED_11
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 11 && BAR2_TYPE_11==0
// Parameter Type: Feature Setting
// 
// Include the BAR3 registers for function 11.
`define BAR3_ENABLED_11 1'h0



`define DEFAULT_BAR3_ENABLED_11 1'h0


// Name:           MEM3_SPACE_DECODER_11
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 11 && BAR3_ENABLED_11==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 11.
`define MEM3_SPACE_DECODER_11 1'h0


// Name:           PREFETCHABLE3_11
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 11 && BAR3_ENABLED_11==1 && MEM3_SPACE_DECODER_11==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 11.
`define PREFETCHABLE3_11 1'h0


// Name:           BAR3_TYPE_11
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 11.
`define BAR3_TYPE_11 2'h0


// Name:           BAR3_SIZING_SCHEME_11
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 11 && BAR3_ENABLED_11==1
// Parameter Type: Feature Setting
// 
// BAR3 Function 11 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR3_SIZING_SCHEME_11 2'h0


// Name:           CX_BAR3_RESIZABLE_11
// Default:        0x0 ((BAR3_SIZING_SCHEME_11==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR3_ENABLED_11==1) && (MEM3_SPACE_DECODER_11==0)
// Parameter Type: Feature Setting
// 
// Defines BAR3 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR3 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR3_RESIZABLE_11 1'h0


// Name:           CX_BAR3_RESOURCE_AVAIL_11
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 11 && CX_BAR3_RESIZABLE_11==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR3 of function 11. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR3 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR3_RESOURCE_AVAIL_11 32'h10


// Name:           BAR3_MASK_WRITABLE_11
// Default:        0x0 ((BAR3_ENABLED_11==1 && BAR3_SIZING_SCHEME_11 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 11 && BAR3_ENABLED_11==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR3 Mask through DBI
`define BAR3_MASK_WRITABLE_11 1'h0


// Name:           BAR3_MASK_11
// Default:        0xffff (CX_BAR3_RESIZABLE_11==1 ? [calc_bar_mask 
//                 CX_BAR3_RESOURCE_AVAIL_11] : MEM3_SPACE_DECODER_11==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 11 && BAR3_ENABLED_11==1 && MEM3_SPACE_DECODER_11==0 && 
//                 CX_BAR3_RESIZABLE_11==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR3 Mask register of function 11. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR3_MASK_11 32'hffff


// Name:           MEM_FUNC11_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 11 && BAR3_ENABLED_11==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_3 of function 11 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR3_TARGET_MAP to 1 maps all incoming requests for BAR3 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC11_BAR3_TARGET_MAP 1'h1


// Name:           BAR4_ENABLED_11
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 11
// Parameter Type: Feature Setting
// 
// Include the BAR4 registers for function 11.
`define BAR4_ENABLED_11 1'h1


`define DEFAULT_BAR4_ENABLED_11 1'h1



// Name:           MEM4_SPACE_DECODER_11
// Default:        I/O (BAR4_ENABLED_11==1)
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 11 && BAR4_ENABLED_11==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 11.
`define MEM4_SPACE_DECODER_11 1'h1


// Name:           PREFETCHABLE4_11
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 11 && BAR4_ENABLED_11==1 && MEM4_SPACE_DECODER_11==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 11.
`define PREFETCHABLE4_11 1'h0


// Name:           BAR4_TYPE_11
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 11 && BAR4_ENABLED_11==1 && MEM4_SPACE_DECODER_11==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 11.
`define BAR4_TYPE_11 2'h0


// Name:           BAR4_SIZING_SCHEME_11
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 11 && BAR4_ENABLED_11==1
// Parameter Type: Feature Setting
// 
// BAR4  Function 11 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR4_SIZING_SCHEME_11 2'h0


// Name:           CX_BAR4_RESIZABLE_11
// Default:        0x0 ((BAR4_SIZING_SCHEME_11==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR4_ENABLED_11==1) && (MEM4_SPACE_DECODER_11==0)
// Parameter Type: Feature Setting
// 
// Defines BAR4 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR4 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR4_RESIZABLE_11 1'h0


// Name:           CX_BAR4_RESOURCE_AVAIL_11
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 11 &&  CX_BAR4_RESIZABLE_11==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR4 of function 11. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR4 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR4_RESOURCE_AVAIL_11 64'h10


// Name:           BAR4_MASK_WRITABLE_11
// Default:        0x0 ((BAR4_ENABLED_11==1 && BAR4_SIZING_SCHEME_11 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 11 && BAR4_ENABLED_11==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR4 Mask through DBI
`define BAR4_MASK_WRITABLE_11 1'h0


// Name:           BAR4_MASK_11
// Default:        0xff (CX_BAR4_RESIZABLE_11==1 ? [calc_bar_mask 
//                 CX_BAR4_RESOURCE_AVAIL_11] : MEM4_SPACE_DECODER_11==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 11 && BAR4_ENABLED_11==1 && MEM4_SPACE_DECODER_11==0 && 
//                 CX_BAR4_RESIZABLE_11==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR4 Mask register of function 11. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR4_MASK_11 64'hff


// Name:           MEM_FUNC11_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 11 && BAR4_ENABLED_11==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_4 of function 11 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR4_TARGET_MAP to 1 maps all incoming requests for BAR4 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC11_BAR4_TARGET_MAP 1'h1


// Name:           BAR5_ENABLED_11
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 11 && BAR4_TYPE_11==0
// Parameter Type: Feature Setting
// 
// Include the BAR5 registers for function 11.
`define BAR5_ENABLED_11 1'h0


`define DEFAULT_BAR5_ENABLED_11 1'h0


// Name:           MEM5_SPACE_DECODER_11
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 11 && BAR5_ENABLED_11==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 11.
`define MEM5_SPACE_DECODER_11 1'h0


// Name:           PREFETCHABLE5_11
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 11 && BAR5_ENABLED_11==1 && MEM5_SPACE_DECODER_11==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 11.
`define PREFETCHABLE5_11 1'h0


// Name:           BAR5_TYPE_11
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 11.
`define BAR5_TYPE_11 2'h0


// Name:           BAR5_SIZING_SCHEME_11
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 11 && BAR5_ENABLED_11==1
// Parameter Type: Feature Setting
// 
// BAR5  Function 11 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR5_SIZING_SCHEME_11 2'h0


// Name:           CX_BAR5_RESIZABLE_11
// Default:        0x0 ((BAR5_SIZING_SCHEME_11==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR5_ENABLED_11==1) && (MEM5_SPACE_DECODER_11==0)
// Parameter Type: Feature Setting
// 
// Defines BAR5 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR5 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR5_RESIZABLE_11 1'h0


// Name:           CX_BAR5_RESOURCE_AVAIL_11
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 11 && CX_BAR5_RESIZABLE_11==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR5 of function 11. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR5 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR5_RESOURCE_AVAIL_11 32'h10


// Name:           BAR5_MASK_WRITABLE_11
// Default:        0x0 ((BAR5_ENABLED_11==1 && BAR5_SIZING_SCHEME_11 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 11 && BAR5_ENABLED_11==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR5 Mask through DBI
`define BAR5_MASK_WRITABLE_11 1'h0


// Name:           BAR5_MASK_11
// Default:        0xffff (CX_BAR5_RESIZABLE_11==1 ? [calc_bar_mask 
//                 CX_BAR5_RESOURCE_AVAIL_11] : MEM5_SPACE_DECODER_11==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 11 && BAR5_ENABLED_11==1 && MEM5_SPACE_DECODER_11==0 && 
//                 CX_BAR5_RESIZABLE_11==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR5 Mask register of function 11. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR5_MASK_11 32'hffff


// Name:           MEM_FUNC11_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 11 && BAR5_ENABLED_11==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_5 of function 11 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR5_TARGET_MAP to 1 maps all incoming requests for BAR5 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC11_BAR5_TARGET_MAP 1'h1


`define FUNC11_BARSIZE_32 128'h0


`define FUNC11_BARSIZE 128'h0


`define FUNC11_BAR0_BARSIZE_TRGT1 128'h0


`define FUNC11_BAR2_BARSIZE_TRGT1 128'h0


`define FUNC11_BAR4_BARSIZE_TRGT1 128'h0


`define FUNC11_BAR0_TRGT1_ADDR_WIDTH 1


`define FUNC11_BAR2_TRGT1_ADDR_WIDTH 1


`define FUNC11_BAR4_TRGT1_ADDR_WIDTH 1


// Name:         CX_NUM_RBARS_11
// Default:      0 ([calc_num_rbars CX_BAR0_RESIZABLE_11 CX_BAR1_RESIZABLE_11 
//               CX_BAR2_RESIZABLE_11 CX_BAR3_RESIZABLE_11 CX_BAR4_RESIZABLE_11 
//               CX_BAR5_RESIZABLE_11])
// Values:       -2147483648, ..., 2147483647
// 
// Number of resizable BARs
`define CX_NUM_RBARS_11 0

//-/ END:   BAR CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SR-IOV CAPABILITIES CONFIGURATION


// Name:           CX_VF_DEPENDENCY_LINK_11
// Default:        0x11
// Values:         0x0, ..., 0xff
// Enabled:        CX_VF_DEPENDENCY_LINK_SUPP && (CX_NFUNC > 11) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Specifies the 8-bit VF dependency link for PF11. Valid only if CX_VF_DEPENDENCY_LINK_SUPP=1.
`define CX_VF_DEPENDENCY_LINK_11 8'h11


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER1_11
// Default:        0x2 ((CX_NFUNC>=17) ? 32 : (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : 
//                 (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF11 in an ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER1_11 16'h2


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER0_11
// Default:        0x100
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF11 
//  in a non-ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER0_11 16'h100


// Name:           VF_STRIDE_ARI_CAP_HIER1_11
// Default:        0x2 (CX_VF_STRIDE_ALWAYS_ONE) ? 1 : ((CX_NFUNC>=17) ? 32 : 
//                 (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF11 in an ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER1_11 16'h2


// Name:           VF_STRIDE_ARI_CAP_HIER0_11
// Default:        0x100 ((CX_VF_STRIDE_ALWAYS_ONE) ? 0x0001 : 0x0100)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF11 in a non-ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER0_11 16'h100


// Name:           CX_VF_DEVICE_ID_11
// Default:        0x0 (CX_DEVICE_ID_11)
// Values:         0x0, ..., 0xffff
// Enabled:        (CX_NFUNC > 11) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 16-bit virtual function Device ID for PF11. 
//  It might be different from the physical function's.
`define CX_VF_DEVICE_ID_11 16'h0


// Name:           CX_VF_SUPP_PAGE_SIZE_11
// Default:        0x553
// Values:         0x553, ..., 0xffff
// Enabled:        (CX_NFUNC > 11) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 32-bit supported page sizes for virtual functions for PF11
`define CX_VF_SUPP_PAGE_SIZE_11 32'h553


// Name:           CX_ARI_CAP_HIER_PRSVD_11
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Specifies if ARI Capable Hierarchy bit is preserved across certain power state transitions 
//  Only present in PF0. Read Only Zero in this PF11.
`define CX_ARI_CAP_HIER_PRSVD_11 1'h0

//-/===========================================
//-/ START: VF BAR CONFIGURATION


// Name:           VF_BAR0_ENABLED_11
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 11)
// Parameter Type: Feature Setting
// 
// Include the VF BAR0 registers in PF11
`define VF_BAR0_ENABLED_11 1'h1


`define VF_DEFAULT_BAR0_ENABLED_11 1'h1


// Name:           VF_MEM0_SPACE_DECODER_11
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR0_ENABLED_11 && CX_SRIOV_ENABLE && (CX_NFUNC > 11)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Space Indicator 
//  ALWAYS set to Memory for Virtual Functions
`define VF_MEM0_SPACE_DECODER_11 1'h0


// Name:           VF_PREFETCHABLE0_11
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_11==1 && VF_MEM0_SPACE_DECODER_11==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 11)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Prefetchable 
//  When set indicates VF BAR0 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE0_11 1'h0


// Name:           VF_BAR0_TYPE_11
// Default:        64-bit ((VF_MEM0_SPACE_DECODER_11==1 || VF_BAR0_ENABLED_11==0) ? 0 
//                 : 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR0_ENABLED_11==1 && VF_MEM0_SPACE_DECODER_11==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 11)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 11; (bits [2:1] for a memory BAR).
`define VF_BAR0_TYPE_11 2'h2


// Name:           VF_BAR0_MASK_WRITABLE_11
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_11==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 11)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR0_MASK_WRITABLE_11 1'h0


// Name:           VF_BAR0_MASK_11
// Default:        0xfffff (VF_MEM0_SPACE_DECODER_11==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR0_ENABLED_11==1 && VF_MEM0_SPACE_DECODER_11==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 11)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Mask 
//  Determines the default of the VF BAR Mask register for PF11. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR0_MASK_11 64'hfffff


// Name:           VF_MEM_FUNC11_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR0_ENABLED_11==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE 
//                 && (CX_NFUNC > 11)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF11 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC11_BAR0_TARGET_MAP 1'h1


// Name:           VF_BAR1_ENABLED_11
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        (VF_BAR0_TYPE_11==0)  && CX_SRIOV_ENABLE && (CX_NFUNC > 11)
// Parameter Type: Feature Setting
// 
// Include the VF BAR1 registers in PF11
`define VF_BAR1_ENABLED_11 1'h0


`define VF_DEFAULT_BAR1_ENABLED_11 1'h0


// Name:           VF_MEM1_SPACE_DECODER_11
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR1_ENABLED_11==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 11)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Space Indicator
`define VF_MEM1_SPACE_DECODER_11 1'h0


// Name:           VF_PREFETCHABLE1_11
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_11==1 && VF_MEM1_SPACE_DECODER_11==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 11)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Prefetchable 
//  When set indicates VF BAR1 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE1_11 1'h0


// Name:           VF_BAR1_TYPE_11
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 11; (bits [2:1] for a memory BAR).
`define VF_BAR1_TYPE_11 2'h0


// Name:           VF_BAR1_MASK_WRITABLE_11
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_11==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 11)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR1_MASK_WRITABLE_11 1'h0


// Name:           VF_BAR1_MASK_11
// Default:        0xffff (VF_MEM1_SPACE_DECODER_11==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR1_ENABLED_11==1 && VF_MEM1_SPACE_DECODER_11==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 11)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Mask 
//  Determines the default of the VF BAR Mask register for PF11. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR1_MASK_11 32'hffff


// Name:           VF_MEM_FUNC11_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR1_ENABLED_11==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE 
//                 && (CX_NFUNC > 11)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF11 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC11_BAR1_TARGET_MAP 1'h1


// Name:           VF_BAR2_ENABLED_11
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 11)
// Parameter Type: Feature Setting
// 
// Include the VF BAR2 registers in PF11
`define VF_BAR2_ENABLED_11 1'h1


`define VF_DEFAULT_BAR2_ENABLED_11 1'h1


// Name:           VF_MEM2_SPACE_DECODER_11
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR2_ENABLED_11==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 11)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Memory Space Indicator
`define VF_MEM2_SPACE_DECODER_11 1'h0


// Name:           VF_PREFETCHABLE2_11
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_11==1 && VF_MEM2_SPACE_DECODER_11==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 11)
// Parameter Type: Register Default Setting
// 
// BAR2 Memory Prefetchable 
//  When set indicates VF BAR2 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE2_11 1'h0


// Name:           VF_BAR2_TYPE_11
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR2_ENABLED_11==1 && VF_MEM2_SPACE_DECODER_11==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 11)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 11; (bits [2:1] for a memory BAR).
`define VF_BAR2_TYPE_11 2'h0


// Name:           VF_BAR2_MASK_WRITABLE_11
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_11==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 11)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR2_MASK_WRITABLE_11 1'h0


// Name:           VF_BAR2_MASK_11
// Default:        0xfffff (VF_MEM2_SPACE_DECODER_11==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR2_ENABLED_11==1 && VF_MEM2_SPACE_DECODER_11==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 11)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Mask 
//  Determines the default of the VF BAR Mask register for PF11. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR2_MASK_11 64'hfffff


// Name:           VF_MEM_FUNC11_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR2_ENABLED_11==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 11)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF11 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC11_BAR2_TARGET_MAP 1'h1


// Name:           VF_BAR3_ENABLED_11
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_TYPE_11==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 11)
// Parameter Type: Feature Setting
// 
// Include the VF BAR3 registers in PF11
`define VF_BAR3_ENABLED_11 1'h0


`define VF_DEFAULT_BAR3_ENABLED_11 1'h0


// Name:           VF_MEM3_SPACE_DECODER_11
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR3_ENABLED_11==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 11)
// Parameter Type: Register Default Setting
// 
// BAR3 Memory Space Indicator
`define VF_MEM3_SPACE_DECODER_11 1'h0


// Name:           VF_PREFETCHABLE3_11
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_11==1 && VF_MEM3_SPACE_DECODER_11==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 11)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Memory Prefetchable 
//  When set indicates VF BAR3 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE3_11 1'h0


// Name:           VF_BAR3_TYPE_11
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 11; (bits [2:1] for a memory BAR).
`define VF_BAR3_TYPE_11 2'h0


// Name:           VF_BAR3_MASK_WRITABLE_11
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_11==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 11)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR3_MASK_WRITABLE_11 1'h0


// Name:           VF_BAR3_MASK_11
// Default:        0xffff (VF_MEM3_SPACE_DECODER_11==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR3_ENABLED_11==1 && VF_MEM3_SPACE_DECODER_11==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 11)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Mask 
//  Determines the default of the VF BAR Mask register for PF11. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR3_MASK_11 32'hffff


// Name:           VF_MEM_FUNC11_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR3_ENABLED_11==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 11)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF11 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC11_BAR3_TARGET_MAP 1'h1


// Name:           VF_BAR4_ENABLED_11
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 11)
// Parameter Type: Feature Setting
// 
// Include the VF BAR4 registers in PF11
`define VF_BAR4_ENABLED_11 1'h1


`define VF_DEFAULT_BAR4_ENABLED_11 1'h1


// Name:           VF_MEM4_SPACE_DECODER_11
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR4_ENABLED_11==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 11)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Space Indicator
`define VF_MEM4_SPACE_DECODER_11 1'h0


// Name:           VF_PREFETCHABLE4_11
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_11==1 && VF_MEM4_SPACE_DECODER_11==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 11)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Prefetchable 
//  When set indicates VF BAR4 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE4_11 1'h0


// Name:           VF_BAR4_TYPE_11
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR4_ENABLED_11==1 && VF_MEM4_SPACE_DECODER_11==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 11)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 11; (bits [2:1] for a memory BAR).
`define VF_BAR4_TYPE_11 2'h0


// Name:           VF_BAR4_MASK_WRITABLE_11
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_11==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 11)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR4_MASK_WRITABLE_11 1'h0


// Name:           VF_BAR4_MASK_11
// Default:        0xfff (VF_MEM4_SPACE_DECODER_11==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR4_ENABLED_11==1 && VF_MEM4_SPACE_DECODER_11==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 11)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Mask 
//  Determines the default of the VF BAR Mask register for PF11. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR4_MASK_11 64'hfff


// Name:           VF_MEM_FUNC11_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR4_ENABLED_11==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 11)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF11 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC11_BAR4_TARGET_MAP 1'h1


// Name:           VF_BAR5_ENABLED_11
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_TYPE_11==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 11)
// Parameter Type: Feature Setting
// 
// Include the VF BAR5 registers in PF11
`define VF_BAR5_ENABLED_11 1'h0


`define VF_DEFAULT_BAR5_ENABLED_11 1'h0


// Name:           VF_MEM5_SPACE_DECODER_11
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR5_ENABLED_11==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 11)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Space Indicator
`define VF_MEM5_SPACE_DECODER_11 1'h0


// Name:           VF_PREFETCHABLE5_11
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_11==1 && VF_MEM5_SPACE_DECODER_11==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 11)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Prefetchable 
//  When set indicates VF BAR5 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE5_11 1'h0


// Name:           VF_BAR5_TYPE_11
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 11; (bits [2:1] for a memory BAR).
`define VF_BAR5_TYPE_11 2'h0


// Name:           VF_BAR5_MASK_WRITABLE_11
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_11==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 11)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR5_MASK_WRITABLE_11 1'h0


// Name:           VF_BAR5_MASK_11
// Default:        0xffff (VF_MEM5_SPACE_DECODER_11==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR5_ENABLED_11==1 && VF_MEM5_SPACE_DECODER_11==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 11)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Mask 
//  Determines the default of the VF BAR Mask register for PF11. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR5_MASK_11 32'hffff


// Name:           VF_MEM_FUNC11_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR5_ENABLED_11==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 11)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF11 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC11_BAR5_TARGET_MAP 1'h1


`define VF_FUNC11_BARSIZE_32 128'h101000


`define VF_FUNC11_BARSIZE 128'h201000

//-/ END:   VF BAR CONFIGURATION
//-/===========================================

//-/ END:   SR-IOV CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: TPH CAPABILITIES CONFIGURATION


// Name:           TPH_IVEC_11
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Interrupt Vector Mode. If set indicates that the function supports the Interrupt Vector 
// Mode of operation. Function 11.
`define TPH_IVEC_11 1'h0


// Name:           TPH_DS_11
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Device Specific Mode. If set indicates that the function supports the Device Specific Mode 
// of operation. Function 11.
`define TPH_DS_11 1'h0


// Name:           TPH_ST_TABLE_LOC_11
// Default:        Not Present
// Values:         Not Present (0), TPH Requester Capability Structure (1), MSI-X 
//                 Table Structure (2)
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_DS_11 || TPH_IVEC_11))
// Parameter Type: Feature Setting
// 
// TLP Processing Hints Steering Tag Table Location. Value indicates if and where the ST Table is located. Function 11.
`define TPH_ST_TABLE_LOC_11 0

//located in the TPH Requester Capability structure. Please reduce the ST Table Size for this mode of operation"

// Name:           TPH_ST_TABLE_SIZE_11
// Default:        1
// Values:         1, ..., 2048
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_ST_TABLE_LOC_11 != 0))
// Parameter Type: Feature Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define TPH_ST_TABLE_SIZE_11 1


`define TPH_ST_TABLE_DEPTH_11 0

//-/ END:   TPH CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: ATS CAPABILITIES CONFIGURATION


// Name:           ATS_INV_Q_DPTH_11
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// The number of Invalidate Requests that the Function can accept before putting backpressure on the upstream connection. A 
// value of 0 indicates the function can accept 32 Invalidate requests. Function 11.
`define ATS_INV_Q_DPTH_11 5'd0


// Name:           ATS_STU_11
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// This value indicates to the Function the minimum number of 4096-byte blocks that is indicated in a Translation 
// Completion or Invalidate Request. This is a power of 2 multiplier and the number of blocks is 2^STU. A value of 0 indicates 1 block 
// and a value of 31 indicates 2^31 blocks (or 8 TB total). Function 11.
`define ATS_STU_11 5'd0

//-/ END:   ATS CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PRS CAPABILITIES CONFIGURATION


// Name:           CX_PRS_OUTSTANDING_CAPACITY_VALUE_11
// Default:        0x1
// Values:         0x0, ..., 0xffffffff
// Enabled:        (CX_PRS_ENABLE==1) && (CX_NFUNC > 11)
// Parameter Type: Register Default Setting
// 
// Register default for PRS Outstanding Capacity in PF11. 
// For more details, see the PRS_OUTSTANDING_CAPACITY field in the PRS_REQ_CAPACITY_REG register.
`define CX_PRS_OUTSTANDING_CAPACITY_VALUE_11 32'h1

//-/ END:   PRS CAPABILITIES CONFIGURATION
//-/===========================================


//-/===========================================
//--- START: RN


// Name:           CX_RN_IMM_VALUE_11
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 11)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for PF11.
`define CX_RN_IMM_VALUE_11 1'h0


// Name:           CX_RN_IMM_D0_VALUE_11
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 11)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for PF11.
`define CX_RN_IMM_D0_VALUE_11 1'h0


// Name:           CX_RN_FRS_VALUE_11
// Default:        0x0 (CX_RN_FRS_SUPPORTED==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_FRS_SUPPORTED==1) && (CX_NFUNC > 11)
// Parameter Type: Feature Setting
// 
// Function Readiness Status messaging supported for function PF11.
`define CX_RN_FRS_VALUE_11 1'h0


// Name:           CX_RN_RTR_VALID_11
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 11)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF11.
`define CX_RN_RTR_VALID_11 1'h0


// Name:           CX_RN_RTR_DL_UP_VALUE_11
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 11)
// Parameter Type: Register Default Setting
// 
// Register default for RTR DL Up Time field in PF11.
`define CX_RN_RTR_DL_UP_VALUE_11 12'h0


// Name:           CX_RN_RTR_RESET_VALUE_11
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 11)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF11.
`define CX_RN_RTR_RESET_VALUE_11 12'h0


// Name:           CX_RN_RTR_D3D0_VALUE_11
// Default:        0x0
// Values:         0x0, ..., 0x80a
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 11)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF11.
`define CX_RN_RTR_D3D0_VALUE_11 12'h0


// Name:           CX_RN_RTR_FLR_VALUE_11
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_FLR_ENABLE==1) && (CX_NFUNC > 11)
// Parameter Type: Register Default Setting
// 
// Register default for RTR FLR Time field in PF11.
`define CX_RN_RTR_FLR_VALUE_11 12'h0


// Name:           VF_RN_IMM_VALUE_11
// Default:        0x0 (CX_RN_IMM_VALUE_11 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 11))
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for VFs in PF11.
`define VF_RN_IMM_VALUE_11 1'h0


// Name:           VF_RN_IMM_D0_VALUE_11
// Default:        0x0 (CX_RN_IMM_D0_VALUE_11 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 11))
// Parameter Type: Register Default Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for VFs in PF11.
`define VF_RN_IMM_D0_VALUE_11 1'h0


// Name:           VF_RN_RTR_VALID_11
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 11) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF11 VFs.
`define VF_RN_RTR_VALID_11 1'h0


// Name:           VF_RN_RTR_RESET_VALUE_11
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_11)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 11) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF11 VFS.
`define VF_RN_RTR_RESET_VALUE_11 12'h0


// Name:           VF_RN_RTR_D3D0_VALUE_11
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_11)
// Values:         0x0, ..., 0x80a
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 11) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF11 VFS.
`define VF_RN_RTR_D3D0_VALUE_11 12'h0


// Name:           VF_RN_RTR_FLR_VALUE_11
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_11)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 11) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF11 VFs.
`define VF_RN_RTR_FLR_VALUE_11 12'h0


// Name:           EXT_VF_RN_RTR_VALID_11
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 11) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF11 VFs.
`define EXT_VF_RN_RTR_VALID_11 1'h0


// Name:           EXT_VF_RN_RTR_RESET_VALUE_11
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_11)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 11) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF11 VFS.
`define EXT_VF_RN_RTR_RESET_VALUE_11 12'h0


// Name:           EXT_VF_RN_RTR_D3D0_VALUE_11
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_11)
// Values:         0x0, ..., 0x80a
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 11) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF11 VFS.
`define EXT_VF_RN_RTR_D3D0_VALUE_11 12'h0


// Name:           EXT_VF_RN_RTR_FLR_VALUE_11
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_11)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 11) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF11 VFs.
`define EXT_VF_RN_RTR_FLR_VALUE_11 12'h0

//-/ END:   RN
//-/===========================================

//-/ START: LN CAPABILITIES CONFIGURATION
//-/===========================================


// Name:           CX_LN_REG_MAX_VALUE_11
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 11))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_64_SUPPORTED field in the LNR_CAP_OFF register for PF11.
`define CX_LN_REG_MAX_VALUE_11 5'h0


// Name:           CX_LN_128_SUPPORTED_VALUE_11
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 11))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_128_SUPPORTED field in the LNR_CAP_OFF register for PF11.
`define CX_LN_128_SUPPORTED_VALUE_11 1'h0


// Name:           CX_LN_64_SUPPORTED_VALUE_11
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 11))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_REGISTRATION_MAX field in the LNR_CAP_OFF register for PF11.
`define CX_LN_64_SUPPORTED_VALUE_11 1'h0

//-/ END:   LN CAPABILITIES CONFIGURATION
//-/===========================================




//-/==========================================
//-/ End FUNC11 Config
//-/==========================================

//-/===========================================
//-/ Function 12 Configuration Registers
//-/ ==========================================


// Name:         FUNC_12
// Default:      0 ((CX_NFUNC > 12) ? 1 : 0)
// Values:       0, 1
// 
// This parameter indicates that Function 12 is present
// `define FUNC_12

//-/===========================================
//-/ START: PCI-E CAPABILITIES CONFIGURATION


// Name:           PCIE_CAP_INT_MSG_NUM_12
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 12
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Message Number field in the PCI Express Capabilities Register. Function 12.
`define PCIE_CAP_INT_MSG_NUM_12 5'h0


// Name:           SLOT_IMPLEMENTED_12
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_NFUNC > 12))
// Parameter Type: Register Default Setting
// 
// Indicates that the PCI Express link associated with this Port is connected to a slot. Function 12.
`define SLOT_IMPLEMENTED_12 1'h0


// Name:           DEFAULT_PHANTOM_FUNC_SUPPORTED_12
// Default:        0x0
// Values:         0x0, ..., 0x3
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_PHANTOM_FUNC_SUPPORTED_12 2'h0


// Name:           DEFAULT_EXT_TAG_FIELD_SUPPORTED_12
// Default:        0x0 (DEFAULT_EXT_TAG_FIELD_SUPPORTED_0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 12
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_EXT_TAG_FIELD_SUPPORTED_12 1'h0



// Name:           DEFAULT_ATT_BUTT_PRE_12
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 12
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Button is present
`define DEFAULT_ATT_BUTT_PRE_12 1'h0


// Name:           DEFAULT_ATT_IND_PRE_12
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 12
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Indicator is present
`define DEFAULT_ATT_IND_PRE_12 1'h0


// Name:           DEFAULT_PWR_IND_PRE_12
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 12
// Parameter Type: Register Default Setting
// 
// When set indicates that a Power Indicator is present
`define DEFAULT_PWR_IND_PRE_12 1'h0


// Name:           DEFAULT_NO_SNOOP_SUPPORTED_12
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 12
// Parameter Type: Register Default Setting
// 
// Default value for the Enable No Snoop bit in the Device Control Register. Function 12.
`define DEFAULT_NO_SNOOP_SUPPORTED_12 1'h0


// Name:           ROOT_RCB_12
// Default:        64-bit
// Values:         64-bit (0x0), 128-bit (0x1)
// Parameter Type: Register Default Setting
// 
// Default value for the Read Completion Boundary (RCB) bit in the Link Control Register.
`define ROOT_RCB_12 1'h0


//-/ END:   PCI-E CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: MSI-X CAPABILITIES CONFIGURATION


// Name:           MSIX_TABLE_SIZE_12
// Default:        0x0
// Values:         0x0, ..., 0x7ff
// Enabled:        CX_NFUNC > 12 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the MSI-X Table Size field in the MSI-X Control Register. Function 12.
`define MSIX_TABLE_SIZE_12 11'h0


// Name:           MSIX_TABLE_BIR_12
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 12 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table BAR Indicator Register (BIR) field in the MSI-X Table Offset and BIR Register. Function 12.
`define MSIX_TABLE_BIR_12 3'h0


// Name:           MSIX_TABLE_OFFSET_12
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 12 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table Offset field in the MSI-X Table Offset and BIR Register. Function 12.
`define MSIX_TABLE_OFFSET_12 29'h0


// Name:           MSIX_PBA_BIR_12
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 12 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Pending Bit Array (PBA) BIR field in the MSI-X PBA Offset and BIR Register. Function 12.
`define MSIX_PBA_BIR_12 7'h0


// Name:           MSIX_PBA_OFFSET_12
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 12 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the PBA Offset field in the MSI-X PBA Offset and BIR Register. Function 12.
`define MSIX_PBA_OFFSET_12 29'h0

//-/ END:   MSI-X CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SATA CAPABILITIES CONFIGURATION


// Name:         SATA_HBA_OFFSET_12
// Default:      0x0
// Values:       0x0, ..., 0xfffff
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA Offset. Base address of the SATA HBA registers, 
//  as an offset from the base address of the BAR indicated 
//  by the SATA BAR field.
`define SATA_HBA_OFFSET_12 20'h0


// Name:         SATA_BAR_12
// Default:      0x0
// Values:       0x0, ..., 0xf
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA BAR. The bar that maps to SATA HBA registers,
`define SATA_BAR_12 4'h0

//-/ END:   SATA CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: AER CAPABILITIES CONFIGURATION


// Name:           DEFAULT_ECRC_CHK_CAP_12
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 12 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Check Capable bit in the Advanced Capabilities and Control Register. Function 12.
`define DEFAULT_ECRC_CHK_CAP_12 1'h1


// Name:           DEFAULT_ECRC_GEN_CAP_12
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 12 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Generation Capability bit in the Advanced Capabilities and Control Register. Function 12.
`define DEFAULT_ECRC_GEN_CAP_12 1'h1


// Name:           AER_INT_MSG_NUM_12
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Parameter Type: Register Default Setting
// 
// Default value for the Advanced Error Interrupt Message Number field of the Root Error Status Register. Function 12.
`define AER_INT_MSG_NUM_12 5'h0



// Name:           CX_HDR_LOG_DEPTH_12
// Default:        0x1
// Values:         0x1, 0x2, 0x4
// Enabled:        CX_NFUNC > 12 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Feature Setting.
// 
// Header Log Depth
`define CX_HDR_LOG_DEPTH_12 3'h1


`define CX_MULTIPLE_HDR_REC_CAP_12 1'h0

//-/ END:   AER CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PM CAPABILITIES CONFIGURATION


// Name:           PME_SUPPORT_12
// Default:        0x1b
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 12
// Parameter Type: Register Default Setting
// 
// Default value for the PME_Support field in the Power Management Capabilities Register. Function 12.
`define PME_SUPPORT_12 5'h1b


// Name:           D1_SUPPORT_12
// Default:        true
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 12
// Parameter Type: Register Default Setting
// 
// Default value for the D1 Support bit in the Power Management Capabilities Register. Function 12.
`define D1_SUPPORT_12 1'h1


// Name:           D2_SUPPORT_12
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 12
// Parameter Type: Register Default Setting
// 
// Default value for the D2 Support bit in the Power Management Capabilities Register. Function 12.
`define D2_SUPPORT_12 1'h0


// Name:           DEV_SPEC_INIT_12
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 12
// Parameter Type: Register Default Setting
// 
// Default value for the Device Specific Initialization (DSI) bit in the Power Management Capabilities Register. Function 
// 12.
`define DEV_SPEC_INIT_12 1'h0


// Name:           AUX_CURRENT_12
// Default:        375mA
// Values:         0mA (0x0), 55mA (0x1), 100mA (0x2), 160mA (0x3), 220mA (0x4), 270mA 
//                 (0x5), 320mA (0x6), 375mA (0x7)
// Enabled:        CX_NFUNC > 12
// Parameter Type: Register Default Setting
// 
// Default value for the Aux Current field in the Power Management Capabilities Register. Function 12.
`define AUX_CURRENT_12 3'h7


// Name:           DEFAULT_NO_SOFT_RESET_12
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 12
// Parameter Type: Register Default Setting
// 
// Default value for the No Soft Reset bit in the Power Management Control and Status Register. When set, you should not 
// reset any controller registers when transitioning from D3hot to D0. Therefore, you should not assert the non_sticky_rst_n 
// and sticky_rst_n inputs. Function 12.
`define DEFAULT_NO_SOFT_RESET_12 1'h0

//-/ END:   PM CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PCI BASIC CONFIGURATION


// Name:           CX_DEVICE_ID_12
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 12
// Parameter Type: Register Default Setting
// 
// Default value for the Device ID field in the Device ID and Vendor ID Register. Function 12.
`define CX_DEVICE_ID_12 16'h0


// Name:           CX_VENDOR_ID_12
// Default:        0x16c3
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 12
// Parameter Type: Register Default Setting
// 
// Default value for the Vendor ID field in the Device ID and Vendor ID Register. Function 12.
`define CX_VENDOR_ID_12 16'h16c3


// Name:           CX_REVISION_ID_12
// Default:        0x1
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 12
// Parameter Type: Register Default Setting
// 
// Default value for the Revision ID field in the Revision ID Register. Function 12.
`define CX_REVISION_ID_12 8'h1


// Name:           SUBSYS_DEV_ID_12
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 12
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 12.
`define SUBSYS_DEV_ID_12 16'h0


// Name:           SUBSYS_VENDOR_ID_12
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 12
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem Vendor ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 12.
`define SUBSYS_VENDOR_ID_12 16'h0


// Name:           BASE_CLASS_CODE_12
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 12
// Parameter Type: Register Default Setting
// 
// Default value for the Base Class Code field in the Class Code Register. Function 12.
`define BASE_CLASS_CODE_12 8'h0


// Name:           SUB_CLASS_CODE_12
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 12
// Parameter Type: Register Default Setting
// 
// Default value for the Subclass Code field in the Class Code Register. Function 12.
`define SUB_CLASS_CODE_12 8'h0


// Name:           IF_CODE_12
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 12
// Parameter Type: Register Default Setting
// 
// Default value for the Programming Interface field in the Class Code Register. Function 12.
`define IF_CODE_12 8'h0


// Name:           CARDBUS_CIS_PTR_12
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 12
// Parameter Type: Register Default Setting
// 
// Default value for the CardBus CIS Pointer Register. Function 12.
`define CARDBUS_CIS_PTR_12 16'h0


// Name:           INT_PIN_MAPPING_12
// Default:        INTA
// Values:         None (0x0), INTA (0x1), INTB (0x2), INTC (0x3), INTD (0x4)
// Enabled:        CX_NFUNC > 12
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Pin Register. Function 12.
`define INT_PIN_MAPPING_12 8'h1


// Name:           IO_DECODE_32_12
// Default:        16-bit
// Values:         16-bit (0x0), 32-bit (0x1)
// Enabled:        CX_NFUNC > 12
// Parameter Type: Register Default Setting
// 
// Default value for the 32-Bit I/O Space bit in the I/O Base and I/O Limit Register. Function 12.
`define IO_DECODE_32_12 1'h0


// Name:           MEM_DECODE_64_12
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x1)
// Enabled:        CX_NFUNC > 12
// Parameter Type: Register Default Setting
// 
// Default value for the 64-Bit Memory Addressing bit in the Prefetchable Memory Base and Limit Register. Function 12.
`define MEM_DECODE_64_12 1'h0


// Name:           ROM_BAR_ENABLED_12
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 12
// Parameter Type: Register Default Setting
// 
// Include the expansion ROM BAR registers. Function 12.
`define ROM_BAR_ENABLED_12 1'h1


`define DEFAULT_ROM_BAR_ENABLED_12 1'h1


// Name:           ROM_MASK_12
// Default:        0xffff
// Values:         0x7ff, ..., 0xffffff
// Enabled:        CX_NFUNC > 12 && ROM_BAR_ENABLED_12==1
// Parameter Type: Register Default Setting
// 
// Determines the default of the Expansion ROM BAR Mask register. Function 12. 
//  - The BAR Mask register specifies which bits of the Expansion ROM BAR are non-writable by host software, which 
//  determines the size of the BAR. 
//  - The maximum value for ROM_MASK_N is 0xFFFFFF because the maximum space that can be claimed by an Expansion ROM BAR 
//  is 16 MB. 
//  - For example: 32'hFFFF =BAR size of 2^16.
`define ROM_MASK_12 32'hffff


// Name:           ROM_MASK_WRITABLE_12
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 12 && ROM_BAR_ENABLED_12==1
// Parameter Type: Feature Setting
// 
// Determines if the Expansion ROM BAR Mask register for function 12 is writable by application software. If writing to a 
// Expansion ROM BAR Mask register is enabled, your application can write to the Expansion ROM BAR Mask register through the 
// DBI by asserting dbi_cs2 in addition to dbi_cs.
`define ROM_MASK_WRITABLE_12 1'h0


// Name:           ROM_FUNC12_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 12 && ROM_BAR_ENABLED_12==1 && TRGT1_POPULATE==1))
// Parameter Type: Register Default Setting
// 
// Direct incoming requests that pass filtering and match the Expansion ROM BAR of function 12 to either RTRGT0 or RTRGT1. 
//  - For example, setting ROM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for the Expansion ROM BAR of function 
//  0 to RTRGT1. 
//  - If TRGT1_POPULATE =0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define ROM_FUNC12_TARGET_MAP 1'h1


// Name:           CX_PCI_HEADER_DEFAULTS_VISIBLE_12
// Default:        0
// Values:         0, 1
// Parameter Type: Register Default Setting
// 
// Select here if you want to configure the defaults for the other PCI Standard Header registers for function 12. 
//  An extra window will appear under this page. To access it, click the plus/minus symbol in the hierarchy view on the 
//  left panel. 
//  This is optional but not usually recommended. 
//  You can also change these register defaults using the DBI before (or after) the link comes up.
`define CX_PCI_HEADER_DEFAULTS_VISIBLE_12 0

//-/ END:   PCI BASIC CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: BAR CONFIGURATION


// Name:           BAR0_ENABLED_12
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 12
// Parameter Type: Feature Setting
// 
// Include the BAR0 registers for function 12.
`define BAR0_ENABLED_12 1'h1


`define DEFAULT_BAR0_ENABLED_12 1'h1


// Name:           MEM0_SPACE_DECODER_12
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 12 && BAR0_ENABLED_12==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 12.
`define MEM0_SPACE_DECODER_12 1'h0


// Name:           PREFETCHABLE0_12
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 12 && BAR0_ENABLED_12==1 && MEM0_SPACE_DECODER_12==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 12.
`define PREFETCHABLE0_12 1'h0


// Name:           BAR0_TYPE_12
// Default:        64-bit ((MEM0_SPACE_DECODER_12==1 || BAR0_ENABLED_12==0) ? 0 : 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 12 && BAR0_ENABLED_12==1 && MEM0_SPACE_DECODER_12==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 12.
`define BAR0_TYPE_12 2'h2


// Name:           BAR0_SIZING_SCHEME_12
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 12 && BAR0_ENABLED_12==1
// Parameter Type: Feature Setting
// 
// BAR0 Function 12 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR0_SIZING_SCHEME_12 2'h0


// Name:           CX_BAR0_RESIZABLE_12
// Default:        0x0 ((BAR0_SIZING_SCHEME_12==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR0_ENABLED_12==1) && (MEM0_SPACE_DECODER_12==0)
// Parameter Type: Feature Setting
// 
// Defines BAR0 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR0 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR0_RESIZABLE_12 1'h0


// Name:           CX_BAR0_RESOURCE_AVAIL_12
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 12 && CX_BAR0_RESIZABLE_12==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR0 of function 12. 
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
// Example: 0x00000030 indicates that BAR0 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR0_RESOURCE_AVAIL_12 64'h10


// Name:           BAR0_MASK_WRITABLE_12
// Default:        0x0 ((BAR0_ENABLED_12==1 && BAR0_SIZING_SCHEME_12 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 12 && BAR0_ENABLED_12==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR0 Mask through DBI
`define BAR0_MASK_WRITABLE_12 1'h0


// Name:           BAR0_MASK_12
// Default:        0xfffff (CX_BAR0_RESIZABLE_12==1 ? [calc_bar_mask 
//                 CX_BAR0_RESOURCE_AVAIL_12] : MEM0_SPACE_DECODER_12==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 12 && BAR0_ENABLED_12==1 && MEM0_SPACE_DECODER_12==0 && 
//                 CX_BAR0_RESIZABLE_12==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR0 Mask register of function 12. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR0_MASK_12 64'hfffff


// Name:           MEM_FUNC12_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 12 && BAR0_ENABLED_12==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_0 of function 12 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming Requests for BAR0 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC12_BAR0_TARGET_MAP 1'h1


// Name:           BAR1_ENABLED_12
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 12 && BAR0_TYPE_12==0
// Parameter Type: Feature Setting
// 
// Include the BAR1 registers for function 12.
`define BAR1_ENABLED_12 1'h0


`define DEFAULT_BAR1_ENABLED_12 1'h0


// Name:           MEM1_SPACE_DECODER_12
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 12 && BAR1_ENABLED_12==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 12.
`define MEM1_SPACE_DECODER_12 1'h0


// Name:           PREFETCHABLE1_12
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 12 && BAR1_ENABLED_12==1 && MEM1_SPACE_DECODER_12==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 12.
`define PREFETCHABLE1_12 1'h0


// Name:           BAR1_TYPE_12
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 12.
`define BAR1_TYPE_12 2'h0


// Name:           BAR1_SIZING_SCHEME_12
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 12 && BAR1_ENABLED_12==1
// Parameter Type: Feature Setting
// 
// BAR1 Function 12 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR1_SIZING_SCHEME_12 2'h0


// Name:           CX_BAR1_RESIZABLE_12
// Default:        0x0 ((BAR1_SIZING_SCHEME_12==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR1_ENABLED_12==1) && (MEM1_SPACE_DECODER_12==0)
// Parameter Type: Feature Setting
// 
// Defines BAR1 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR1 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR1_RESIZABLE_12 1'h0


// Name:           CX_BAR1_RESOURCE_AVAIL_12
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 12 && CX_BAR1_RESIZABLE_12==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR1 of function 12. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR1 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR1_RESOURCE_AVAIL_12 32'h10


// Name:           BAR1_MASK_WRITABLE_12
// Default:        0x0 ((BAR1_ENABLED_12==1 && BAR1_SIZING_SCHEME_12 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 12 && BAR1_ENABLED_12==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR1 Mask through DBI
`define BAR1_MASK_WRITABLE_12 1'h0


// Name:           BAR1_MASK_12
// Default:        0xffff (CX_BAR1_RESIZABLE_12==1 ? [calc_bar_mask 
//                 CX_BAR1_RESOURCE_AVAIL_12] : MEM1_SPACE_DECODER_12==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 12 && BAR1_ENABLED_12==1 && MEM1_SPACE_DECODER_12==0 && 
//                 CX_BAR1_RESIZABLE_12==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR1 Mask register of function 12. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR1_MASK_12 32'hffff


// Name:           MEM_FUNC12_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 12 && BAR1_ENABLED_12==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_1 of function 12 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR1_TARGET_MAP to 1 maps all incoming Requests for BAR1 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC12_BAR1_TARGET_MAP 1'h1


// Name:           BAR2_ENABLED_12
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 12
// Parameter Type: Feature Setting
// 
// Include the BAR2 registers for function 12.
`define BAR2_ENABLED_12 1'h1


`define DEFAULT_BAR2_ENABLED_12 1'h1


// Name:           MEM2_SPACE_DECODER_12
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 12 && BAR2_ENABLED_12==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 12.
`define MEM2_SPACE_DECODER_12 1'h0


// Name:           PREFETCHABLE2_12
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 12 && BAR2_ENABLED_12==1 && MEM2_SPACE_DECODER_12==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 12.
`define PREFETCHABLE2_12 1'h0


// Name:           BAR2_TYPE_12
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 12 && BAR2_ENABLED_12==1 && MEM2_SPACE_DECODER_12==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 12.
`define BAR2_TYPE_12 2'h0


// Name:           BAR2_SIZING_SCHEME_12
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 12 && BAR2_ENABLED_12==1
// Parameter Type: Feature Setting
// 
// BAR2 Function 12 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR2_SIZING_SCHEME_12 2'h0


// Name:           CX_BAR2_RESIZABLE_12
// Default:        0x0 ((BAR2_SIZING_SCHEME_12==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR2_ENABLED_12==1) && (MEM2_SPACE_DECODER_12==0)
// Parameter Type: Feature Setting
// 
// Defines BAR2 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR2 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR2_RESIZABLE_12 1'h0


// Name:           CX_BAR2_RESOURCE_AVAIL_12
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 12 && CX_BAR2_RESIZABLE_12==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR2 of function 12. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR2 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR2_RESOURCE_AVAIL_12 64'h10


// Name:           BAR2_MASK_WRITABLE_12
// Default:        0x0 ((BAR2_ENABLED_12==1 && BAR2_SIZING_SCHEME_12 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 12 && BAR2_ENABLED_12==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR2 Mask through DBI
`define BAR2_MASK_WRITABLE_12 1'h0


// Name:           BAR2_MASK_12
// Default:        0xfffff (CX_BAR2_RESIZABLE_12==1 ? [calc_bar_mask 
//                 CX_BAR2_RESOURCE_AVAIL_12] : MEM2_SPACE_DECODER_12==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 12 && BAR2_ENABLED_12==1 && MEM2_SPACE_DECODER_12==0 && 
//                 CX_BAR2_RESIZABLE_12==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR2 Mask register of function 12. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR2_MASK_12 64'hfffff


// Name:           MEM_FUNC12_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 12 && BAR2_ENABLED_12==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_2 of function 12 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR2_TARGET_MAP to 1 maps all incoming requests for BAR2 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC12_BAR2_TARGET_MAP 1'h1


// Name:           BAR3_ENABLED_12
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 12 && BAR2_TYPE_12==0
// Parameter Type: Feature Setting
// 
// Include the BAR3 registers for function 12.
`define BAR3_ENABLED_12 1'h0



`define DEFAULT_BAR3_ENABLED_12 1'h0


// Name:           MEM3_SPACE_DECODER_12
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 12 && BAR3_ENABLED_12==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 12.
`define MEM3_SPACE_DECODER_12 1'h0


// Name:           PREFETCHABLE3_12
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 12 && BAR3_ENABLED_12==1 && MEM3_SPACE_DECODER_12==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 12.
`define PREFETCHABLE3_12 1'h0


// Name:           BAR3_TYPE_12
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 12.
`define BAR3_TYPE_12 2'h0


// Name:           BAR3_SIZING_SCHEME_12
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 12 && BAR3_ENABLED_12==1
// Parameter Type: Feature Setting
// 
// BAR3 Function 12 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR3_SIZING_SCHEME_12 2'h0


// Name:           CX_BAR3_RESIZABLE_12
// Default:        0x0 ((BAR3_SIZING_SCHEME_12==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR3_ENABLED_12==1) && (MEM3_SPACE_DECODER_12==0)
// Parameter Type: Feature Setting
// 
// Defines BAR3 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR3 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR3_RESIZABLE_12 1'h0


// Name:           CX_BAR3_RESOURCE_AVAIL_12
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 12 && CX_BAR3_RESIZABLE_12==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR3 of function 12. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR3 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR3_RESOURCE_AVAIL_12 32'h10


// Name:           BAR3_MASK_WRITABLE_12
// Default:        0x0 ((BAR3_ENABLED_12==1 && BAR3_SIZING_SCHEME_12 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 12 && BAR3_ENABLED_12==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR3 Mask through DBI
`define BAR3_MASK_WRITABLE_12 1'h0


// Name:           BAR3_MASK_12
// Default:        0xffff (CX_BAR3_RESIZABLE_12==1 ? [calc_bar_mask 
//                 CX_BAR3_RESOURCE_AVAIL_12] : MEM3_SPACE_DECODER_12==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 12 && BAR3_ENABLED_12==1 && MEM3_SPACE_DECODER_12==0 && 
//                 CX_BAR3_RESIZABLE_12==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR3 Mask register of function 12. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR3_MASK_12 32'hffff


// Name:           MEM_FUNC12_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 12 && BAR3_ENABLED_12==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_3 of function 12 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR3_TARGET_MAP to 1 maps all incoming requests for BAR3 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC12_BAR3_TARGET_MAP 1'h1


// Name:           BAR4_ENABLED_12
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 12
// Parameter Type: Feature Setting
// 
// Include the BAR4 registers for function 12.
`define BAR4_ENABLED_12 1'h1


`define DEFAULT_BAR4_ENABLED_12 1'h1



// Name:           MEM4_SPACE_DECODER_12
// Default:        I/O (BAR4_ENABLED_12==1)
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 12 && BAR4_ENABLED_12==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 12.
`define MEM4_SPACE_DECODER_12 1'h1


// Name:           PREFETCHABLE4_12
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 12 && BAR4_ENABLED_12==1 && MEM4_SPACE_DECODER_12==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 12.
`define PREFETCHABLE4_12 1'h0


// Name:           BAR4_TYPE_12
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 12 && BAR4_ENABLED_12==1 && MEM4_SPACE_DECODER_12==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 12.
`define BAR4_TYPE_12 2'h0


// Name:           BAR4_SIZING_SCHEME_12
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 12 && BAR4_ENABLED_12==1
// Parameter Type: Feature Setting
// 
// BAR4  Function 12 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR4_SIZING_SCHEME_12 2'h0


// Name:           CX_BAR4_RESIZABLE_12
// Default:        0x0 ((BAR4_SIZING_SCHEME_12==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR4_ENABLED_12==1) && (MEM4_SPACE_DECODER_12==0)
// Parameter Type: Feature Setting
// 
// Defines BAR4 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR4 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR4_RESIZABLE_12 1'h0


// Name:           CX_BAR4_RESOURCE_AVAIL_12
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 12 &&  CX_BAR4_RESIZABLE_12==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR4 of function 12. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR4 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR4_RESOURCE_AVAIL_12 64'h10


// Name:           BAR4_MASK_WRITABLE_12
// Default:        0x0 ((BAR4_ENABLED_12==1 && BAR4_SIZING_SCHEME_12 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 12 && BAR4_ENABLED_12==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR4 Mask through DBI
`define BAR4_MASK_WRITABLE_12 1'h0


// Name:           BAR4_MASK_12
// Default:        0xff (CX_BAR4_RESIZABLE_12==1 ? [calc_bar_mask 
//                 CX_BAR4_RESOURCE_AVAIL_12] : MEM4_SPACE_DECODER_12==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 12 && BAR4_ENABLED_12==1 && MEM4_SPACE_DECODER_12==0 && 
//                 CX_BAR4_RESIZABLE_12==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR4 Mask register of function 12. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR4_MASK_12 64'hff


// Name:           MEM_FUNC12_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 12 && BAR4_ENABLED_12==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_4 of function 12 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR4_TARGET_MAP to 1 maps all incoming requests for BAR4 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC12_BAR4_TARGET_MAP 1'h1


// Name:           BAR5_ENABLED_12
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 12 && BAR4_TYPE_12==0
// Parameter Type: Feature Setting
// 
// Include the BAR5 registers for function 12.
`define BAR5_ENABLED_12 1'h0


`define DEFAULT_BAR5_ENABLED_12 1'h0


// Name:           MEM5_SPACE_DECODER_12
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 12 && BAR5_ENABLED_12==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 12.
`define MEM5_SPACE_DECODER_12 1'h0


// Name:           PREFETCHABLE5_12
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 12 && BAR5_ENABLED_12==1 && MEM5_SPACE_DECODER_12==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 12.
`define PREFETCHABLE5_12 1'h0


// Name:           BAR5_TYPE_12
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 12.
`define BAR5_TYPE_12 2'h0


// Name:           BAR5_SIZING_SCHEME_12
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 12 && BAR5_ENABLED_12==1
// Parameter Type: Feature Setting
// 
// BAR5  Function 12 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR5_SIZING_SCHEME_12 2'h0


// Name:           CX_BAR5_RESIZABLE_12
// Default:        0x0 ((BAR5_SIZING_SCHEME_12==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR5_ENABLED_12==1) && (MEM5_SPACE_DECODER_12==0)
// Parameter Type: Feature Setting
// 
// Defines BAR5 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR5 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR5_RESIZABLE_12 1'h0


// Name:           CX_BAR5_RESOURCE_AVAIL_12
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 12 && CX_BAR5_RESIZABLE_12==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR5 of function 12. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR5 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR5_RESOURCE_AVAIL_12 32'h10


// Name:           BAR5_MASK_WRITABLE_12
// Default:        0x0 ((BAR5_ENABLED_12==1 && BAR5_SIZING_SCHEME_12 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 12 && BAR5_ENABLED_12==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR5 Mask through DBI
`define BAR5_MASK_WRITABLE_12 1'h0


// Name:           BAR5_MASK_12
// Default:        0xffff (CX_BAR5_RESIZABLE_12==1 ? [calc_bar_mask 
//                 CX_BAR5_RESOURCE_AVAIL_12] : MEM5_SPACE_DECODER_12==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 12 && BAR5_ENABLED_12==1 && MEM5_SPACE_DECODER_12==0 && 
//                 CX_BAR5_RESIZABLE_12==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR5 Mask register of function 12. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR5_MASK_12 32'hffff


// Name:           MEM_FUNC12_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 12 && BAR5_ENABLED_12==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_5 of function 12 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR5_TARGET_MAP to 1 maps all incoming requests for BAR5 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC12_BAR5_TARGET_MAP 1'h1


`define FUNC12_BARSIZE_32 128'h0


`define FUNC12_BARSIZE 128'h0


`define FUNC12_BAR0_BARSIZE_TRGT1 128'h0


`define FUNC12_BAR2_BARSIZE_TRGT1 128'h0


`define FUNC12_BAR4_BARSIZE_TRGT1 128'h0


`define FUNC12_BAR0_TRGT1_ADDR_WIDTH 1


`define FUNC12_BAR2_TRGT1_ADDR_WIDTH 1


`define FUNC12_BAR4_TRGT1_ADDR_WIDTH 1


// Name:         CX_NUM_RBARS_12
// Default:      0 ([calc_num_rbars CX_BAR0_RESIZABLE_12 CX_BAR1_RESIZABLE_12 
//               CX_BAR2_RESIZABLE_12 CX_BAR3_RESIZABLE_12 CX_BAR4_RESIZABLE_12 
//               CX_BAR5_RESIZABLE_12])
// Values:       -2147483648, ..., 2147483647
// 
// Number of resizable BARs
`define CX_NUM_RBARS_12 0

//-/ END:   BAR CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SR-IOV CAPABILITIES CONFIGURATION


// Name:           CX_VF_DEPENDENCY_LINK_12
// Default:        0x12
// Values:         0x0, ..., 0xff
// Enabled:        CX_VF_DEPENDENCY_LINK_SUPP && (CX_NFUNC > 12) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Specifies the 8-bit VF dependency link for PF12. Valid only if CX_VF_DEPENDENCY_LINK_SUPP=1.
`define CX_VF_DEPENDENCY_LINK_12 8'h12


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER1_12
// Default:        0x2 ((CX_NFUNC>=17) ? 32 : (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : 
//                 (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF12 in an ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER1_12 16'h2


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER0_12
// Default:        0x100
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF12 
//  in a non-ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER0_12 16'h100


// Name:           VF_STRIDE_ARI_CAP_HIER1_12
// Default:        0x2 (CX_VF_STRIDE_ALWAYS_ONE) ? 1 : ((CX_NFUNC>=17) ? 32 : 
//                 (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF12 in an ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER1_12 16'h2


// Name:           VF_STRIDE_ARI_CAP_HIER0_12
// Default:        0x100 ((CX_VF_STRIDE_ALWAYS_ONE) ? 0x0001 : 0x0100)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF12 in a non-ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER0_12 16'h100


// Name:           CX_VF_DEVICE_ID_12
// Default:        0x0 (CX_DEVICE_ID_12)
// Values:         0x0, ..., 0xffff
// Enabled:        (CX_NFUNC > 12) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 16-bit virtual function Device ID for PF12. 
//  It might be different from the physical function's.
`define CX_VF_DEVICE_ID_12 16'h0


// Name:           CX_VF_SUPP_PAGE_SIZE_12
// Default:        0x553
// Values:         0x553, ..., 0xffff
// Enabled:        (CX_NFUNC > 12) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 32-bit supported page sizes for virtual functions for PF12
`define CX_VF_SUPP_PAGE_SIZE_12 32'h553


// Name:           CX_ARI_CAP_HIER_PRSVD_12
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Specifies if ARI Capable Hierarchy bit is preserved across certain power state transitions 
//  Only present in PF0. Read Only Zero in this PF12.
`define CX_ARI_CAP_HIER_PRSVD_12 1'h0

//-/===========================================
//-/ START: VF BAR CONFIGURATION


// Name:           VF_BAR0_ENABLED_12
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 12)
// Parameter Type: Feature Setting
// 
// Include the VF BAR0 registers in PF12
`define VF_BAR0_ENABLED_12 1'h1


`define VF_DEFAULT_BAR0_ENABLED_12 1'h1


// Name:           VF_MEM0_SPACE_DECODER_12
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR0_ENABLED_12 && CX_SRIOV_ENABLE && (CX_NFUNC > 12)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Space Indicator 
//  ALWAYS set to Memory for Virtual Functions
`define VF_MEM0_SPACE_DECODER_12 1'h0


// Name:           VF_PREFETCHABLE0_12
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_12==1 && VF_MEM0_SPACE_DECODER_12==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 12)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Prefetchable 
//  When set indicates VF BAR0 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE0_12 1'h0


// Name:           VF_BAR0_TYPE_12
// Default:        64-bit ((VF_MEM0_SPACE_DECODER_12==1 || VF_BAR0_ENABLED_12==0) ? 0 
//                 : 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR0_ENABLED_12==1 && VF_MEM0_SPACE_DECODER_12==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 12)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 12; (bits [2:1] for a memory BAR).
`define VF_BAR0_TYPE_12 2'h2


// Name:           VF_BAR0_MASK_WRITABLE_12
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_12==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 12)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR0_MASK_WRITABLE_12 1'h0


// Name:           VF_BAR0_MASK_12
// Default:        0xfffff (VF_MEM0_SPACE_DECODER_12==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR0_ENABLED_12==1 && VF_MEM0_SPACE_DECODER_12==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 12)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Mask 
//  Determines the default of the VF BAR Mask register for PF12. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR0_MASK_12 64'hfffff


// Name:           VF_MEM_FUNC12_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR0_ENABLED_12==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE 
//                 && (CX_NFUNC > 12)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF12 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC12_BAR0_TARGET_MAP 1'h1


// Name:           VF_BAR1_ENABLED_12
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        (VF_BAR0_TYPE_12==0)  && CX_SRIOV_ENABLE && (CX_NFUNC > 12)
// Parameter Type: Feature Setting
// 
// Include the VF BAR1 registers in PF12
`define VF_BAR1_ENABLED_12 1'h0


`define VF_DEFAULT_BAR1_ENABLED_12 1'h0


// Name:           VF_MEM1_SPACE_DECODER_12
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR1_ENABLED_12==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 12)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Space Indicator
`define VF_MEM1_SPACE_DECODER_12 1'h0


// Name:           VF_PREFETCHABLE1_12
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_12==1 && VF_MEM1_SPACE_DECODER_12==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 12)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Prefetchable 
//  When set indicates VF BAR1 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE1_12 1'h0


// Name:           VF_BAR1_TYPE_12
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 12; (bits [2:1] for a memory BAR).
`define VF_BAR1_TYPE_12 2'h0


// Name:           VF_BAR1_MASK_WRITABLE_12
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_12==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 12)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR1_MASK_WRITABLE_12 1'h0


// Name:           VF_BAR1_MASK_12
// Default:        0xffff (VF_MEM1_SPACE_DECODER_12==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR1_ENABLED_12==1 && VF_MEM1_SPACE_DECODER_12==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 12)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Mask 
//  Determines the default of the VF BAR Mask register for PF12. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR1_MASK_12 32'hffff


// Name:           VF_MEM_FUNC12_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR1_ENABLED_12==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE 
//                 && (CX_NFUNC > 12)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF12 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC12_BAR1_TARGET_MAP 1'h1


// Name:           VF_BAR2_ENABLED_12
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 12)
// Parameter Type: Feature Setting
// 
// Include the VF BAR2 registers in PF12
`define VF_BAR2_ENABLED_12 1'h1


`define VF_DEFAULT_BAR2_ENABLED_12 1'h1


// Name:           VF_MEM2_SPACE_DECODER_12
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR2_ENABLED_12==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 12)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Memory Space Indicator
`define VF_MEM2_SPACE_DECODER_12 1'h0


// Name:           VF_PREFETCHABLE2_12
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_12==1 && VF_MEM2_SPACE_DECODER_12==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 12)
// Parameter Type: Register Default Setting
// 
// BAR2 Memory Prefetchable 
//  When set indicates VF BAR2 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE2_12 1'h0


// Name:           VF_BAR2_TYPE_12
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR2_ENABLED_12==1 && VF_MEM2_SPACE_DECODER_12==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 12)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 12; (bits [2:1] for a memory BAR).
`define VF_BAR2_TYPE_12 2'h0


// Name:           VF_BAR2_MASK_WRITABLE_12
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_12==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 12)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR2_MASK_WRITABLE_12 1'h0


// Name:           VF_BAR2_MASK_12
// Default:        0xfffff (VF_MEM2_SPACE_DECODER_12==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR2_ENABLED_12==1 && VF_MEM2_SPACE_DECODER_12==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 12)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Mask 
//  Determines the default of the VF BAR Mask register for PF12. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR2_MASK_12 64'hfffff


// Name:           VF_MEM_FUNC12_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR2_ENABLED_12==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 12)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF12 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC12_BAR2_TARGET_MAP 1'h1


// Name:           VF_BAR3_ENABLED_12
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_TYPE_12==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 12)
// Parameter Type: Feature Setting
// 
// Include the VF BAR3 registers in PF12
`define VF_BAR3_ENABLED_12 1'h0


`define VF_DEFAULT_BAR3_ENABLED_12 1'h0


// Name:           VF_MEM3_SPACE_DECODER_12
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR3_ENABLED_12==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 12)
// Parameter Type: Register Default Setting
// 
// BAR3 Memory Space Indicator
`define VF_MEM3_SPACE_DECODER_12 1'h0


// Name:           VF_PREFETCHABLE3_12
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_12==1 && VF_MEM3_SPACE_DECODER_12==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 12)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Memory Prefetchable 
//  When set indicates VF BAR3 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE3_12 1'h0


// Name:           VF_BAR3_TYPE_12
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 12; (bits [2:1] for a memory BAR).
`define VF_BAR3_TYPE_12 2'h0


// Name:           VF_BAR3_MASK_WRITABLE_12
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_12==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 12)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR3_MASK_WRITABLE_12 1'h0


// Name:           VF_BAR3_MASK_12
// Default:        0xffff (VF_MEM3_SPACE_DECODER_12==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR3_ENABLED_12==1 && VF_MEM3_SPACE_DECODER_12==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 12)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Mask 
//  Determines the default of the VF BAR Mask register for PF12. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR3_MASK_12 32'hffff


// Name:           VF_MEM_FUNC12_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR3_ENABLED_12==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 12)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF12 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC12_BAR3_TARGET_MAP 1'h1


// Name:           VF_BAR4_ENABLED_12
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 12)
// Parameter Type: Feature Setting
// 
// Include the VF BAR4 registers in PF12
`define VF_BAR4_ENABLED_12 1'h1


`define VF_DEFAULT_BAR4_ENABLED_12 1'h1


// Name:           VF_MEM4_SPACE_DECODER_12
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR4_ENABLED_12==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 12)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Space Indicator
`define VF_MEM4_SPACE_DECODER_12 1'h0


// Name:           VF_PREFETCHABLE4_12
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_12==1 && VF_MEM4_SPACE_DECODER_12==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 12)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Prefetchable 
//  When set indicates VF BAR4 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE4_12 1'h0


// Name:           VF_BAR4_TYPE_12
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR4_ENABLED_12==1 && VF_MEM4_SPACE_DECODER_12==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 12)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 12; (bits [2:1] for a memory BAR).
`define VF_BAR4_TYPE_12 2'h0


// Name:           VF_BAR4_MASK_WRITABLE_12
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_12==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 12)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR4_MASK_WRITABLE_12 1'h0


// Name:           VF_BAR4_MASK_12
// Default:        0xfff (VF_MEM4_SPACE_DECODER_12==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR4_ENABLED_12==1 && VF_MEM4_SPACE_DECODER_12==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 12)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Mask 
//  Determines the default of the VF BAR Mask register for PF12. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR4_MASK_12 64'hfff


// Name:           VF_MEM_FUNC12_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR4_ENABLED_12==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 12)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF12 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC12_BAR4_TARGET_MAP 1'h1


// Name:           VF_BAR5_ENABLED_12
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_TYPE_12==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 12)
// Parameter Type: Feature Setting
// 
// Include the VF BAR5 registers in PF12
`define VF_BAR5_ENABLED_12 1'h0


`define VF_DEFAULT_BAR5_ENABLED_12 1'h0


// Name:           VF_MEM5_SPACE_DECODER_12
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR5_ENABLED_12==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 12)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Space Indicator
`define VF_MEM5_SPACE_DECODER_12 1'h0


// Name:           VF_PREFETCHABLE5_12
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_12==1 && VF_MEM5_SPACE_DECODER_12==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 12)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Prefetchable 
//  When set indicates VF BAR5 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE5_12 1'h0


// Name:           VF_BAR5_TYPE_12
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 12; (bits [2:1] for a memory BAR).
`define VF_BAR5_TYPE_12 2'h0


// Name:           VF_BAR5_MASK_WRITABLE_12
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_12==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 12)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR5_MASK_WRITABLE_12 1'h0


// Name:           VF_BAR5_MASK_12
// Default:        0xffff (VF_MEM5_SPACE_DECODER_12==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR5_ENABLED_12==1 && VF_MEM5_SPACE_DECODER_12==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 12)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Mask 
//  Determines the default of the VF BAR Mask register for PF12. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR5_MASK_12 32'hffff


// Name:           VF_MEM_FUNC12_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR5_ENABLED_12==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 12)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF12 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC12_BAR5_TARGET_MAP 1'h1


`define VF_FUNC12_BARSIZE_32 128'h101000


`define VF_FUNC12_BARSIZE 128'h201000

//-/ END:   VF BAR CONFIGURATION
//-/===========================================

//-/ END:   SR-IOV CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: TPH CAPABILITIES CONFIGURATION


// Name:           TPH_IVEC_12
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Interrupt Vector Mode. If set indicates that the function supports the Interrupt Vector 
// Mode of operation. Function 12.
`define TPH_IVEC_12 1'h0


// Name:           TPH_DS_12
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Device Specific Mode. If set indicates that the function supports the Device Specific Mode 
// of operation. Function 12.
`define TPH_DS_12 1'h0


// Name:           TPH_ST_TABLE_LOC_12
// Default:        Not Present
// Values:         Not Present (0), TPH Requester Capability Structure (1), MSI-X 
//                 Table Structure (2)
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_DS_12 || TPH_IVEC_12))
// Parameter Type: Feature Setting
// 
// TLP Processing Hints Steering Tag Table Location. Value indicates if and where the ST Table is located. Function 12.
`define TPH_ST_TABLE_LOC_12 0

//located in the TPH Requester Capability structure. Please reduce the ST Table Size for this mode of operation"

// Name:           TPH_ST_TABLE_SIZE_12
// Default:        1
// Values:         1, ..., 2048
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_ST_TABLE_LOC_12 != 0))
// Parameter Type: Feature Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define TPH_ST_TABLE_SIZE_12 1


`define TPH_ST_TABLE_DEPTH_12 0

//-/ END:   TPH CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: ATS CAPABILITIES CONFIGURATION


// Name:           ATS_INV_Q_DPTH_12
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// The number of Invalidate Requests that the Function can accept before putting backpressure on the upstream connection. A 
// value of 0 indicates the function can accept 32 Invalidate requests. Function 12.
`define ATS_INV_Q_DPTH_12 5'd0


// Name:           ATS_STU_12
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// This value indicates to the Function the minimum number of 4096-byte blocks that is indicated in a Translation 
// Completion or Invalidate Request. This is a power of 2 multiplier and the number of blocks is 2^STU. A value of 0 indicates 1 block 
// and a value of 31 indicates 2^31 blocks (or 8 TB total). Function 12.
`define ATS_STU_12 5'd0

//-/ END:   ATS CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PRS CAPABILITIES CONFIGURATION


// Name:           CX_PRS_OUTSTANDING_CAPACITY_VALUE_12
// Default:        0x1
// Values:         0x0, ..., 0xffffffff
// Enabled:        (CX_PRS_ENABLE==1) && (CX_NFUNC > 12)
// Parameter Type: Register Default Setting
// 
// Register default for PRS Outstanding Capacity in PF12. 
// For more details, see the PRS_OUTSTANDING_CAPACITY field in the PRS_REQ_CAPACITY_REG register.
`define CX_PRS_OUTSTANDING_CAPACITY_VALUE_12 32'h1

//-/ END:   PRS CAPABILITIES CONFIGURATION
//-/===========================================


//-/===========================================
//--- START: RN


// Name:           CX_RN_IMM_VALUE_12
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 12)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for PF12.
`define CX_RN_IMM_VALUE_12 1'h0


// Name:           CX_RN_IMM_D0_VALUE_12
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 12)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for PF12.
`define CX_RN_IMM_D0_VALUE_12 1'h0


// Name:           CX_RN_FRS_VALUE_12
// Default:        0x0 (CX_RN_FRS_SUPPORTED==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_FRS_SUPPORTED==1) && (CX_NFUNC > 12)
// Parameter Type: Feature Setting
// 
// Function Readiness Status messaging supported for function PF12.
`define CX_RN_FRS_VALUE_12 1'h0


// Name:           CX_RN_RTR_VALID_12
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 12)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF12.
`define CX_RN_RTR_VALID_12 1'h0


// Name:           CX_RN_RTR_DL_UP_VALUE_12
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 12)
// Parameter Type: Register Default Setting
// 
// Register default for RTR DL Up Time field in PF12.
`define CX_RN_RTR_DL_UP_VALUE_12 12'h0


// Name:           CX_RN_RTR_RESET_VALUE_12
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 12)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF12.
`define CX_RN_RTR_RESET_VALUE_12 12'h0


// Name:           CX_RN_RTR_D3D0_VALUE_12
// Default:        0x0
// Values:         0x0, ..., 0x80a
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 12)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF12.
`define CX_RN_RTR_D3D0_VALUE_12 12'h0


// Name:           CX_RN_RTR_FLR_VALUE_12
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_FLR_ENABLE==1) && (CX_NFUNC > 12)
// Parameter Type: Register Default Setting
// 
// Register default for RTR FLR Time field in PF12.
`define CX_RN_RTR_FLR_VALUE_12 12'h0


// Name:           VF_RN_IMM_VALUE_12
// Default:        0x0 (CX_RN_IMM_VALUE_12 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 12))
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for VFs in PF12.
`define VF_RN_IMM_VALUE_12 1'h0


// Name:           VF_RN_IMM_D0_VALUE_12
// Default:        0x0 (CX_RN_IMM_D0_VALUE_12 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 12))
// Parameter Type: Register Default Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for VFs in PF12.
`define VF_RN_IMM_D0_VALUE_12 1'h0


// Name:           VF_RN_RTR_VALID_12
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 12) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF12 VFs.
`define VF_RN_RTR_VALID_12 1'h0


// Name:           VF_RN_RTR_RESET_VALUE_12
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_12)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 12) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF12 VFS.
`define VF_RN_RTR_RESET_VALUE_12 12'h0


// Name:           VF_RN_RTR_D3D0_VALUE_12
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_12)
// Values:         0x0, ..., 0x80a
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 12) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF12 VFS.
`define VF_RN_RTR_D3D0_VALUE_12 12'h0


// Name:           VF_RN_RTR_FLR_VALUE_12
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_12)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 12) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF12 VFs.
`define VF_RN_RTR_FLR_VALUE_12 12'h0


// Name:           EXT_VF_RN_RTR_VALID_12
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 12) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF12 VFs.
`define EXT_VF_RN_RTR_VALID_12 1'h0


// Name:           EXT_VF_RN_RTR_RESET_VALUE_12
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_12)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 12) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF12 VFS.
`define EXT_VF_RN_RTR_RESET_VALUE_12 12'h0


// Name:           EXT_VF_RN_RTR_D3D0_VALUE_12
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_12)
// Values:         0x0, ..., 0x80a
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 12) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF12 VFS.
`define EXT_VF_RN_RTR_D3D0_VALUE_12 12'h0


// Name:           EXT_VF_RN_RTR_FLR_VALUE_12
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_12)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 12) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF12 VFs.
`define EXT_VF_RN_RTR_FLR_VALUE_12 12'h0

//-/ END:   RN
//-/===========================================

//-/ START: LN CAPABILITIES CONFIGURATION
//-/===========================================


// Name:           CX_LN_REG_MAX_VALUE_12
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 12))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_64_SUPPORTED field in the LNR_CAP_OFF register for PF12.
`define CX_LN_REG_MAX_VALUE_12 5'h0


// Name:           CX_LN_128_SUPPORTED_VALUE_12
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 12))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_128_SUPPORTED field in the LNR_CAP_OFF register for PF12.
`define CX_LN_128_SUPPORTED_VALUE_12 1'h0


// Name:           CX_LN_64_SUPPORTED_VALUE_12
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 12))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_REGISTRATION_MAX field in the LNR_CAP_OFF register for PF12.
`define CX_LN_64_SUPPORTED_VALUE_12 1'h0

//-/ END:   LN CAPABILITIES CONFIGURATION
//-/===========================================




//-/==========================================
//-/ End FUNC12 Config
//-/==========================================

//-/===========================================
//-/ Function 13 Configuration Registers
//-/ ==========================================


// Name:         FUNC_13
// Default:      0 ((CX_NFUNC > 13) ? 1 : 0)
// Values:       0, 1
// 
// This parameter indicates that Function 13 is present
// `define FUNC_13

//-/===========================================
//-/ START: PCI-E CAPABILITIES CONFIGURATION


// Name:           PCIE_CAP_INT_MSG_NUM_13
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 13
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Message Number field in the PCI Express Capabilities Register. Function 13.
`define PCIE_CAP_INT_MSG_NUM_13 5'h0


// Name:           SLOT_IMPLEMENTED_13
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_NFUNC > 13))
// Parameter Type: Register Default Setting
// 
// Indicates that the PCI Express link associated with this Port is connected to a slot. Function 13.
`define SLOT_IMPLEMENTED_13 1'h0


// Name:           DEFAULT_PHANTOM_FUNC_SUPPORTED_13
// Default:        0x0
// Values:         0x0, ..., 0x3
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_PHANTOM_FUNC_SUPPORTED_13 2'h0


// Name:           DEFAULT_EXT_TAG_FIELD_SUPPORTED_13
// Default:        0x0 (DEFAULT_EXT_TAG_FIELD_SUPPORTED_0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 13
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_EXT_TAG_FIELD_SUPPORTED_13 1'h0



// Name:           DEFAULT_ATT_BUTT_PRE_13
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 13
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Button is present
`define DEFAULT_ATT_BUTT_PRE_13 1'h0


// Name:           DEFAULT_ATT_IND_PRE_13
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 13
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Indicator is present
`define DEFAULT_ATT_IND_PRE_13 1'h0


// Name:           DEFAULT_PWR_IND_PRE_13
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 13
// Parameter Type: Register Default Setting
// 
// When set indicates that a Power Indicator is present
`define DEFAULT_PWR_IND_PRE_13 1'h0


// Name:           DEFAULT_NO_SNOOP_SUPPORTED_13
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 13
// Parameter Type: Register Default Setting
// 
// Default value for the Enable No Snoop bit in the Device Control Register. Function 13.
`define DEFAULT_NO_SNOOP_SUPPORTED_13 1'h0


// Name:           ROOT_RCB_13
// Default:        64-bit
// Values:         64-bit (0x0), 128-bit (0x1)
// Parameter Type: Register Default Setting
// 
// Default value for the Read Completion Boundary (RCB) bit in the Link Control Register.
`define ROOT_RCB_13 1'h0


//-/ END:   PCI-E CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: MSI-X CAPABILITIES CONFIGURATION


// Name:           MSIX_TABLE_SIZE_13
// Default:        0x0
// Values:         0x0, ..., 0x7ff
// Enabled:        CX_NFUNC > 13 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the MSI-X Table Size field in the MSI-X Control Register. Function 13.
`define MSIX_TABLE_SIZE_13 11'h0


// Name:           MSIX_TABLE_BIR_13
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 13 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table BAR Indicator Register (BIR) field in the MSI-X Table Offset and BIR Register. Function 13.
`define MSIX_TABLE_BIR_13 3'h0


// Name:           MSIX_TABLE_OFFSET_13
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 13 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table Offset field in the MSI-X Table Offset and BIR Register. Function 13.
`define MSIX_TABLE_OFFSET_13 29'h0


// Name:           MSIX_PBA_BIR_13
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 13 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Pending Bit Array (PBA) BIR field in the MSI-X PBA Offset and BIR Register. Function 13.
`define MSIX_PBA_BIR_13 7'h0


// Name:           MSIX_PBA_OFFSET_13
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 13 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the PBA Offset field in the MSI-X PBA Offset and BIR Register. Function 13.
`define MSIX_PBA_OFFSET_13 29'h0

//-/ END:   MSI-X CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SATA CAPABILITIES CONFIGURATION


// Name:         SATA_HBA_OFFSET_13
// Default:      0x0
// Values:       0x0, ..., 0xfffff
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA Offset. Base address of the SATA HBA registers, 
//  as an offset from the base address of the BAR indicated 
//  by the SATA BAR field.
`define SATA_HBA_OFFSET_13 20'h0


// Name:         SATA_BAR_13
// Default:      0x0
// Values:       0x0, ..., 0xf
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA BAR. The bar that maps to SATA HBA registers,
`define SATA_BAR_13 4'h0

//-/ END:   SATA CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: AER CAPABILITIES CONFIGURATION


// Name:           DEFAULT_ECRC_CHK_CAP_13
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 13 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Check Capable bit in the Advanced Capabilities and Control Register. Function 13.
`define DEFAULT_ECRC_CHK_CAP_13 1'h1


// Name:           DEFAULT_ECRC_GEN_CAP_13
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 13 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Generation Capability bit in the Advanced Capabilities and Control Register. Function 13.
`define DEFAULT_ECRC_GEN_CAP_13 1'h1


// Name:           AER_INT_MSG_NUM_13
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Parameter Type: Register Default Setting
// 
// Default value for the Advanced Error Interrupt Message Number field of the Root Error Status Register. Function 13.
`define AER_INT_MSG_NUM_13 5'h0



// Name:           CX_HDR_LOG_DEPTH_13
// Default:        0x1
// Values:         0x1, 0x2, 0x4
// Enabled:        CX_NFUNC > 13 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Feature Setting.
// 
// Header Log Depth
`define CX_HDR_LOG_DEPTH_13 3'h1


`define CX_MULTIPLE_HDR_REC_CAP_13 1'h0

//-/ END:   AER CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PM CAPABILITIES CONFIGURATION


// Name:           PME_SUPPORT_13
// Default:        0x1b
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 13
// Parameter Type: Register Default Setting
// 
// Default value for the PME_Support field in the Power Management Capabilities Register. Function 13.
`define PME_SUPPORT_13 5'h1b


// Name:           D1_SUPPORT_13
// Default:        true
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 13
// Parameter Type: Register Default Setting
// 
// Default value for the D1 Support bit in the Power Management Capabilities Register. Function 13.
`define D1_SUPPORT_13 1'h1


// Name:           D2_SUPPORT_13
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 13
// Parameter Type: Register Default Setting
// 
// Default value for the D2 Support bit in the Power Management Capabilities Register. Function 13.
`define D2_SUPPORT_13 1'h0


// Name:           DEV_SPEC_INIT_13
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 13
// Parameter Type: Register Default Setting
// 
// Default value for the Device Specific Initialization (DSI) bit in the Power Management Capabilities Register. Function 
// 13.
`define DEV_SPEC_INIT_13 1'h0


// Name:           AUX_CURRENT_13
// Default:        375mA
// Values:         0mA (0x0), 55mA (0x1), 100mA (0x2), 160mA (0x3), 220mA (0x4), 270mA 
//                 (0x5), 320mA (0x6), 375mA (0x7)
// Enabled:        CX_NFUNC > 13
// Parameter Type: Register Default Setting
// 
// Default value for the Aux Current field in the Power Management Capabilities Register. Function 13.
`define AUX_CURRENT_13 3'h7


// Name:           DEFAULT_NO_SOFT_RESET_13
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 13
// Parameter Type: Register Default Setting
// 
// Default value for the No Soft Reset bit in the Power Management Control and Status Register. When set, you should not 
// reset any controller registers when transitioning from D3hot to D0. Therefore, you should not assert the non_sticky_rst_n 
// and sticky_rst_n inputs. Function 13.
`define DEFAULT_NO_SOFT_RESET_13 1'h0

//-/ END:   PM CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PCI BASIC CONFIGURATION


// Name:           CX_DEVICE_ID_13
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 13
// Parameter Type: Register Default Setting
// 
// Default value for the Device ID field in the Device ID and Vendor ID Register. Function 13.
`define CX_DEVICE_ID_13 16'h0


// Name:           CX_VENDOR_ID_13
// Default:        0x16c3
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 13
// Parameter Type: Register Default Setting
// 
// Default value for the Vendor ID field in the Device ID and Vendor ID Register. Function 13.
`define CX_VENDOR_ID_13 16'h16c3


// Name:           CX_REVISION_ID_13
// Default:        0x1
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 13
// Parameter Type: Register Default Setting
// 
// Default value for the Revision ID field in the Revision ID Register. Function 13.
`define CX_REVISION_ID_13 8'h1


// Name:           SUBSYS_DEV_ID_13
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 13
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 13.
`define SUBSYS_DEV_ID_13 16'h0


// Name:           SUBSYS_VENDOR_ID_13
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 13
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem Vendor ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 13.
`define SUBSYS_VENDOR_ID_13 16'h0


// Name:           BASE_CLASS_CODE_13
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 13
// Parameter Type: Register Default Setting
// 
// Default value for the Base Class Code field in the Class Code Register. Function 13.
`define BASE_CLASS_CODE_13 8'h0


// Name:           SUB_CLASS_CODE_13
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 13
// Parameter Type: Register Default Setting
// 
// Default value for the Subclass Code field in the Class Code Register. Function 13.
`define SUB_CLASS_CODE_13 8'h0


// Name:           IF_CODE_13
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 13
// Parameter Type: Register Default Setting
// 
// Default value for the Programming Interface field in the Class Code Register. Function 13.
`define IF_CODE_13 8'h0


// Name:           CARDBUS_CIS_PTR_13
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 13
// Parameter Type: Register Default Setting
// 
// Default value for the CardBus CIS Pointer Register. Function 13.
`define CARDBUS_CIS_PTR_13 16'h0


// Name:           INT_PIN_MAPPING_13
// Default:        INTA
// Values:         None (0x0), INTA (0x1), INTB (0x2), INTC (0x3), INTD (0x4)
// Enabled:        CX_NFUNC > 13
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Pin Register. Function 13.
`define INT_PIN_MAPPING_13 8'h1


// Name:           IO_DECODE_32_13
// Default:        16-bit
// Values:         16-bit (0x0), 32-bit (0x1)
// Enabled:        CX_NFUNC > 13
// Parameter Type: Register Default Setting
// 
// Default value for the 32-Bit I/O Space bit in the I/O Base and I/O Limit Register. Function 13.
`define IO_DECODE_32_13 1'h0


// Name:           MEM_DECODE_64_13
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x1)
// Enabled:        CX_NFUNC > 13
// Parameter Type: Register Default Setting
// 
// Default value for the 64-Bit Memory Addressing bit in the Prefetchable Memory Base and Limit Register. Function 13.
`define MEM_DECODE_64_13 1'h0


// Name:           ROM_BAR_ENABLED_13
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 13
// Parameter Type: Register Default Setting
// 
// Include the expansion ROM BAR registers. Function 13.
`define ROM_BAR_ENABLED_13 1'h1


`define DEFAULT_ROM_BAR_ENABLED_13 1'h1


// Name:           ROM_MASK_13
// Default:        0xffff
// Values:         0x7ff, ..., 0xffffff
// Enabled:        CX_NFUNC > 13 && ROM_BAR_ENABLED_13==1
// Parameter Type: Register Default Setting
// 
// Determines the default of the Expansion ROM BAR Mask register. Function 13. 
//  - The BAR Mask register specifies which bits of the Expansion ROM BAR are non-writable by host software, which 
//  determines the size of the BAR. 
//  - The maximum value for ROM_MASK_N is 0xFFFFFF because the maximum space that can be claimed by an Expansion ROM BAR 
//  is 16 MB. 
//  - For example: 32'hFFFF =BAR size of 2^16.
`define ROM_MASK_13 32'hffff


// Name:           ROM_MASK_WRITABLE_13
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 13 && ROM_BAR_ENABLED_13==1
// Parameter Type: Feature Setting
// 
// Determines if the Expansion ROM BAR Mask register for function 13 is writable by application software. If writing to a 
// Expansion ROM BAR Mask register is enabled, your application can write to the Expansion ROM BAR Mask register through the 
// DBI by asserting dbi_cs2 in addition to dbi_cs.
`define ROM_MASK_WRITABLE_13 1'h0


// Name:           ROM_FUNC13_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 13 && ROM_BAR_ENABLED_13==1 && TRGT1_POPULATE==1))
// Parameter Type: Register Default Setting
// 
// Direct incoming requests that pass filtering and match the Expansion ROM BAR of function 13 to either RTRGT0 or RTRGT1. 
//  - For example, setting ROM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for the Expansion ROM BAR of function 
//  0 to RTRGT1. 
//  - If TRGT1_POPULATE =0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define ROM_FUNC13_TARGET_MAP 1'h1


// Name:           CX_PCI_HEADER_DEFAULTS_VISIBLE_13
// Default:        0
// Values:         0, 1
// Parameter Type: Register Default Setting
// 
// Select here if you want to configure the defaults for the other PCI Standard Header registers for function 13. 
//  An extra window will appear under this page. To access it, click the plus/minus symbol in the hierarchy view on the 
//  left panel. 
//  This is optional but not usually recommended. 
//  You can also change these register defaults using the DBI before (or after) the link comes up.
`define CX_PCI_HEADER_DEFAULTS_VISIBLE_13 0

//-/ END:   PCI BASIC CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: BAR CONFIGURATION


// Name:           BAR0_ENABLED_13
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 13
// Parameter Type: Feature Setting
// 
// Include the BAR0 registers for function 13.
`define BAR0_ENABLED_13 1'h1


`define DEFAULT_BAR0_ENABLED_13 1'h1


// Name:           MEM0_SPACE_DECODER_13
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 13 && BAR0_ENABLED_13==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 13.
`define MEM0_SPACE_DECODER_13 1'h0


// Name:           PREFETCHABLE0_13
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 13 && BAR0_ENABLED_13==1 && MEM0_SPACE_DECODER_13==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 13.
`define PREFETCHABLE0_13 1'h0


// Name:           BAR0_TYPE_13
// Default:        64-bit ((MEM0_SPACE_DECODER_13==1 || BAR0_ENABLED_13==0) ? 0 : 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 13 && BAR0_ENABLED_13==1 && MEM0_SPACE_DECODER_13==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 13.
`define BAR0_TYPE_13 2'h2


// Name:           BAR0_SIZING_SCHEME_13
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 13 && BAR0_ENABLED_13==1
// Parameter Type: Feature Setting
// 
// BAR0 Function 13 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR0_SIZING_SCHEME_13 2'h0


// Name:           CX_BAR0_RESIZABLE_13
// Default:        0x0 ((BAR0_SIZING_SCHEME_13==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR0_ENABLED_13==1) && (MEM0_SPACE_DECODER_13==0)
// Parameter Type: Feature Setting
// 
// Defines BAR0 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR0 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR0_RESIZABLE_13 1'h0


// Name:           CX_BAR0_RESOURCE_AVAIL_13
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 13 && CX_BAR0_RESIZABLE_13==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR0 of function 13. 
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
// Example: 0x00000030 indicates that BAR0 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR0_RESOURCE_AVAIL_13 64'h10


// Name:           BAR0_MASK_WRITABLE_13
// Default:        0x0 ((BAR0_ENABLED_13==1 && BAR0_SIZING_SCHEME_13 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 13 && BAR0_ENABLED_13==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR0 Mask through DBI
`define BAR0_MASK_WRITABLE_13 1'h0


// Name:           BAR0_MASK_13
// Default:        0xfffff (CX_BAR0_RESIZABLE_13==1 ? [calc_bar_mask 
//                 CX_BAR0_RESOURCE_AVAIL_13] : MEM0_SPACE_DECODER_13==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 13 && BAR0_ENABLED_13==1 && MEM0_SPACE_DECODER_13==0 && 
//                 CX_BAR0_RESIZABLE_13==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR0 Mask register of function 13. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR0_MASK_13 64'hfffff


// Name:           MEM_FUNC13_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 13 && BAR0_ENABLED_13==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_0 of function 13 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming Requests for BAR0 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC13_BAR0_TARGET_MAP 1'h1


// Name:           BAR1_ENABLED_13
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 13 && BAR0_TYPE_13==0
// Parameter Type: Feature Setting
// 
// Include the BAR1 registers for function 13.
`define BAR1_ENABLED_13 1'h0


`define DEFAULT_BAR1_ENABLED_13 1'h0


// Name:           MEM1_SPACE_DECODER_13
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 13 && BAR1_ENABLED_13==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 13.
`define MEM1_SPACE_DECODER_13 1'h0


// Name:           PREFETCHABLE1_13
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 13 && BAR1_ENABLED_13==1 && MEM1_SPACE_DECODER_13==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 13.
`define PREFETCHABLE1_13 1'h0


// Name:           BAR1_TYPE_13
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 13.
`define BAR1_TYPE_13 2'h0


// Name:           BAR1_SIZING_SCHEME_13
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 13 && BAR1_ENABLED_13==1
// Parameter Type: Feature Setting
// 
// BAR1 Function 13 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR1_SIZING_SCHEME_13 2'h0


// Name:           CX_BAR1_RESIZABLE_13
// Default:        0x0 ((BAR1_SIZING_SCHEME_13==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR1_ENABLED_13==1) && (MEM1_SPACE_DECODER_13==0)
// Parameter Type: Feature Setting
// 
// Defines BAR1 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR1 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR1_RESIZABLE_13 1'h0


// Name:           CX_BAR1_RESOURCE_AVAIL_13
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 13 && CX_BAR1_RESIZABLE_13==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR1 of function 13. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR1 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR1_RESOURCE_AVAIL_13 32'h10


// Name:           BAR1_MASK_WRITABLE_13
// Default:        0x0 ((BAR1_ENABLED_13==1 && BAR1_SIZING_SCHEME_13 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 13 && BAR1_ENABLED_13==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR1 Mask through DBI
`define BAR1_MASK_WRITABLE_13 1'h0


// Name:           BAR1_MASK_13
// Default:        0xffff (CX_BAR1_RESIZABLE_13==1 ? [calc_bar_mask 
//                 CX_BAR1_RESOURCE_AVAIL_13] : MEM1_SPACE_DECODER_13==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 13 && BAR1_ENABLED_13==1 && MEM1_SPACE_DECODER_13==0 && 
//                 CX_BAR1_RESIZABLE_13==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR1 Mask register of function 13. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR1_MASK_13 32'hffff


// Name:           MEM_FUNC13_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 13 && BAR1_ENABLED_13==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_1 of function 13 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR1_TARGET_MAP to 1 maps all incoming Requests for BAR1 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC13_BAR1_TARGET_MAP 1'h1


// Name:           BAR2_ENABLED_13
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 13
// Parameter Type: Feature Setting
// 
// Include the BAR2 registers for function 13.
`define BAR2_ENABLED_13 1'h1


`define DEFAULT_BAR2_ENABLED_13 1'h1


// Name:           MEM2_SPACE_DECODER_13
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 13 && BAR2_ENABLED_13==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 13.
`define MEM2_SPACE_DECODER_13 1'h0


// Name:           PREFETCHABLE2_13
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 13 && BAR2_ENABLED_13==1 && MEM2_SPACE_DECODER_13==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 13.
`define PREFETCHABLE2_13 1'h0


// Name:           BAR2_TYPE_13
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 13 && BAR2_ENABLED_13==1 && MEM2_SPACE_DECODER_13==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 13.
`define BAR2_TYPE_13 2'h0


// Name:           BAR2_SIZING_SCHEME_13
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 13 && BAR2_ENABLED_13==1
// Parameter Type: Feature Setting
// 
// BAR2 Function 13 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR2_SIZING_SCHEME_13 2'h0


// Name:           CX_BAR2_RESIZABLE_13
// Default:        0x0 ((BAR2_SIZING_SCHEME_13==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR2_ENABLED_13==1) && (MEM2_SPACE_DECODER_13==0)
// Parameter Type: Feature Setting
// 
// Defines BAR2 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR2 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR2_RESIZABLE_13 1'h0


// Name:           CX_BAR2_RESOURCE_AVAIL_13
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 13 && CX_BAR2_RESIZABLE_13==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR2 of function 13. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR2 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR2_RESOURCE_AVAIL_13 64'h10


// Name:           BAR2_MASK_WRITABLE_13
// Default:        0x0 ((BAR2_ENABLED_13==1 && BAR2_SIZING_SCHEME_13 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 13 && BAR2_ENABLED_13==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR2 Mask through DBI
`define BAR2_MASK_WRITABLE_13 1'h0


// Name:           BAR2_MASK_13
// Default:        0xfffff (CX_BAR2_RESIZABLE_13==1 ? [calc_bar_mask 
//                 CX_BAR2_RESOURCE_AVAIL_13] : MEM2_SPACE_DECODER_13==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 13 && BAR2_ENABLED_13==1 && MEM2_SPACE_DECODER_13==0 && 
//                 CX_BAR2_RESIZABLE_13==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR2 Mask register of function 13. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR2_MASK_13 64'hfffff


// Name:           MEM_FUNC13_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 13 && BAR2_ENABLED_13==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_2 of function 13 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR2_TARGET_MAP to 1 maps all incoming requests for BAR2 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC13_BAR2_TARGET_MAP 1'h1


// Name:           BAR3_ENABLED_13
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 13 && BAR2_TYPE_13==0
// Parameter Type: Feature Setting
// 
// Include the BAR3 registers for function 13.
`define BAR3_ENABLED_13 1'h0



`define DEFAULT_BAR3_ENABLED_13 1'h0


// Name:           MEM3_SPACE_DECODER_13
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 13 && BAR3_ENABLED_13==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 13.
`define MEM3_SPACE_DECODER_13 1'h0


// Name:           PREFETCHABLE3_13
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 13 && BAR3_ENABLED_13==1 && MEM3_SPACE_DECODER_13==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 13.
`define PREFETCHABLE3_13 1'h0


// Name:           BAR3_TYPE_13
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 13.
`define BAR3_TYPE_13 2'h0


// Name:           BAR3_SIZING_SCHEME_13
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 13 && BAR3_ENABLED_13==1
// Parameter Type: Feature Setting
// 
// BAR3 Function 13 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR3_SIZING_SCHEME_13 2'h0


// Name:           CX_BAR3_RESIZABLE_13
// Default:        0x0 ((BAR3_SIZING_SCHEME_13==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR3_ENABLED_13==1) && (MEM3_SPACE_DECODER_13==0)
// Parameter Type: Feature Setting
// 
// Defines BAR3 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR3 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR3_RESIZABLE_13 1'h0


// Name:           CX_BAR3_RESOURCE_AVAIL_13
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 13 && CX_BAR3_RESIZABLE_13==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR3 of function 13. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR3 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR3_RESOURCE_AVAIL_13 32'h10


// Name:           BAR3_MASK_WRITABLE_13
// Default:        0x0 ((BAR3_ENABLED_13==1 && BAR3_SIZING_SCHEME_13 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 13 && BAR3_ENABLED_13==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR3 Mask through DBI
`define BAR3_MASK_WRITABLE_13 1'h0


// Name:           BAR3_MASK_13
// Default:        0xffff (CX_BAR3_RESIZABLE_13==1 ? [calc_bar_mask 
//                 CX_BAR3_RESOURCE_AVAIL_13] : MEM3_SPACE_DECODER_13==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 13 && BAR3_ENABLED_13==1 && MEM3_SPACE_DECODER_13==0 && 
//                 CX_BAR3_RESIZABLE_13==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR3 Mask register of function 13. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR3_MASK_13 32'hffff


// Name:           MEM_FUNC13_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 13 && BAR3_ENABLED_13==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_3 of function 13 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR3_TARGET_MAP to 1 maps all incoming requests for BAR3 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC13_BAR3_TARGET_MAP 1'h1


// Name:           BAR4_ENABLED_13
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 13
// Parameter Type: Feature Setting
// 
// Include the BAR4 registers for function 13.
`define BAR4_ENABLED_13 1'h1


`define DEFAULT_BAR4_ENABLED_13 1'h1



// Name:           MEM4_SPACE_DECODER_13
// Default:        I/O (BAR4_ENABLED_13==1)
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 13 && BAR4_ENABLED_13==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 13.
`define MEM4_SPACE_DECODER_13 1'h1


// Name:           PREFETCHABLE4_13
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 13 && BAR4_ENABLED_13==1 && MEM4_SPACE_DECODER_13==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 13.
`define PREFETCHABLE4_13 1'h0


// Name:           BAR4_TYPE_13
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 13 && BAR4_ENABLED_13==1 && MEM4_SPACE_DECODER_13==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 13.
`define BAR4_TYPE_13 2'h0


// Name:           BAR4_SIZING_SCHEME_13
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 13 && BAR4_ENABLED_13==1
// Parameter Type: Feature Setting
// 
// BAR4  Function 13 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR4_SIZING_SCHEME_13 2'h0


// Name:           CX_BAR4_RESIZABLE_13
// Default:        0x0 ((BAR4_SIZING_SCHEME_13==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR4_ENABLED_13==1) && (MEM4_SPACE_DECODER_13==0)
// Parameter Type: Feature Setting
// 
// Defines BAR4 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR4 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR4_RESIZABLE_13 1'h0


// Name:           CX_BAR4_RESOURCE_AVAIL_13
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 13 &&  CX_BAR4_RESIZABLE_13==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR4 of function 13. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR4 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR4_RESOURCE_AVAIL_13 64'h10


// Name:           BAR4_MASK_WRITABLE_13
// Default:        0x0 ((BAR4_ENABLED_13==1 && BAR4_SIZING_SCHEME_13 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 13 && BAR4_ENABLED_13==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR4 Mask through DBI
`define BAR4_MASK_WRITABLE_13 1'h0


// Name:           BAR4_MASK_13
// Default:        0xff (CX_BAR4_RESIZABLE_13==1 ? [calc_bar_mask 
//                 CX_BAR4_RESOURCE_AVAIL_13] : MEM4_SPACE_DECODER_13==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 13 && BAR4_ENABLED_13==1 && MEM4_SPACE_DECODER_13==0 && 
//                 CX_BAR4_RESIZABLE_13==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR4 Mask register of function 13. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR4_MASK_13 64'hff


// Name:           MEM_FUNC13_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 13 && BAR4_ENABLED_13==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_4 of function 13 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR4_TARGET_MAP to 1 maps all incoming requests for BAR4 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC13_BAR4_TARGET_MAP 1'h1


// Name:           BAR5_ENABLED_13
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 13 && BAR4_TYPE_13==0
// Parameter Type: Feature Setting
// 
// Include the BAR5 registers for function 13.
`define BAR5_ENABLED_13 1'h0


`define DEFAULT_BAR5_ENABLED_13 1'h0


// Name:           MEM5_SPACE_DECODER_13
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 13 && BAR5_ENABLED_13==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 13.
`define MEM5_SPACE_DECODER_13 1'h0


// Name:           PREFETCHABLE5_13
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 13 && BAR5_ENABLED_13==1 && MEM5_SPACE_DECODER_13==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 13.
`define PREFETCHABLE5_13 1'h0


// Name:           BAR5_TYPE_13
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 13.
`define BAR5_TYPE_13 2'h0


// Name:           BAR5_SIZING_SCHEME_13
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 13 && BAR5_ENABLED_13==1
// Parameter Type: Feature Setting
// 
// BAR5  Function 13 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR5_SIZING_SCHEME_13 2'h0


// Name:           CX_BAR5_RESIZABLE_13
// Default:        0x0 ((BAR5_SIZING_SCHEME_13==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR5_ENABLED_13==1) && (MEM5_SPACE_DECODER_13==0)
// Parameter Type: Feature Setting
// 
// Defines BAR5 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR5 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR5_RESIZABLE_13 1'h0


// Name:           CX_BAR5_RESOURCE_AVAIL_13
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 13 && CX_BAR5_RESIZABLE_13==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR5 of function 13. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR5 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR5_RESOURCE_AVAIL_13 32'h10


// Name:           BAR5_MASK_WRITABLE_13
// Default:        0x0 ((BAR5_ENABLED_13==1 && BAR5_SIZING_SCHEME_13 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 13 && BAR5_ENABLED_13==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR5 Mask through DBI
`define BAR5_MASK_WRITABLE_13 1'h0


// Name:           BAR5_MASK_13
// Default:        0xffff (CX_BAR5_RESIZABLE_13==1 ? [calc_bar_mask 
//                 CX_BAR5_RESOURCE_AVAIL_13] : MEM5_SPACE_DECODER_13==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 13 && BAR5_ENABLED_13==1 && MEM5_SPACE_DECODER_13==0 && 
//                 CX_BAR5_RESIZABLE_13==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR5 Mask register of function 13. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR5_MASK_13 32'hffff


// Name:           MEM_FUNC13_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 13 && BAR5_ENABLED_13==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_5 of function 13 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR5_TARGET_MAP to 1 maps all incoming requests for BAR5 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC13_BAR5_TARGET_MAP 1'h1


`define FUNC13_BARSIZE_32 128'h0


`define FUNC13_BARSIZE 128'h0


`define FUNC13_BAR0_BARSIZE_TRGT1 128'h0


`define FUNC13_BAR2_BARSIZE_TRGT1 128'h0


`define FUNC13_BAR4_BARSIZE_TRGT1 128'h0


`define FUNC13_BAR0_TRGT1_ADDR_WIDTH 1


`define FUNC13_BAR2_TRGT1_ADDR_WIDTH 1


`define FUNC13_BAR4_TRGT1_ADDR_WIDTH 1


// Name:         CX_NUM_RBARS_13
// Default:      0 ([calc_num_rbars CX_BAR0_RESIZABLE_13 CX_BAR1_RESIZABLE_13 
//               CX_BAR2_RESIZABLE_13 CX_BAR3_RESIZABLE_13 CX_BAR4_RESIZABLE_13 
//               CX_BAR5_RESIZABLE_13])
// Values:       -2147483648, ..., 2147483647
// 
// Number of resizable BARs
`define CX_NUM_RBARS_13 0

//-/ END:   BAR CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SR-IOV CAPABILITIES CONFIGURATION


// Name:           CX_VF_DEPENDENCY_LINK_13
// Default:        0x13
// Values:         0x0, ..., 0xff
// Enabled:        CX_VF_DEPENDENCY_LINK_SUPP && (CX_NFUNC > 13) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Specifies the 8-bit VF dependency link for PF13. Valid only if CX_VF_DEPENDENCY_LINK_SUPP=1.
`define CX_VF_DEPENDENCY_LINK_13 8'h13


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER1_13
// Default:        0x2 ((CX_NFUNC>=17) ? 32 : (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : 
//                 (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF13 in an ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER1_13 16'h2


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER0_13
// Default:        0x100
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF13 
//  in a non-ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER0_13 16'h100


// Name:           VF_STRIDE_ARI_CAP_HIER1_13
// Default:        0x2 (CX_VF_STRIDE_ALWAYS_ONE) ? 1 : ((CX_NFUNC>=17) ? 32 : 
//                 (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF13 in an ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER1_13 16'h2


// Name:           VF_STRIDE_ARI_CAP_HIER0_13
// Default:        0x100 ((CX_VF_STRIDE_ALWAYS_ONE) ? 0x0001 : 0x0100)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF13 in a non-ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER0_13 16'h100


// Name:           CX_VF_DEVICE_ID_13
// Default:        0x0 (CX_DEVICE_ID_13)
// Values:         0x0, ..., 0xffff
// Enabled:        (CX_NFUNC > 13) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 16-bit virtual function Device ID for PF13. 
//  It might be different from the physical function's.
`define CX_VF_DEVICE_ID_13 16'h0


// Name:           CX_VF_SUPP_PAGE_SIZE_13
// Default:        0x553
// Values:         0x553, ..., 0xffff
// Enabled:        (CX_NFUNC > 13) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 32-bit supported page sizes for virtual functions for PF13
`define CX_VF_SUPP_PAGE_SIZE_13 32'h553


// Name:           CX_ARI_CAP_HIER_PRSVD_13
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Specifies if ARI Capable Hierarchy bit is preserved across certain power state transitions 
//  Only present in PF0. Read Only Zero in this PF13.
`define CX_ARI_CAP_HIER_PRSVD_13 1'h0

//-/===========================================
//-/ START: VF BAR CONFIGURATION


// Name:           VF_BAR0_ENABLED_13
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 13)
// Parameter Type: Feature Setting
// 
// Include the VF BAR0 registers in PF13
`define VF_BAR0_ENABLED_13 1'h1


`define VF_DEFAULT_BAR0_ENABLED_13 1'h1


// Name:           VF_MEM0_SPACE_DECODER_13
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR0_ENABLED_13 && CX_SRIOV_ENABLE && (CX_NFUNC > 13)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Space Indicator 
//  ALWAYS set to Memory for Virtual Functions
`define VF_MEM0_SPACE_DECODER_13 1'h0


// Name:           VF_PREFETCHABLE0_13
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_13==1 && VF_MEM0_SPACE_DECODER_13==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 13)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Prefetchable 
//  When set indicates VF BAR0 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE0_13 1'h0


// Name:           VF_BAR0_TYPE_13
// Default:        64-bit ((VF_MEM0_SPACE_DECODER_13==1 || VF_BAR0_ENABLED_13==0) ? 0 
//                 : 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR0_ENABLED_13==1 && VF_MEM0_SPACE_DECODER_13==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 13)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 13; (bits [2:1] for a memory BAR).
`define VF_BAR0_TYPE_13 2'h2


// Name:           VF_BAR0_MASK_WRITABLE_13
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_13==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 13)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR0_MASK_WRITABLE_13 1'h0


// Name:           VF_BAR0_MASK_13
// Default:        0xfffff (VF_MEM0_SPACE_DECODER_13==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR0_ENABLED_13==1 && VF_MEM0_SPACE_DECODER_13==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 13)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Mask 
//  Determines the default of the VF BAR Mask register for PF13. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR0_MASK_13 64'hfffff


// Name:           VF_MEM_FUNC13_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR0_ENABLED_13==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE 
//                 && (CX_NFUNC > 13)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF13 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC13_BAR0_TARGET_MAP 1'h1


// Name:           VF_BAR1_ENABLED_13
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        (VF_BAR0_TYPE_13==0)  && CX_SRIOV_ENABLE && (CX_NFUNC > 13)
// Parameter Type: Feature Setting
// 
// Include the VF BAR1 registers in PF13
`define VF_BAR1_ENABLED_13 1'h0


`define VF_DEFAULT_BAR1_ENABLED_13 1'h0


// Name:           VF_MEM1_SPACE_DECODER_13
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR1_ENABLED_13==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 13)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Space Indicator
`define VF_MEM1_SPACE_DECODER_13 1'h0


// Name:           VF_PREFETCHABLE1_13
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_13==1 && VF_MEM1_SPACE_DECODER_13==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 13)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Prefetchable 
//  When set indicates VF BAR1 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE1_13 1'h0


// Name:           VF_BAR1_TYPE_13
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 13; (bits [2:1] for a memory BAR).
`define VF_BAR1_TYPE_13 2'h0


// Name:           VF_BAR1_MASK_WRITABLE_13
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_13==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 13)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR1_MASK_WRITABLE_13 1'h0


// Name:           VF_BAR1_MASK_13
// Default:        0xffff (VF_MEM1_SPACE_DECODER_13==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR1_ENABLED_13==1 && VF_MEM1_SPACE_DECODER_13==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 13)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Mask 
//  Determines the default of the VF BAR Mask register for PF13. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR1_MASK_13 32'hffff


// Name:           VF_MEM_FUNC13_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR1_ENABLED_13==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE 
//                 && (CX_NFUNC > 13)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF13 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC13_BAR1_TARGET_MAP 1'h1


// Name:           VF_BAR2_ENABLED_13
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 13)
// Parameter Type: Feature Setting
// 
// Include the VF BAR2 registers in PF13
`define VF_BAR2_ENABLED_13 1'h1


`define VF_DEFAULT_BAR2_ENABLED_13 1'h1


// Name:           VF_MEM2_SPACE_DECODER_13
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR2_ENABLED_13==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 13)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Memory Space Indicator
`define VF_MEM2_SPACE_DECODER_13 1'h0


// Name:           VF_PREFETCHABLE2_13
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_13==1 && VF_MEM2_SPACE_DECODER_13==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 13)
// Parameter Type: Register Default Setting
// 
// BAR2 Memory Prefetchable 
//  When set indicates VF BAR2 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE2_13 1'h0


// Name:           VF_BAR2_TYPE_13
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR2_ENABLED_13==1 && VF_MEM2_SPACE_DECODER_13==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 13)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 13; (bits [2:1] for a memory BAR).
`define VF_BAR2_TYPE_13 2'h0


// Name:           VF_BAR2_MASK_WRITABLE_13
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_13==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 13)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR2_MASK_WRITABLE_13 1'h0


// Name:           VF_BAR2_MASK_13
// Default:        0xfffff (VF_MEM2_SPACE_DECODER_13==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR2_ENABLED_13==1 && VF_MEM2_SPACE_DECODER_13==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 13)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Mask 
//  Determines the default of the VF BAR Mask register for PF13. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR2_MASK_13 64'hfffff


// Name:           VF_MEM_FUNC13_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR2_ENABLED_13==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 13)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF13 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC13_BAR2_TARGET_MAP 1'h1


// Name:           VF_BAR3_ENABLED_13
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_TYPE_13==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 13)
// Parameter Type: Feature Setting
// 
// Include the VF BAR3 registers in PF13
`define VF_BAR3_ENABLED_13 1'h0


`define VF_DEFAULT_BAR3_ENABLED_13 1'h0


// Name:           VF_MEM3_SPACE_DECODER_13
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR3_ENABLED_13==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 13)
// Parameter Type: Register Default Setting
// 
// BAR3 Memory Space Indicator
`define VF_MEM3_SPACE_DECODER_13 1'h0


// Name:           VF_PREFETCHABLE3_13
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_13==1 && VF_MEM3_SPACE_DECODER_13==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 13)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Memory Prefetchable 
//  When set indicates VF BAR3 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE3_13 1'h0


// Name:           VF_BAR3_TYPE_13
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 13; (bits [2:1] for a memory BAR).
`define VF_BAR3_TYPE_13 2'h0


// Name:           VF_BAR3_MASK_WRITABLE_13
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_13==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 13)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR3_MASK_WRITABLE_13 1'h0


// Name:           VF_BAR3_MASK_13
// Default:        0xffff (VF_MEM3_SPACE_DECODER_13==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR3_ENABLED_13==1 && VF_MEM3_SPACE_DECODER_13==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 13)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Mask 
//  Determines the default of the VF BAR Mask register for PF13. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR3_MASK_13 32'hffff


// Name:           VF_MEM_FUNC13_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR3_ENABLED_13==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 13)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF13 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC13_BAR3_TARGET_MAP 1'h1


// Name:           VF_BAR4_ENABLED_13
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 13)
// Parameter Type: Feature Setting
// 
// Include the VF BAR4 registers in PF13
`define VF_BAR4_ENABLED_13 1'h1


`define VF_DEFAULT_BAR4_ENABLED_13 1'h1


// Name:           VF_MEM4_SPACE_DECODER_13
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR4_ENABLED_13==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 13)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Space Indicator
`define VF_MEM4_SPACE_DECODER_13 1'h0


// Name:           VF_PREFETCHABLE4_13
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_13==1 && VF_MEM4_SPACE_DECODER_13==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 13)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Prefetchable 
//  When set indicates VF BAR4 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE4_13 1'h0


// Name:           VF_BAR4_TYPE_13
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR4_ENABLED_13==1 && VF_MEM4_SPACE_DECODER_13==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 13)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 13; (bits [2:1] for a memory BAR).
`define VF_BAR4_TYPE_13 2'h0


// Name:           VF_BAR4_MASK_WRITABLE_13
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_13==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 13)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR4_MASK_WRITABLE_13 1'h0


// Name:           VF_BAR4_MASK_13
// Default:        0xfff (VF_MEM4_SPACE_DECODER_13==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR4_ENABLED_13==1 && VF_MEM4_SPACE_DECODER_13==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 13)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Mask 
//  Determines the default of the VF BAR Mask register for PF13. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR4_MASK_13 64'hfff


// Name:           VF_MEM_FUNC13_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR4_ENABLED_13==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 13)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF13 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC13_BAR4_TARGET_MAP 1'h1


// Name:           VF_BAR5_ENABLED_13
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_TYPE_13==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 13)
// Parameter Type: Feature Setting
// 
// Include the VF BAR5 registers in PF13
`define VF_BAR5_ENABLED_13 1'h0


`define VF_DEFAULT_BAR5_ENABLED_13 1'h0


// Name:           VF_MEM5_SPACE_DECODER_13
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR5_ENABLED_13==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 13)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Space Indicator
`define VF_MEM5_SPACE_DECODER_13 1'h0


// Name:           VF_PREFETCHABLE5_13
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_13==1 && VF_MEM5_SPACE_DECODER_13==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 13)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Prefetchable 
//  When set indicates VF BAR5 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE5_13 1'h0


// Name:           VF_BAR5_TYPE_13
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 13; (bits [2:1] for a memory BAR).
`define VF_BAR5_TYPE_13 2'h0


// Name:           VF_BAR5_MASK_WRITABLE_13
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_13==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 13)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR5_MASK_WRITABLE_13 1'h0


// Name:           VF_BAR5_MASK_13
// Default:        0xffff (VF_MEM5_SPACE_DECODER_13==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR5_ENABLED_13==1 && VF_MEM5_SPACE_DECODER_13==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 13)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Mask 
//  Determines the default of the VF BAR Mask register for PF13. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR5_MASK_13 32'hffff


// Name:           VF_MEM_FUNC13_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR5_ENABLED_13==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 13)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF13 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC13_BAR5_TARGET_MAP 1'h1


`define VF_FUNC13_BARSIZE_32 128'h101000


`define VF_FUNC13_BARSIZE 128'h201000

//-/ END:   VF BAR CONFIGURATION
//-/===========================================

//-/ END:   SR-IOV CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: TPH CAPABILITIES CONFIGURATION


// Name:           TPH_IVEC_13
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Interrupt Vector Mode. If set indicates that the function supports the Interrupt Vector 
// Mode of operation. Function 13.
`define TPH_IVEC_13 1'h0


// Name:           TPH_DS_13
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Device Specific Mode. If set indicates that the function supports the Device Specific Mode 
// of operation. Function 13.
`define TPH_DS_13 1'h0


// Name:           TPH_ST_TABLE_LOC_13
// Default:        Not Present
// Values:         Not Present (0), TPH Requester Capability Structure (1), MSI-X 
//                 Table Structure (2)
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_DS_13 || TPH_IVEC_13))
// Parameter Type: Feature Setting
// 
// TLP Processing Hints Steering Tag Table Location. Value indicates if and where the ST Table is located. Function 13.
`define TPH_ST_TABLE_LOC_13 0

//located in the TPH Requester Capability structure. Please reduce the ST Table Size for this mode of operation"

// Name:           TPH_ST_TABLE_SIZE_13
// Default:        1
// Values:         1, ..., 2048
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_ST_TABLE_LOC_13 != 0))
// Parameter Type: Feature Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define TPH_ST_TABLE_SIZE_13 1


`define TPH_ST_TABLE_DEPTH_13 0

//-/ END:   TPH CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: ATS CAPABILITIES CONFIGURATION


// Name:           ATS_INV_Q_DPTH_13
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// The number of Invalidate Requests that the Function can accept before putting backpressure on the upstream connection. A 
// value of 0 indicates the function can accept 32 Invalidate requests. Function 13.
`define ATS_INV_Q_DPTH_13 5'd0


// Name:           ATS_STU_13
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// This value indicates to the Function the minimum number of 4096-byte blocks that is indicated in a Translation 
// Completion or Invalidate Request. This is a power of 2 multiplier and the number of blocks is 2^STU. A value of 0 indicates 1 block 
// and a value of 31 indicates 2^31 blocks (or 8 TB total). Function 13.
`define ATS_STU_13 5'd0

//-/ END:   ATS CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PRS CAPABILITIES CONFIGURATION


// Name:           CX_PRS_OUTSTANDING_CAPACITY_VALUE_13
// Default:        0x1
// Values:         0x0, ..., 0xffffffff
// Enabled:        (CX_PRS_ENABLE==1) && (CX_NFUNC > 13)
// Parameter Type: Register Default Setting
// 
// Register default for PRS Outstanding Capacity in PF13. 
// For more details, see the PRS_OUTSTANDING_CAPACITY field in the PRS_REQ_CAPACITY_REG register.
`define CX_PRS_OUTSTANDING_CAPACITY_VALUE_13 32'h1

//-/ END:   PRS CAPABILITIES CONFIGURATION
//-/===========================================


//-/===========================================
//--- START: RN


// Name:           CX_RN_IMM_VALUE_13
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 13)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for PF13.
`define CX_RN_IMM_VALUE_13 1'h0


// Name:           CX_RN_IMM_D0_VALUE_13
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 13)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for PF13.
`define CX_RN_IMM_D0_VALUE_13 1'h0


// Name:           CX_RN_FRS_VALUE_13
// Default:        0x0 (CX_RN_FRS_SUPPORTED==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_FRS_SUPPORTED==1) && (CX_NFUNC > 13)
// Parameter Type: Feature Setting
// 
// Function Readiness Status messaging supported for function PF13.
`define CX_RN_FRS_VALUE_13 1'h0


// Name:           CX_RN_RTR_VALID_13
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 13)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF13.
`define CX_RN_RTR_VALID_13 1'h0


// Name:           CX_RN_RTR_DL_UP_VALUE_13
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 13)
// Parameter Type: Register Default Setting
// 
// Register default for RTR DL Up Time field in PF13.
`define CX_RN_RTR_DL_UP_VALUE_13 12'h0


// Name:           CX_RN_RTR_RESET_VALUE_13
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 13)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF13.
`define CX_RN_RTR_RESET_VALUE_13 12'h0


// Name:           CX_RN_RTR_D3D0_VALUE_13
// Default:        0x0
// Values:         0x0, ..., 0x80a
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 13)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF13.
`define CX_RN_RTR_D3D0_VALUE_13 12'h0


// Name:           CX_RN_RTR_FLR_VALUE_13
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_FLR_ENABLE==1) && (CX_NFUNC > 13)
// Parameter Type: Register Default Setting
// 
// Register default for RTR FLR Time field in PF13.
`define CX_RN_RTR_FLR_VALUE_13 12'h0


// Name:           VF_RN_IMM_VALUE_13
// Default:        0x0 (CX_RN_IMM_VALUE_13 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 13))
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for VFs in PF13.
`define VF_RN_IMM_VALUE_13 1'h0


// Name:           VF_RN_IMM_D0_VALUE_13
// Default:        0x0 (CX_RN_IMM_D0_VALUE_13 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 13))
// Parameter Type: Register Default Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for VFs in PF13.
`define VF_RN_IMM_D0_VALUE_13 1'h0


// Name:           VF_RN_RTR_VALID_13
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 13) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF13 VFs.
`define VF_RN_RTR_VALID_13 1'h0


// Name:           VF_RN_RTR_RESET_VALUE_13
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_13)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 13) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF13 VFS.
`define VF_RN_RTR_RESET_VALUE_13 12'h0


// Name:           VF_RN_RTR_D3D0_VALUE_13
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_13)
// Values:         0x0, ..., 0x80a
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 13) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF13 VFS.
`define VF_RN_RTR_D3D0_VALUE_13 12'h0


// Name:           VF_RN_RTR_FLR_VALUE_13
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_13)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 13) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF13 VFs.
`define VF_RN_RTR_FLR_VALUE_13 12'h0


// Name:           EXT_VF_RN_RTR_VALID_13
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 13) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF13 VFs.
`define EXT_VF_RN_RTR_VALID_13 1'h0


// Name:           EXT_VF_RN_RTR_RESET_VALUE_13
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_13)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 13) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF13 VFS.
`define EXT_VF_RN_RTR_RESET_VALUE_13 12'h0


// Name:           EXT_VF_RN_RTR_D3D0_VALUE_13
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_13)
// Values:         0x0, ..., 0x80a
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 13) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF13 VFS.
`define EXT_VF_RN_RTR_D3D0_VALUE_13 12'h0


// Name:           EXT_VF_RN_RTR_FLR_VALUE_13
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_13)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 13) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF13 VFs.
`define EXT_VF_RN_RTR_FLR_VALUE_13 12'h0

//-/ END:   RN
//-/===========================================

//-/ START: LN CAPABILITIES CONFIGURATION
//-/===========================================


// Name:           CX_LN_REG_MAX_VALUE_13
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 13))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_64_SUPPORTED field in the LNR_CAP_OFF register for PF13.
`define CX_LN_REG_MAX_VALUE_13 5'h0


// Name:           CX_LN_128_SUPPORTED_VALUE_13
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 13))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_128_SUPPORTED field in the LNR_CAP_OFF register for PF13.
`define CX_LN_128_SUPPORTED_VALUE_13 1'h0


// Name:           CX_LN_64_SUPPORTED_VALUE_13
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 13))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_REGISTRATION_MAX field in the LNR_CAP_OFF register for PF13.
`define CX_LN_64_SUPPORTED_VALUE_13 1'h0

//-/ END:   LN CAPABILITIES CONFIGURATION
//-/===========================================




//-/==========================================
//-/ End FUNC13 Config
//-/==========================================

//-/===========================================
//-/ Function 14 Configuration Registers
//-/ ==========================================


// Name:         FUNC_14
// Default:      0 ((CX_NFUNC > 14) ? 1 : 0)
// Values:       0, 1
// 
// This parameter indicates that Function 14 is present
// `define FUNC_14

//-/===========================================
//-/ START: PCI-E CAPABILITIES CONFIGURATION


// Name:           PCIE_CAP_INT_MSG_NUM_14
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 14
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Message Number field in the PCI Express Capabilities Register. Function 14.
`define PCIE_CAP_INT_MSG_NUM_14 5'h0


// Name:           SLOT_IMPLEMENTED_14
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_NFUNC > 14))
// Parameter Type: Register Default Setting
// 
// Indicates that the PCI Express link associated with this Port is connected to a slot. Function 14.
`define SLOT_IMPLEMENTED_14 1'h0


// Name:           DEFAULT_PHANTOM_FUNC_SUPPORTED_14
// Default:        0x0
// Values:         0x0, ..., 0x3
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_PHANTOM_FUNC_SUPPORTED_14 2'h0


// Name:           DEFAULT_EXT_TAG_FIELD_SUPPORTED_14
// Default:        0x0 (DEFAULT_EXT_TAG_FIELD_SUPPORTED_0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 14
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_EXT_TAG_FIELD_SUPPORTED_14 1'h0



// Name:           DEFAULT_ATT_BUTT_PRE_14
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 14
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Button is present
`define DEFAULT_ATT_BUTT_PRE_14 1'h0


// Name:           DEFAULT_ATT_IND_PRE_14
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 14
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Indicator is present
`define DEFAULT_ATT_IND_PRE_14 1'h0


// Name:           DEFAULT_PWR_IND_PRE_14
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 14
// Parameter Type: Register Default Setting
// 
// When set indicates that a Power Indicator is present
`define DEFAULT_PWR_IND_PRE_14 1'h0


// Name:           DEFAULT_NO_SNOOP_SUPPORTED_14
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 14
// Parameter Type: Register Default Setting
// 
// Default value for the Enable No Snoop bit in the Device Control Register. Function 14.
`define DEFAULT_NO_SNOOP_SUPPORTED_14 1'h0


// Name:           ROOT_RCB_14
// Default:        64-bit
// Values:         64-bit (0x0), 128-bit (0x1)
// Parameter Type: Register Default Setting
// 
// Default value for the Read Completion Boundary (RCB) bit in the Link Control Register.
`define ROOT_RCB_14 1'h0


//-/ END:   PCI-E CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: MSI-X CAPABILITIES CONFIGURATION


// Name:           MSIX_TABLE_SIZE_14
// Default:        0x0
// Values:         0x0, ..., 0x7ff
// Enabled:        CX_NFUNC > 14 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the MSI-X Table Size field in the MSI-X Control Register. Function 14.
`define MSIX_TABLE_SIZE_14 11'h0


// Name:           MSIX_TABLE_BIR_14
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 14 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table BAR Indicator Register (BIR) field in the MSI-X Table Offset and BIR Register. Function 14.
`define MSIX_TABLE_BIR_14 3'h0


// Name:           MSIX_TABLE_OFFSET_14
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 14 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table Offset field in the MSI-X Table Offset and BIR Register. Function 14.
`define MSIX_TABLE_OFFSET_14 29'h0


// Name:           MSIX_PBA_BIR_14
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 14 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Pending Bit Array (PBA) BIR field in the MSI-X PBA Offset and BIR Register. Function 14.
`define MSIX_PBA_BIR_14 7'h0


// Name:           MSIX_PBA_OFFSET_14
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 14 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the PBA Offset field in the MSI-X PBA Offset and BIR Register. Function 14.
`define MSIX_PBA_OFFSET_14 29'h0

//-/ END:   MSI-X CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SATA CAPABILITIES CONFIGURATION


// Name:         SATA_HBA_OFFSET_14
// Default:      0x0
// Values:       0x0, ..., 0xfffff
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA Offset. Base address of the SATA HBA registers, 
//  as an offset from the base address of the BAR indicated 
//  by the SATA BAR field.
`define SATA_HBA_OFFSET_14 20'h0


// Name:         SATA_BAR_14
// Default:      0x0
// Values:       0x0, ..., 0xf
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA BAR. The bar that maps to SATA HBA registers,
`define SATA_BAR_14 4'h0

//-/ END:   SATA CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: AER CAPABILITIES CONFIGURATION


// Name:           DEFAULT_ECRC_CHK_CAP_14
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 14 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Check Capable bit in the Advanced Capabilities and Control Register. Function 14.
`define DEFAULT_ECRC_CHK_CAP_14 1'h1


// Name:           DEFAULT_ECRC_GEN_CAP_14
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 14 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Generation Capability bit in the Advanced Capabilities and Control Register. Function 14.
`define DEFAULT_ECRC_GEN_CAP_14 1'h1


// Name:           AER_INT_MSG_NUM_14
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Parameter Type: Register Default Setting
// 
// Default value for the Advanced Error Interrupt Message Number field of the Root Error Status Register. Function 14.
`define AER_INT_MSG_NUM_14 5'h0



// Name:           CX_HDR_LOG_DEPTH_14
// Default:        0x1
// Values:         0x1, 0x2, 0x4
// Enabled:        CX_NFUNC > 14 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Feature Setting.
// 
// Header Log Depth
`define CX_HDR_LOG_DEPTH_14 3'h1


`define CX_MULTIPLE_HDR_REC_CAP_14 1'h0

//-/ END:   AER CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PM CAPABILITIES CONFIGURATION


// Name:           PME_SUPPORT_14
// Default:        0x1b
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 14
// Parameter Type: Register Default Setting
// 
// Default value for the PME_Support field in the Power Management Capabilities Register. Function 14.
`define PME_SUPPORT_14 5'h1b


// Name:           D1_SUPPORT_14
// Default:        true
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 14
// Parameter Type: Register Default Setting
// 
// Default value for the D1 Support bit in the Power Management Capabilities Register. Function 14.
`define D1_SUPPORT_14 1'h1


// Name:           D2_SUPPORT_14
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 14
// Parameter Type: Register Default Setting
// 
// Default value for the D2 Support bit in the Power Management Capabilities Register. Function 14.
`define D2_SUPPORT_14 1'h0


// Name:           DEV_SPEC_INIT_14
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 14
// Parameter Type: Register Default Setting
// 
// Default value for the Device Specific Initialization (DSI) bit in the Power Management Capabilities Register. Function 
// 14.
`define DEV_SPEC_INIT_14 1'h0


// Name:           AUX_CURRENT_14
// Default:        375mA
// Values:         0mA (0x0), 55mA (0x1), 100mA (0x2), 160mA (0x3), 220mA (0x4), 270mA 
//                 (0x5), 320mA (0x6), 375mA (0x7)
// Enabled:        CX_NFUNC > 14
// Parameter Type: Register Default Setting
// 
// Default value for the Aux Current field in the Power Management Capabilities Register. Function 14.
`define AUX_CURRENT_14 3'h7


// Name:           DEFAULT_NO_SOFT_RESET_14
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 14
// Parameter Type: Register Default Setting
// 
// Default value for the No Soft Reset bit in the Power Management Control and Status Register. When set, you should not 
// reset any controller registers when transitioning from D3hot to D0. Therefore, you should not assert the non_sticky_rst_n 
// and sticky_rst_n inputs. Function 14.
`define DEFAULT_NO_SOFT_RESET_14 1'h0

//-/ END:   PM CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PCI BASIC CONFIGURATION


// Name:           CX_DEVICE_ID_14
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 14
// Parameter Type: Register Default Setting
// 
// Default value for the Device ID field in the Device ID and Vendor ID Register. Function 14.
`define CX_DEVICE_ID_14 16'h0


// Name:           CX_VENDOR_ID_14
// Default:        0x16c3
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 14
// Parameter Type: Register Default Setting
// 
// Default value for the Vendor ID field in the Device ID and Vendor ID Register. Function 14.
`define CX_VENDOR_ID_14 16'h16c3


// Name:           CX_REVISION_ID_14
// Default:        0x1
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 14
// Parameter Type: Register Default Setting
// 
// Default value for the Revision ID field in the Revision ID Register. Function 14.
`define CX_REVISION_ID_14 8'h1


// Name:           SUBSYS_DEV_ID_14
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 14
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 14.
`define SUBSYS_DEV_ID_14 16'h0


// Name:           SUBSYS_VENDOR_ID_14
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 14
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem Vendor ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 14.
`define SUBSYS_VENDOR_ID_14 16'h0


// Name:           BASE_CLASS_CODE_14
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 14
// Parameter Type: Register Default Setting
// 
// Default value for the Base Class Code field in the Class Code Register. Function 14.
`define BASE_CLASS_CODE_14 8'h0


// Name:           SUB_CLASS_CODE_14
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 14
// Parameter Type: Register Default Setting
// 
// Default value for the Subclass Code field in the Class Code Register. Function 14.
`define SUB_CLASS_CODE_14 8'h0


// Name:           IF_CODE_14
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 14
// Parameter Type: Register Default Setting
// 
// Default value for the Programming Interface field in the Class Code Register. Function 14.
`define IF_CODE_14 8'h0


// Name:           CARDBUS_CIS_PTR_14
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 14
// Parameter Type: Register Default Setting
// 
// Default value for the CardBus CIS Pointer Register. Function 14.
`define CARDBUS_CIS_PTR_14 16'h0


// Name:           INT_PIN_MAPPING_14
// Default:        INTA
// Values:         None (0x0), INTA (0x1), INTB (0x2), INTC (0x3), INTD (0x4)
// Enabled:        CX_NFUNC > 14
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Pin Register. Function 14.
`define INT_PIN_MAPPING_14 8'h1


// Name:           IO_DECODE_32_14
// Default:        16-bit
// Values:         16-bit (0x0), 32-bit (0x1)
// Enabled:        CX_NFUNC > 14
// Parameter Type: Register Default Setting
// 
// Default value for the 32-Bit I/O Space bit in the I/O Base and I/O Limit Register. Function 14.
`define IO_DECODE_32_14 1'h0


// Name:           MEM_DECODE_64_14
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x1)
// Enabled:        CX_NFUNC > 14
// Parameter Type: Register Default Setting
// 
// Default value for the 64-Bit Memory Addressing bit in the Prefetchable Memory Base and Limit Register. Function 14.
`define MEM_DECODE_64_14 1'h0


// Name:           ROM_BAR_ENABLED_14
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 14
// Parameter Type: Register Default Setting
// 
// Include the expansion ROM BAR registers. Function 14.
`define ROM_BAR_ENABLED_14 1'h1


`define DEFAULT_ROM_BAR_ENABLED_14 1'h1


// Name:           ROM_MASK_14
// Default:        0xffff
// Values:         0x7ff, ..., 0xffffff
// Enabled:        CX_NFUNC > 14 && ROM_BAR_ENABLED_14==1
// Parameter Type: Register Default Setting
// 
// Determines the default of the Expansion ROM BAR Mask register. Function 14. 
//  - The BAR Mask register specifies which bits of the Expansion ROM BAR are non-writable by host software, which 
//  determines the size of the BAR. 
//  - The maximum value for ROM_MASK_N is 0xFFFFFF because the maximum space that can be claimed by an Expansion ROM BAR 
//  is 16 MB. 
//  - For example: 32'hFFFF =BAR size of 2^16.
`define ROM_MASK_14 32'hffff


// Name:           ROM_MASK_WRITABLE_14
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 14 && ROM_BAR_ENABLED_14==1
// Parameter Type: Feature Setting
// 
// Determines if the Expansion ROM BAR Mask register for function 14 is writable by application software. If writing to a 
// Expansion ROM BAR Mask register is enabled, your application can write to the Expansion ROM BAR Mask register through the 
// DBI by asserting dbi_cs2 in addition to dbi_cs.
`define ROM_MASK_WRITABLE_14 1'h0


// Name:           ROM_FUNC14_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 14 && ROM_BAR_ENABLED_14==1 && TRGT1_POPULATE==1))
// Parameter Type: Register Default Setting
// 
// Direct incoming requests that pass filtering and match the Expansion ROM BAR of function 14 to either RTRGT0 or RTRGT1. 
//  - For example, setting ROM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for the Expansion ROM BAR of function 
//  0 to RTRGT1. 
//  - If TRGT1_POPULATE =0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define ROM_FUNC14_TARGET_MAP 1'h1


// Name:           CX_PCI_HEADER_DEFAULTS_VISIBLE_14
// Default:        0
// Values:         0, 1
// Parameter Type: Register Default Setting
// 
// Select here if you want to configure the defaults for the other PCI Standard Header registers for function 14. 
//  An extra window will appear under this page. To access it, click the plus/minus symbol in the hierarchy view on the 
//  left panel. 
//  This is optional but not usually recommended. 
//  You can also change these register defaults using the DBI before (or after) the link comes up.
`define CX_PCI_HEADER_DEFAULTS_VISIBLE_14 0

//-/ END:   PCI BASIC CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: BAR CONFIGURATION


// Name:           BAR0_ENABLED_14
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 14
// Parameter Type: Feature Setting
// 
// Include the BAR0 registers for function 14.
`define BAR0_ENABLED_14 1'h1


`define DEFAULT_BAR0_ENABLED_14 1'h1


// Name:           MEM0_SPACE_DECODER_14
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 14 && BAR0_ENABLED_14==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 14.
`define MEM0_SPACE_DECODER_14 1'h0


// Name:           PREFETCHABLE0_14
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 14 && BAR0_ENABLED_14==1 && MEM0_SPACE_DECODER_14==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 14.
`define PREFETCHABLE0_14 1'h0


// Name:           BAR0_TYPE_14
// Default:        64-bit ((MEM0_SPACE_DECODER_14==1 || BAR0_ENABLED_14==0) ? 0 : 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 14 && BAR0_ENABLED_14==1 && MEM0_SPACE_DECODER_14==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 14.
`define BAR0_TYPE_14 2'h2


// Name:           BAR0_SIZING_SCHEME_14
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 14 && BAR0_ENABLED_14==1
// Parameter Type: Feature Setting
// 
// BAR0 Function 14 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR0_SIZING_SCHEME_14 2'h0


// Name:           CX_BAR0_RESIZABLE_14
// Default:        0x0 ((BAR0_SIZING_SCHEME_14==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR0_ENABLED_14==1) && (MEM0_SPACE_DECODER_14==0)
// Parameter Type: Feature Setting
// 
// Defines BAR0 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR0 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR0_RESIZABLE_14 1'h0


// Name:           CX_BAR0_RESOURCE_AVAIL_14
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 14 && CX_BAR0_RESIZABLE_14==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR0 of function 14. 
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
// Example: 0x00000030 indicates that BAR0 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR0_RESOURCE_AVAIL_14 64'h10


// Name:           BAR0_MASK_WRITABLE_14
// Default:        0x0 ((BAR0_ENABLED_14==1 && BAR0_SIZING_SCHEME_14 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 14 && BAR0_ENABLED_14==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR0 Mask through DBI
`define BAR0_MASK_WRITABLE_14 1'h0


// Name:           BAR0_MASK_14
// Default:        0xfffff (CX_BAR0_RESIZABLE_14==1 ? [calc_bar_mask 
//                 CX_BAR0_RESOURCE_AVAIL_14] : MEM0_SPACE_DECODER_14==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 14 && BAR0_ENABLED_14==1 && MEM0_SPACE_DECODER_14==0 && 
//                 CX_BAR0_RESIZABLE_14==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR0 Mask register of function 14. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR0_MASK_14 64'hfffff


// Name:           MEM_FUNC14_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 14 && BAR0_ENABLED_14==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_0 of function 14 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming Requests for BAR0 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC14_BAR0_TARGET_MAP 1'h1


// Name:           BAR1_ENABLED_14
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 14 && BAR0_TYPE_14==0
// Parameter Type: Feature Setting
// 
// Include the BAR1 registers for function 14.
`define BAR1_ENABLED_14 1'h0


`define DEFAULT_BAR1_ENABLED_14 1'h0


// Name:           MEM1_SPACE_DECODER_14
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 14 && BAR1_ENABLED_14==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 14.
`define MEM1_SPACE_DECODER_14 1'h0


// Name:           PREFETCHABLE1_14
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 14 && BAR1_ENABLED_14==1 && MEM1_SPACE_DECODER_14==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 14.
`define PREFETCHABLE1_14 1'h0


// Name:           BAR1_TYPE_14
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 14.
`define BAR1_TYPE_14 2'h0


// Name:           BAR1_SIZING_SCHEME_14
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 14 && BAR1_ENABLED_14==1
// Parameter Type: Feature Setting
// 
// BAR1 Function 14 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR1_SIZING_SCHEME_14 2'h0


// Name:           CX_BAR1_RESIZABLE_14
// Default:        0x0 ((BAR1_SIZING_SCHEME_14==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR1_ENABLED_14==1) && (MEM1_SPACE_DECODER_14==0)
// Parameter Type: Feature Setting
// 
// Defines BAR1 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR1 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR1_RESIZABLE_14 1'h0


// Name:           CX_BAR1_RESOURCE_AVAIL_14
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 14 && CX_BAR1_RESIZABLE_14==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR1 of function 14. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR1 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR1_RESOURCE_AVAIL_14 32'h10


// Name:           BAR1_MASK_WRITABLE_14
// Default:        0x0 ((BAR1_ENABLED_14==1 && BAR1_SIZING_SCHEME_14 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 14 && BAR1_ENABLED_14==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR1 Mask through DBI
`define BAR1_MASK_WRITABLE_14 1'h0


// Name:           BAR1_MASK_14
// Default:        0xffff (CX_BAR1_RESIZABLE_14==1 ? [calc_bar_mask 
//                 CX_BAR1_RESOURCE_AVAIL_14] : MEM1_SPACE_DECODER_14==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 14 && BAR1_ENABLED_14==1 && MEM1_SPACE_DECODER_14==0 && 
//                 CX_BAR1_RESIZABLE_14==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR1 Mask register of function 14. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR1_MASK_14 32'hffff


// Name:           MEM_FUNC14_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 14 && BAR1_ENABLED_14==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_1 of function 14 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR1_TARGET_MAP to 1 maps all incoming Requests for BAR1 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC14_BAR1_TARGET_MAP 1'h1


// Name:           BAR2_ENABLED_14
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 14
// Parameter Type: Feature Setting
// 
// Include the BAR2 registers for function 14.
`define BAR2_ENABLED_14 1'h1


`define DEFAULT_BAR2_ENABLED_14 1'h1


// Name:           MEM2_SPACE_DECODER_14
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 14 && BAR2_ENABLED_14==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 14.
`define MEM2_SPACE_DECODER_14 1'h0


// Name:           PREFETCHABLE2_14
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 14 && BAR2_ENABLED_14==1 && MEM2_SPACE_DECODER_14==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 14.
`define PREFETCHABLE2_14 1'h0


// Name:           BAR2_TYPE_14
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 14 && BAR2_ENABLED_14==1 && MEM2_SPACE_DECODER_14==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 14.
`define BAR2_TYPE_14 2'h0


// Name:           BAR2_SIZING_SCHEME_14
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 14 && BAR2_ENABLED_14==1
// Parameter Type: Feature Setting
// 
// BAR2 Function 14 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR2_SIZING_SCHEME_14 2'h0


// Name:           CX_BAR2_RESIZABLE_14
// Default:        0x0 ((BAR2_SIZING_SCHEME_14==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR2_ENABLED_14==1) && (MEM2_SPACE_DECODER_14==0)
// Parameter Type: Feature Setting
// 
// Defines BAR2 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR2 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR2_RESIZABLE_14 1'h0


// Name:           CX_BAR2_RESOURCE_AVAIL_14
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 14 && CX_BAR2_RESIZABLE_14==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR2 of function 14. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR2 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR2_RESOURCE_AVAIL_14 64'h10


// Name:           BAR2_MASK_WRITABLE_14
// Default:        0x0 ((BAR2_ENABLED_14==1 && BAR2_SIZING_SCHEME_14 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 14 && BAR2_ENABLED_14==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR2 Mask through DBI
`define BAR2_MASK_WRITABLE_14 1'h0


// Name:           BAR2_MASK_14
// Default:        0xfffff (CX_BAR2_RESIZABLE_14==1 ? [calc_bar_mask 
//                 CX_BAR2_RESOURCE_AVAIL_14] : MEM2_SPACE_DECODER_14==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 14 && BAR2_ENABLED_14==1 && MEM2_SPACE_DECODER_14==0 && 
//                 CX_BAR2_RESIZABLE_14==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR2 Mask register of function 14. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR2_MASK_14 64'hfffff


// Name:           MEM_FUNC14_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 14 && BAR2_ENABLED_14==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_2 of function 14 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR2_TARGET_MAP to 1 maps all incoming requests for BAR2 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC14_BAR2_TARGET_MAP 1'h1


// Name:           BAR3_ENABLED_14
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 14 && BAR2_TYPE_14==0
// Parameter Type: Feature Setting
// 
// Include the BAR3 registers for function 14.
`define BAR3_ENABLED_14 1'h0



`define DEFAULT_BAR3_ENABLED_14 1'h0


// Name:           MEM3_SPACE_DECODER_14
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 14 && BAR3_ENABLED_14==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 14.
`define MEM3_SPACE_DECODER_14 1'h0


// Name:           PREFETCHABLE3_14
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 14 && BAR3_ENABLED_14==1 && MEM3_SPACE_DECODER_14==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 14.
`define PREFETCHABLE3_14 1'h0


// Name:           BAR3_TYPE_14
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 14.
`define BAR3_TYPE_14 2'h0


// Name:           BAR3_SIZING_SCHEME_14
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 14 && BAR3_ENABLED_14==1
// Parameter Type: Feature Setting
// 
// BAR3 Function 14 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR3_SIZING_SCHEME_14 2'h0


// Name:           CX_BAR3_RESIZABLE_14
// Default:        0x0 ((BAR3_SIZING_SCHEME_14==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR3_ENABLED_14==1) && (MEM3_SPACE_DECODER_14==0)
// Parameter Type: Feature Setting
// 
// Defines BAR3 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR3 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR3_RESIZABLE_14 1'h0


// Name:           CX_BAR3_RESOURCE_AVAIL_14
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 14 && CX_BAR3_RESIZABLE_14==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR3 of function 14. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR3 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR3_RESOURCE_AVAIL_14 32'h10


// Name:           BAR3_MASK_WRITABLE_14
// Default:        0x0 ((BAR3_ENABLED_14==1 && BAR3_SIZING_SCHEME_14 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 14 && BAR3_ENABLED_14==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR3 Mask through DBI
`define BAR3_MASK_WRITABLE_14 1'h0


// Name:           BAR3_MASK_14
// Default:        0xffff (CX_BAR3_RESIZABLE_14==1 ? [calc_bar_mask 
//                 CX_BAR3_RESOURCE_AVAIL_14] : MEM3_SPACE_DECODER_14==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 14 && BAR3_ENABLED_14==1 && MEM3_SPACE_DECODER_14==0 && 
//                 CX_BAR3_RESIZABLE_14==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR3 Mask register of function 14. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR3_MASK_14 32'hffff


// Name:           MEM_FUNC14_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 14 && BAR3_ENABLED_14==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_3 of function 14 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR3_TARGET_MAP to 1 maps all incoming requests for BAR3 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC14_BAR3_TARGET_MAP 1'h1


// Name:           BAR4_ENABLED_14
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 14
// Parameter Type: Feature Setting
// 
// Include the BAR4 registers for function 14.
`define BAR4_ENABLED_14 1'h1


`define DEFAULT_BAR4_ENABLED_14 1'h1



// Name:           MEM4_SPACE_DECODER_14
// Default:        I/O (BAR4_ENABLED_14==1)
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 14 && BAR4_ENABLED_14==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 14.
`define MEM4_SPACE_DECODER_14 1'h1


// Name:           PREFETCHABLE4_14
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 14 && BAR4_ENABLED_14==1 && MEM4_SPACE_DECODER_14==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 14.
`define PREFETCHABLE4_14 1'h0


// Name:           BAR4_TYPE_14
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 14 && BAR4_ENABLED_14==1 && MEM4_SPACE_DECODER_14==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 14.
`define BAR4_TYPE_14 2'h0


// Name:           BAR4_SIZING_SCHEME_14
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 14 && BAR4_ENABLED_14==1
// Parameter Type: Feature Setting
// 
// BAR4  Function 14 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR4_SIZING_SCHEME_14 2'h0


// Name:           CX_BAR4_RESIZABLE_14
// Default:        0x0 ((BAR4_SIZING_SCHEME_14==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR4_ENABLED_14==1) && (MEM4_SPACE_DECODER_14==0)
// Parameter Type: Feature Setting
// 
// Defines BAR4 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR4 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR4_RESIZABLE_14 1'h0


// Name:           CX_BAR4_RESOURCE_AVAIL_14
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 14 &&  CX_BAR4_RESIZABLE_14==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR4 of function 14. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR4 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR4_RESOURCE_AVAIL_14 64'h10


// Name:           BAR4_MASK_WRITABLE_14
// Default:        0x0 ((BAR4_ENABLED_14==1 && BAR4_SIZING_SCHEME_14 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 14 && BAR4_ENABLED_14==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR4 Mask through DBI
`define BAR4_MASK_WRITABLE_14 1'h0


// Name:           BAR4_MASK_14
// Default:        0xff (CX_BAR4_RESIZABLE_14==1 ? [calc_bar_mask 
//                 CX_BAR4_RESOURCE_AVAIL_14] : MEM4_SPACE_DECODER_14==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 14 && BAR4_ENABLED_14==1 && MEM4_SPACE_DECODER_14==0 && 
//                 CX_BAR4_RESIZABLE_14==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR4 Mask register of function 14. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR4_MASK_14 64'hff


// Name:           MEM_FUNC14_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 14 && BAR4_ENABLED_14==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_4 of function 14 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR4_TARGET_MAP to 1 maps all incoming requests for BAR4 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC14_BAR4_TARGET_MAP 1'h1


// Name:           BAR5_ENABLED_14
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 14 && BAR4_TYPE_14==0
// Parameter Type: Feature Setting
// 
// Include the BAR5 registers for function 14.
`define BAR5_ENABLED_14 1'h0


`define DEFAULT_BAR5_ENABLED_14 1'h0


// Name:           MEM5_SPACE_DECODER_14
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 14 && BAR5_ENABLED_14==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 14.
`define MEM5_SPACE_DECODER_14 1'h0


// Name:           PREFETCHABLE5_14
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 14 && BAR5_ENABLED_14==1 && MEM5_SPACE_DECODER_14==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 14.
`define PREFETCHABLE5_14 1'h0


// Name:           BAR5_TYPE_14
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 14.
`define BAR5_TYPE_14 2'h0


// Name:           BAR5_SIZING_SCHEME_14
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 14 && BAR5_ENABLED_14==1
// Parameter Type: Feature Setting
// 
// BAR5  Function 14 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR5_SIZING_SCHEME_14 2'h0


// Name:           CX_BAR5_RESIZABLE_14
// Default:        0x0 ((BAR5_SIZING_SCHEME_14==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR5_ENABLED_14==1) && (MEM5_SPACE_DECODER_14==0)
// Parameter Type: Feature Setting
// 
// Defines BAR5 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR5 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR5_RESIZABLE_14 1'h0


// Name:           CX_BAR5_RESOURCE_AVAIL_14
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 14 && CX_BAR5_RESIZABLE_14==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR5 of function 14. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR5 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR5_RESOURCE_AVAIL_14 32'h10


// Name:           BAR5_MASK_WRITABLE_14
// Default:        0x0 ((BAR5_ENABLED_14==1 && BAR5_SIZING_SCHEME_14 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 14 && BAR5_ENABLED_14==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR5 Mask through DBI
`define BAR5_MASK_WRITABLE_14 1'h0


// Name:           BAR5_MASK_14
// Default:        0xffff (CX_BAR5_RESIZABLE_14==1 ? [calc_bar_mask 
//                 CX_BAR5_RESOURCE_AVAIL_14] : MEM5_SPACE_DECODER_14==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 14 && BAR5_ENABLED_14==1 && MEM5_SPACE_DECODER_14==0 && 
//                 CX_BAR5_RESIZABLE_14==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR5 Mask register of function 14. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR5_MASK_14 32'hffff


// Name:           MEM_FUNC14_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 14 && BAR5_ENABLED_14==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_5 of function 14 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR5_TARGET_MAP to 1 maps all incoming requests for BAR5 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC14_BAR5_TARGET_MAP 1'h1


`define FUNC14_BARSIZE_32 128'h0


`define FUNC14_BARSIZE 128'h0


`define FUNC14_BAR0_BARSIZE_TRGT1 128'h0


`define FUNC14_BAR2_BARSIZE_TRGT1 128'h0


`define FUNC14_BAR4_BARSIZE_TRGT1 128'h0


`define FUNC14_BAR0_TRGT1_ADDR_WIDTH 1


`define FUNC14_BAR2_TRGT1_ADDR_WIDTH 1


`define FUNC14_BAR4_TRGT1_ADDR_WIDTH 1


// Name:         CX_NUM_RBARS_14
// Default:      0 ([calc_num_rbars CX_BAR0_RESIZABLE_14 CX_BAR1_RESIZABLE_14 
//               CX_BAR2_RESIZABLE_14 CX_BAR3_RESIZABLE_14 CX_BAR4_RESIZABLE_14 
//               CX_BAR5_RESIZABLE_14])
// Values:       -2147483648, ..., 2147483647
// 
// Number of resizable BARs
`define CX_NUM_RBARS_14 0

//-/ END:   BAR CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SR-IOV CAPABILITIES CONFIGURATION


// Name:           CX_VF_DEPENDENCY_LINK_14
// Default:        0x14
// Values:         0x0, ..., 0xff
// Enabled:        CX_VF_DEPENDENCY_LINK_SUPP && (CX_NFUNC > 14) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Specifies the 8-bit VF dependency link for PF14. Valid only if CX_VF_DEPENDENCY_LINK_SUPP=1.
`define CX_VF_DEPENDENCY_LINK_14 8'h14


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER1_14
// Default:        0x2 ((CX_NFUNC>=17) ? 32 : (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : 
//                 (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF14 in an ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER1_14 16'h2


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER0_14
// Default:        0x100
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF14 
//  in a non-ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER0_14 16'h100


// Name:           VF_STRIDE_ARI_CAP_HIER1_14
// Default:        0x2 (CX_VF_STRIDE_ALWAYS_ONE) ? 1 : ((CX_NFUNC>=17) ? 32 : 
//                 (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF14 in an ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER1_14 16'h2


// Name:           VF_STRIDE_ARI_CAP_HIER0_14
// Default:        0x100 ((CX_VF_STRIDE_ALWAYS_ONE) ? 0x0001 : 0x0100)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF14 in a non-ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER0_14 16'h100


// Name:           CX_VF_DEVICE_ID_14
// Default:        0x0 (CX_DEVICE_ID_14)
// Values:         0x0, ..., 0xffff
// Enabled:        (CX_NFUNC > 14) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 16-bit virtual function Device ID for PF14. 
//  It might be different from the physical function's.
`define CX_VF_DEVICE_ID_14 16'h0


// Name:           CX_VF_SUPP_PAGE_SIZE_14
// Default:        0x553
// Values:         0x553, ..., 0xffff
// Enabled:        (CX_NFUNC > 14) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 32-bit supported page sizes for virtual functions for PF14
`define CX_VF_SUPP_PAGE_SIZE_14 32'h553


// Name:           CX_ARI_CAP_HIER_PRSVD_14
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Specifies if ARI Capable Hierarchy bit is preserved across certain power state transitions 
//  Only present in PF0. Read Only Zero in this PF14.
`define CX_ARI_CAP_HIER_PRSVD_14 1'h0

//-/===========================================
//-/ START: VF BAR CONFIGURATION


// Name:           VF_BAR0_ENABLED_14
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 14)
// Parameter Type: Feature Setting
// 
// Include the VF BAR0 registers in PF14
`define VF_BAR0_ENABLED_14 1'h1


`define VF_DEFAULT_BAR0_ENABLED_14 1'h1


// Name:           VF_MEM0_SPACE_DECODER_14
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR0_ENABLED_14 && CX_SRIOV_ENABLE && (CX_NFUNC > 14)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Space Indicator 
//  ALWAYS set to Memory for Virtual Functions
`define VF_MEM0_SPACE_DECODER_14 1'h0


// Name:           VF_PREFETCHABLE0_14
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_14==1 && VF_MEM0_SPACE_DECODER_14==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 14)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Prefetchable 
//  When set indicates VF BAR0 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE0_14 1'h0


// Name:           VF_BAR0_TYPE_14
// Default:        64-bit ((VF_MEM0_SPACE_DECODER_14==1 || VF_BAR0_ENABLED_14==0) ? 0 
//                 : 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR0_ENABLED_14==1 && VF_MEM0_SPACE_DECODER_14==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 14)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 14; (bits [2:1] for a memory BAR).
`define VF_BAR0_TYPE_14 2'h2


// Name:           VF_BAR0_MASK_WRITABLE_14
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_14==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 14)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR0_MASK_WRITABLE_14 1'h0


// Name:           VF_BAR0_MASK_14
// Default:        0xfffff (VF_MEM0_SPACE_DECODER_14==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR0_ENABLED_14==1 && VF_MEM0_SPACE_DECODER_14==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 14)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Mask 
//  Determines the default of the VF BAR Mask register for PF14. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR0_MASK_14 64'hfffff


// Name:           VF_MEM_FUNC14_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR0_ENABLED_14==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE 
//                 && (CX_NFUNC > 14)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF14 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC14_BAR0_TARGET_MAP 1'h1


// Name:           VF_BAR1_ENABLED_14
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        (VF_BAR0_TYPE_14==0)  && CX_SRIOV_ENABLE && (CX_NFUNC > 14)
// Parameter Type: Feature Setting
// 
// Include the VF BAR1 registers in PF14
`define VF_BAR1_ENABLED_14 1'h0


`define VF_DEFAULT_BAR1_ENABLED_14 1'h0


// Name:           VF_MEM1_SPACE_DECODER_14
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR1_ENABLED_14==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 14)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Space Indicator
`define VF_MEM1_SPACE_DECODER_14 1'h0


// Name:           VF_PREFETCHABLE1_14
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_14==1 && VF_MEM1_SPACE_DECODER_14==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 14)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Prefetchable 
//  When set indicates VF BAR1 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE1_14 1'h0


// Name:           VF_BAR1_TYPE_14
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 14; (bits [2:1] for a memory BAR).
`define VF_BAR1_TYPE_14 2'h0


// Name:           VF_BAR1_MASK_WRITABLE_14
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_14==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 14)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR1_MASK_WRITABLE_14 1'h0


// Name:           VF_BAR1_MASK_14
// Default:        0xffff (VF_MEM1_SPACE_DECODER_14==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR1_ENABLED_14==1 && VF_MEM1_SPACE_DECODER_14==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 14)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Mask 
//  Determines the default of the VF BAR Mask register for PF14. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR1_MASK_14 32'hffff


// Name:           VF_MEM_FUNC14_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR1_ENABLED_14==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE 
//                 && (CX_NFUNC > 14)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF14 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC14_BAR1_TARGET_MAP 1'h1


// Name:           VF_BAR2_ENABLED_14
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 14)
// Parameter Type: Feature Setting
// 
// Include the VF BAR2 registers in PF14
`define VF_BAR2_ENABLED_14 1'h1


`define VF_DEFAULT_BAR2_ENABLED_14 1'h1


// Name:           VF_MEM2_SPACE_DECODER_14
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR2_ENABLED_14==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 14)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Memory Space Indicator
`define VF_MEM2_SPACE_DECODER_14 1'h0


// Name:           VF_PREFETCHABLE2_14
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_14==1 && VF_MEM2_SPACE_DECODER_14==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 14)
// Parameter Type: Register Default Setting
// 
// BAR2 Memory Prefetchable 
//  When set indicates VF BAR2 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE2_14 1'h0


// Name:           VF_BAR2_TYPE_14
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR2_ENABLED_14==1 && VF_MEM2_SPACE_DECODER_14==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 14)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 14; (bits [2:1] for a memory BAR).
`define VF_BAR2_TYPE_14 2'h0


// Name:           VF_BAR2_MASK_WRITABLE_14
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_14==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 14)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR2_MASK_WRITABLE_14 1'h0


// Name:           VF_BAR2_MASK_14
// Default:        0xfffff (VF_MEM2_SPACE_DECODER_14==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR2_ENABLED_14==1 && VF_MEM2_SPACE_DECODER_14==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 14)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Mask 
//  Determines the default of the VF BAR Mask register for PF14. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR2_MASK_14 64'hfffff


// Name:           VF_MEM_FUNC14_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR2_ENABLED_14==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 14)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF14 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC14_BAR2_TARGET_MAP 1'h1


// Name:           VF_BAR3_ENABLED_14
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_TYPE_14==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 14)
// Parameter Type: Feature Setting
// 
// Include the VF BAR3 registers in PF14
`define VF_BAR3_ENABLED_14 1'h0


`define VF_DEFAULT_BAR3_ENABLED_14 1'h0


// Name:           VF_MEM3_SPACE_DECODER_14
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR3_ENABLED_14==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 14)
// Parameter Type: Register Default Setting
// 
// BAR3 Memory Space Indicator
`define VF_MEM3_SPACE_DECODER_14 1'h0


// Name:           VF_PREFETCHABLE3_14
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_14==1 && VF_MEM3_SPACE_DECODER_14==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 14)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Memory Prefetchable 
//  When set indicates VF BAR3 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE3_14 1'h0


// Name:           VF_BAR3_TYPE_14
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 14; (bits [2:1] for a memory BAR).
`define VF_BAR3_TYPE_14 2'h0


// Name:           VF_BAR3_MASK_WRITABLE_14
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_14==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 14)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR3_MASK_WRITABLE_14 1'h0


// Name:           VF_BAR3_MASK_14
// Default:        0xffff (VF_MEM3_SPACE_DECODER_14==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR3_ENABLED_14==1 && VF_MEM3_SPACE_DECODER_14==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 14)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Mask 
//  Determines the default of the VF BAR Mask register for PF14. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR3_MASK_14 32'hffff


// Name:           VF_MEM_FUNC14_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR3_ENABLED_14==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 14)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF14 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC14_BAR3_TARGET_MAP 1'h1


// Name:           VF_BAR4_ENABLED_14
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 14)
// Parameter Type: Feature Setting
// 
// Include the VF BAR4 registers in PF14
`define VF_BAR4_ENABLED_14 1'h1


`define VF_DEFAULT_BAR4_ENABLED_14 1'h1


// Name:           VF_MEM4_SPACE_DECODER_14
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR4_ENABLED_14==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 14)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Space Indicator
`define VF_MEM4_SPACE_DECODER_14 1'h0


// Name:           VF_PREFETCHABLE4_14
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_14==1 && VF_MEM4_SPACE_DECODER_14==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 14)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Prefetchable 
//  When set indicates VF BAR4 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE4_14 1'h0


// Name:           VF_BAR4_TYPE_14
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR4_ENABLED_14==1 && VF_MEM4_SPACE_DECODER_14==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 14)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 14; (bits [2:1] for a memory BAR).
`define VF_BAR4_TYPE_14 2'h0


// Name:           VF_BAR4_MASK_WRITABLE_14
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_14==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 14)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR4_MASK_WRITABLE_14 1'h0


// Name:           VF_BAR4_MASK_14
// Default:        0xfff (VF_MEM4_SPACE_DECODER_14==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR4_ENABLED_14==1 && VF_MEM4_SPACE_DECODER_14==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 14)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Mask 
//  Determines the default of the VF BAR Mask register for PF14. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR4_MASK_14 64'hfff


// Name:           VF_MEM_FUNC14_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR4_ENABLED_14==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 14)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF14 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC14_BAR4_TARGET_MAP 1'h1


// Name:           VF_BAR5_ENABLED_14
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_TYPE_14==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 14)
// Parameter Type: Feature Setting
// 
// Include the VF BAR5 registers in PF14
`define VF_BAR5_ENABLED_14 1'h0


`define VF_DEFAULT_BAR5_ENABLED_14 1'h0


// Name:           VF_MEM5_SPACE_DECODER_14
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR5_ENABLED_14==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 14)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Space Indicator
`define VF_MEM5_SPACE_DECODER_14 1'h0


// Name:           VF_PREFETCHABLE5_14
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_14==1 && VF_MEM5_SPACE_DECODER_14==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 14)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Prefetchable 
//  When set indicates VF BAR5 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE5_14 1'h0


// Name:           VF_BAR5_TYPE_14
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 14; (bits [2:1] for a memory BAR).
`define VF_BAR5_TYPE_14 2'h0


// Name:           VF_BAR5_MASK_WRITABLE_14
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_14==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 14)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR5_MASK_WRITABLE_14 1'h0


// Name:           VF_BAR5_MASK_14
// Default:        0xffff (VF_MEM5_SPACE_DECODER_14==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR5_ENABLED_14==1 && VF_MEM5_SPACE_DECODER_14==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 14)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Mask 
//  Determines the default of the VF BAR Mask register for PF14. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR5_MASK_14 32'hffff


// Name:           VF_MEM_FUNC14_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR5_ENABLED_14==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 14)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF14 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC14_BAR5_TARGET_MAP 1'h1


`define VF_FUNC14_BARSIZE_32 128'h101000


`define VF_FUNC14_BARSIZE 128'h201000

//-/ END:   VF BAR CONFIGURATION
//-/===========================================

//-/ END:   SR-IOV CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: TPH CAPABILITIES CONFIGURATION


// Name:           TPH_IVEC_14
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Interrupt Vector Mode. If set indicates that the function supports the Interrupt Vector 
// Mode of operation. Function 14.
`define TPH_IVEC_14 1'h0


// Name:           TPH_DS_14
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Device Specific Mode. If set indicates that the function supports the Device Specific Mode 
// of operation. Function 14.
`define TPH_DS_14 1'h0


// Name:           TPH_ST_TABLE_LOC_14
// Default:        Not Present
// Values:         Not Present (0), TPH Requester Capability Structure (1), MSI-X 
//                 Table Structure (2)
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_DS_14 || TPH_IVEC_14))
// Parameter Type: Feature Setting
// 
// TLP Processing Hints Steering Tag Table Location. Value indicates if and where the ST Table is located. Function 14.
`define TPH_ST_TABLE_LOC_14 0

//located in the TPH Requester Capability structure. Please reduce the ST Table Size for this mode of operation"

// Name:           TPH_ST_TABLE_SIZE_14
// Default:        1
// Values:         1, ..., 2048
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_ST_TABLE_LOC_14 != 0))
// Parameter Type: Feature Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define TPH_ST_TABLE_SIZE_14 1


`define TPH_ST_TABLE_DEPTH_14 0

//-/ END:   TPH CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: ATS CAPABILITIES CONFIGURATION


// Name:           ATS_INV_Q_DPTH_14
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// The number of Invalidate Requests that the Function can accept before putting backpressure on the upstream connection. A 
// value of 0 indicates the function can accept 32 Invalidate requests. Function 14.
`define ATS_INV_Q_DPTH_14 5'd0


// Name:           ATS_STU_14
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// This value indicates to the Function the minimum number of 4096-byte blocks that is indicated in a Translation 
// Completion or Invalidate Request. This is a power of 2 multiplier and the number of blocks is 2^STU. A value of 0 indicates 1 block 
// and a value of 31 indicates 2^31 blocks (or 8 TB total). Function 14.
`define ATS_STU_14 5'd0

//-/ END:   ATS CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PRS CAPABILITIES CONFIGURATION


// Name:           CX_PRS_OUTSTANDING_CAPACITY_VALUE_14
// Default:        0x1
// Values:         0x0, ..., 0xffffffff
// Enabled:        (CX_PRS_ENABLE==1) && (CX_NFUNC > 14)
// Parameter Type: Register Default Setting
// 
// Register default for PRS Outstanding Capacity in PF14. 
// For more details, see the PRS_OUTSTANDING_CAPACITY field in the PRS_REQ_CAPACITY_REG register.
`define CX_PRS_OUTSTANDING_CAPACITY_VALUE_14 32'h1

//-/ END:   PRS CAPABILITIES CONFIGURATION
//-/===========================================


//-/===========================================
//--- START: RN


// Name:           CX_RN_IMM_VALUE_14
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 14)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for PF14.
`define CX_RN_IMM_VALUE_14 1'h0


// Name:           CX_RN_IMM_D0_VALUE_14
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 14)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for PF14.
`define CX_RN_IMM_D0_VALUE_14 1'h0


// Name:           CX_RN_FRS_VALUE_14
// Default:        0x0 (CX_RN_FRS_SUPPORTED==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_FRS_SUPPORTED==1) && (CX_NFUNC > 14)
// Parameter Type: Feature Setting
// 
// Function Readiness Status messaging supported for function PF14.
`define CX_RN_FRS_VALUE_14 1'h0


// Name:           CX_RN_RTR_VALID_14
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 14)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF14.
`define CX_RN_RTR_VALID_14 1'h0


// Name:           CX_RN_RTR_DL_UP_VALUE_14
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 14)
// Parameter Type: Register Default Setting
// 
// Register default for RTR DL Up Time field in PF14.
`define CX_RN_RTR_DL_UP_VALUE_14 12'h0


// Name:           CX_RN_RTR_RESET_VALUE_14
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 14)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF14.
`define CX_RN_RTR_RESET_VALUE_14 12'h0


// Name:           CX_RN_RTR_D3D0_VALUE_14
// Default:        0x0
// Values:         0x0, ..., 0x80a
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 14)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF14.
`define CX_RN_RTR_D3D0_VALUE_14 12'h0


// Name:           CX_RN_RTR_FLR_VALUE_14
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_FLR_ENABLE==1) && (CX_NFUNC > 14)
// Parameter Type: Register Default Setting
// 
// Register default for RTR FLR Time field in PF14.
`define CX_RN_RTR_FLR_VALUE_14 12'h0


// Name:           VF_RN_IMM_VALUE_14
// Default:        0x0 (CX_RN_IMM_VALUE_14 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 14))
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for VFs in PF14.
`define VF_RN_IMM_VALUE_14 1'h0


// Name:           VF_RN_IMM_D0_VALUE_14
// Default:        0x0 (CX_RN_IMM_D0_VALUE_14 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 14))
// Parameter Type: Register Default Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for VFs in PF14.
`define VF_RN_IMM_D0_VALUE_14 1'h0


// Name:           VF_RN_RTR_VALID_14
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 14) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF14 VFs.
`define VF_RN_RTR_VALID_14 1'h0


// Name:           VF_RN_RTR_RESET_VALUE_14
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_14)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 14) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF14 VFS.
`define VF_RN_RTR_RESET_VALUE_14 12'h0


// Name:           VF_RN_RTR_D3D0_VALUE_14
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_14)
// Values:         0x0, ..., 0x80a
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 14) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF14 VFS.
`define VF_RN_RTR_D3D0_VALUE_14 12'h0


// Name:           VF_RN_RTR_FLR_VALUE_14
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_14)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 14) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF14 VFs.
`define VF_RN_RTR_FLR_VALUE_14 12'h0


// Name:           EXT_VF_RN_RTR_VALID_14
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 14) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF14 VFs.
`define EXT_VF_RN_RTR_VALID_14 1'h0


// Name:           EXT_VF_RN_RTR_RESET_VALUE_14
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_14)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 14) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF14 VFS.
`define EXT_VF_RN_RTR_RESET_VALUE_14 12'h0


// Name:           EXT_VF_RN_RTR_D3D0_VALUE_14
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_14)
// Values:         0x0, ..., 0x80a
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 14) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF14 VFS.
`define EXT_VF_RN_RTR_D3D0_VALUE_14 12'h0


// Name:           EXT_VF_RN_RTR_FLR_VALUE_14
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_14)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 14) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF14 VFs.
`define EXT_VF_RN_RTR_FLR_VALUE_14 12'h0

//-/ END:   RN
//-/===========================================

//-/ START: LN CAPABILITIES CONFIGURATION
//-/===========================================


// Name:           CX_LN_REG_MAX_VALUE_14
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 14))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_64_SUPPORTED field in the LNR_CAP_OFF register for PF14.
`define CX_LN_REG_MAX_VALUE_14 5'h0


// Name:           CX_LN_128_SUPPORTED_VALUE_14
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 14))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_128_SUPPORTED field in the LNR_CAP_OFF register for PF14.
`define CX_LN_128_SUPPORTED_VALUE_14 1'h0


// Name:           CX_LN_64_SUPPORTED_VALUE_14
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 14))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_REGISTRATION_MAX field in the LNR_CAP_OFF register for PF14.
`define CX_LN_64_SUPPORTED_VALUE_14 1'h0

//-/ END:   LN CAPABILITIES CONFIGURATION
//-/===========================================




//-/==========================================
//-/ End FUNC14 Config
//-/==========================================

//-/===========================================
//-/ Function 15 Configuration Registers
//-/ ==========================================


// Name:         FUNC_15
// Default:      0 ((CX_NFUNC > 15) ? 1 : 0)
// Values:       0, 1
// 
// This parameter indicates that Function 15 is present
// `define FUNC_15

//-/===========================================
//-/ START: PCI-E CAPABILITIES CONFIGURATION


// Name:           PCIE_CAP_INT_MSG_NUM_15
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 15
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Message Number field in the PCI Express Capabilities Register. Function 15.
`define PCIE_CAP_INT_MSG_NUM_15 5'h0


// Name:           SLOT_IMPLEMENTED_15
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_NFUNC > 15))
// Parameter Type: Register Default Setting
// 
// Indicates that the PCI Express link associated with this Port is connected to a slot. Function 15.
`define SLOT_IMPLEMENTED_15 1'h0


// Name:           DEFAULT_PHANTOM_FUNC_SUPPORTED_15
// Default:        0x0
// Values:         0x0, ..., 0x3
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_PHANTOM_FUNC_SUPPORTED_15 2'h0


// Name:           DEFAULT_EXT_TAG_FIELD_SUPPORTED_15
// Default:        0x0 (DEFAULT_EXT_TAG_FIELD_SUPPORTED_0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 15
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_EXT_TAG_FIELD_SUPPORTED_15 1'h0



// Name:           DEFAULT_ATT_BUTT_PRE_15
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 15
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Button is present
`define DEFAULT_ATT_BUTT_PRE_15 1'h0


// Name:           DEFAULT_ATT_IND_PRE_15
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 15
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Indicator is present
`define DEFAULT_ATT_IND_PRE_15 1'h0


// Name:           DEFAULT_PWR_IND_PRE_15
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 15
// Parameter Type: Register Default Setting
// 
// When set indicates that a Power Indicator is present
`define DEFAULT_PWR_IND_PRE_15 1'h0


// Name:           DEFAULT_NO_SNOOP_SUPPORTED_15
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 15
// Parameter Type: Register Default Setting
// 
// Default value for the Enable No Snoop bit in the Device Control Register. Function 15.
`define DEFAULT_NO_SNOOP_SUPPORTED_15 1'h0


// Name:           ROOT_RCB_15
// Default:        64-bit
// Values:         64-bit (0x0), 128-bit (0x1)
// Parameter Type: Register Default Setting
// 
// Default value for the Read Completion Boundary (RCB) bit in the Link Control Register.
`define ROOT_RCB_15 1'h0


//-/ END:   PCI-E CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: MSI-X CAPABILITIES CONFIGURATION


// Name:           MSIX_TABLE_SIZE_15
// Default:        0x0
// Values:         0x0, ..., 0x7ff
// Enabled:        CX_NFUNC > 15 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the MSI-X Table Size field in the MSI-X Control Register. Function 15.
`define MSIX_TABLE_SIZE_15 11'h0


// Name:           MSIX_TABLE_BIR_15
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 15 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table BAR Indicator Register (BIR) field in the MSI-X Table Offset and BIR Register. Function 15.
`define MSIX_TABLE_BIR_15 3'h0


// Name:           MSIX_TABLE_OFFSET_15
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 15 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table Offset field in the MSI-X Table Offset and BIR Register. Function 15.
`define MSIX_TABLE_OFFSET_15 29'h0


// Name:           MSIX_PBA_BIR_15
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 15 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Pending Bit Array (PBA) BIR field in the MSI-X PBA Offset and BIR Register. Function 15.
`define MSIX_PBA_BIR_15 7'h0


// Name:           MSIX_PBA_OFFSET_15
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 15 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the PBA Offset field in the MSI-X PBA Offset and BIR Register. Function 15.
`define MSIX_PBA_OFFSET_15 29'h0

//-/ END:   MSI-X CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SATA CAPABILITIES CONFIGURATION


// Name:         SATA_HBA_OFFSET_15
// Default:      0x0
// Values:       0x0, ..., 0xfffff
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA Offset. Base address of the SATA HBA registers, 
//  as an offset from the base address of the BAR indicated 
//  by the SATA BAR field.
`define SATA_HBA_OFFSET_15 20'h0


// Name:         SATA_BAR_15
// Default:      0x0
// Values:       0x0, ..., 0xf
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA BAR. The bar that maps to SATA HBA registers,
`define SATA_BAR_15 4'h0

//-/ END:   SATA CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: AER CAPABILITIES CONFIGURATION


// Name:           DEFAULT_ECRC_CHK_CAP_15
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 15 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Check Capable bit in the Advanced Capabilities and Control Register. Function 15.
`define DEFAULT_ECRC_CHK_CAP_15 1'h1


// Name:           DEFAULT_ECRC_GEN_CAP_15
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 15 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Generation Capability bit in the Advanced Capabilities and Control Register. Function 15.
`define DEFAULT_ECRC_GEN_CAP_15 1'h1


// Name:           AER_INT_MSG_NUM_15
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Parameter Type: Register Default Setting
// 
// Default value for the Advanced Error Interrupt Message Number field of the Root Error Status Register. Function 15.
`define AER_INT_MSG_NUM_15 5'h0



// Name:           CX_HDR_LOG_DEPTH_15
// Default:        0x1
// Values:         0x1, 0x2, 0x4
// Enabled:        CX_NFUNC > 15 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Feature Setting.
// 
// Header Log Depth
`define CX_HDR_LOG_DEPTH_15 3'h1


`define CX_MULTIPLE_HDR_REC_CAP_15 1'h0

//-/ END:   AER CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PM CAPABILITIES CONFIGURATION


// Name:           PME_SUPPORT_15
// Default:        0x1b
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 15
// Parameter Type: Register Default Setting
// 
// Default value for the PME_Support field in the Power Management Capabilities Register. Function 15.
`define PME_SUPPORT_15 5'h1b


// Name:           D1_SUPPORT_15
// Default:        true
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 15
// Parameter Type: Register Default Setting
// 
// Default value for the D1 Support bit in the Power Management Capabilities Register. Function 15.
`define D1_SUPPORT_15 1'h1


// Name:           D2_SUPPORT_15
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 15
// Parameter Type: Register Default Setting
// 
// Default value for the D2 Support bit in the Power Management Capabilities Register. Function 15.
`define D2_SUPPORT_15 1'h0


// Name:           DEV_SPEC_INIT_15
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 15
// Parameter Type: Register Default Setting
// 
// Default value for the Device Specific Initialization (DSI) bit in the Power Management Capabilities Register. Function 
// 15.
`define DEV_SPEC_INIT_15 1'h0


// Name:           AUX_CURRENT_15
// Default:        375mA
// Values:         0mA (0x0), 55mA (0x1), 100mA (0x2), 160mA (0x3), 220mA (0x4), 270mA 
//                 (0x5), 320mA (0x6), 375mA (0x7)
// Enabled:        CX_NFUNC > 15
// Parameter Type: Register Default Setting
// 
// Default value for the Aux Current field in the Power Management Capabilities Register. Function 15.
`define AUX_CURRENT_15 3'h7


// Name:           DEFAULT_NO_SOFT_RESET_15
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 15
// Parameter Type: Register Default Setting
// 
// Default value for the No Soft Reset bit in the Power Management Control and Status Register. When set, you should not 
// reset any controller registers when transitioning from D3hot to D0. Therefore, you should not assert the non_sticky_rst_n 
// and sticky_rst_n inputs. Function 15.
`define DEFAULT_NO_SOFT_RESET_15 1'h0

//-/ END:   PM CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PCI BASIC CONFIGURATION


// Name:           CX_DEVICE_ID_15
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 15
// Parameter Type: Register Default Setting
// 
// Default value for the Device ID field in the Device ID and Vendor ID Register. Function 15.
`define CX_DEVICE_ID_15 16'h0


// Name:           CX_VENDOR_ID_15
// Default:        0x16c3
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 15
// Parameter Type: Register Default Setting
// 
// Default value for the Vendor ID field in the Device ID and Vendor ID Register. Function 15.
`define CX_VENDOR_ID_15 16'h16c3


// Name:           CX_REVISION_ID_15
// Default:        0x1
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 15
// Parameter Type: Register Default Setting
// 
// Default value for the Revision ID field in the Revision ID Register. Function 15.
`define CX_REVISION_ID_15 8'h1


// Name:           SUBSYS_DEV_ID_15
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 15
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 15.
`define SUBSYS_DEV_ID_15 16'h0


// Name:           SUBSYS_VENDOR_ID_15
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 15
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem Vendor ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 15.
`define SUBSYS_VENDOR_ID_15 16'h0


// Name:           BASE_CLASS_CODE_15
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 15
// Parameter Type: Register Default Setting
// 
// Default value for the Base Class Code field in the Class Code Register. Function 15.
`define BASE_CLASS_CODE_15 8'h0


// Name:           SUB_CLASS_CODE_15
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 15
// Parameter Type: Register Default Setting
// 
// Default value for the Subclass Code field in the Class Code Register. Function 15.
`define SUB_CLASS_CODE_15 8'h0


// Name:           IF_CODE_15
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 15
// Parameter Type: Register Default Setting
// 
// Default value for the Programming Interface field in the Class Code Register. Function 15.
`define IF_CODE_15 8'h0


// Name:           CARDBUS_CIS_PTR_15
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 15
// Parameter Type: Register Default Setting
// 
// Default value for the CardBus CIS Pointer Register. Function 15.
`define CARDBUS_CIS_PTR_15 16'h0


// Name:           INT_PIN_MAPPING_15
// Default:        INTA
// Values:         None (0x0), INTA (0x1), INTB (0x2), INTC (0x3), INTD (0x4)
// Enabled:        CX_NFUNC > 15
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Pin Register. Function 15.
`define INT_PIN_MAPPING_15 8'h1


// Name:           IO_DECODE_32_15
// Default:        16-bit
// Values:         16-bit (0x0), 32-bit (0x1)
// Enabled:        CX_NFUNC > 15
// Parameter Type: Register Default Setting
// 
// Default value for the 32-Bit I/O Space bit in the I/O Base and I/O Limit Register. Function 15.
`define IO_DECODE_32_15 1'h0


// Name:           MEM_DECODE_64_15
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x1)
// Enabled:        CX_NFUNC > 15
// Parameter Type: Register Default Setting
// 
// Default value for the 64-Bit Memory Addressing bit in the Prefetchable Memory Base and Limit Register. Function 15.
`define MEM_DECODE_64_15 1'h0


// Name:           ROM_BAR_ENABLED_15
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 15
// Parameter Type: Register Default Setting
// 
// Include the expansion ROM BAR registers. Function 15.
`define ROM_BAR_ENABLED_15 1'h1


`define DEFAULT_ROM_BAR_ENABLED_15 1'h1


// Name:           ROM_MASK_15
// Default:        0xffff
// Values:         0x7ff, ..., 0xffffff
// Enabled:        CX_NFUNC > 15 && ROM_BAR_ENABLED_15==1
// Parameter Type: Register Default Setting
// 
// Determines the default of the Expansion ROM BAR Mask register. Function 15. 
//  - The BAR Mask register specifies which bits of the Expansion ROM BAR are non-writable by host software, which 
//  determines the size of the BAR. 
//  - The maximum value for ROM_MASK_N is 0xFFFFFF because the maximum space that can be claimed by an Expansion ROM BAR 
//  is 16 MB. 
//  - For example: 32'hFFFF =BAR size of 2^16.
`define ROM_MASK_15 32'hffff


// Name:           ROM_MASK_WRITABLE_15
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 15 && ROM_BAR_ENABLED_15==1
// Parameter Type: Feature Setting
// 
// Determines if the Expansion ROM BAR Mask register for function 15 is writable by application software. If writing to a 
// Expansion ROM BAR Mask register is enabled, your application can write to the Expansion ROM BAR Mask register through the 
// DBI by asserting dbi_cs2 in addition to dbi_cs.
`define ROM_MASK_WRITABLE_15 1'h0


// Name:           ROM_FUNC15_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 15 && ROM_BAR_ENABLED_15==1 && TRGT1_POPULATE==1))
// Parameter Type: Register Default Setting
// 
// Direct incoming requests that pass filtering and match the Expansion ROM BAR of function 15 to either RTRGT0 or RTRGT1. 
//  - For example, setting ROM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for the Expansion ROM BAR of function 
//  0 to RTRGT1. 
//  - If TRGT1_POPULATE =0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define ROM_FUNC15_TARGET_MAP 1'h1


// Name:           CX_PCI_HEADER_DEFAULTS_VISIBLE_15
// Default:        0
// Values:         0, 1
// Parameter Type: Register Default Setting
// 
// Select here if you want to configure the defaults for the other PCI Standard Header registers for function 15. 
//  An extra window will appear under this page. To access it, click the plus/minus symbol in the hierarchy view on the 
//  left panel. 
//  This is optional but not usually recommended. 
//  You can also change these register defaults using the DBI before (or after) the link comes up.
`define CX_PCI_HEADER_DEFAULTS_VISIBLE_15 0

//-/ END:   PCI BASIC CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: BAR CONFIGURATION


// Name:           BAR0_ENABLED_15
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 15
// Parameter Type: Feature Setting
// 
// Include the BAR0 registers for function 15.
`define BAR0_ENABLED_15 1'h1


`define DEFAULT_BAR0_ENABLED_15 1'h1


// Name:           MEM0_SPACE_DECODER_15
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 15 && BAR0_ENABLED_15==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 15.
`define MEM0_SPACE_DECODER_15 1'h0


// Name:           PREFETCHABLE0_15
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 15 && BAR0_ENABLED_15==1 && MEM0_SPACE_DECODER_15==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 15.
`define PREFETCHABLE0_15 1'h0


// Name:           BAR0_TYPE_15
// Default:        64-bit ((MEM0_SPACE_DECODER_15==1 || BAR0_ENABLED_15==0) ? 0 : 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 15 && BAR0_ENABLED_15==1 && MEM0_SPACE_DECODER_15==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 15.
`define BAR0_TYPE_15 2'h2


// Name:           BAR0_SIZING_SCHEME_15
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 15 && BAR0_ENABLED_15==1
// Parameter Type: Feature Setting
// 
// BAR0 Function 15 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR0_SIZING_SCHEME_15 2'h0


// Name:           CX_BAR0_RESIZABLE_15
// Default:        0x0 ((BAR0_SIZING_SCHEME_15==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR0_ENABLED_15==1) && (MEM0_SPACE_DECODER_15==0)
// Parameter Type: Feature Setting
// 
// Defines BAR0 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR0 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR0_RESIZABLE_15 1'h0


// Name:           CX_BAR0_RESOURCE_AVAIL_15
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 15 && CX_BAR0_RESIZABLE_15==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR0 of function 15. 
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
// Example: 0x00000030 indicates that BAR0 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR0_RESOURCE_AVAIL_15 64'h10


// Name:           BAR0_MASK_WRITABLE_15
// Default:        0x0 ((BAR0_ENABLED_15==1 && BAR0_SIZING_SCHEME_15 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 15 && BAR0_ENABLED_15==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR0 Mask through DBI
`define BAR0_MASK_WRITABLE_15 1'h0


// Name:           BAR0_MASK_15
// Default:        0xfffff (CX_BAR0_RESIZABLE_15==1 ? [calc_bar_mask 
//                 CX_BAR0_RESOURCE_AVAIL_15] : MEM0_SPACE_DECODER_15==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 15 && BAR0_ENABLED_15==1 && MEM0_SPACE_DECODER_15==0 && 
//                 CX_BAR0_RESIZABLE_15==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR0 Mask register of function 15. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR0_MASK_15 64'hfffff


// Name:           MEM_FUNC15_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 15 && BAR0_ENABLED_15==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_0 of function 15 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming Requests for BAR0 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC15_BAR0_TARGET_MAP 1'h1


// Name:           BAR1_ENABLED_15
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 15 && BAR0_TYPE_15==0
// Parameter Type: Feature Setting
// 
// Include the BAR1 registers for function 15.
`define BAR1_ENABLED_15 1'h0


`define DEFAULT_BAR1_ENABLED_15 1'h0


// Name:           MEM1_SPACE_DECODER_15
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 15 && BAR1_ENABLED_15==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 15.
`define MEM1_SPACE_DECODER_15 1'h0


// Name:           PREFETCHABLE1_15
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 15 && BAR1_ENABLED_15==1 && MEM1_SPACE_DECODER_15==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 15.
`define PREFETCHABLE1_15 1'h0


// Name:           BAR1_TYPE_15
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 15.
`define BAR1_TYPE_15 2'h0


// Name:           BAR1_SIZING_SCHEME_15
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 15 && BAR1_ENABLED_15==1
// Parameter Type: Feature Setting
// 
// BAR1 Function 15 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR1_SIZING_SCHEME_15 2'h0


// Name:           CX_BAR1_RESIZABLE_15
// Default:        0x0 ((BAR1_SIZING_SCHEME_15==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR1_ENABLED_15==1) && (MEM1_SPACE_DECODER_15==0)
// Parameter Type: Feature Setting
// 
// Defines BAR1 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR1 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR1_RESIZABLE_15 1'h0


// Name:           CX_BAR1_RESOURCE_AVAIL_15
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 15 && CX_BAR1_RESIZABLE_15==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR1 of function 15. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR1 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR1_RESOURCE_AVAIL_15 32'h10


// Name:           BAR1_MASK_WRITABLE_15
// Default:        0x0 ((BAR1_ENABLED_15==1 && BAR1_SIZING_SCHEME_15 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 15 && BAR1_ENABLED_15==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR1 Mask through DBI
`define BAR1_MASK_WRITABLE_15 1'h0


// Name:           BAR1_MASK_15
// Default:        0xffff (CX_BAR1_RESIZABLE_15==1 ? [calc_bar_mask 
//                 CX_BAR1_RESOURCE_AVAIL_15] : MEM1_SPACE_DECODER_15==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 15 && BAR1_ENABLED_15==1 && MEM1_SPACE_DECODER_15==0 && 
//                 CX_BAR1_RESIZABLE_15==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR1 Mask register of function 15. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR1_MASK_15 32'hffff


// Name:           MEM_FUNC15_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 15 && BAR1_ENABLED_15==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_1 of function 15 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR1_TARGET_MAP to 1 maps all incoming Requests for BAR1 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC15_BAR1_TARGET_MAP 1'h1


// Name:           BAR2_ENABLED_15
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 15
// Parameter Type: Feature Setting
// 
// Include the BAR2 registers for function 15.
`define BAR2_ENABLED_15 1'h1


`define DEFAULT_BAR2_ENABLED_15 1'h1


// Name:           MEM2_SPACE_DECODER_15
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 15 && BAR2_ENABLED_15==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 15.
`define MEM2_SPACE_DECODER_15 1'h0


// Name:           PREFETCHABLE2_15
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 15 && BAR2_ENABLED_15==1 && MEM2_SPACE_DECODER_15==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 15.
`define PREFETCHABLE2_15 1'h0


// Name:           BAR2_TYPE_15
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 15 && BAR2_ENABLED_15==1 && MEM2_SPACE_DECODER_15==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 15.
`define BAR2_TYPE_15 2'h0


// Name:           BAR2_SIZING_SCHEME_15
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 15 && BAR2_ENABLED_15==1
// Parameter Type: Feature Setting
// 
// BAR2 Function 15 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR2_SIZING_SCHEME_15 2'h0


// Name:           CX_BAR2_RESIZABLE_15
// Default:        0x0 ((BAR2_SIZING_SCHEME_15==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR2_ENABLED_15==1) && (MEM2_SPACE_DECODER_15==0)
// Parameter Type: Feature Setting
// 
// Defines BAR2 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR2 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR2_RESIZABLE_15 1'h0


// Name:           CX_BAR2_RESOURCE_AVAIL_15
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 15 && CX_BAR2_RESIZABLE_15==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR2 of function 15. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR2 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR2_RESOURCE_AVAIL_15 64'h10


// Name:           BAR2_MASK_WRITABLE_15
// Default:        0x0 ((BAR2_ENABLED_15==1 && BAR2_SIZING_SCHEME_15 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 15 && BAR2_ENABLED_15==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR2 Mask through DBI
`define BAR2_MASK_WRITABLE_15 1'h0


// Name:           BAR2_MASK_15
// Default:        0xfffff (CX_BAR2_RESIZABLE_15==1 ? [calc_bar_mask 
//                 CX_BAR2_RESOURCE_AVAIL_15] : MEM2_SPACE_DECODER_15==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 15 && BAR2_ENABLED_15==1 && MEM2_SPACE_DECODER_15==0 && 
//                 CX_BAR2_RESIZABLE_15==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR2 Mask register of function 15. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR2_MASK_15 64'hfffff


// Name:           MEM_FUNC15_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 15 && BAR2_ENABLED_15==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_2 of function 15 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR2_TARGET_MAP to 1 maps all incoming requests for BAR2 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC15_BAR2_TARGET_MAP 1'h1


// Name:           BAR3_ENABLED_15
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 15 && BAR2_TYPE_15==0
// Parameter Type: Feature Setting
// 
// Include the BAR3 registers for function 15.
`define BAR3_ENABLED_15 1'h0



`define DEFAULT_BAR3_ENABLED_15 1'h0


// Name:           MEM3_SPACE_DECODER_15
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 15 && BAR3_ENABLED_15==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 15.
`define MEM3_SPACE_DECODER_15 1'h0


// Name:           PREFETCHABLE3_15
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 15 && BAR3_ENABLED_15==1 && MEM3_SPACE_DECODER_15==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 15.
`define PREFETCHABLE3_15 1'h0


// Name:           BAR3_TYPE_15
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 15.
`define BAR3_TYPE_15 2'h0


// Name:           BAR3_SIZING_SCHEME_15
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 15 && BAR3_ENABLED_15==1
// Parameter Type: Feature Setting
// 
// BAR3 Function 15 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR3_SIZING_SCHEME_15 2'h0


// Name:           CX_BAR3_RESIZABLE_15
// Default:        0x0 ((BAR3_SIZING_SCHEME_15==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR3_ENABLED_15==1) && (MEM3_SPACE_DECODER_15==0)
// Parameter Type: Feature Setting
// 
// Defines BAR3 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR3 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR3_RESIZABLE_15 1'h0


// Name:           CX_BAR3_RESOURCE_AVAIL_15
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 15 && CX_BAR3_RESIZABLE_15==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR3 of function 15. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR3 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR3_RESOURCE_AVAIL_15 32'h10


// Name:           BAR3_MASK_WRITABLE_15
// Default:        0x0 ((BAR3_ENABLED_15==1 && BAR3_SIZING_SCHEME_15 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 15 && BAR3_ENABLED_15==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR3 Mask through DBI
`define BAR3_MASK_WRITABLE_15 1'h0


// Name:           BAR3_MASK_15
// Default:        0xffff (CX_BAR3_RESIZABLE_15==1 ? [calc_bar_mask 
//                 CX_BAR3_RESOURCE_AVAIL_15] : MEM3_SPACE_DECODER_15==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 15 && BAR3_ENABLED_15==1 && MEM3_SPACE_DECODER_15==0 && 
//                 CX_BAR3_RESIZABLE_15==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR3 Mask register of function 15. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR3_MASK_15 32'hffff


// Name:           MEM_FUNC15_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 15 && BAR3_ENABLED_15==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_3 of function 15 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR3_TARGET_MAP to 1 maps all incoming requests for BAR3 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC15_BAR3_TARGET_MAP 1'h1


// Name:           BAR4_ENABLED_15
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 15
// Parameter Type: Feature Setting
// 
// Include the BAR4 registers for function 15.
`define BAR4_ENABLED_15 1'h1


`define DEFAULT_BAR4_ENABLED_15 1'h1



// Name:           MEM4_SPACE_DECODER_15
// Default:        I/O (BAR4_ENABLED_15==1)
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 15 && BAR4_ENABLED_15==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 15.
`define MEM4_SPACE_DECODER_15 1'h1


// Name:           PREFETCHABLE4_15
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 15 && BAR4_ENABLED_15==1 && MEM4_SPACE_DECODER_15==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 15.
`define PREFETCHABLE4_15 1'h0


// Name:           BAR4_TYPE_15
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 15 && BAR4_ENABLED_15==1 && MEM4_SPACE_DECODER_15==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 15.
`define BAR4_TYPE_15 2'h0


// Name:           BAR4_SIZING_SCHEME_15
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 15 && BAR4_ENABLED_15==1
// Parameter Type: Feature Setting
// 
// BAR4  Function 15 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR4_SIZING_SCHEME_15 2'h0


// Name:           CX_BAR4_RESIZABLE_15
// Default:        0x0 ((BAR4_SIZING_SCHEME_15==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR4_ENABLED_15==1) && (MEM4_SPACE_DECODER_15==0)
// Parameter Type: Feature Setting
// 
// Defines BAR4 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR4 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR4_RESIZABLE_15 1'h0


// Name:           CX_BAR4_RESOURCE_AVAIL_15
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 15 &&  CX_BAR4_RESIZABLE_15==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR4 of function 15. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR4 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR4_RESOURCE_AVAIL_15 64'h10


// Name:           BAR4_MASK_WRITABLE_15
// Default:        0x0 ((BAR4_ENABLED_15==1 && BAR4_SIZING_SCHEME_15 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 15 && BAR4_ENABLED_15==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR4 Mask through DBI
`define BAR4_MASK_WRITABLE_15 1'h0


// Name:           BAR4_MASK_15
// Default:        0xff (CX_BAR4_RESIZABLE_15==1 ? [calc_bar_mask 
//                 CX_BAR4_RESOURCE_AVAIL_15] : MEM4_SPACE_DECODER_15==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 15 && BAR4_ENABLED_15==1 && MEM4_SPACE_DECODER_15==0 && 
//                 CX_BAR4_RESIZABLE_15==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR4 Mask register of function 15. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR4_MASK_15 64'hff


// Name:           MEM_FUNC15_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 15 && BAR4_ENABLED_15==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_4 of function 15 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR4_TARGET_MAP to 1 maps all incoming requests for BAR4 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC15_BAR4_TARGET_MAP 1'h1


// Name:           BAR5_ENABLED_15
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 15 && BAR4_TYPE_15==0
// Parameter Type: Feature Setting
// 
// Include the BAR5 registers for function 15.
`define BAR5_ENABLED_15 1'h0


`define DEFAULT_BAR5_ENABLED_15 1'h0


// Name:           MEM5_SPACE_DECODER_15
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 15 && BAR5_ENABLED_15==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 15.
`define MEM5_SPACE_DECODER_15 1'h0


// Name:           PREFETCHABLE5_15
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 15 && BAR5_ENABLED_15==1 && MEM5_SPACE_DECODER_15==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 15.
`define PREFETCHABLE5_15 1'h0


// Name:           BAR5_TYPE_15
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 15.
`define BAR5_TYPE_15 2'h0


// Name:           BAR5_SIZING_SCHEME_15
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 15 && BAR5_ENABLED_15==1
// Parameter Type: Feature Setting
// 
// BAR5  Function 15 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR5_SIZING_SCHEME_15 2'h0


// Name:           CX_BAR5_RESIZABLE_15
// Default:        0x0 ((BAR5_SIZING_SCHEME_15==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR5_ENABLED_15==1) && (MEM5_SPACE_DECODER_15==0)
// Parameter Type: Feature Setting
// 
// Defines BAR5 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR5 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR5_RESIZABLE_15 1'h0


// Name:           CX_BAR5_RESOURCE_AVAIL_15
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 15 && CX_BAR5_RESIZABLE_15==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR5 of function 15. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR5 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR5_RESOURCE_AVAIL_15 32'h10


// Name:           BAR5_MASK_WRITABLE_15
// Default:        0x0 ((BAR5_ENABLED_15==1 && BAR5_SIZING_SCHEME_15 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 15 && BAR5_ENABLED_15==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR5 Mask through DBI
`define BAR5_MASK_WRITABLE_15 1'h0


// Name:           BAR5_MASK_15
// Default:        0xffff (CX_BAR5_RESIZABLE_15==1 ? [calc_bar_mask 
//                 CX_BAR5_RESOURCE_AVAIL_15] : MEM5_SPACE_DECODER_15==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 15 && BAR5_ENABLED_15==1 && MEM5_SPACE_DECODER_15==0 && 
//                 CX_BAR5_RESIZABLE_15==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR5 Mask register of function 15. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR5_MASK_15 32'hffff


// Name:           MEM_FUNC15_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 15 && BAR5_ENABLED_15==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_5 of function 15 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR5_TARGET_MAP to 1 maps all incoming requests for BAR5 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC15_BAR5_TARGET_MAP 1'h1


`define FUNC15_BARSIZE_32 128'h0


`define FUNC15_BARSIZE 128'h0


`define FUNC15_BAR0_BARSIZE_TRGT1 128'h0


`define FUNC15_BAR2_BARSIZE_TRGT1 128'h0


`define FUNC15_BAR4_BARSIZE_TRGT1 128'h0


`define FUNC15_BAR0_TRGT1_ADDR_WIDTH 1


`define FUNC15_BAR2_TRGT1_ADDR_WIDTH 1


`define FUNC15_BAR4_TRGT1_ADDR_WIDTH 1


// Name:         CX_NUM_RBARS_15
// Default:      0 ([calc_num_rbars CX_BAR0_RESIZABLE_15 CX_BAR1_RESIZABLE_15 
//               CX_BAR2_RESIZABLE_15 CX_BAR3_RESIZABLE_15 CX_BAR4_RESIZABLE_15 
//               CX_BAR5_RESIZABLE_15])
// Values:       -2147483648, ..., 2147483647
// 
// Number of resizable BARs
`define CX_NUM_RBARS_15 0

//-/ END:   BAR CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SR-IOV CAPABILITIES CONFIGURATION


// Name:           CX_VF_DEPENDENCY_LINK_15
// Default:        0x15
// Values:         0x0, ..., 0xff
// Enabled:        CX_VF_DEPENDENCY_LINK_SUPP && (CX_NFUNC > 15) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Specifies the 8-bit VF dependency link for PF15. Valid only if CX_VF_DEPENDENCY_LINK_SUPP=1.
`define CX_VF_DEPENDENCY_LINK_15 8'h15


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER1_15
// Default:        0x2 ((CX_NFUNC>=17) ? 32 : (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : 
//                 (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF15 in an ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER1_15 16'h2


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER0_15
// Default:        0x100
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF15 
//  in a non-ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER0_15 16'h100


// Name:           VF_STRIDE_ARI_CAP_HIER1_15
// Default:        0x2 (CX_VF_STRIDE_ALWAYS_ONE) ? 1 : ((CX_NFUNC>=17) ? 32 : 
//                 (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF15 in an ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER1_15 16'h2


// Name:           VF_STRIDE_ARI_CAP_HIER0_15
// Default:        0x100 ((CX_VF_STRIDE_ALWAYS_ONE) ? 0x0001 : 0x0100)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF15 in a non-ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER0_15 16'h100


// Name:           CX_VF_DEVICE_ID_15
// Default:        0x0 (CX_DEVICE_ID_15)
// Values:         0x0, ..., 0xffff
// Enabled:        (CX_NFUNC > 15) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 16-bit virtual function Device ID for PF15. 
//  It might be different from the physical function's.
`define CX_VF_DEVICE_ID_15 16'h0


// Name:           CX_VF_SUPP_PAGE_SIZE_15
// Default:        0x553
// Values:         0x553, ..., 0xffff
// Enabled:        (CX_NFUNC > 15) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 32-bit supported page sizes for virtual functions for PF15
`define CX_VF_SUPP_PAGE_SIZE_15 32'h553


// Name:           CX_ARI_CAP_HIER_PRSVD_15
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Specifies if ARI Capable Hierarchy bit is preserved across certain power state transitions 
//  Only present in PF0. Read Only Zero in this PF15.
`define CX_ARI_CAP_HIER_PRSVD_15 1'h0

//-/===========================================
//-/ START: VF BAR CONFIGURATION


// Name:           VF_BAR0_ENABLED_15
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 15)
// Parameter Type: Feature Setting
// 
// Include the VF BAR0 registers in PF15
`define VF_BAR0_ENABLED_15 1'h1


`define VF_DEFAULT_BAR0_ENABLED_15 1'h1


// Name:           VF_MEM0_SPACE_DECODER_15
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR0_ENABLED_15 && CX_SRIOV_ENABLE && (CX_NFUNC > 15)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Space Indicator 
//  ALWAYS set to Memory for Virtual Functions
`define VF_MEM0_SPACE_DECODER_15 1'h0


// Name:           VF_PREFETCHABLE0_15
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_15==1 && VF_MEM0_SPACE_DECODER_15==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 15)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Prefetchable 
//  When set indicates VF BAR0 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE0_15 1'h0


// Name:           VF_BAR0_TYPE_15
// Default:        64-bit ((VF_MEM0_SPACE_DECODER_15==1 || VF_BAR0_ENABLED_15==0) ? 0 
//                 : 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR0_ENABLED_15==1 && VF_MEM0_SPACE_DECODER_15==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 15)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 15; (bits [2:1] for a memory BAR).
`define VF_BAR0_TYPE_15 2'h2


// Name:           VF_BAR0_MASK_WRITABLE_15
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_15==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 15)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR0_MASK_WRITABLE_15 1'h0


// Name:           VF_BAR0_MASK_15
// Default:        0xfffff (VF_MEM0_SPACE_DECODER_15==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR0_ENABLED_15==1 && VF_MEM0_SPACE_DECODER_15==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 15)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Mask 
//  Determines the default of the VF BAR Mask register for PF15. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR0_MASK_15 64'hfffff


// Name:           VF_MEM_FUNC15_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR0_ENABLED_15==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE 
//                 && (CX_NFUNC > 15)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF15 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC15_BAR0_TARGET_MAP 1'h1


// Name:           VF_BAR1_ENABLED_15
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        (VF_BAR0_TYPE_15==0)  && CX_SRIOV_ENABLE && (CX_NFUNC > 15)
// Parameter Type: Feature Setting
// 
// Include the VF BAR1 registers in PF15
`define VF_BAR1_ENABLED_15 1'h0


`define VF_DEFAULT_BAR1_ENABLED_15 1'h0


// Name:           VF_MEM1_SPACE_DECODER_15
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR1_ENABLED_15==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 15)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Space Indicator
`define VF_MEM1_SPACE_DECODER_15 1'h0


// Name:           VF_PREFETCHABLE1_15
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_15==1 && VF_MEM1_SPACE_DECODER_15==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 15)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Prefetchable 
//  When set indicates VF BAR1 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE1_15 1'h0


// Name:           VF_BAR1_TYPE_15
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 15; (bits [2:1] for a memory BAR).
`define VF_BAR1_TYPE_15 2'h0


// Name:           VF_BAR1_MASK_WRITABLE_15
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_15==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 15)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR1_MASK_WRITABLE_15 1'h0


// Name:           VF_BAR1_MASK_15
// Default:        0xffff (VF_MEM1_SPACE_DECODER_15==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR1_ENABLED_15==1 && VF_MEM1_SPACE_DECODER_15==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 15)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Mask 
//  Determines the default of the VF BAR Mask register for PF15. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR1_MASK_15 32'hffff


// Name:           VF_MEM_FUNC15_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR1_ENABLED_15==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE 
//                 && (CX_NFUNC > 15)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF15 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC15_BAR1_TARGET_MAP 1'h1


// Name:           VF_BAR2_ENABLED_15
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 15)
// Parameter Type: Feature Setting
// 
// Include the VF BAR2 registers in PF15
`define VF_BAR2_ENABLED_15 1'h1


`define VF_DEFAULT_BAR2_ENABLED_15 1'h1


// Name:           VF_MEM2_SPACE_DECODER_15
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR2_ENABLED_15==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 15)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Memory Space Indicator
`define VF_MEM2_SPACE_DECODER_15 1'h0


// Name:           VF_PREFETCHABLE2_15
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_15==1 && VF_MEM2_SPACE_DECODER_15==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 15)
// Parameter Type: Register Default Setting
// 
// BAR2 Memory Prefetchable 
//  When set indicates VF BAR2 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE2_15 1'h0


// Name:           VF_BAR2_TYPE_15
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR2_ENABLED_15==1 && VF_MEM2_SPACE_DECODER_15==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 15)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 15; (bits [2:1] for a memory BAR).
`define VF_BAR2_TYPE_15 2'h0


// Name:           VF_BAR2_MASK_WRITABLE_15
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_15==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 15)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR2_MASK_WRITABLE_15 1'h0


// Name:           VF_BAR2_MASK_15
// Default:        0xfffff (VF_MEM2_SPACE_DECODER_15==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR2_ENABLED_15==1 && VF_MEM2_SPACE_DECODER_15==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 15)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Mask 
//  Determines the default of the VF BAR Mask register for PF15. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR2_MASK_15 64'hfffff


// Name:           VF_MEM_FUNC15_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR2_ENABLED_15==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 15)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF15 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC15_BAR2_TARGET_MAP 1'h1


// Name:           VF_BAR3_ENABLED_15
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_TYPE_15==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 15)
// Parameter Type: Feature Setting
// 
// Include the VF BAR3 registers in PF15
`define VF_BAR3_ENABLED_15 1'h0


`define VF_DEFAULT_BAR3_ENABLED_15 1'h0


// Name:           VF_MEM3_SPACE_DECODER_15
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR3_ENABLED_15==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 15)
// Parameter Type: Register Default Setting
// 
// BAR3 Memory Space Indicator
`define VF_MEM3_SPACE_DECODER_15 1'h0


// Name:           VF_PREFETCHABLE3_15
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_15==1 && VF_MEM3_SPACE_DECODER_15==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 15)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Memory Prefetchable 
//  When set indicates VF BAR3 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE3_15 1'h0


// Name:           VF_BAR3_TYPE_15
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 15; (bits [2:1] for a memory BAR).
`define VF_BAR3_TYPE_15 2'h0


// Name:           VF_BAR3_MASK_WRITABLE_15
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_15==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 15)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR3_MASK_WRITABLE_15 1'h0


// Name:           VF_BAR3_MASK_15
// Default:        0xffff (VF_MEM3_SPACE_DECODER_15==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR3_ENABLED_15==1 && VF_MEM3_SPACE_DECODER_15==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 15)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Mask 
//  Determines the default of the VF BAR Mask register for PF15. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR3_MASK_15 32'hffff


// Name:           VF_MEM_FUNC15_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR3_ENABLED_15==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 15)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF15 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC15_BAR3_TARGET_MAP 1'h1


// Name:           VF_BAR4_ENABLED_15
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 15)
// Parameter Type: Feature Setting
// 
// Include the VF BAR4 registers in PF15
`define VF_BAR4_ENABLED_15 1'h1


`define VF_DEFAULT_BAR4_ENABLED_15 1'h1


// Name:           VF_MEM4_SPACE_DECODER_15
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR4_ENABLED_15==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 15)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Space Indicator
`define VF_MEM4_SPACE_DECODER_15 1'h0


// Name:           VF_PREFETCHABLE4_15
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_15==1 && VF_MEM4_SPACE_DECODER_15==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 15)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Prefetchable 
//  When set indicates VF BAR4 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE4_15 1'h0


// Name:           VF_BAR4_TYPE_15
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR4_ENABLED_15==1 && VF_MEM4_SPACE_DECODER_15==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 15)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 15; (bits [2:1] for a memory BAR).
`define VF_BAR4_TYPE_15 2'h0


// Name:           VF_BAR4_MASK_WRITABLE_15
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_15==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 15)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR4_MASK_WRITABLE_15 1'h0


// Name:           VF_BAR4_MASK_15
// Default:        0xfff (VF_MEM4_SPACE_DECODER_15==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR4_ENABLED_15==1 && VF_MEM4_SPACE_DECODER_15==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 15)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Mask 
//  Determines the default of the VF BAR Mask register for PF15. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR4_MASK_15 64'hfff


// Name:           VF_MEM_FUNC15_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR4_ENABLED_15==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 15)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF15 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC15_BAR4_TARGET_MAP 1'h1


// Name:           VF_BAR5_ENABLED_15
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_TYPE_15==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 15)
// Parameter Type: Feature Setting
// 
// Include the VF BAR5 registers in PF15
`define VF_BAR5_ENABLED_15 1'h0


`define VF_DEFAULT_BAR5_ENABLED_15 1'h0


// Name:           VF_MEM5_SPACE_DECODER_15
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR5_ENABLED_15==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 15)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Space Indicator
`define VF_MEM5_SPACE_DECODER_15 1'h0


// Name:           VF_PREFETCHABLE5_15
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_15==1 && VF_MEM5_SPACE_DECODER_15==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 15)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Prefetchable 
//  When set indicates VF BAR5 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE5_15 1'h0


// Name:           VF_BAR5_TYPE_15
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 15; (bits [2:1] for a memory BAR).
`define VF_BAR5_TYPE_15 2'h0


// Name:           VF_BAR5_MASK_WRITABLE_15
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_15==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 15)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR5_MASK_WRITABLE_15 1'h0


// Name:           VF_BAR5_MASK_15
// Default:        0xffff (VF_MEM5_SPACE_DECODER_15==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR5_ENABLED_15==1 && VF_MEM5_SPACE_DECODER_15==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 15)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Mask 
//  Determines the default of the VF BAR Mask register for PF15. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR5_MASK_15 32'hffff


// Name:           VF_MEM_FUNC15_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR5_ENABLED_15==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 15)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF15 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC15_BAR5_TARGET_MAP 1'h1


`define VF_FUNC15_BARSIZE_32 128'h101000


`define VF_FUNC15_BARSIZE 128'h201000

//-/ END:   VF BAR CONFIGURATION
//-/===========================================

//-/ END:   SR-IOV CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: TPH CAPABILITIES CONFIGURATION


// Name:           TPH_IVEC_15
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Interrupt Vector Mode. If set indicates that the function supports the Interrupt Vector 
// Mode of operation. Function 15.
`define TPH_IVEC_15 1'h0


// Name:           TPH_DS_15
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Device Specific Mode. If set indicates that the function supports the Device Specific Mode 
// of operation. Function 15.
`define TPH_DS_15 1'h0


// Name:           TPH_ST_TABLE_LOC_15
// Default:        Not Present
// Values:         Not Present (0), TPH Requester Capability Structure (1), MSI-X 
//                 Table Structure (2)
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_DS_15 || TPH_IVEC_15))
// Parameter Type: Feature Setting
// 
// TLP Processing Hints Steering Tag Table Location. Value indicates if and where the ST Table is located. Function 15.
`define TPH_ST_TABLE_LOC_15 0

//located in the TPH Requester Capability structure. Please reduce the ST Table Size for this mode of operation"

// Name:           TPH_ST_TABLE_SIZE_15
// Default:        1
// Values:         1, ..., 2048
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_ST_TABLE_LOC_15 != 0))
// Parameter Type: Feature Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define TPH_ST_TABLE_SIZE_15 1


`define TPH_ST_TABLE_DEPTH_15 0

//-/ END:   TPH CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: ATS CAPABILITIES CONFIGURATION


// Name:           ATS_INV_Q_DPTH_15
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// The number of Invalidate Requests that the Function can accept before putting backpressure on the upstream connection. A 
// value of 0 indicates the function can accept 32 Invalidate requests. Function 15.
`define ATS_INV_Q_DPTH_15 5'd0


// Name:           ATS_STU_15
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// This value indicates to the Function the minimum number of 4096-byte blocks that is indicated in a Translation 
// Completion or Invalidate Request. This is a power of 2 multiplier and the number of blocks is 2^STU. A value of 0 indicates 1 block 
// and a value of 31 indicates 2^31 blocks (or 8 TB total). Function 15.
`define ATS_STU_15 5'd0

//-/ END:   ATS CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PRS CAPABILITIES CONFIGURATION


// Name:           CX_PRS_OUTSTANDING_CAPACITY_VALUE_15
// Default:        0x1
// Values:         0x0, ..., 0xffffffff
// Enabled:        (CX_PRS_ENABLE==1) && (CX_NFUNC > 15)
// Parameter Type: Register Default Setting
// 
// Register default for PRS Outstanding Capacity in PF15. 
// For more details, see the PRS_OUTSTANDING_CAPACITY field in the PRS_REQ_CAPACITY_REG register.
`define CX_PRS_OUTSTANDING_CAPACITY_VALUE_15 32'h1

//-/ END:   PRS CAPABILITIES CONFIGURATION
//-/===========================================


//-/===========================================
//--- START: RN


// Name:           CX_RN_IMM_VALUE_15
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 15)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for PF15.
`define CX_RN_IMM_VALUE_15 1'h0


// Name:           CX_RN_IMM_D0_VALUE_15
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 15)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for PF15.
`define CX_RN_IMM_D0_VALUE_15 1'h0


// Name:           CX_RN_FRS_VALUE_15
// Default:        0x0 (CX_RN_FRS_SUPPORTED==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_FRS_SUPPORTED==1) && (CX_NFUNC > 15)
// Parameter Type: Feature Setting
// 
// Function Readiness Status messaging supported for function PF15.
`define CX_RN_FRS_VALUE_15 1'h0


// Name:           CX_RN_RTR_VALID_15
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 15)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF15.
`define CX_RN_RTR_VALID_15 1'h0


// Name:           CX_RN_RTR_DL_UP_VALUE_15
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 15)
// Parameter Type: Register Default Setting
// 
// Register default for RTR DL Up Time field in PF15.
`define CX_RN_RTR_DL_UP_VALUE_15 12'h0


// Name:           CX_RN_RTR_RESET_VALUE_15
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 15)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF15.
`define CX_RN_RTR_RESET_VALUE_15 12'h0


// Name:           CX_RN_RTR_D3D0_VALUE_15
// Default:        0x0
// Values:         0x0, ..., 0x80a
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 15)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF15.
`define CX_RN_RTR_D3D0_VALUE_15 12'h0


// Name:           CX_RN_RTR_FLR_VALUE_15
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_FLR_ENABLE==1) && (CX_NFUNC > 15)
// Parameter Type: Register Default Setting
// 
// Register default for RTR FLR Time field in PF15.
`define CX_RN_RTR_FLR_VALUE_15 12'h0


// Name:           VF_RN_IMM_VALUE_15
// Default:        0x0 (CX_RN_IMM_VALUE_15 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 15))
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for VFs in PF15.
`define VF_RN_IMM_VALUE_15 1'h0


// Name:           VF_RN_IMM_D0_VALUE_15
// Default:        0x0 (CX_RN_IMM_D0_VALUE_15 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 15))
// Parameter Type: Register Default Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for VFs in PF15.
`define VF_RN_IMM_D0_VALUE_15 1'h0


// Name:           VF_RN_RTR_VALID_15
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 15) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF15 VFs.
`define VF_RN_RTR_VALID_15 1'h0


// Name:           VF_RN_RTR_RESET_VALUE_15
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_15)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 15) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF15 VFS.
`define VF_RN_RTR_RESET_VALUE_15 12'h0


// Name:           VF_RN_RTR_D3D0_VALUE_15
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_15)
// Values:         0x0, ..., 0x80a
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 15) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF15 VFS.
`define VF_RN_RTR_D3D0_VALUE_15 12'h0


// Name:           VF_RN_RTR_FLR_VALUE_15
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_15)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 15) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF15 VFs.
`define VF_RN_RTR_FLR_VALUE_15 12'h0


// Name:           EXT_VF_RN_RTR_VALID_15
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 15) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF15 VFs.
`define EXT_VF_RN_RTR_VALID_15 1'h0


// Name:           EXT_VF_RN_RTR_RESET_VALUE_15
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_15)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 15) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF15 VFS.
`define EXT_VF_RN_RTR_RESET_VALUE_15 12'h0


// Name:           EXT_VF_RN_RTR_D3D0_VALUE_15
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_15)
// Values:         0x0, ..., 0x80a
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 15) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF15 VFS.
`define EXT_VF_RN_RTR_D3D0_VALUE_15 12'h0


// Name:           EXT_VF_RN_RTR_FLR_VALUE_15
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_15)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 15) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF15 VFs.
`define EXT_VF_RN_RTR_FLR_VALUE_15 12'h0

//-/ END:   RN
//-/===========================================

//-/ START: LN CAPABILITIES CONFIGURATION
//-/===========================================


// Name:           CX_LN_REG_MAX_VALUE_15
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 15))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_64_SUPPORTED field in the LNR_CAP_OFF register for PF15.
`define CX_LN_REG_MAX_VALUE_15 5'h0


// Name:           CX_LN_128_SUPPORTED_VALUE_15
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 15))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_128_SUPPORTED field in the LNR_CAP_OFF register for PF15.
`define CX_LN_128_SUPPORTED_VALUE_15 1'h0


// Name:           CX_LN_64_SUPPORTED_VALUE_15
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 15))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_REGISTRATION_MAX field in the LNR_CAP_OFF register for PF15.
`define CX_LN_64_SUPPORTED_VALUE_15 1'h0

//-/ END:   LN CAPABILITIES CONFIGURATION
//-/===========================================




//-/==========================================
//-/ End FUNC15 Config
//-/==========================================

//-/===========================================
//-/ Function 16 Configuration Registers
//-/ ==========================================


// Name:         FUNC_16
// Default:      0 ((CX_NFUNC > 16) ? 1 : 0)
// Values:       0, 1
// 
// This parameter indicates that Function 16 is present
// `define FUNC_16

//-/===========================================
//-/ START: PCI-E CAPABILITIES CONFIGURATION


// Name:           PCIE_CAP_INT_MSG_NUM_16
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 16
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Message Number field in the PCI Express Capabilities Register. Function 16.
`define PCIE_CAP_INT_MSG_NUM_16 5'h0


// Name:           SLOT_IMPLEMENTED_16
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_NFUNC > 16))
// Parameter Type: Register Default Setting
// 
// Indicates that the PCI Express link associated with this Port is connected to a slot. Function 16.
`define SLOT_IMPLEMENTED_16 1'h0


// Name:           DEFAULT_PHANTOM_FUNC_SUPPORTED_16
// Default:        0x0
// Values:         0x0, ..., 0x3
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_PHANTOM_FUNC_SUPPORTED_16 2'h0


// Name:           DEFAULT_EXT_TAG_FIELD_SUPPORTED_16
// Default:        0x0 (DEFAULT_EXT_TAG_FIELD_SUPPORTED_0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 16
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_EXT_TAG_FIELD_SUPPORTED_16 1'h0



// Name:           DEFAULT_ATT_BUTT_PRE_16
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 16
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Button is present
`define DEFAULT_ATT_BUTT_PRE_16 1'h0


// Name:           DEFAULT_ATT_IND_PRE_16
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 16
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Indicator is present
`define DEFAULT_ATT_IND_PRE_16 1'h0


// Name:           DEFAULT_PWR_IND_PRE_16
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 16
// Parameter Type: Register Default Setting
// 
// When set indicates that a Power Indicator is present
`define DEFAULT_PWR_IND_PRE_16 1'h0


// Name:           DEFAULT_NO_SNOOP_SUPPORTED_16
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 16
// Parameter Type: Register Default Setting
// 
// Default value for the Enable No Snoop bit in the Device Control Register. Function 16.
`define DEFAULT_NO_SNOOP_SUPPORTED_16 1'h0


// Name:           ROOT_RCB_16
// Default:        64-bit
// Values:         64-bit (0x0), 128-bit (0x1)
// Parameter Type: Register Default Setting
// 
// Default value for the Read Completion Boundary (RCB) bit in the Link Control Register.
`define ROOT_RCB_16 1'h0


//-/ END:   PCI-E CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: MSI-X CAPABILITIES CONFIGURATION


// Name:           MSIX_TABLE_SIZE_16
// Default:        0x0
// Values:         0x0, ..., 0x7ff
// Enabled:        CX_NFUNC > 16 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the MSI-X Table Size field in the MSI-X Control Register. Function 16.
`define MSIX_TABLE_SIZE_16 11'h0


// Name:           MSIX_TABLE_BIR_16
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 16 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table BAR Indicator Register (BIR) field in the MSI-X Table Offset and BIR Register. Function 16.
`define MSIX_TABLE_BIR_16 3'h0


// Name:           MSIX_TABLE_OFFSET_16
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 16 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table Offset field in the MSI-X Table Offset and BIR Register. Function 16.
`define MSIX_TABLE_OFFSET_16 29'h0


// Name:           MSIX_PBA_BIR_16
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 16 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Pending Bit Array (PBA) BIR field in the MSI-X PBA Offset and BIR Register. Function 16.
`define MSIX_PBA_BIR_16 7'h0


// Name:           MSIX_PBA_OFFSET_16
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 16 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the PBA Offset field in the MSI-X PBA Offset and BIR Register. Function 16.
`define MSIX_PBA_OFFSET_16 29'h0

//-/ END:   MSI-X CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SATA CAPABILITIES CONFIGURATION


// Name:         SATA_HBA_OFFSET_16
// Default:      0x0
// Values:       0x0, ..., 0xfffff
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA Offset. Base address of the SATA HBA registers, 
//  as an offset from the base address of the BAR indicated 
//  by the SATA BAR field.
`define SATA_HBA_OFFSET_16 20'h0


// Name:         SATA_BAR_16
// Default:      0x0
// Values:       0x0, ..., 0xf
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA BAR. The bar that maps to SATA HBA registers,
`define SATA_BAR_16 4'h0

//-/ END:   SATA CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: AER CAPABILITIES CONFIGURATION


// Name:           DEFAULT_ECRC_CHK_CAP_16
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 16 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Check Capable bit in the Advanced Capabilities and Control Register. Function 16.
`define DEFAULT_ECRC_CHK_CAP_16 1'h1


// Name:           DEFAULT_ECRC_GEN_CAP_16
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 16 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Generation Capability bit in the Advanced Capabilities and Control Register. Function 16.
`define DEFAULT_ECRC_GEN_CAP_16 1'h1


// Name:           AER_INT_MSG_NUM_16
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Parameter Type: Register Default Setting
// 
// Default value for the Advanced Error Interrupt Message Number field of the Root Error Status Register. Function 16.
`define AER_INT_MSG_NUM_16 5'h0



// Name:           CX_HDR_LOG_DEPTH_16
// Default:        0x1
// Values:         0x1, 0x2, 0x4
// Enabled:        CX_NFUNC > 16 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Feature Setting.
// 
// Header Log Depth
`define CX_HDR_LOG_DEPTH_16 3'h1


`define CX_MULTIPLE_HDR_REC_CAP_16 1'h0

//-/ END:   AER CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PM CAPABILITIES CONFIGURATION


// Name:           PME_SUPPORT_16
// Default:        0x1b
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 16
// Parameter Type: Register Default Setting
// 
// Default value for the PME_Support field in the Power Management Capabilities Register. Function 16.
`define PME_SUPPORT_16 5'h1b


// Name:           D1_SUPPORT_16
// Default:        true
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 16
// Parameter Type: Register Default Setting
// 
// Default value for the D1 Support bit in the Power Management Capabilities Register. Function 16.
`define D1_SUPPORT_16 1'h1


// Name:           D2_SUPPORT_16
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 16
// Parameter Type: Register Default Setting
// 
// Default value for the D2 Support bit in the Power Management Capabilities Register. Function 16.
`define D2_SUPPORT_16 1'h0


// Name:           DEV_SPEC_INIT_16
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 16
// Parameter Type: Register Default Setting
// 
// Default value for the Device Specific Initialization (DSI) bit in the Power Management Capabilities Register. Function 
// 16.
`define DEV_SPEC_INIT_16 1'h0


// Name:           AUX_CURRENT_16
// Default:        375mA
// Values:         0mA (0x0), 55mA (0x1), 100mA (0x2), 160mA (0x3), 220mA (0x4), 270mA 
//                 (0x5), 320mA (0x6), 375mA (0x7)
// Enabled:        CX_NFUNC > 16
// Parameter Type: Register Default Setting
// 
// Default value for the Aux Current field in the Power Management Capabilities Register. Function 16.
`define AUX_CURRENT_16 3'h7


// Name:           DEFAULT_NO_SOFT_RESET_16
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 16
// Parameter Type: Register Default Setting
// 
// Default value for the No Soft Reset bit in the Power Management Control and Status Register. When set, you should not 
// reset any controller registers when transitioning from D3hot to D0. Therefore, you should not assert the non_sticky_rst_n 
// and sticky_rst_n inputs. Function 16.
`define DEFAULT_NO_SOFT_RESET_16 1'h0

//-/ END:   PM CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PCI BASIC CONFIGURATION


// Name:           CX_DEVICE_ID_16
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 16
// Parameter Type: Register Default Setting
// 
// Default value for the Device ID field in the Device ID and Vendor ID Register. Function 16.
`define CX_DEVICE_ID_16 16'h0


// Name:           CX_VENDOR_ID_16
// Default:        0x16c3
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 16
// Parameter Type: Register Default Setting
// 
// Default value for the Vendor ID field in the Device ID and Vendor ID Register. Function 16.
`define CX_VENDOR_ID_16 16'h16c3


// Name:           CX_REVISION_ID_16
// Default:        0x1
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 16
// Parameter Type: Register Default Setting
// 
// Default value for the Revision ID field in the Revision ID Register. Function 16.
`define CX_REVISION_ID_16 8'h1


// Name:           SUBSYS_DEV_ID_16
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 16
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 16.
`define SUBSYS_DEV_ID_16 16'h0


// Name:           SUBSYS_VENDOR_ID_16
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 16
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem Vendor ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 16.
`define SUBSYS_VENDOR_ID_16 16'h0


// Name:           BASE_CLASS_CODE_16
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 16
// Parameter Type: Register Default Setting
// 
// Default value for the Base Class Code field in the Class Code Register. Function 16.
`define BASE_CLASS_CODE_16 8'h0


// Name:           SUB_CLASS_CODE_16
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 16
// Parameter Type: Register Default Setting
// 
// Default value for the Subclass Code field in the Class Code Register. Function 16.
`define SUB_CLASS_CODE_16 8'h0


// Name:           IF_CODE_16
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 16
// Parameter Type: Register Default Setting
// 
// Default value for the Programming Interface field in the Class Code Register. Function 16.
`define IF_CODE_16 8'h0


// Name:           CARDBUS_CIS_PTR_16
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 16
// Parameter Type: Register Default Setting
// 
// Default value for the CardBus CIS Pointer Register. Function 16.
`define CARDBUS_CIS_PTR_16 16'h0


// Name:           INT_PIN_MAPPING_16
// Default:        INTA
// Values:         None (0x0), INTA (0x1), INTB (0x2), INTC (0x3), INTD (0x4)
// Enabled:        CX_NFUNC > 16
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Pin Register. Function 16.
`define INT_PIN_MAPPING_16 8'h1


// Name:           IO_DECODE_32_16
// Default:        16-bit
// Values:         16-bit (0x0), 32-bit (0x1)
// Enabled:        CX_NFUNC > 16
// Parameter Type: Register Default Setting
// 
// Default value for the 32-Bit I/O Space bit in the I/O Base and I/O Limit Register. Function 16.
`define IO_DECODE_32_16 1'h0


// Name:           MEM_DECODE_64_16
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x1)
// Enabled:        CX_NFUNC > 16
// Parameter Type: Register Default Setting
// 
// Default value for the 64-Bit Memory Addressing bit in the Prefetchable Memory Base and Limit Register. Function 16.
`define MEM_DECODE_64_16 1'h0


// Name:           ROM_BAR_ENABLED_16
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 16
// Parameter Type: Register Default Setting
// 
// Include the expansion ROM BAR registers. Function 16.
`define ROM_BAR_ENABLED_16 1'h1


`define DEFAULT_ROM_BAR_ENABLED_16 1'h1


// Name:           ROM_MASK_16
// Default:        0xffff
// Values:         0x7ff, ..., 0xffffff
// Enabled:        CX_NFUNC > 16 && ROM_BAR_ENABLED_16==1
// Parameter Type: Register Default Setting
// 
// Determines the default of the Expansion ROM BAR Mask register. Function 16. 
//  - The BAR Mask register specifies which bits of the Expansion ROM BAR are non-writable by host software, which 
//  determines the size of the BAR. 
//  - The maximum value for ROM_MASK_N is 0xFFFFFF because the maximum space that can be claimed by an Expansion ROM BAR 
//  is 16 MB. 
//  - For example: 32'hFFFF =BAR size of 2^16.
`define ROM_MASK_16 32'hffff


// Name:           ROM_MASK_WRITABLE_16
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 16 && ROM_BAR_ENABLED_16==1
// Parameter Type: Feature Setting
// 
// Determines if the Expansion ROM BAR Mask register for function 16 is writable by application software. If writing to a 
// Expansion ROM BAR Mask register is enabled, your application can write to the Expansion ROM BAR Mask register through the 
// DBI by asserting dbi_cs2 in addition to dbi_cs.
`define ROM_MASK_WRITABLE_16 1'h0


// Name:           ROM_FUNC16_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 16 && ROM_BAR_ENABLED_16==1 && TRGT1_POPULATE==1))
// Parameter Type: Register Default Setting
// 
// Direct incoming requests that pass filtering and match the Expansion ROM BAR of function 16 to either RTRGT0 or RTRGT1. 
//  - For example, setting ROM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for the Expansion ROM BAR of function 
//  0 to RTRGT1. 
//  - If TRGT1_POPULATE =0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define ROM_FUNC16_TARGET_MAP 1'h1


// Name:           CX_PCI_HEADER_DEFAULTS_VISIBLE_16
// Default:        0
// Values:         0, 1
// Parameter Type: Register Default Setting
// 
// Select here if you want to configure the defaults for the other PCI Standard Header registers for function 16. 
//  An extra window will appear under this page. To access it, click the plus/minus symbol in the hierarchy view on the 
//  left panel. 
//  This is optional but not usually recommended. 
//  You can also change these register defaults using the DBI before (or after) the link comes up.
`define CX_PCI_HEADER_DEFAULTS_VISIBLE_16 0

//-/ END:   PCI BASIC CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: BAR CONFIGURATION


// Name:           BAR0_ENABLED_16
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 16
// Parameter Type: Feature Setting
// 
// Include the BAR0 registers for function 16.
`define BAR0_ENABLED_16 1'h1


`define DEFAULT_BAR0_ENABLED_16 1'h1


// Name:           MEM0_SPACE_DECODER_16
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 16 && BAR0_ENABLED_16==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 16.
`define MEM0_SPACE_DECODER_16 1'h0


// Name:           PREFETCHABLE0_16
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 16 && BAR0_ENABLED_16==1 && MEM0_SPACE_DECODER_16==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 16.
`define PREFETCHABLE0_16 1'h0


// Name:           BAR0_TYPE_16
// Default:        64-bit ((MEM0_SPACE_DECODER_16==1 || BAR0_ENABLED_16==0) ? 0 : 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 16 && BAR0_ENABLED_16==1 && MEM0_SPACE_DECODER_16==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 16.
`define BAR0_TYPE_16 2'h2


// Name:           BAR0_SIZING_SCHEME_16
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 16 && BAR0_ENABLED_16==1
// Parameter Type: Feature Setting
// 
// BAR0 Function 16 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR0_SIZING_SCHEME_16 2'h0


// Name:           CX_BAR0_RESIZABLE_16
// Default:        0x0 ((BAR0_SIZING_SCHEME_16==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR0_ENABLED_16==1) && (MEM0_SPACE_DECODER_16==0)
// Parameter Type: Feature Setting
// 
// Defines BAR0 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR0 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR0_RESIZABLE_16 1'h0


// Name:           CX_BAR0_RESOURCE_AVAIL_16
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 16 && CX_BAR0_RESIZABLE_16==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR0 of function 16. 
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
// Example: 0x00000030 indicates that BAR0 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR0_RESOURCE_AVAIL_16 64'h10


// Name:           BAR0_MASK_WRITABLE_16
// Default:        0x0 ((BAR0_ENABLED_16==1 && BAR0_SIZING_SCHEME_16 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 16 && BAR0_ENABLED_16==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR0 Mask through DBI
`define BAR0_MASK_WRITABLE_16 1'h0


// Name:           BAR0_MASK_16
// Default:        0xfffff (CX_BAR0_RESIZABLE_16==1 ? [calc_bar_mask 
//                 CX_BAR0_RESOURCE_AVAIL_16] : MEM0_SPACE_DECODER_16==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 16 && BAR0_ENABLED_16==1 && MEM0_SPACE_DECODER_16==0 && 
//                 CX_BAR0_RESIZABLE_16==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR0 Mask register of function 16. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR0_MASK_16 64'hfffff


// Name:           MEM_FUNC16_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 16 && BAR0_ENABLED_16==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_0 of function 16 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming Requests for BAR0 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC16_BAR0_TARGET_MAP 1'h1


// Name:           BAR1_ENABLED_16
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 16 && BAR0_TYPE_16==0
// Parameter Type: Feature Setting
// 
// Include the BAR1 registers for function 16.
`define BAR1_ENABLED_16 1'h0


`define DEFAULT_BAR1_ENABLED_16 1'h0


// Name:           MEM1_SPACE_DECODER_16
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 16 && BAR1_ENABLED_16==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 16.
`define MEM1_SPACE_DECODER_16 1'h0


// Name:           PREFETCHABLE1_16
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 16 && BAR1_ENABLED_16==1 && MEM1_SPACE_DECODER_16==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 16.
`define PREFETCHABLE1_16 1'h0


// Name:           BAR1_TYPE_16
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 16.
`define BAR1_TYPE_16 2'h0


// Name:           BAR1_SIZING_SCHEME_16
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 16 && BAR1_ENABLED_16==1
// Parameter Type: Feature Setting
// 
// BAR1 Function 16 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR1_SIZING_SCHEME_16 2'h0


// Name:           CX_BAR1_RESIZABLE_16
// Default:        0x0 ((BAR1_SIZING_SCHEME_16==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR1_ENABLED_16==1) && (MEM1_SPACE_DECODER_16==0)
// Parameter Type: Feature Setting
// 
// Defines BAR1 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR1 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR1_RESIZABLE_16 1'h0


// Name:           CX_BAR1_RESOURCE_AVAIL_16
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 16 && CX_BAR1_RESIZABLE_16==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR1 of function 16. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR1 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR1_RESOURCE_AVAIL_16 32'h10


// Name:           BAR1_MASK_WRITABLE_16
// Default:        0x0 ((BAR1_ENABLED_16==1 && BAR1_SIZING_SCHEME_16 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 16 && BAR1_ENABLED_16==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR1 Mask through DBI
`define BAR1_MASK_WRITABLE_16 1'h0


// Name:           BAR1_MASK_16
// Default:        0xffff (CX_BAR1_RESIZABLE_16==1 ? [calc_bar_mask 
//                 CX_BAR1_RESOURCE_AVAIL_16] : MEM1_SPACE_DECODER_16==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 16 && BAR1_ENABLED_16==1 && MEM1_SPACE_DECODER_16==0 && 
//                 CX_BAR1_RESIZABLE_16==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR1 Mask register of function 16. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR1_MASK_16 32'hffff


// Name:           MEM_FUNC16_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 16 && BAR1_ENABLED_16==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_1 of function 16 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR1_TARGET_MAP to 1 maps all incoming Requests for BAR1 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC16_BAR1_TARGET_MAP 1'h1


// Name:           BAR2_ENABLED_16
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 16
// Parameter Type: Feature Setting
// 
// Include the BAR2 registers for function 16.
`define BAR2_ENABLED_16 1'h1


`define DEFAULT_BAR2_ENABLED_16 1'h1


// Name:           MEM2_SPACE_DECODER_16
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 16 && BAR2_ENABLED_16==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 16.
`define MEM2_SPACE_DECODER_16 1'h0


// Name:           PREFETCHABLE2_16
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 16 && BAR2_ENABLED_16==1 && MEM2_SPACE_DECODER_16==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 16.
`define PREFETCHABLE2_16 1'h0


// Name:           BAR2_TYPE_16
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 16 && BAR2_ENABLED_16==1 && MEM2_SPACE_DECODER_16==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 16.
`define BAR2_TYPE_16 2'h0


// Name:           BAR2_SIZING_SCHEME_16
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 16 && BAR2_ENABLED_16==1
// Parameter Type: Feature Setting
// 
// BAR2 Function 16 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR2_SIZING_SCHEME_16 2'h0


// Name:           CX_BAR2_RESIZABLE_16
// Default:        0x0 ((BAR2_SIZING_SCHEME_16==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR2_ENABLED_16==1) && (MEM2_SPACE_DECODER_16==0)
// Parameter Type: Feature Setting
// 
// Defines BAR2 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR2 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR2_RESIZABLE_16 1'h0


// Name:           CX_BAR2_RESOURCE_AVAIL_16
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 16 && CX_BAR2_RESIZABLE_16==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR2 of function 16. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR2 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR2_RESOURCE_AVAIL_16 64'h10


// Name:           BAR2_MASK_WRITABLE_16
// Default:        0x0 ((BAR2_ENABLED_16==1 && BAR2_SIZING_SCHEME_16 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 16 && BAR2_ENABLED_16==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR2 Mask through DBI
`define BAR2_MASK_WRITABLE_16 1'h0


// Name:           BAR2_MASK_16
// Default:        0xfffff (CX_BAR2_RESIZABLE_16==1 ? [calc_bar_mask 
//                 CX_BAR2_RESOURCE_AVAIL_16] : MEM2_SPACE_DECODER_16==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 16 && BAR2_ENABLED_16==1 && MEM2_SPACE_DECODER_16==0 && 
//                 CX_BAR2_RESIZABLE_16==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR2 Mask register of function 16. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR2_MASK_16 64'hfffff


// Name:           MEM_FUNC16_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 16 && BAR2_ENABLED_16==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_2 of function 16 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR2_TARGET_MAP to 1 maps all incoming requests for BAR2 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC16_BAR2_TARGET_MAP 1'h1


// Name:           BAR3_ENABLED_16
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 16 && BAR2_TYPE_16==0
// Parameter Type: Feature Setting
// 
// Include the BAR3 registers for function 16.
`define BAR3_ENABLED_16 1'h0



`define DEFAULT_BAR3_ENABLED_16 1'h0


// Name:           MEM3_SPACE_DECODER_16
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 16 && BAR3_ENABLED_16==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 16.
`define MEM3_SPACE_DECODER_16 1'h0


// Name:           PREFETCHABLE3_16
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 16 && BAR3_ENABLED_16==1 && MEM3_SPACE_DECODER_16==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 16.
`define PREFETCHABLE3_16 1'h0


// Name:           BAR3_TYPE_16
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 16.
`define BAR3_TYPE_16 2'h0


// Name:           BAR3_SIZING_SCHEME_16
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 16 && BAR3_ENABLED_16==1
// Parameter Type: Feature Setting
// 
// BAR3 Function 16 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR3_SIZING_SCHEME_16 2'h0


// Name:           CX_BAR3_RESIZABLE_16
// Default:        0x0 ((BAR3_SIZING_SCHEME_16==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR3_ENABLED_16==1) && (MEM3_SPACE_DECODER_16==0)
// Parameter Type: Feature Setting
// 
// Defines BAR3 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR3 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR3_RESIZABLE_16 1'h0


// Name:           CX_BAR3_RESOURCE_AVAIL_16
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 16 && CX_BAR3_RESIZABLE_16==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR3 of function 16. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR3 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR3_RESOURCE_AVAIL_16 32'h10


// Name:           BAR3_MASK_WRITABLE_16
// Default:        0x0 ((BAR3_ENABLED_16==1 && BAR3_SIZING_SCHEME_16 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 16 && BAR3_ENABLED_16==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR3 Mask through DBI
`define BAR3_MASK_WRITABLE_16 1'h0


// Name:           BAR3_MASK_16
// Default:        0xffff (CX_BAR3_RESIZABLE_16==1 ? [calc_bar_mask 
//                 CX_BAR3_RESOURCE_AVAIL_16] : MEM3_SPACE_DECODER_16==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 16 && BAR3_ENABLED_16==1 && MEM3_SPACE_DECODER_16==0 && 
//                 CX_BAR3_RESIZABLE_16==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR3 Mask register of function 16. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR3_MASK_16 32'hffff


// Name:           MEM_FUNC16_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 16 && BAR3_ENABLED_16==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_3 of function 16 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR3_TARGET_MAP to 1 maps all incoming requests for BAR3 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC16_BAR3_TARGET_MAP 1'h1


// Name:           BAR4_ENABLED_16
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 16
// Parameter Type: Feature Setting
// 
// Include the BAR4 registers for function 16.
`define BAR4_ENABLED_16 1'h1


`define DEFAULT_BAR4_ENABLED_16 1'h1



// Name:           MEM4_SPACE_DECODER_16
// Default:        I/O (BAR4_ENABLED_16==1)
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 16 && BAR4_ENABLED_16==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 16.
`define MEM4_SPACE_DECODER_16 1'h1


// Name:           PREFETCHABLE4_16
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 16 && BAR4_ENABLED_16==1 && MEM4_SPACE_DECODER_16==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 16.
`define PREFETCHABLE4_16 1'h0


// Name:           BAR4_TYPE_16
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 16 && BAR4_ENABLED_16==1 && MEM4_SPACE_DECODER_16==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 16.
`define BAR4_TYPE_16 2'h0


// Name:           BAR4_SIZING_SCHEME_16
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 16 && BAR4_ENABLED_16==1
// Parameter Type: Feature Setting
// 
// BAR4  Function 16 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR4_SIZING_SCHEME_16 2'h0


// Name:           CX_BAR4_RESIZABLE_16
// Default:        0x0 ((BAR4_SIZING_SCHEME_16==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR4_ENABLED_16==1) && (MEM4_SPACE_DECODER_16==0)
// Parameter Type: Feature Setting
// 
// Defines BAR4 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR4 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR4_RESIZABLE_16 1'h0


// Name:           CX_BAR4_RESOURCE_AVAIL_16
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 16 &&  CX_BAR4_RESIZABLE_16==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR4 of function 16. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR4 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR4_RESOURCE_AVAIL_16 64'h10


// Name:           BAR4_MASK_WRITABLE_16
// Default:        0x0 ((BAR4_ENABLED_16==1 && BAR4_SIZING_SCHEME_16 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 16 && BAR4_ENABLED_16==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR4 Mask through DBI
`define BAR4_MASK_WRITABLE_16 1'h0


// Name:           BAR4_MASK_16
// Default:        0xff (CX_BAR4_RESIZABLE_16==1 ? [calc_bar_mask 
//                 CX_BAR4_RESOURCE_AVAIL_16] : MEM4_SPACE_DECODER_16==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 16 && BAR4_ENABLED_16==1 && MEM4_SPACE_DECODER_16==0 && 
//                 CX_BAR4_RESIZABLE_16==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR4 Mask register of function 16. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR4_MASK_16 64'hff


// Name:           MEM_FUNC16_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 16 && BAR4_ENABLED_16==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_4 of function 16 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR4_TARGET_MAP to 1 maps all incoming requests for BAR4 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC16_BAR4_TARGET_MAP 1'h1


// Name:           BAR5_ENABLED_16
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 16 && BAR4_TYPE_16==0
// Parameter Type: Feature Setting
// 
// Include the BAR5 registers for function 16.
`define BAR5_ENABLED_16 1'h0


`define DEFAULT_BAR5_ENABLED_16 1'h0


// Name:           MEM5_SPACE_DECODER_16
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 16 && BAR5_ENABLED_16==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 16.
`define MEM5_SPACE_DECODER_16 1'h0


// Name:           PREFETCHABLE5_16
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 16 && BAR5_ENABLED_16==1 && MEM5_SPACE_DECODER_16==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 16.
`define PREFETCHABLE5_16 1'h0


// Name:           BAR5_TYPE_16
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 16.
`define BAR5_TYPE_16 2'h0


// Name:           BAR5_SIZING_SCHEME_16
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 16 && BAR5_ENABLED_16==1
// Parameter Type: Feature Setting
// 
// BAR5  Function 16 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR5_SIZING_SCHEME_16 2'h0


// Name:           CX_BAR5_RESIZABLE_16
// Default:        0x0 ((BAR5_SIZING_SCHEME_16==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR5_ENABLED_16==1) && (MEM5_SPACE_DECODER_16==0)
// Parameter Type: Feature Setting
// 
// Defines BAR5 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR5 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR5_RESIZABLE_16 1'h0


// Name:           CX_BAR5_RESOURCE_AVAIL_16
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 16 && CX_BAR5_RESIZABLE_16==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR5 of function 16. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR5 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR5_RESOURCE_AVAIL_16 32'h10


// Name:           BAR5_MASK_WRITABLE_16
// Default:        0x0 ((BAR5_ENABLED_16==1 && BAR5_SIZING_SCHEME_16 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 16 && BAR5_ENABLED_16==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR5 Mask through DBI
`define BAR5_MASK_WRITABLE_16 1'h0


// Name:           BAR5_MASK_16
// Default:        0xffff (CX_BAR5_RESIZABLE_16==1 ? [calc_bar_mask 
//                 CX_BAR5_RESOURCE_AVAIL_16] : MEM5_SPACE_DECODER_16==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 16 && BAR5_ENABLED_16==1 && MEM5_SPACE_DECODER_16==0 && 
//                 CX_BAR5_RESIZABLE_16==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR5 Mask register of function 16. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR5_MASK_16 32'hffff


// Name:           MEM_FUNC16_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 16 && BAR5_ENABLED_16==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_5 of function 16 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR5_TARGET_MAP to 1 maps all incoming requests for BAR5 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC16_BAR5_TARGET_MAP 1'h1


`define FUNC16_BARSIZE_32 128'h0


`define FUNC16_BARSIZE 128'h0


`define FUNC16_BAR0_BARSIZE_TRGT1 128'h0


`define FUNC16_BAR2_BARSIZE_TRGT1 128'h0


`define FUNC16_BAR4_BARSIZE_TRGT1 128'h0


`define FUNC16_BAR0_TRGT1_ADDR_WIDTH 1


`define FUNC16_BAR2_TRGT1_ADDR_WIDTH 1


`define FUNC16_BAR4_TRGT1_ADDR_WIDTH 1


// Name:         CX_NUM_RBARS_16
// Default:      0 ([calc_num_rbars CX_BAR0_RESIZABLE_16 CX_BAR1_RESIZABLE_16 
//               CX_BAR2_RESIZABLE_16 CX_BAR3_RESIZABLE_16 CX_BAR4_RESIZABLE_16 
//               CX_BAR5_RESIZABLE_16])
// Values:       -2147483648, ..., 2147483647
// 
// Number of resizable BARs
`define CX_NUM_RBARS_16 0

//-/ END:   BAR CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SR-IOV CAPABILITIES CONFIGURATION


// Name:           CX_VF_DEPENDENCY_LINK_16
// Default:        0x16
// Values:         0x0, ..., 0xff
// Enabled:        CX_VF_DEPENDENCY_LINK_SUPP && (CX_NFUNC > 16) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Specifies the 8-bit VF dependency link for PF16. Valid only if CX_VF_DEPENDENCY_LINK_SUPP=1.
`define CX_VF_DEPENDENCY_LINK_16 8'h16


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER1_16
// Default:        0x2 ((CX_NFUNC>=17) ? 32 : (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : 
//                 (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF16 in an ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER1_16 16'h2


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER0_16
// Default:        0x100
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF16 
//  in a non-ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER0_16 16'h100


// Name:           VF_STRIDE_ARI_CAP_HIER1_16
// Default:        0x2 (CX_VF_STRIDE_ALWAYS_ONE) ? 1 : ((CX_NFUNC>=17) ? 32 : 
//                 (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF16 in an ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER1_16 16'h2


// Name:           VF_STRIDE_ARI_CAP_HIER0_16
// Default:        0x100 ((CX_VF_STRIDE_ALWAYS_ONE) ? 0x0001 : 0x0100)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF16 in a non-ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER0_16 16'h100


// Name:           CX_VF_DEVICE_ID_16
// Default:        0x0 (CX_DEVICE_ID_16)
// Values:         0x0, ..., 0xffff
// Enabled:        (CX_NFUNC > 16) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 16-bit virtual function Device ID for PF16. 
//  It might be different from the physical function's.
`define CX_VF_DEVICE_ID_16 16'h0


// Name:           CX_VF_SUPP_PAGE_SIZE_16
// Default:        0x553
// Values:         0x553, ..., 0xffff
// Enabled:        (CX_NFUNC > 16) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 32-bit supported page sizes for virtual functions for PF16
`define CX_VF_SUPP_PAGE_SIZE_16 32'h553


// Name:           CX_ARI_CAP_HIER_PRSVD_16
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Specifies if ARI Capable Hierarchy bit is preserved across certain power state transitions 
//  Only present in PF0. Read Only Zero in this PF16.
`define CX_ARI_CAP_HIER_PRSVD_16 1'h0

//-/===========================================
//-/ START: VF BAR CONFIGURATION


// Name:           VF_BAR0_ENABLED_16
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 16)
// Parameter Type: Feature Setting
// 
// Include the VF BAR0 registers in PF16
`define VF_BAR0_ENABLED_16 1'h1


`define VF_DEFAULT_BAR0_ENABLED_16 1'h1


// Name:           VF_MEM0_SPACE_DECODER_16
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR0_ENABLED_16 && CX_SRIOV_ENABLE && (CX_NFUNC > 16)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Space Indicator 
//  ALWAYS set to Memory for Virtual Functions
`define VF_MEM0_SPACE_DECODER_16 1'h0


// Name:           VF_PREFETCHABLE0_16
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_16==1 && VF_MEM0_SPACE_DECODER_16==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 16)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Prefetchable 
//  When set indicates VF BAR0 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE0_16 1'h0


// Name:           VF_BAR0_TYPE_16
// Default:        64-bit ((VF_MEM0_SPACE_DECODER_16==1 || VF_BAR0_ENABLED_16==0) ? 0 
//                 : 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR0_ENABLED_16==1 && VF_MEM0_SPACE_DECODER_16==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 16)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 16; (bits [2:1] for a memory BAR).
`define VF_BAR0_TYPE_16 2'h2


// Name:           VF_BAR0_MASK_WRITABLE_16
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_16==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 16)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR0_MASK_WRITABLE_16 1'h0


// Name:           VF_BAR0_MASK_16
// Default:        0xfffff (VF_MEM0_SPACE_DECODER_16==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR0_ENABLED_16==1 && VF_MEM0_SPACE_DECODER_16==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 16)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Mask 
//  Determines the default of the VF BAR Mask register for PF16. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR0_MASK_16 64'hfffff


// Name:           VF_MEM_FUNC16_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR0_ENABLED_16==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE 
//                 && (CX_NFUNC > 16)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF16 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC16_BAR0_TARGET_MAP 1'h1


// Name:           VF_BAR1_ENABLED_16
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        (VF_BAR0_TYPE_16==0)  && CX_SRIOV_ENABLE && (CX_NFUNC > 16)
// Parameter Type: Feature Setting
// 
// Include the VF BAR1 registers in PF16
`define VF_BAR1_ENABLED_16 1'h0


`define VF_DEFAULT_BAR1_ENABLED_16 1'h0


// Name:           VF_MEM1_SPACE_DECODER_16
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR1_ENABLED_16==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 16)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Space Indicator
`define VF_MEM1_SPACE_DECODER_16 1'h0


// Name:           VF_PREFETCHABLE1_16
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_16==1 && VF_MEM1_SPACE_DECODER_16==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 16)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Prefetchable 
//  When set indicates VF BAR1 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE1_16 1'h0


// Name:           VF_BAR1_TYPE_16
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 16; (bits [2:1] for a memory BAR).
`define VF_BAR1_TYPE_16 2'h0


// Name:           VF_BAR1_MASK_WRITABLE_16
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_16==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 16)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR1_MASK_WRITABLE_16 1'h0


// Name:           VF_BAR1_MASK_16
// Default:        0xffff (VF_MEM1_SPACE_DECODER_16==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR1_ENABLED_16==1 && VF_MEM1_SPACE_DECODER_16==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 16)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Mask 
//  Determines the default of the VF BAR Mask register for PF16. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR1_MASK_16 32'hffff


// Name:           VF_MEM_FUNC16_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR1_ENABLED_16==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE 
//                 && (CX_NFUNC > 16)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF16 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC16_BAR1_TARGET_MAP 1'h1


// Name:           VF_BAR2_ENABLED_16
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 16)
// Parameter Type: Feature Setting
// 
// Include the VF BAR2 registers in PF16
`define VF_BAR2_ENABLED_16 1'h1


`define VF_DEFAULT_BAR2_ENABLED_16 1'h1


// Name:           VF_MEM2_SPACE_DECODER_16
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR2_ENABLED_16==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 16)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Memory Space Indicator
`define VF_MEM2_SPACE_DECODER_16 1'h0


// Name:           VF_PREFETCHABLE2_16
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_16==1 && VF_MEM2_SPACE_DECODER_16==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 16)
// Parameter Type: Register Default Setting
// 
// BAR2 Memory Prefetchable 
//  When set indicates VF BAR2 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE2_16 1'h0


// Name:           VF_BAR2_TYPE_16
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR2_ENABLED_16==1 && VF_MEM2_SPACE_DECODER_16==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 16)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 16; (bits [2:1] for a memory BAR).
`define VF_BAR2_TYPE_16 2'h0


// Name:           VF_BAR2_MASK_WRITABLE_16
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_16==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 16)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR2_MASK_WRITABLE_16 1'h0


// Name:           VF_BAR2_MASK_16
// Default:        0xfffff (VF_MEM2_SPACE_DECODER_16==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR2_ENABLED_16==1 && VF_MEM2_SPACE_DECODER_16==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 16)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Mask 
//  Determines the default of the VF BAR Mask register for PF16. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR2_MASK_16 64'hfffff


// Name:           VF_MEM_FUNC16_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR2_ENABLED_16==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 16)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF16 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC16_BAR2_TARGET_MAP 1'h1


// Name:           VF_BAR3_ENABLED_16
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_TYPE_16==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 16)
// Parameter Type: Feature Setting
// 
// Include the VF BAR3 registers in PF16
`define VF_BAR3_ENABLED_16 1'h0


`define VF_DEFAULT_BAR3_ENABLED_16 1'h0


// Name:           VF_MEM3_SPACE_DECODER_16
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR3_ENABLED_16==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 16)
// Parameter Type: Register Default Setting
// 
// BAR3 Memory Space Indicator
`define VF_MEM3_SPACE_DECODER_16 1'h0


// Name:           VF_PREFETCHABLE3_16
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_16==1 && VF_MEM3_SPACE_DECODER_16==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 16)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Memory Prefetchable 
//  When set indicates VF BAR3 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE3_16 1'h0


// Name:           VF_BAR3_TYPE_16
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 16; (bits [2:1] for a memory BAR).
`define VF_BAR3_TYPE_16 2'h0


// Name:           VF_BAR3_MASK_WRITABLE_16
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_16==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 16)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR3_MASK_WRITABLE_16 1'h0


// Name:           VF_BAR3_MASK_16
// Default:        0xffff (VF_MEM3_SPACE_DECODER_16==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR3_ENABLED_16==1 && VF_MEM3_SPACE_DECODER_16==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 16)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Mask 
//  Determines the default of the VF BAR Mask register for PF16. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR3_MASK_16 32'hffff


// Name:           VF_MEM_FUNC16_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR3_ENABLED_16==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 16)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF16 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC16_BAR3_TARGET_MAP 1'h1


// Name:           VF_BAR4_ENABLED_16
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 16)
// Parameter Type: Feature Setting
// 
// Include the VF BAR4 registers in PF16
`define VF_BAR4_ENABLED_16 1'h1


`define VF_DEFAULT_BAR4_ENABLED_16 1'h1


// Name:           VF_MEM4_SPACE_DECODER_16
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR4_ENABLED_16==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 16)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Space Indicator
`define VF_MEM4_SPACE_DECODER_16 1'h0


// Name:           VF_PREFETCHABLE4_16
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_16==1 && VF_MEM4_SPACE_DECODER_16==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 16)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Prefetchable 
//  When set indicates VF BAR4 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE4_16 1'h0


// Name:           VF_BAR4_TYPE_16
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR4_ENABLED_16==1 && VF_MEM4_SPACE_DECODER_16==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 16)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 16; (bits [2:1] for a memory BAR).
`define VF_BAR4_TYPE_16 2'h0


// Name:           VF_BAR4_MASK_WRITABLE_16
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_16==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 16)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR4_MASK_WRITABLE_16 1'h0


// Name:           VF_BAR4_MASK_16
// Default:        0xfff (VF_MEM4_SPACE_DECODER_16==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR4_ENABLED_16==1 && VF_MEM4_SPACE_DECODER_16==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 16)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Mask 
//  Determines the default of the VF BAR Mask register for PF16. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR4_MASK_16 64'hfff


// Name:           VF_MEM_FUNC16_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR4_ENABLED_16==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 16)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF16 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC16_BAR4_TARGET_MAP 1'h1


// Name:           VF_BAR5_ENABLED_16
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_TYPE_16==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 16)
// Parameter Type: Feature Setting
// 
// Include the VF BAR5 registers in PF16
`define VF_BAR5_ENABLED_16 1'h0


`define VF_DEFAULT_BAR5_ENABLED_16 1'h0


// Name:           VF_MEM5_SPACE_DECODER_16
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR5_ENABLED_16==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 16)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Space Indicator
`define VF_MEM5_SPACE_DECODER_16 1'h0


// Name:           VF_PREFETCHABLE5_16
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_16==1 && VF_MEM5_SPACE_DECODER_16==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 16)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Prefetchable 
//  When set indicates VF BAR5 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE5_16 1'h0


// Name:           VF_BAR5_TYPE_16
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 16; (bits [2:1] for a memory BAR).
`define VF_BAR5_TYPE_16 2'h0


// Name:           VF_BAR5_MASK_WRITABLE_16
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_16==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 16)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR5_MASK_WRITABLE_16 1'h0


// Name:           VF_BAR5_MASK_16
// Default:        0xffff (VF_MEM5_SPACE_DECODER_16==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR5_ENABLED_16==1 && VF_MEM5_SPACE_DECODER_16==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 16)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Mask 
//  Determines the default of the VF BAR Mask register for PF16. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR5_MASK_16 32'hffff


// Name:           VF_MEM_FUNC16_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR5_ENABLED_16==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 16)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF16 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC16_BAR5_TARGET_MAP 1'h1


`define VF_FUNC16_BARSIZE_32 128'h101000


`define VF_FUNC16_BARSIZE 128'h201000

//-/ END:   VF BAR CONFIGURATION
//-/===========================================

//-/ END:   SR-IOV CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: TPH CAPABILITIES CONFIGURATION


// Name:           TPH_IVEC_16
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Interrupt Vector Mode. If set indicates that the function supports the Interrupt Vector 
// Mode of operation. Function 16.
`define TPH_IVEC_16 1'h0


// Name:           TPH_DS_16
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Device Specific Mode. If set indicates that the function supports the Device Specific Mode 
// of operation. Function 16.
`define TPH_DS_16 1'h0


// Name:           TPH_ST_TABLE_LOC_16
// Default:        Not Present
// Values:         Not Present (0), TPH Requester Capability Structure (1), MSI-X 
//                 Table Structure (2)
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_DS_16 || TPH_IVEC_16))
// Parameter Type: Feature Setting
// 
// TLP Processing Hints Steering Tag Table Location. Value indicates if and where the ST Table is located. Function 16.
`define TPH_ST_TABLE_LOC_16 0

//located in the TPH Requester Capability structure. Please reduce the ST Table Size for this mode of operation"

// Name:           TPH_ST_TABLE_SIZE_16
// Default:        1
// Values:         1, ..., 2048
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_ST_TABLE_LOC_16 != 0))
// Parameter Type: Feature Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define TPH_ST_TABLE_SIZE_16 1


`define TPH_ST_TABLE_DEPTH_16 0

//-/ END:   TPH CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: ATS CAPABILITIES CONFIGURATION


// Name:           ATS_INV_Q_DPTH_16
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// The number of Invalidate Requests that the Function can accept before putting backpressure on the upstream connection. A 
// value of 0 indicates the function can accept 32 Invalidate requests. Function 16.
`define ATS_INV_Q_DPTH_16 5'd0


// Name:           ATS_STU_16
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// This value indicates to the Function the minimum number of 4096-byte blocks that is indicated in a Translation 
// Completion or Invalidate Request. This is a power of 2 multiplier and the number of blocks is 2^STU. A value of 0 indicates 1 block 
// and a value of 31 indicates 2^31 blocks (or 8 TB total). Function 16.
`define ATS_STU_16 5'd0

//-/ END:   ATS CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PRS CAPABILITIES CONFIGURATION


// Name:           CX_PRS_OUTSTANDING_CAPACITY_VALUE_16
// Default:        0x1
// Values:         0x0, ..., 0xffffffff
// Enabled:        (CX_PRS_ENABLE==1) && (CX_NFUNC > 16)
// Parameter Type: Register Default Setting
// 
// Register default for PRS Outstanding Capacity in PF16. 
// For more details, see the PRS_OUTSTANDING_CAPACITY field in the PRS_REQ_CAPACITY_REG register.
`define CX_PRS_OUTSTANDING_CAPACITY_VALUE_16 32'h1

//-/ END:   PRS CAPABILITIES CONFIGURATION
//-/===========================================


//-/===========================================
//--- START: RN


// Name:           CX_RN_IMM_VALUE_16
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 16)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for PF16.
`define CX_RN_IMM_VALUE_16 1'h0


// Name:           CX_RN_IMM_D0_VALUE_16
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 16)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for PF16.
`define CX_RN_IMM_D0_VALUE_16 1'h0


// Name:           CX_RN_FRS_VALUE_16
// Default:        0x0 (CX_RN_FRS_SUPPORTED==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_FRS_SUPPORTED==1) && (CX_NFUNC > 16)
// Parameter Type: Feature Setting
// 
// Function Readiness Status messaging supported for function PF16.
`define CX_RN_FRS_VALUE_16 1'h0


// Name:           CX_RN_RTR_VALID_16
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 16)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF16.
`define CX_RN_RTR_VALID_16 1'h0


// Name:           CX_RN_RTR_DL_UP_VALUE_16
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 16)
// Parameter Type: Register Default Setting
// 
// Register default for RTR DL Up Time field in PF16.
`define CX_RN_RTR_DL_UP_VALUE_16 12'h0


// Name:           CX_RN_RTR_RESET_VALUE_16
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 16)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF16.
`define CX_RN_RTR_RESET_VALUE_16 12'h0


// Name:           CX_RN_RTR_D3D0_VALUE_16
// Default:        0x0
// Values:         0x0, ..., 0x80a
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 16)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF16.
`define CX_RN_RTR_D3D0_VALUE_16 12'h0


// Name:           CX_RN_RTR_FLR_VALUE_16
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_FLR_ENABLE==1) && (CX_NFUNC > 16)
// Parameter Type: Register Default Setting
// 
// Register default for RTR FLR Time field in PF16.
`define CX_RN_RTR_FLR_VALUE_16 12'h0


// Name:           VF_RN_IMM_VALUE_16
// Default:        0x0 (CX_RN_IMM_VALUE_16 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 16))
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for VFs in PF16.
`define VF_RN_IMM_VALUE_16 1'h0


// Name:           VF_RN_IMM_D0_VALUE_16
// Default:        0x0 (CX_RN_IMM_D0_VALUE_16 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 16))
// Parameter Type: Register Default Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for VFs in PF16.
`define VF_RN_IMM_D0_VALUE_16 1'h0


// Name:           VF_RN_RTR_VALID_16
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 16) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF16 VFs.
`define VF_RN_RTR_VALID_16 1'h0


// Name:           VF_RN_RTR_RESET_VALUE_16
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_16)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 16) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF16 VFS.
`define VF_RN_RTR_RESET_VALUE_16 12'h0


// Name:           VF_RN_RTR_D3D0_VALUE_16
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_16)
// Values:         0x0, ..., 0x80a
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 16) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF16 VFS.
`define VF_RN_RTR_D3D0_VALUE_16 12'h0


// Name:           VF_RN_RTR_FLR_VALUE_16
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_16)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 16) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF16 VFs.
`define VF_RN_RTR_FLR_VALUE_16 12'h0


// Name:           EXT_VF_RN_RTR_VALID_16
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 16) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF16 VFs.
`define EXT_VF_RN_RTR_VALID_16 1'h0


// Name:           EXT_VF_RN_RTR_RESET_VALUE_16
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_16)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 16) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF16 VFS.
`define EXT_VF_RN_RTR_RESET_VALUE_16 12'h0


// Name:           EXT_VF_RN_RTR_D3D0_VALUE_16
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_16)
// Values:         0x0, ..., 0x80a
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 16) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF16 VFS.
`define EXT_VF_RN_RTR_D3D0_VALUE_16 12'h0


// Name:           EXT_VF_RN_RTR_FLR_VALUE_16
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_16)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 16) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF16 VFs.
`define EXT_VF_RN_RTR_FLR_VALUE_16 12'h0

//-/ END:   RN
//-/===========================================

//-/ START: LN CAPABILITIES CONFIGURATION
//-/===========================================


// Name:           CX_LN_REG_MAX_VALUE_16
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 16))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_64_SUPPORTED field in the LNR_CAP_OFF register for PF16.
`define CX_LN_REG_MAX_VALUE_16 5'h0


// Name:           CX_LN_128_SUPPORTED_VALUE_16
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 16))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_128_SUPPORTED field in the LNR_CAP_OFF register for PF16.
`define CX_LN_128_SUPPORTED_VALUE_16 1'h0


// Name:           CX_LN_64_SUPPORTED_VALUE_16
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 16))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_REGISTRATION_MAX field in the LNR_CAP_OFF register for PF16.
`define CX_LN_64_SUPPORTED_VALUE_16 1'h0

//-/ END:   LN CAPABILITIES CONFIGURATION
//-/===========================================




//-/==========================================
//-/ End FUNC16 Config
//-/==========================================

//-/===========================================
//-/ Function 17 Configuration Registers
//-/ ==========================================


// Name:         FUNC_17
// Default:      0 ((CX_NFUNC > 17) ? 1 : 0)
// Values:       0, 1
// 
// This parameter indicates that Function 17 is present
// `define FUNC_17

//-/===========================================
//-/ START: PCI-E CAPABILITIES CONFIGURATION


// Name:           PCIE_CAP_INT_MSG_NUM_17
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 17
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Message Number field in the PCI Express Capabilities Register. Function 17.
`define PCIE_CAP_INT_MSG_NUM_17 5'h0


// Name:           SLOT_IMPLEMENTED_17
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_NFUNC > 17))
// Parameter Type: Register Default Setting
// 
// Indicates that the PCI Express link associated with this Port is connected to a slot. Function 17.
`define SLOT_IMPLEMENTED_17 1'h0


// Name:           DEFAULT_PHANTOM_FUNC_SUPPORTED_17
// Default:        0x0
// Values:         0x0, ..., 0x3
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_PHANTOM_FUNC_SUPPORTED_17 2'h0


// Name:           DEFAULT_EXT_TAG_FIELD_SUPPORTED_17
// Default:        0x0 (DEFAULT_EXT_TAG_FIELD_SUPPORTED_0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 17
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_EXT_TAG_FIELD_SUPPORTED_17 1'h0



// Name:           DEFAULT_ATT_BUTT_PRE_17
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 17
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Button is present
`define DEFAULT_ATT_BUTT_PRE_17 1'h0


// Name:           DEFAULT_ATT_IND_PRE_17
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 17
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Indicator is present
`define DEFAULT_ATT_IND_PRE_17 1'h0


// Name:           DEFAULT_PWR_IND_PRE_17
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 17
// Parameter Type: Register Default Setting
// 
// When set indicates that a Power Indicator is present
`define DEFAULT_PWR_IND_PRE_17 1'h0


// Name:           DEFAULT_NO_SNOOP_SUPPORTED_17
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 17
// Parameter Type: Register Default Setting
// 
// Default value for the Enable No Snoop bit in the Device Control Register. Function 17.
`define DEFAULT_NO_SNOOP_SUPPORTED_17 1'h0


// Name:           ROOT_RCB_17
// Default:        64-bit
// Values:         64-bit (0x0), 128-bit (0x1)
// Parameter Type: Register Default Setting
// 
// Default value for the Read Completion Boundary (RCB) bit in the Link Control Register.
`define ROOT_RCB_17 1'h0


//-/ END:   PCI-E CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: MSI-X CAPABILITIES CONFIGURATION


// Name:           MSIX_TABLE_SIZE_17
// Default:        0x0
// Values:         0x0, ..., 0x7ff
// Enabled:        CX_NFUNC > 17 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the MSI-X Table Size field in the MSI-X Control Register. Function 17.
`define MSIX_TABLE_SIZE_17 11'h0


// Name:           MSIX_TABLE_BIR_17
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 17 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table BAR Indicator Register (BIR) field in the MSI-X Table Offset and BIR Register. Function 17.
`define MSIX_TABLE_BIR_17 3'h0


// Name:           MSIX_TABLE_OFFSET_17
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 17 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table Offset field in the MSI-X Table Offset and BIR Register. Function 17.
`define MSIX_TABLE_OFFSET_17 29'h0


// Name:           MSIX_PBA_BIR_17
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 17 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Pending Bit Array (PBA) BIR field in the MSI-X PBA Offset and BIR Register. Function 17.
`define MSIX_PBA_BIR_17 7'h0


// Name:           MSIX_PBA_OFFSET_17
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 17 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the PBA Offset field in the MSI-X PBA Offset and BIR Register. Function 17.
`define MSIX_PBA_OFFSET_17 29'h0

//-/ END:   MSI-X CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SATA CAPABILITIES CONFIGURATION


// Name:         SATA_HBA_OFFSET_17
// Default:      0x0
// Values:       0x0, ..., 0xfffff
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA Offset. Base address of the SATA HBA registers, 
//  as an offset from the base address of the BAR indicated 
//  by the SATA BAR field.
`define SATA_HBA_OFFSET_17 20'h0


// Name:         SATA_BAR_17
// Default:      0x0
// Values:       0x0, ..., 0xf
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA BAR. The bar that maps to SATA HBA registers,
`define SATA_BAR_17 4'h0

//-/ END:   SATA CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: AER CAPABILITIES CONFIGURATION


// Name:           DEFAULT_ECRC_CHK_CAP_17
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 17 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Check Capable bit in the Advanced Capabilities and Control Register. Function 17.
`define DEFAULT_ECRC_CHK_CAP_17 1'h1


// Name:           DEFAULT_ECRC_GEN_CAP_17
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 17 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Generation Capability bit in the Advanced Capabilities and Control Register. Function 17.
`define DEFAULT_ECRC_GEN_CAP_17 1'h1


// Name:           AER_INT_MSG_NUM_17
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Parameter Type: Register Default Setting
// 
// Default value for the Advanced Error Interrupt Message Number field of the Root Error Status Register. Function 17.
`define AER_INT_MSG_NUM_17 5'h0



// Name:           CX_HDR_LOG_DEPTH_17
// Default:        0x1
// Values:         0x1, 0x2, 0x4
// Enabled:        CX_NFUNC > 17 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Feature Setting.
// 
// Header Log Depth
`define CX_HDR_LOG_DEPTH_17 3'h1


`define CX_MULTIPLE_HDR_REC_CAP_17 1'h0

//-/ END:   AER CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PM CAPABILITIES CONFIGURATION


// Name:           PME_SUPPORT_17
// Default:        0x1b
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 17
// Parameter Type: Register Default Setting
// 
// Default value for the PME_Support field in the Power Management Capabilities Register. Function 17.
`define PME_SUPPORT_17 5'h1b


// Name:           D1_SUPPORT_17
// Default:        true
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 17
// Parameter Type: Register Default Setting
// 
// Default value for the D1 Support bit in the Power Management Capabilities Register. Function 17.
`define D1_SUPPORT_17 1'h1


// Name:           D2_SUPPORT_17
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 17
// Parameter Type: Register Default Setting
// 
// Default value for the D2 Support bit in the Power Management Capabilities Register. Function 17.
`define D2_SUPPORT_17 1'h0


// Name:           DEV_SPEC_INIT_17
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 17
// Parameter Type: Register Default Setting
// 
// Default value for the Device Specific Initialization (DSI) bit in the Power Management Capabilities Register. Function 
// 17.
`define DEV_SPEC_INIT_17 1'h0


// Name:           AUX_CURRENT_17
// Default:        375mA
// Values:         0mA (0x0), 55mA (0x1), 100mA (0x2), 160mA (0x3), 220mA (0x4), 270mA 
//                 (0x5), 320mA (0x6), 375mA (0x7)
// Enabled:        CX_NFUNC > 17
// Parameter Type: Register Default Setting
// 
// Default value for the Aux Current field in the Power Management Capabilities Register. Function 17.
`define AUX_CURRENT_17 3'h7


// Name:           DEFAULT_NO_SOFT_RESET_17
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 17
// Parameter Type: Register Default Setting
// 
// Default value for the No Soft Reset bit in the Power Management Control and Status Register. When set, you should not 
// reset any controller registers when transitioning from D3hot to D0. Therefore, you should not assert the non_sticky_rst_n 
// and sticky_rst_n inputs. Function 17.
`define DEFAULT_NO_SOFT_RESET_17 1'h0

//-/ END:   PM CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PCI BASIC CONFIGURATION


// Name:           CX_DEVICE_ID_17
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 17
// Parameter Type: Register Default Setting
// 
// Default value for the Device ID field in the Device ID and Vendor ID Register. Function 17.
`define CX_DEVICE_ID_17 16'h0


// Name:           CX_VENDOR_ID_17
// Default:        0x16c3
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 17
// Parameter Type: Register Default Setting
// 
// Default value for the Vendor ID field in the Device ID and Vendor ID Register. Function 17.
`define CX_VENDOR_ID_17 16'h16c3


// Name:           CX_REVISION_ID_17
// Default:        0x1
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 17
// Parameter Type: Register Default Setting
// 
// Default value for the Revision ID field in the Revision ID Register. Function 17.
`define CX_REVISION_ID_17 8'h1


// Name:           SUBSYS_DEV_ID_17
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 17
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 17.
`define SUBSYS_DEV_ID_17 16'h0


// Name:           SUBSYS_VENDOR_ID_17
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 17
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem Vendor ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 17.
`define SUBSYS_VENDOR_ID_17 16'h0


// Name:           BASE_CLASS_CODE_17
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 17
// Parameter Type: Register Default Setting
// 
// Default value for the Base Class Code field in the Class Code Register. Function 17.
`define BASE_CLASS_CODE_17 8'h0


// Name:           SUB_CLASS_CODE_17
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 17
// Parameter Type: Register Default Setting
// 
// Default value for the Subclass Code field in the Class Code Register. Function 17.
`define SUB_CLASS_CODE_17 8'h0


// Name:           IF_CODE_17
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 17
// Parameter Type: Register Default Setting
// 
// Default value for the Programming Interface field in the Class Code Register. Function 17.
`define IF_CODE_17 8'h0


// Name:           CARDBUS_CIS_PTR_17
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 17
// Parameter Type: Register Default Setting
// 
// Default value for the CardBus CIS Pointer Register. Function 17.
`define CARDBUS_CIS_PTR_17 16'h0


// Name:           INT_PIN_MAPPING_17
// Default:        INTA
// Values:         None (0x0), INTA (0x1), INTB (0x2), INTC (0x3), INTD (0x4)
// Enabled:        CX_NFUNC > 17
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Pin Register. Function 17.
`define INT_PIN_MAPPING_17 8'h1


// Name:           IO_DECODE_32_17
// Default:        16-bit
// Values:         16-bit (0x0), 32-bit (0x1)
// Enabled:        CX_NFUNC > 17
// Parameter Type: Register Default Setting
// 
// Default value for the 32-Bit I/O Space bit in the I/O Base and I/O Limit Register. Function 17.
`define IO_DECODE_32_17 1'h0


// Name:           MEM_DECODE_64_17
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x1)
// Enabled:        CX_NFUNC > 17
// Parameter Type: Register Default Setting
// 
// Default value for the 64-Bit Memory Addressing bit in the Prefetchable Memory Base and Limit Register. Function 17.
`define MEM_DECODE_64_17 1'h0


// Name:           ROM_BAR_ENABLED_17
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 17
// Parameter Type: Register Default Setting
// 
// Include the expansion ROM BAR registers. Function 17.
`define ROM_BAR_ENABLED_17 1'h1


`define DEFAULT_ROM_BAR_ENABLED_17 1'h1


// Name:           ROM_MASK_17
// Default:        0xffff
// Values:         0x7ff, ..., 0xffffff
// Enabled:        CX_NFUNC > 17 && ROM_BAR_ENABLED_17==1
// Parameter Type: Register Default Setting
// 
// Determines the default of the Expansion ROM BAR Mask register. Function 17. 
//  - The BAR Mask register specifies which bits of the Expansion ROM BAR are non-writable by host software, which 
//  determines the size of the BAR. 
//  - The maximum value for ROM_MASK_N is 0xFFFFFF because the maximum space that can be claimed by an Expansion ROM BAR 
//  is 16 MB. 
//  - For example: 32'hFFFF =BAR size of 2^16.
`define ROM_MASK_17 32'hffff


// Name:           ROM_MASK_WRITABLE_17
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 17 && ROM_BAR_ENABLED_17==1
// Parameter Type: Feature Setting
// 
// Determines if the Expansion ROM BAR Mask register for function 17 is writable by application software. If writing to a 
// Expansion ROM BAR Mask register is enabled, your application can write to the Expansion ROM BAR Mask register through the 
// DBI by asserting dbi_cs2 in addition to dbi_cs.
`define ROM_MASK_WRITABLE_17 1'h0


// Name:           ROM_FUNC17_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 17 && ROM_BAR_ENABLED_17==1 && TRGT1_POPULATE==1))
// Parameter Type: Register Default Setting
// 
// Direct incoming requests that pass filtering and match the Expansion ROM BAR of function 17 to either RTRGT0 or RTRGT1. 
//  - For example, setting ROM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for the Expansion ROM BAR of function 
//  0 to RTRGT1. 
//  - If TRGT1_POPULATE =0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define ROM_FUNC17_TARGET_MAP 1'h1


// Name:           CX_PCI_HEADER_DEFAULTS_VISIBLE_17
// Default:        0
// Values:         0, 1
// Parameter Type: Register Default Setting
// 
// Select here if you want to configure the defaults for the other PCI Standard Header registers for function 17. 
//  An extra window will appear under this page. To access it, click the plus/minus symbol in the hierarchy view on the 
//  left panel. 
//  This is optional but not usually recommended. 
//  You can also change these register defaults using the DBI before (or after) the link comes up.
`define CX_PCI_HEADER_DEFAULTS_VISIBLE_17 0

//-/ END:   PCI BASIC CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: BAR CONFIGURATION


// Name:           BAR0_ENABLED_17
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 17
// Parameter Type: Feature Setting
// 
// Include the BAR0 registers for function 17.
`define BAR0_ENABLED_17 1'h1


`define DEFAULT_BAR0_ENABLED_17 1'h1


// Name:           MEM0_SPACE_DECODER_17
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 17 && BAR0_ENABLED_17==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 17.
`define MEM0_SPACE_DECODER_17 1'h0


// Name:           PREFETCHABLE0_17
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 17 && BAR0_ENABLED_17==1 && MEM0_SPACE_DECODER_17==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 17.
`define PREFETCHABLE0_17 1'h0


// Name:           BAR0_TYPE_17
// Default:        64-bit ((MEM0_SPACE_DECODER_17==1 || BAR0_ENABLED_17==0) ? 0 : 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 17 && BAR0_ENABLED_17==1 && MEM0_SPACE_DECODER_17==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 17.
`define BAR0_TYPE_17 2'h2


// Name:           BAR0_SIZING_SCHEME_17
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 17 && BAR0_ENABLED_17==1
// Parameter Type: Feature Setting
// 
// BAR0 Function 17 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR0_SIZING_SCHEME_17 2'h0


// Name:           CX_BAR0_RESIZABLE_17
// Default:        0x0 ((BAR0_SIZING_SCHEME_17==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR0_ENABLED_17==1) && (MEM0_SPACE_DECODER_17==0)
// Parameter Type: Feature Setting
// 
// Defines BAR0 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR0 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR0_RESIZABLE_17 1'h0


// Name:           CX_BAR0_RESOURCE_AVAIL_17
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 17 && CX_BAR0_RESIZABLE_17==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR0 of function 17. 
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
// Example: 0x00000030 indicates that BAR0 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR0_RESOURCE_AVAIL_17 64'h10


// Name:           BAR0_MASK_WRITABLE_17
// Default:        0x0 ((BAR0_ENABLED_17==1 && BAR0_SIZING_SCHEME_17 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 17 && BAR0_ENABLED_17==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR0 Mask through DBI
`define BAR0_MASK_WRITABLE_17 1'h0


// Name:           BAR0_MASK_17
// Default:        0xfffff (CX_BAR0_RESIZABLE_17==1 ? [calc_bar_mask 
//                 CX_BAR0_RESOURCE_AVAIL_17] : MEM0_SPACE_DECODER_17==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 17 && BAR0_ENABLED_17==1 && MEM0_SPACE_DECODER_17==0 && 
//                 CX_BAR0_RESIZABLE_17==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR0 Mask register of function 17. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR0_MASK_17 64'hfffff


// Name:           MEM_FUNC17_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 17 && BAR0_ENABLED_17==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_0 of function 17 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming Requests for BAR0 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC17_BAR0_TARGET_MAP 1'h1


// Name:           BAR1_ENABLED_17
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 17 && BAR0_TYPE_17==0
// Parameter Type: Feature Setting
// 
// Include the BAR1 registers for function 17.
`define BAR1_ENABLED_17 1'h0


`define DEFAULT_BAR1_ENABLED_17 1'h0


// Name:           MEM1_SPACE_DECODER_17
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 17 && BAR1_ENABLED_17==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 17.
`define MEM1_SPACE_DECODER_17 1'h0


// Name:           PREFETCHABLE1_17
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 17 && BAR1_ENABLED_17==1 && MEM1_SPACE_DECODER_17==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 17.
`define PREFETCHABLE1_17 1'h0


// Name:           BAR1_TYPE_17
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 17.
`define BAR1_TYPE_17 2'h0


// Name:           BAR1_SIZING_SCHEME_17
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 17 && BAR1_ENABLED_17==1
// Parameter Type: Feature Setting
// 
// BAR1 Function 17 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR1_SIZING_SCHEME_17 2'h0


// Name:           CX_BAR1_RESIZABLE_17
// Default:        0x0 ((BAR1_SIZING_SCHEME_17==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR1_ENABLED_17==1) && (MEM1_SPACE_DECODER_17==0)
// Parameter Type: Feature Setting
// 
// Defines BAR1 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR1 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR1_RESIZABLE_17 1'h0


// Name:           CX_BAR1_RESOURCE_AVAIL_17
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 17 && CX_BAR1_RESIZABLE_17==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR1 of function 17. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR1 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR1_RESOURCE_AVAIL_17 32'h10


// Name:           BAR1_MASK_WRITABLE_17
// Default:        0x0 ((BAR1_ENABLED_17==1 && BAR1_SIZING_SCHEME_17 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 17 && BAR1_ENABLED_17==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR1 Mask through DBI
`define BAR1_MASK_WRITABLE_17 1'h0


// Name:           BAR1_MASK_17
// Default:        0xffff (CX_BAR1_RESIZABLE_17==1 ? [calc_bar_mask 
//                 CX_BAR1_RESOURCE_AVAIL_17] : MEM1_SPACE_DECODER_17==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 17 && BAR1_ENABLED_17==1 && MEM1_SPACE_DECODER_17==0 && 
//                 CX_BAR1_RESIZABLE_17==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR1 Mask register of function 17. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR1_MASK_17 32'hffff


// Name:           MEM_FUNC17_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 17 && BAR1_ENABLED_17==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_1 of function 17 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR1_TARGET_MAP to 1 maps all incoming Requests for BAR1 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC17_BAR1_TARGET_MAP 1'h1


// Name:           BAR2_ENABLED_17
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 17
// Parameter Type: Feature Setting
// 
// Include the BAR2 registers for function 17.
`define BAR2_ENABLED_17 1'h1


`define DEFAULT_BAR2_ENABLED_17 1'h1


// Name:           MEM2_SPACE_DECODER_17
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 17 && BAR2_ENABLED_17==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 17.
`define MEM2_SPACE_DECODER_17 1'h0


// Name:           PREFETCHABLE2_17
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 17 && BAR2_ENABLED_17==1 && MEM2_SPACE_DECODER_17==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 17.
`define PREFETCHABLE2_17 1'h0


// Name:           BAR2_TYPE_17
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 17 && BAR2_ENABLED_17==1 && MEM2_SPACE_DECODER_17==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 17.
`define BAR2_TYPE_17 2'h0


// Name:           BAR2_SIZING_SCHEME_17
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 17 && BAR2_ENABLED_17==1
// Parameter Type: Feature Setting
// 
// BAR2 Function 17 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR2_SIZING_SCHEME_17 2'h0


// Name:           CX_BAR2_RESIZABLE_17
// Default:        0x0 ((BAR2_SIZING_SCHEME_17==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR2_ENABLED_17==1) && (MEM2_SPACE_DECODER_17==0)
// Parameter Type: Feature Setting
// 
// Defines BAR2 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR2 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR2_RESIZABLE_17 1'h0


// Name:           CX_BAR2_RESOURCE_AVAIL_17
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 17 && CX_BAR2_RESIZABLE_17==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR2 of function 17. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR2 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR2_RESOURCE_AVAIL_17 64'h10


// Name:           BAR2_MASK_WRITABLE_17
// Default:        0x0 ((BAR2_ENABLED_17==1 && BAR2_SIZING_SCHEME_17 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 17 && BAR2_ENABLED_17==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR2 Mask through DBI
`define BAR2_MASK_WRITABLE_17 1'h0


// Name:           BAR2_MASK_17
// Default:        0xfffff (CX_BAR2_RESIZABLE_17==1 ? [calc_bar_mask 
//                 CX_BAR2_RESOURCE_AVAIL_17] : MEM2_SPACE_DECODER_17==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 17 && BAR2_ENABLED_17==1 && MEM2_SPACE_DECODER_17==0 && 
//                 CX_BAR2_RESIZABLE_17==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR2 Mask register of function 17. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR2_MASK_17 64'hfffff


// Name:           MEM_FUNC17_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 17 && BAR2_ENABLED_17==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_2 of function 17 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR2_TARGET_MAP to 1 maps all incoming requests for BAR2 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC17_BAR2_TARGET_MAP 1'h1


// Name:           BAR3_ENABLED_17
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 17 && BAR2_TYPE_17==0
// Parameter Type: Feature Setting
// 
// Include the BAR3 registers for function 17.
`define BAR3_ENABLED_17 1'h0



`define DEFAULT_BAR3_ENABLED_17 1'h0


// Name:           MEM3_SPACE_DECODER_17
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 17 && BAR3_ENABLED_17==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 17.
`define MEM3_SPACE_DECODER_17 1'h0


// Name:           PREFETCHABLE3_17
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 17 && BAR3_ENABLED_17==1 && MEM3_SPACE_DECODER_17==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 17.
`define PREFETCHABLE3_17 1'h0


// Name:           BAR3_TYPE_17
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 17.
`define BAR3_TYPE_17 2'h0


// Name:           BAR3_SIZING_SCHEME_17
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 17 && BAR3_ENABLED_17==1
// Parameter Type: Feature Setting
// 
// BAR3 Function 17 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR3_SIZING_SCHEME_17 2'h0


// Name:           CX_BAR3_RESIZABLE_17
// Default:        0x0 ((BAR3_SIZING_SCHEME_17==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR3_ENABLED_17==1) && (MEM3_SPACE_DECODER_17==0)
// Parameter Type: Feature Setting
// 
// Defines BAR3 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR3 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR3_RESIZABLE_17 1'h0


// Name:           CX_BAR3_RESOURCE_AVAIL_17
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 17 && CX_BAR3_RESIZABLE_17==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR3 of function 17. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR3 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR3_RESOURCE_AVAIL_17 32'h10


// Name:           BAR3_MASK_WRITABLE_17
// Default:        0x0 ((BAR3_ENABLED_17==1 && BAR3_SIZING_SCHEME_17 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 17 && BAR3_ENABLED_17==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR3 Mask through DBI
`define BAR3_MASK_WRITABLE_17 1'h0


// Name:           BAR3_MASK_17
// Default:        0xffff (CX_BAR3_RESIZABLE_17==1 ? [calc_bar_mask 
//                 CX_BAR3_RESOURCE_AVAIL_17] : MEM3_SPACE_DECODER_17==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 17 && BAR3_ENABLED_17==1 && MEM3_SPACE_DECODER_17==0 && 
//                 CX_BAR3_RESIZABLE_17==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR3 Mask register of function 17. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR3_MASK_17 32'hffff


// Name:           MEM_FUNC17_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 17 && BAR3_ENABLED_17==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_3 of function 17 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR3_TARGET_MAP to 1 maps all incoming requests for BAR3 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC17_BAR3_TARGET_MAP 1'h1


// Name:           BAR4_ENABLED_17
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 17
// Parameter Type: Feature Setting
// 
// Include the BAR4 registers for function 17.
`define BAR4_ENABLED_17 1'h1


`define DEFAULT_BAR4_ENABLED_17 1'h1



// Name:           MEM4_SPACE_DECODER_17
// Default:        I/O (BAR4_ENABLED_17==1)
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 17 && BAR4_ENABLED_17==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 17.
`define MEM4_SPACE_DECODER_17 1'h1


// Name:           PREFETCHABLE4_17
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 17 && BAR4_ENABLED_17==1 && MEM4_SPACE_DECODER_17==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 17.
`define PREFETCHABLE4_17 1'h0


// Name:           BAR4_TYPE_17
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 17 && BAR4_ENABLED_17==1 && MEM4_SPACE_DECODER_17==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 17.
`define BAR4_TYPE_17 2'h0


// Name:           BAR4_SIZING_SCHEME_17
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 17 && BAR4_ENABLED_17==1
// Parameter Type: Feature Setting
// 
// BAR4  Function 17 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR4_SIZING_SCHEME_17 2'h0


// Name:           CX_BAR4_RESIZABLE_17
// Default:        0x0 ((BAR4_SIZING_SCHEME_17==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR4_ENABLED_17==1) && (MEM4_SPACE_DECODER_17==0)
// Parameter Type: Feature Setting
// 
// Defines BAR4 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR4 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR4_RESIZABLE_17 1'h0


// Name:           CX_BAR4_RESOURCE_AVAIL_17
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 17 &&  CX_BAR4_RESIZABLE_17==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR4 of function 17. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR4 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR4_RESOURCE_AVAIL_17 64'h10


// Name:           BAR4_MASK_WRITABLE_17
// Default:        0x0 ((BAR4_ENABLED_17==1 && BAR4_SIZING_SCHEME_17 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 17 && BAR4_ENABLED_17==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR4 Mask through DBI
`define BAR4_MASK_WRITABLE_17 1'h0


// Name:           BAR4_MASK_17
// Default:        0xff (CX_BAR4_RESIZABLE_17==1 ? [calc_bar_mask 
//                 CX_BAR4_RESOURCE_AVAIL_17] : MEM4_SPACE_DECODER_17==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 17 && BAR4_ENABLED_17==1 && MEM4_SPACE_DECODER_17==0 && 
//                 CX_BAR4_RESIZABLE_17==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR4 Mask register of function 17. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR4_MASK_17 64'hff


// Name:           MEM_FUNC17_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 17 && BAR4_ENABLED_17==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_4 of function 17 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR4_TARGET_MAP to 1 maps all incoming requests for BAR4 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC17_BAR4_TARGET_MAP 1'h1


// Name:           BAR5_ENABLED_17
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 17 && BAR4_TYPE_17==0
// Parameter Type: Feature Setting
// 
// Include the BAR5 registers for function 17.
`define BAR5_ENABLED_17 1'h0


`define DEFAULT_BAR5_ENABLED_17 1'h0


// Name:           MEM5_SPACE_DECODER_17
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 17 && BAR5_ENABLED_17==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 17.
`define MEM5_SPACE_DECODER_17 1'h0


// Name:           PREFETCHABLE5_17
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 17 && BAR5_ENABLED_17==1 && MEM5_SPACE_DECODER_17==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 17.
`define PREFETCHABLE5_17 1'h0


// Name:           BAR5_TYPE_17
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 17.
`define BAR5_TYPE_17 2'h0


// Name:           BAR5_SIZING_SCHEME_17
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 17 && BAR5_ENABLED_17==1
// Parameter Type: Feature Setting
// 
// BAR5  Function 17 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR5_SIZING_SCHEME_17 2'h0


// Name:           CX_BAR5_RESIZABLE_17
// Default:        0x0 ((BAR5_SIZING_SCHEME_17==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR5_ENABLED_17==1) && (MEM5_SPACE_DECODER_17==0)
// Parameter Type: Feature Setting
// 
// Defines BAR5 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR5 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR5_RESIZABLE_17 1'h0


// Name:           CX_BAR5_RESOURCE_AVAIL_17
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 17 && CX_BAR5_RESIZABLE_17==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR5 of function 17. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR5 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR5_RESOURCE_AVAIL_17 32'h10


// Name:           BAR5_MASK_WRITABLE_17
// Default:        0x0 ((BAR5_ENABLED_17==1 && BAR5_SIZING_SCHEME_17 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 17 && BAR5_ENABLED_17==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR5 Mask through DBI
`define BAR5_MASK_WRITABLE_17 1'h0


// Name:           BAR5_MASK_17
// Default:        0xffff (CX_BAR5_RESIZABLE_17==1 ? [calc_bar_mask 
//                 CX_BAR5_RESOURCE_AVAIL_17] : MEM5_SPACE_DECODER_17==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 17 && BAR5_ENABLED_17==1 && MEM5_SPACE_DECODER_17==0 && 
//                 CX_BAR5_RESIZABLE_17==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR5 Mask register of function 17. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR5_MASK_17 32'hffff


// Name:           MEM_FUNC17_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 17 && BAR5_ENABLED_17==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_5 of function 17 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR5_TARGET_MAP to 1 maps all incoming requests for BAR5 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC17_BAR5_TARGET_MAP 1'h1


`define FUNC17_BARSIZE_32 128'h0


`define FUNC17_BARSIZE 128'h0


`define FUNC17_BAR0_BARSIZE_TRGT1 128'h0


`define FUNC17_BAR2_BARSIZE_TRGT1 128'h0


`define FUNC17_BAR4_BARSIZE_TRGT1 128'h0


`define FUNC17_BAR0_TRGT1_ADDR_WIDTH 1


`define FUNC17_BAR2_TRGT1_ADDR_WIDTH 1


`define FUNC17_BAR4_TRGT1_ADDR_WIDTH 1


// Name:         CX_NUM_RBARS_17
// Default:      0 ([calc_num_rbars CX_BAR0_RESIZABLE_17 CX_BAR1_RESIZABLE_17 
//               CX_BAR2_RESIZABLE_17 CX_BAR3_RESIZABLE_17 CX_BAR4_RESIZABLE_17 
//               CX_BAR5_RESIZABLE_17])
// Values:       -2147483648, ..., 2147483647
// 
// Number of resizable BARs
`define CX_NUM_RBARS_17 0

//-/ END:   BAR CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SR-IOV CAPABILITIES CONFIGURATION


// Name:           CX_VF_DEPENDENCY_LINK_17
// Default:        0x17
// Values:         0x0, ..., 0xff
// Enabled:        CX_VF_DEPENDENCY_LINK_SUPP && (CX_NFUNC > 17) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Specifies the 8-bit VF dependency link for PF17. Valid only if CX_VF_DEPENDENCY_LINK_SUPP=1.
`define CX_VF_DEPENDENCY_LINK_17 8'h17


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER1_17
// Default:        0x2 ((CX_NFUNC>=17) ? 32 : (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : 
//                 (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF17 in an ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER1_17 16'h2


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER0_17
// Default:        0x100
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF17 
//  in a non-ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER0_17 16'h100


// Name:           VF_STRIDE_ARI_CAP_HIER1_17
// Default:        0x2 (CX_VF_STRIDE_ALWAYS_ONE) ? 1 : ((CX_NFUNC>=17) ? 32 : 
//                 (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF17 in an ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER1_17 16'h2


// Name:           VF_STRIDE_ARI_CAP_HIER0_17
// Default:        0x100 ((CX_VF_STRIDE_ALWAYS_ONE) ? 0x0001 : 0x0100)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF17 in a non-ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER0_17 16'h100


// Name:           CX_VF_DEVICE_ID_17
// Default:        0x0 (CX_DEVICE_ID_17)
// Values:         0x0, ..., 0xffff
// Enabled:        (CX_NFUNC > 17) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 16-bit virtual function Device ID for PF17. 
//  It might be different from the physical function's.
`define CX_VF_DEVICE_ID_17 16'h0


// Name:           CX_VF_SUPP_PAGE_SIZE_17
// Default:        0x553
// Values:         0x553, ..., 0xffff
// Enabled:        (CX_NFUNC > 17) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 32-bit supported page sizes for virtual functions for PF17
`define CX_VF_SUPP_PAGE_SIZE_17 32'h553


// Name:           CX_ARI_CAP_HIER_PRSVD_17
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Specifies if ARI Capable Hierarchy bit is preserved across certain power state transitions 
//  Only present in PF0. Read Only Zero in this PF17.
`define CX_ARI_CAP_HIER_PRSVD_17 1'h0

//-/===========================================
//-/ START: VF BAR CONFIGURATION


// Name:           VF_BAR0_ENABLED_17
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 17)
// Parameter Type: Feature Setting
// 
// Include the VF BAR0 registers in PF17
`define VF_BAR0_ENABLED_17 1'h1


`define VF_DEFAULT_BAR0_ENABLED_17 1'h1


// Name:           VF_MEM0_SPACE_DECODER_17
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR0_ENABLED_17 && CX_SRIOV_ENABLE && (CX_NFUNC > 17)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Space Indicator 
//  ALWAYS set to Memory for Virtual Functions
`define VF_MEM0_SPACE_DECODER_17 1'h0


// Name:           VF_PREFETCHABLE0_17
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_17==1 && VF_MEM0_SPACE_DECODER_17==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 17)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Prefetchable 
//  When set indicates VF BAR0 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE0_17 1'h0


// Name:           VF_BAR0_TYPE_17
// Default:        64-bit ((VF_MEM0_SPACE_DECODER_17==1 || VF_BAR0_ENABLED_17==0) ? 0 
//                 : 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR0_ENABLED_17==1 && VF_MEM0_SPACE_DECODER_17==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 17)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 17; (bits [2:1] for a memory BAR).
`define VF_BAR0_TYPE_17 2'h2


// Name:           VF_BAR0_MASK_WRITABLE_17
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_17==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 17)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR0_MASK_WRITABLE_17 1'h0


// Name:           VF_BAR0_MASK_17
// Default:        0xfffff (VF_MEM0_SPACE_DECODER_17==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR0_ENABLED_17==1 && VF_MEM0_SPACE_DECODER_17==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 17)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Mask 
//  Determines the default of the VF BAR Mask register for PF17. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR0_MASK_17 64'hfffff


// Name:           VF_MEM_FUNC17_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR0_ENABLED_17==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE 
//                 && (CX_NFUNC > 17)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF17 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC17_BAR0_TARGET_MAP 1'h1


// Name:           VF_BAR1_ENABLED_17
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        (VF_BAR0_TYPE_17==0)  && CX_SRIOV_ENABLE && (CX_NFUNC > 17)
// Parameter Type: Feature Setting
// 
// Include the VF BAR1 registers in PF17
`define VF_BAR1_ENABLED_17 1'h0


`define VF_DEFAULT_BAR1_ENABLED_17 1'h0


// Name:           VF_MEM1_SPACE_DECODER_17
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR1_ENABLED_17==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 17)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Space Indicator
`define VF_MEM1_SPACE_DECODER_17 1'h0


// Name:           VF_PREFETCHABLE1_17
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_17==1 && VF_MEM1_SPACE_DECODER_17==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 17)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Prefetchable 
//  When set indicates VF BAR1 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE1_17 1'h0


// Name:           VF_BAR1_TYPE_17
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 17; (bits [2:1] for a memory BAR).
`define VF_BAR1_TYPE_17 2'h0


// Name:           VF_BAR1_MASK_WRITABLE_17
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_17==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 17)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR1_MASK_WRITABLE_17 1'h0


// Name:           VF_BAR1_MASK_17
// Default:        0xffff (VF_MEM1_SPACE_DECODER_17==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR1_ENABLED_17==1 && VF_MEM1_SPACE_DECODER_17==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 17)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Mask 
//  Determines the default of the VF BAR Mask register for PF17. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR1_MASK_17 32'hffff


// Name:           VF_MEM_FUNC17_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR1_ENABLED_17==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE 
//                 && (CX_NFUNC > 17)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF17 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC17_BAR1_TARGET_MAP 1'h1


// Name:           VF_BAR2_ENABLED_17
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 17)
// Parameter Type: Feature Setting
// 
// Include the VF BAR2 registers in PF17
`define VF_BAR2_ENABLED_17 1'h1


`define VF_DEFAULT_BAR2_ENABLED_17 1'h1


// Name:           VF_MEM2_SPACE_DECODER_17
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR2_ENABLED_17==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 17)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Memory Space Indicator
`define VF_MEM2_SPACE_DECODER_17 1'h0


// Name:           VF_PREFETCHABLE2_17
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_17==1 && VF_MEM2_SPACE_DECODER_17==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 17)
// Parameter Type: Register Default Setting
// 
// BAR2 Memory Prefetchable 
//  When set indicates VF BAR2 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE2_17 1'h0


// Name:           VF_BAR2_TYPE_17
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR2_ENABLED_17==1 && VF_MEM2_SPACE_DECODER_17==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 17)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 17; (bits [2:1] for a memory BAR).
`define VF_BAR2_TYPE_17 2'h0


// Name:           VF_BAR2_MASK_WRITABLE_17
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_17==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 17)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR2_MASK_WRITABLE_17 1'h0


// Name:           VF_BAR2_MASK_17
// Default:        0xfffff (VF_MEM2_SPACE_DECODER_17==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR2_ENABLED_17==1 && VF_MEM2_SPACE_DECODER_17==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 17)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Mask 
//  Determines the default of the VF BAR Mask register for PF17. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR2_MASK_17 64'hfffff


// Name:           VF_MEM_FUNC17_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR2_ENABLED_17==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 17)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF17 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC17_BAR2_TARGET_MAP 1'h1


// Name:           VF_BAR3_ENABLED_17
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_TYPE_17==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 17)
// Parameter Type: Feature Setting
// 
// Include the VF BAR3 registers in PF17
`define VF_BAR3_ENABLED_17 1'h0


`define VF_DEFAULT_BAR3_ENABLED_17 1'h0


// Name:           VF_MEM3_SPACE_DECODER_17
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR3_ENABLED_17==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 17)
// Parameter Type: Register Default Setting
// 
// BAR3 Memory Space Indicator
`define VF_MEM3_SPACE_DECODER_17 1'h0


// Name:           VF_PREFETCHABLE3_17
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_17==1 && VF_MEM3_SPACE_DECODER_17==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 17)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Memory Prefetchable 
//  When set indicates VF BAR3 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE3_17 1'h0


// Name:           VF_BAR3_TYPE_17
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 17; (bits [2:1] for a memory BAR).
`define VF_BAR3_TYPE_17 2'h0


// Name:           VF_BAR3_MASK_WRITABLE_17
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_17==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 17)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR3_MASK_WRITABLE_17 1'h0


// Name:           VF_BAR3_MASK_17
// Default:        0xffff (VF_MEM3_SPACE_DECODER_17==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR3_ENABLED_17==1 && VF_MEM3_SPACE_DECODER_17==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 17)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Mask 
//  Determines the default of the VF BAR Mask register for PF17. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR3_MASK_17 32'hffff


// Name:           VF_MEM_FUNC17_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR3_ENABLED_17==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 17)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF17 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC17_BAR3_TARGET_MAP 1'h1


// Name:           VF_BAR4_ENABLED_17
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 17)
// Parameter Type: Feature Setting
// 
// Include the VF BAR4 registers in PF17
`define VF_BAR4_ENABLED_17 1'h1


`define VF_DEFAULT_BAR4_ENABLED_17 1'h1


// Name:           VF_MEM4_SPACE_DECODER_17
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR4_ENABLED_17==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 17)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Space Indicator
`define VF_MEM4_SPACE_DECODER_17 1'h0


// Name:           VF_PREFETCHABLE4_17
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_17==1 && VF_MEM4_SPACE_DECODER_17==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 17)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Prefetchable 
//  When set indicates VF BAR4 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE4_17 1'h0


// Name:           VF_BAR4_TYPE_17
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR4_ENABLED_17==1 && VF_MEM4_SPACE_DECODER_17==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 17)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 17; (bits [2:1] for a memory BAR).
`define VF_BAR4_TYPE_17 2'h0


// Name:           VF_BAR4_MASK_WRITABLE_17
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_17==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 17)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR4_MASK_WRITABLE_17 1'h0


// Name:           VF_BAR4_MASK_17
// Default:        0xfff (VF_MEM4_SPACE_DECODER_17==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR4_ENABLED_17==1 && VF_MEM4_SPACE_DECODER_17==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 17)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Mask 
//  Determines the default of the VF BAR Mask register for PF17. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR4_MASK_17 64'hfff


// Name:           VF_MEM_FUNC17_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR4_ENABLED_17==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 17)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF17 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC17_BAR4_TARGET_MAP 1'h1


// Name:           VF_BAR5_ENABLED_17
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_TYPE_17==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 17)
// Parameter Type: Feature Setting
// 
// Include the VF BAR5 registers in PF17
`define VF_BAR5_ENABLED_17 1'h0


`define VF_DEFAULT_BAR5_ENABLED_17 1'h0


// Name:           VF_MEM5_SPACE_DECODER_17
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR5_ENABLED_17==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 17)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Space Indicator
`define VF_MEM5_SPACE_DECODER_17 1'h0


// Name:           VF_PREFETCHABLE5_17
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_17==1 && VF_MEM5_SPACE_DECODER_17==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 17)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Prefetchable 
//  When set indicates VF BAR5 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE5_17 1'h0


// Name:           VF_BAR5_TYPE_17
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 17; (bits [2:1] for a memory BAR).
`define VF_BAR5_TYPE_17 2'h0


// Name:           VF_BAR5_MASK_WRITABLE_17
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_17==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 17)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR5_MASK_WRITABLE_17 1'h0


// Name:           VF_BAR5_MASK_17
// Default:        0xffff (VF_MEM5_SPACE_DECODER_17==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR5_ENABLED_17==1 && VF_MEM5_SPACE_DECODER_17==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 17)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Mask 
//  Determines the default of the VF BAR Mask register for PF17. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR5_MASK_17 32'hffff


// Name:           VF_MEM_FUNC17_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR5_ENABLED_17==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 17)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF17 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC17_BAR5_TARGET_MAP 1'h1


`define VF_FUNC17_BARSIZE_32 128'h101000


`define VF_FUNC17_BARSIZE 128'h201000

//-/ END:   VF BAR CONFIGURATION
//-/===========================================

//-/ END:   SR-IOV CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: TPH CAPABILITIES CONFIGURATION


// Name:           TPH_IVEC_17
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Interrupt Vector Mode. If set indicates that the function supports the Interrupt Vector 
// Mode of operation. Function 17.
`define TPH_IVEC_17 1'h0


// Name:           TPH_DS_17
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Device Specific Mode. If set indicates that the function supports the Device Specific Mode 
// of operation. Function 17.
`define TPH_DS_17 1'h0


// Name:           TPH_ST_TABLE_LOC_17
// Default:        Not Present
// Values:         Not Present (0), TPH Requester Capability Structure (1), MSI-X 
//                 Table Structure (2)
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_DS_17 || TPH_IVEC_17))
// Parameter Type: Feature Setting
// 
// TLP Processing Hints Steering Tag Table Location. Value indicates if and where the ST Table is located. Function 17.
`define TPH_ST_TABLE_LOC_17 0

//located in the TPH Requester Capability structure. Please reduce the ST Table Size for this mode of operation"

// Name:           TPH_ST_TABLE_SIZE_17
// Default:        1
// Values:         1, ..., 2048
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_ST_TABLE_LOC_17 != 0))
// Parameter Type: Feature Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define TPH_ST_TABLE_SIZE_17 1


`define TPH_ST_TABLE_DEPTH_17 0

//-/ END:   TPH CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: ATS CAPABILITIES CONFIGURATION


// Name:           ATS_INV_Q_DPTH_17
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// The number of Invalidate Requests that the Function can accept before putting backpressure on the upstream connection. A 
// value of 0 indicates the function can accept 32 Invalidate requests. Function 17.
`define ATS_INV_Q_DPTH_17 5'd0


// Name:           ATS_STU_17
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// This value indicates to the Function the minimum number of 4096-byte blocks that is indicated in a Translation 
// Completion or Invalidate Request. This is a power of 2 multiplier and the number of blocks is 2^STU. A value of 0 indicates 1 block 
// and a value of 31 indicates 2^31 blocks (or 8 TB total). Function 17.
`define ATS_STU_17 5'd0

//-/ END:   ATS CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PRS CAPABILITIES CONFIGURATION


// Name:           CX_PRS_OUTSTANDING_CAPACITY_VALUE_17
// Default:        0x1
// Values:         0x0, ..., 0xffffffff
// Enabled:        (CX_PRS_ENABLE==1) && (CX_NFUNC > 17)
// Parameter Type: Register Default Setting
// 
// Register default for PRS Outstanding Capacity in PF17. 
// For more details, see the PRS_OUTSTANDING_CAPACITY field in the PRS_REQ_CAPACITY_REG register.
`define CX_PRS_OUTSTANDING_CAPACITY_VALUE_17 32'h1

//-/ END:   PRS CAPABILITIES CONFIGURATION
//-/===========================================


//-/===========================================
//--- START: RN


// Name:           CX_RN_IMM_VALUE_17
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 17)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for PF17.
`define CX_RN_IMM_VALUE_17 1'h0


// Name:           CX_RN_IMM_D0_VALUE_17
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 17)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for PF17.
`define CX_RN_IMM_D0_VALUE_17 1'h0


// Name:           CX_RN_FRS_VALUE_17
// Default:        0x0 (CX_RN_FRS_SUPPORTED==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_FRS_SUPPORTED==1) && (CX_NFUNC > 17)
// Parameter Type: Feature Setting
// 
// Function Readiness Status messaging supported for function PF17.
`define CX_RN_FRS_VALUE_17 1'h0


// Name:           CX_RN_RTR_VALID_17
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 17)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF17.
`define CX_RN_RTR_VALID_17 1'h0


// Name:           CX_RN_RTR_DL_UP_VALUE_17
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 17)
// Parameter Type: Register Default Setting
// 
// Register default for RTR DL Up Time field in PF17.
`define CX_RN_RTR_DL_UP_VALUE_17 12'h0


// Name:           CX_RN_RTR_RESET_VALUE_17
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 17)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF17.
`define CX_RN_RTR_RESET_VALUE_17 12'h0


// Name:           CX_RN_RTR_D3D0_VALUE_17
// Default:        0x0
// Values:         0x0, ..., 0x80a
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 17)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF17.
`define CX_RN_RTR_D3D0_VALUE_17 12'h0


// Name:           CX_RN_RTR_FLR_VALUE_17
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_FLR_ENABLE==1) && (CX_NFUNC > 17)
// Parameter Type: Register Default Setting
// 
// Register default for RTR FLR Time field in PF17.
`define CX_RN_RTR_FLR_VALUE_17 12'h0


// Name:           VF_RN_IMM_VALUE_17
// Default:        0x0 (CX_RN_IMM_VALUE_17 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 17))
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for VFs in PF17.
`define VF_RN_IMM_VALUE_17 1'h0


// Name:           VF_RN_IMM_D0_VALUE_17
// Default:        0x0 (CX_RN_IMM_D0_VALUE_17 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 17))
// Parameter Type: Register Default Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for VFs in PF17.
`define VF_RN_IMM_D0_VALUE_17 1'h0


// Name:           VF_RN_RTR_VALID_17
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 17) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF17 VFs.
`define VF_RN_RTR_VALID_17 1'h0


// Name:           VF_RN_RTR_RESET_VALUE_17
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_17)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 17) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF17 VFS.
`define VF_RN_RTR_RESET_VALUE_17 12'h0


// Name:           VF_RN_RTR_D3D0_VALUE_17
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_17)
// Values:         0x0, ..., 0x80a
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 17) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF17 VFS.
`define VF_RN_RTR_D3D0_VALUE_17 12'h0


// Name:           VF_RN_RTR_FLR_VALUE_17
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_17)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 17) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF17 VFs.
`define VF_RN_RTR_FLR_VALUE_17 12'h0


// Name:           EXT_VF_RN_RTR_VALID_17
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 17) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF17 VFs.
`define EXT_VF_RN_RTR_VALID_17 1'h0


// Name:           EXT_VF_RN_RTR_RESET_VALUE_17
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_17)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 17) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF17 VFS.
`define EXT_VF_RN_RTR_RESET_VALUE_17 12'h0


// Name:           EXT_VF_RN_RTR_D3D0_VALUE_17
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_17)
// Values:         0x0, ..., 0x80a
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 17) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF17 VFS.
`define EXT_VF_RN_RTR_D3D0_VALUE_17 12'h0


// Name:           EXT_VF_RN_RTR_FLR_VALUE_17
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_17)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 17) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF17 VFs.
`define EXT_VF_RN_RTR_FLR_VALUE_17 12'h0

//-/ END:   RN
//-/===========================================

//-/ START: LN CAPABILITIES CONFIGURATION
//-/===========================================


// Name:           CX_LN_REG_MAX_VALUE_17
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 17))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_64_SUPPORTED field in the LNR_CAP_OFF register for PF17.
`define CX_LN_REG_MAX_VALUE_17 5'h0


// Name:           CX_LN_128_SUPPORTED_VALUE_17
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 17))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_128_SUPPORTED field in the LNR_CAP_OFF register for PF17.
`define CX_LN_128_SUPPORTED_VALUE_17 1'h0


// Name:           CX_LN_64_SUPPORTED_VALUE_17
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 17))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_REGISTRATION_MAX field in the LNR_CAP_OFF register for PF17.
`define CX_LN_64_SUPPORTED_VALUE_17 1'h0

//-/ END:   LN CAPABILITIES CONFIGURATION
//-/===========================================




//-/==========================================
//-/ End FUNC17 Config
//-/==========================================

//-/===========================================
//-/ Function 18 Configuration Registers
//-/ ==========================================


// Name:         FUNC_18
// Default:      0 ((CX_NFUNC > 18) ? 1 : 0)
// Values:       0, 1
// 
// This parameter indicates that Function 18 is present
// `define FUNC_18

//-/===========================================
//-/ START: PCI-E CAPABILITIES CONFIGURATION


// Name:           PCIE_CAP_INT_MSG_NUM_18
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 18
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Message Number field in the PCI Express Capabilities Register. Function 18.
`define PCIE_CAP_INT_MSG_NUM_18 5'h0


// Name:           SLOT_IMPLEMENTED_18
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_NFUNC > 18))
// Parameter Type: Register Default Setting
// 
// Indicates that the PCI Express link associated with this Port is connected to a slot. Function 18.
`define SLOT_IMPLEMENTED_18 1'h0


// Name:           DEFAULT_PHANTOM_FUNC_SUPPORTED_18
// Default:        0x0
// Values:         0x0, ..., 0x3
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_PHANTOM_FUNC_SUPPORTED_18 2'h0


// Name:           DEFAULT_EXT_TAG_FIELD_SUPPORTED_18
// Default:        0x0 (DEFAULT_EXT_TAG_FIELD_SUPPORTED_0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 18
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_EXT_TAG_FIELD_SUPPORTED_18 1'h0



// Name:           DEFAULT_ATT_BUTT_PRE_18
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 18
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Button is present
`define DEFAULT_ATT_BUTT_PRE_18 1'h0


// Name:           DEFAULT_ATT_IND_PRE_18
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 18
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Indicator is present
`define DEFAULT_ATT_IND_PRE_18 1'h0


// Name:           DEFAULT_PWR_IND_PRE_18
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 18
// Parameter Type: Register Default Setting
// 
// When set indicates that a Power Indicator is present
`define DEFAULT_PWR_IND_PRE_18 1'h0


// Name:           DEFAULT_NO_SNOOP_SUPPORTED_18
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 18
// Parameter Type: Register Default Setting
// 
// Default value for the Enable No Snoop bit in the Device Control Register. Function 18.
`define DEFAULT_NO_SNOOP_SUPPORTED_18 1'h0


// Name:           ROOT_RCB_18
// Default:        64-bit
// Values:         64-bit (0x0), 128-bit (0x1)
// Parameter Type: Register Default Setting
// 
// Default value for the Read Completion Boundary (RCB) bit in the Link Control Register.
`define ROOT_RCB_18 1'h0


//-/ END:   PCI-E CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: MSI-X CAPABILITIES CONFIGURATION


// Name:           MSIX_TABLE_SIZE_18
// Default:        0x0
// Values:         0x0, ..., 0x7ff
// Enabled:        CX_NFUNC > 18 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the MSI-X Table Size field in the MSI-X Control Register. Function 18.
`define MSIX_TABLE_SIZE_18 11'h0


// Name:           MSIX_TABLE_BIR_18
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 18 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table BAR Indicator Register (BIR) field in the MSI-X Table Offset and BIR Register. Function 18.
`define MSIX_TABLE_BIR_18 3'h0


// Name:           MSIX_TABLE_OFFSET_18
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 18 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table Offset field in the MSI-X Table Offset and BIR Register. Function 18.
`define MSIX_TABLE_OFFSET_18 29'h0


// Name:           MSIX_PBA_BIR_18
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 18 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Pending Bit Array (PBA) BIR field in the MSI-X PBA Offset and BIR Register. Function 18.
`define MSIX_PBA_BIR_18 7'h0


// Name:           MSIX_PBA_OFFSET_18
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 18 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the PBA Offset field in the MSI-X PBA Offset and BIR Register. Function 18.
`define MSIX_PBA_OFFSET_18 29'h0

//-/ END:   MSI-X CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SATA CAPABILITIES CONFIGURATION


// Name:         SATA_HBA_OFFSET_18
// Default:      0x0
// Values:       0x0, ..., 0xfffff
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA Offset. Base address of the SATA HBA registers, 
//  as an offset from the base address of the BAR indicated 
//  by the SATA BAR field.
`define SATA_HBA_OFFSET_18 20'h0


// Name:         SATA_BAR_18
// Default:      0x0
// Values:       0x0, ..., 0xf
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA BAR. The bar that maps to SATA HBA registers,
`define SATA_BAR_18 4'h0

//-/ END:   SATA CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: AER CAPABILITIES CONFIGURATION


// Name:           DEFAULT_ECRC_CHK_CAP_18
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 18 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Check Capable bit in the Advanced Capabilities and Control Register. Function 18.
`define DEFAULT_ECRC_CHK_CAP_18 1'h1


// Name:           DEFAULT_ECRC_GEN_CAP_18
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 18 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Generation Capability bit in the Advanced Capabilities and Control Register. Function 18.
`define DEFAULT_ECRC_GEN_CAP_18 1'h1


// Name:           AER_INT_MSG_NUM_18
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Parameter Type: Register Default Setting
// 
// Default value for the Advanced Error Interrupt Message Number field of the Root Error Status Register. Function 18.
`define AER_INT_MSG_NUM_18 5'h0



// Name:           CX_HDR_LOG_DEPTH_18
// Default:        0x1
// Values:         0x1, 0x2, 0x4
// Enabled:        CX_NFUNC > 18 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Feature Setting.
// 
// Header Log Depth
`define CX_HDR_LOG_DEPTH_18 3'h1


`define CX_MULTIPLE_HDR_REC_CAP_18 1'h0

//-/ END:   AER CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PM CAPABILITIES CONFIGURATION


// Name:           PME_SUPPORT_18
// Default:        0x1b
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 18
// Parameter Type: Register Default Setting
// 
// Default value for the PME_Support field in the Power Management Capabilities Register. Function 18.
`define PME_SUPPORT_18 5'h1b


// Name:           D1_SUPPORT_18
// Default:        true
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 18
// Parameter Type: Register Default Setting
// 
// Default value for the D1 Support bit in the Power Management Capabilities Register. Function 18.
`define D1_SUPPORT_18 1'h1


// Name:           D2_SUPPORT_18
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 18
// Parameter Type: Register Default Setting
// 
// Default value for the D2 Support bit in the Power Management Capabilities Register. Function 18.
`define D2_SUPPORT_18 1'h0


// Name:           DEV_SPEC_INIT_18
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 18
// Parameter Type: Register Default Setting
// 
// Default value for the Device Specific Initialization (DSI) bit in the Power Management Capabilities Register. Function 
// 18.
`define DEV_SPEC_INIT_18 1'h0


// Name:           AUX_CURRENT_18
// Default:        375mA
// Values:         0mA (0x0), 55mA (0x1), 100mA (0x2), 160mA (0x3), 220mA (0x4), 270mA 
//                 (0x5), 320mA (0x6), 375mA (0x7)
// Enabled:        CX_NFUNC > 18
// Parameter Type: Register Default Setting
// 
// Default value for the Aux Current field in the Power Management Capabilities Register. Function 18.
`define AUX_CURRENT_18 3'h7


// Name:           DEFAULT_NO_SOFT_RESET_18
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 18
// Parameter Type: Register Default Setting
// 
// Default value for the No Soft Reset bit in the Power Management Control and Status Register. When set, you should not 
// reset any controller registers when transitioning from D3hot to D0. Therefore, you should not assert the non_sticky_rst_n 
// and sticky_rst_n inputs. Function 18.
`define DEFAULT_NO_SOFT_RESET_18 1'h0

//-/ END:   PM CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PCI BASIC CONFIGURATION


// Name:           CX_DEVICE_ID_18
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 18
// Parameter Type: Register Default Setting
// 
// Default value for the Device ID field in the Device ID and Vendor ID Register. Function 18.
`define CX_DEVICE_ID_18 16'h0


// Name:           CX_VENDOR_ID_18
// Default:        0x16c3
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 18
// Parameter Type: Register Default Setting
// 
// Default value for the Vendor ID field in the Device ID and Vendor ID Register. Function 18.
`define CX_VENDOR_ID_18 16'h16c3


// Name:           CX_REVISION_ID_18
// Default:        0x1
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 18
// Parameter Type: Register Default Setting
// 
// Default value for the Revision ID field in the Revision ID Register. Function 18.
`define CX_REVISION_ID_18 8'h1


// Name:           SUBSYS_DEV_ID_18
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 18
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 18.
`define SUBSYS_DEV_ID_18 16'h0


// Name:           SUBSYS_VENDOR_ID_18
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 18
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem Vendor ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 18.
`define SUBSYS_VENDOR_ID_18 16'h0


// Name:           BASE_CLASS_CODE_18
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 18
// Parameter Type: Register Default Setting
// 
// Default value for the Base Class Code field in the Class Code Register. Function 18.
`define BASE_CLASS_CODE_18 8'h0


// Name:           SUB_CLASS_CODE_18
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 18
// Parameter Type: Register Default Setting
// 
// Default value for the Subclass Code field in the Class Code Register. Function 18.
`define SUB_CLASS_CODE_18 8'h0


// Name:           IF_CODE_18
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 18
// Parameter Type: Register Default Setting
// 
// Default value for the Programming Interface field in the Class Code Register. Function 18.
`define IF_CODE_18 8'h0


// Name:           CARDBUS_CIS_PTR_18
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 18
// Parameter Type: Register Default Setting
// 
// Default value for the CardBus CIS Pointer Register. Function 18.
`define CARDBUS_CIS_PTR_18 16'h0


// Name:           INT_PIN_MAPPING_18
// Default:        INTA
// Values:         None (0x0), INTA (0x1), INTB (0x2), INTC (0x3), INTD (0x4)
// Enabled:        CX_NFUNC > 18
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Pin Register. Function 18.
`define INT_PIN_MAPPING_18 8'h1


// Name:           IO_DECODE_32_18
// Default:        16-bit
// Values:         16-bit (0x0), 32-bit (0x1)
// Enabled:        CX_NFUNC > 18
// Parameter Type: Register Default Setting
// 
// Default value for the 32-Bit I/O Space bit in the I/O Base and I/O Limit Register. Function 18.
`define IO_DECODE_32_18 1'h0


// Name:           MEM_DECODE_64_18
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x1)
// Enabled:        CX_NFUNC > 18
// Parameter Type: Register Default Setting
// 
// Default value for the 64-Bit Memory Addressing bit in the Prefetchable Memory Base and Limit Register. Function 18.
`define MEM_DECODE_64_18 1'h0


// Name:           ROM_BAR_ENABLED_18
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 18
// Parameter Type: Register Default Setting
// 
// Include the expansion ROM BAR registers. Function 18.
`define ROM_BAR_ENABLED_18 1'h1


`define DEFAULT_ROM_BAR_ENABLED_18 1'h1


// Name:           ROM_MASK_18
// Default:        0xffff
// Values:         0x7ff, ..., 0xffffff
// Enabled:        CX_NFUNC > 18 && ROM_BAR_ENABLED_18==1
// Parameter Type: Register Default Setting
// 
// Determines the default of the Expansion ROM BAR Mask register. Function 18. 
//  - The BAR Mask register specifies which bits of the Expansion ROM BAR are non-writable by host software, which 
//  determines the size of the BAR. 
//  - The maximum value for ROM_MASK_N is 0xFFFFFF because the maximum space that can be claimed by an Expansion ROM BAR 
//  is 16 MB. 
//  - For example: 32'hFFFF =BAR size of 2^16.
`define ROM_MASK_18 32'hffff


// Name:           ROM_MASK_WRITABLE_18
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 18 && ROM_BAR_ENABLED_18==1
// Parameter Type: Feature Setting
// 
// Determines if the Expansion ROM BAR Mask register for function 18 is writable by application software. If writing to a 
// Expansion ROM BAR Mask register is enabled, your application can write to the Expansion ROM BAR Mask register through the 
// DBI by asserting dbi_cs2 in addition to dbi_cs.
`define ROM_MASK_WRITABLE_18 1'h0


// Name:           ROM_FUNC18_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 18 && ROM_BAR_ENABLED_18==1 && TRGT1_POPULATE==1))
// Parameter Type: Register Default Setting
// 
// Direct incoming requests that pass filtering and match the Expansion ROM BAR of function 18 to either RTRGT0 or RTRGT1. 
//  - For example, setting ROM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for the Expansion ROM BAR of function 
//  0 to RTRGT1. 
//  - If TRGT1_POPULATE =0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define ROM_FUNC18_TARGET_MAP 1'h1


// Name:           CX_PCI_HEADER_DEFAULTS_VISIBLE_18
// Default:        0
// Values:         0, 1
// Parameter Type: Register Default Setting
// 
// Select here if you want to configure the defaults for the other PCI Standard Header registers for function 18. 
//  An extra window will appear under this page. To access it, click the plus/minus symbol in the hierarchy view on the 
//  left panel. 
//  This is optional but not usually recommended. 
//  You can also change these register defaults using the DBI before (or after) the link comes up.
`define CX_PCI_HEADER_DEFAULTS_VISIBLE_18 0

//-/ END:   PCI BASIC CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: BAR CONFIGURATION


// Name:           BAR0_ENABLED_18
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 18
// Parameter Type: Feature Setting
// 
// Include the BAR0 registers for function 18.
`define BAR0_ENABLED_18 1'h1


`define DEFAULT_BAR0_ENABLED_18 1'h1


// Name:           MEM0_SPACE_DECODER_18
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 18 && BAR0_ENABLED_18==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 18.
`define MEM0_SPACE_DECODER_18 1'h0


// Name:           PREFETCHABLE0_18
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 18 && BAR0_ENABLED_18==1 && MEM0_SPACE_DECODER_18==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 18.
`define PREFETCHABLE0_18 1'h0


// Name:           BAR0_TYPE_18
// Default:        64-bit ((MEM0_SPACE_DECODER_18==1 || BAR0_ENABLED_18==0) ? 0 : 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 18 && BAR0_ENABLED_18==1 && MEM0_SPACE_DECODER_18==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 18.
`define BAR0_TYPE_18 2'h2


// Name:           BAR0_SIZING_SCHEME_18
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 18 && BAR0_ENABLED_18==1
// Parameter Type: Feature Setting
// 
// BAR0 Function 18 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR0_SIZING_SCHEME_18 2'h0


// Name:           CX_BAR0_RESIZABLE_18
// Default:        0x0 ((BAR0_SIZING_SCHEME_18==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR0_ENABLED_18==1) && (MEM0_SPACE_DECODER_18==0)
// Parameter Type: Feature Setting
// 
// Defines BAR0 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR0 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR0_RESIZABLE_18 1'h0


// Name:           CX_BAR0_RESOURCE_AVAIL_18
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 18 && CX_BAR0_RESIZABLE_18==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR0 of function 18. 
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
// Example: 0x00000030 indicates that BAR0 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR0_RESOURCE_AVAIL_18 64'h10


// Name:           BAR0_MASK_WRITABLE_18
// Default:        0x0 ((BAR0_ENABLED_18==1 && BAR0_SIZING_SCHEME_18 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 18 && BAR0_ENABLED_18==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR0 Mask through DBI
`define BAR0_MASK_WRITABLE_18 1'h0


// Name:           BAR0_MASK_18
// Default:        0xfffff (CX_BAR0_RESIZABLE_18==1 ? [calc_bar_mask 
//                 CX_BAR0_RESOURCE_AVAIL_18] : MEM0_SPACE_DECODER_18==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 18 && BAR0_ENABLED_18==1 && MEM0_SPACE_DECODER_18==0 && 
//                 CX_BAR0_RESIZABLE_18==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR0 Mask register of function 18. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR0_MASK_18 64'hfffff


// Name:           MEM_FUNC18_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 18 && BAR0_ENABLED_18==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_0 of function 18 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming Requests for BAR0 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC18_BAR0_TARGET_MAP 1'h1


// Name:           BAR1_ENABLED_18
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 18 && BAR0_TYPE_18==0
// Parameter Type: Feature Setting
// 
// Include the BAR1 registers for function 18.
`define BAR1_ENABLED_18 1'h0


`define DEFAULT_BAR1_ENABLED_18 1'h0


// Name:           MEM1_SPACE_DECODER_18
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 18 && BAR1_ENABLED_18==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 18.
`define MEM1_SPACE_DECODER_18 1'h0


// Name:           PREFETCHABLE1_18
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 18 && BAR1_ENABLED_18==1 && MEM1_SPACE_DECODER_18==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 18.
`define PREFETCHABLE1_18 1'h0


// Name:           BAR1_TYPE_18
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 18.
`define BAR1_TYPE_18 2'h0


// Name:           BAR1_SIZING_SCHEME_18
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 18 && BAR1_ENABLED_18==1
// Parameter Type: Feature Setting
// 
// BAR1 Function 18 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR1_SIZING_SCHEME_18 2'h0


// Name:           CX_BAR1_RESIZABLE_18
// Default:        0x0 ((BAR1_SIZING_SCHEME_18==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR1_ENABLED_18==1) && (MEM1_SPACE_DECODER_18==0)
// Parameter Type: Feature Setting
// 
// Defines BAR1 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR1 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR1_RESIZABLE_18 1'h0


// Name:           CX_BAR1_RESOURCE_AVAIL_18
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 18 && CX_BAR1_RESIZABLE_18==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR1 of function 18. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR1 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR1_RESOURCE_AVAIL_18 32'h10


// Name:           BAR1_MASK_WRITABLE_18
// Default:        0x0 ((BAR1_ENABLED_18==1 && BAR1_SIZING_SCHEME_18 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 18 && BAR1_ENABLED_18==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR1 Mask through DBI
`define BAR1_MASK_WRITABLE_18 1'h0


// Name:           BAR1_MASK_18
// Default:        0xffff (CX_BAR1_RESIZABLE_18==1 ? [calc_bar_mask 
//                 CX_BAR1_RESOURCE_AVAIL_18] : MEM1_SPACE_DECODER_18==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 18 && BAR1_ENABLED_18==1 && MEM1_SPACE_DECODER_18==0 && 
//                 CX_BAR1_RESIZABLE_18==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR1 Mask register of function 18. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR1_MASK_18 32'hffff


// Name:           MEM_FUNC18_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 18 && BAR1_ENABLED_18==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_1 of function 18 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR1_TARGET_MAP to 1 maps all incoming Requests for BAR1 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC18_BAR1_TARGET_MAP 1'h1


// Name:           BAR2_ENABLED_18
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 18
// Parameter Type: Feature Setting
// 
// Include the BAR2 registers for function 18.
`define BAR2_ENABLED_18 1'h1


`define DEFAULT_BAR2_ENABLED_18 1'h1


// Name:           MEM2_SPACE_DECODER_18
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 18 && BAR2_ENABLED_18==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 18.
`define MEM2_SPACE_DECODER_18 1'h0


// Name:           PREFETCHABLE2_18
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 18 && BAR2_ENABLED_18==1 && MEM2_SPACE_DECODER_18==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 18.
`define PREFETCHABLE2_18 1'h0


// Name:           BAR2_TYPE_18
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 18 && BAR2_ENABLED_18==1 && MEM2_SPACE_DECODER_18==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 18.
`define BAR2_TYPE_18 2'h0


// Name:           BAR2_SIZING_SCHEME_18
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 18 && BAR2_ENABLED_18==1
// Parameter Type: Feature Setting
// 
// BAR2 Function 18 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR2_SIZING_SCHEME_18 2'h0


// Name:           CX_BAR2_RESIZABLE_18
// Default:        0x0 ((BAR2_SIZING_SCHEME_18==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR2_ENABLED_18==1) && (MEM2_SPACE_DECODER_18==0)
// Parameter Type: Feature Setting
// 
// Defines BAR2 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR2 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR2_RESIZABLE_18 1'h0


// Name:           CX_BAR2_RESOURCE_AVAIL_18
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 18 && CX_BAR2_RESIZABLE_18==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR2 of function 18. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR2 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR2_RESOURCE_AVAIL_18 64'h10


// Name:           BAR2_MASK_WRITABLE_18
// Default:        0x0 ((BAR2_ENABLED_18==1 && BAR2_SIZING_SCHEME_18 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 18 && BAR2_ENABLED_18==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR2 Mask through DBI
`define BAR2_MASK_WRITABLE_18 1'h0


// Name:           BAR2_MASK_18
// Default:        0xfffff (CX_BAR2_RESIZABLE_18==1 ? [calc_bar_mask 
//                 CX_BAR2_RESOURCE_AVAIL_18] : MEM2_SPACE_DECODER_18==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 18 && BAR2_ENABLED_18==1 && MEM2_SPACE_DECODER_18==0 && 
//                 CX_BAR2_RESIZABLE_18==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR2 Mask register of function 18. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR2_MASK_18 64'hfffff


// Name:           MEM_FUNC18_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 18 && BAR2_ENABLED_18==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_2 of function 18 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR2_TARGET_MAP to 1 maps all incoming requests for BAR2 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC18_BAR2_TARGET_MAP 1'h1


// Name:           BAR3_ENABLED_18
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 18 && BAR2_TYPE_18==0
// Parameter Type: Feature Setting
// 
// Include the BAR3 registers for function 18.
`define BAR3_ENABLED_18 1'h0



`define DEFAULT_BAR3_ENABLED_18 1'h0


// Name:           MEM3_SPACE_DECODER_18
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 18 && BAR3_ENABLED_18==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 18.
`define MEM3_SPACE_DECODER_18 1'h0


// Name:           PREFETCHABLE3_18
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 18 && BAR3_ENABLED_18==1 && MEM3_SPACE_DECODER_18==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 18.
`define PREFETCHABLE3_18 1'h0


// Name:           BAR3_TYPE_18
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 18.
`define BAR3_TYPE_18 2'h0


// Name:           BAR3_SIZING_SCHEME_18
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 18 && BAR3_ENABLED_18==1
// Parameter Type: Feature Setting
// 
// BAR3 Function 18 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR3_SIZING_SCHEME_18 2'h0


// Name:           CX_BAR3_RESIZABLE_18
// Default:        0x0 ((BAR3_SIZING_SCHEME_18==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR3_ENABLED_18==1) && (MEM3_SPACE_DECODER_18==0)
// Parameter Type: Feature Setting
// 
// Defines BAR3 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR3 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR3_RESIZABLE_18 1'h0


// Name:           CX_BAR3_RESOURCE_AVAIL_18
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 18 && CX_BAR3_RESIZABLE_18==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR3 of function 18. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR3 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR3_RESOURCE_AVAIL_18 32'h10


// Name:           BAR3_MASK_WRITABLE_18
// Default:        0x0 ((BAR3_ENABLED_18==1 && BAR3_SIZING_SCHEME_18 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 18 && BAR3_ENABLED_18==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR3 Mask through DBI
`define BAR3_MASK_WRITABLE_18 1'h0


// Name:           BAR3_MASK_18
// Default:        0xffff (CX_BAR3_RESIZABLE_18==1 ? [calc_bar_mask 
//                 CX_BAR3_RESOURCE_AVAIL_18] : MEM3_SPACE_DECODER_18==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 18 && BAR3_ENABLED_18==1 && MEM3_SPACE_DECODER_18==0 && 
//                 CX_BAR3_RESIZABLE_18==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR3 Mask register of function 18. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR3_MASK_18 32'hffff


// Name:           MEM_FUNC18_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 18 && BAR3_ENABLED_18==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_3 of function 18 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR3_TARGET_MAP to 1 maps all incoming requests for BAR3 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC18_BAR3_TARGET_MAP 1'h1


// Name:           BAR4_ENABLED_18
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 18
// Parameter Type: Feature Setting
// 
// Include the BAR4 registers for function 18.
`define BAR4_ENABLED_18 1'h1


`define DEFAULT_BAR4_ENABLED_18 1'h1



// Name:           MEM4_SPACE_DECODER_18
// Default:        I/O (BAR4_ENABLED_18==1)
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 18 && BAR4_ENABLED_18==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 18.
`define MEM4_SPACE_DECODER_18 1'h1


// Name:           PREFETCHABLE4_18
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 18 && BAR4_ENABLED_18==1 && MEM4_SPACE_DECODER_18==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 18.
`define PREFETCHABLE4_18 1'h0


// Name:           BAR4_TYPE_18
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 18 && BAR4_ENABLED_18==1 && MEM4_SPACE_DECODER_18==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 18.
`define BAR4_TYPE_18 2'h0


// Name:           BAR4_SIZING_SCHEME_18
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 18 && BAR4_ENABLED_18==1
// Parameter Type: Feature Setting
// 
// BAR4  Function 18 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR4_SIZING_SCHEME_18 2'h0


// Name:           CX_BAR4_RESIZABLE_18
// Default:        0x0 ((BAR4_SIZING_SCHEME_18==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR4_ENABLED_18==1) && (MEM4_SPACE_DECODER_18==0)
// Parameter Type: Feature Setting
// 
// Defines BAR4 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR4 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR4_RESIZABLE_18 1'h0


// Name:           CX_BAR4_RESOURCE_AVAIL_18
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 18 &&  CX_BAR4_RESIZABLE_18==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR4 of function 18. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR4 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR4_RESOURCE_AVAIL_18 64'h10


// Name:           BAR4_MASK_WRITABLE_18
// Default:        0x0 ((BAR4_ENABLED_18==1 && BAR4_SIZING_SCHEME_18 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 18 && BAR4_ENABLED_18==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR4 Mask through DBI
`define BAR4_MASK_WRITABLE_18 1'h0


// Name:           BAR4_MASK_18
// Default:        0xff (CX_BAR4_RESIZABLE_18==1 ? [calc_bar_mask 
//                 CX_BAR4_RESOURCE_AVAIL_18] : MEM4_SPACE_DECODER_18==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 18 && BAR4_ENABLED_18==1 && MEM4_SPACE_DECODER_18==0 && 
//                 CX_BAR4_RESIZABLE_18==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR4 Mask register of function 18. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR4_MASK_18 64'hff


// Name:           MEM_FUNC18_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 18 && BAR4_ENABLED_18==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_4 of function 18 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR4_TARGET_MAP to 1 maps all incoming requests for BAR4 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC18_BAR4_TARGET_MAP 1'h1


// Name:           BAR5_ENABLED_18
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 18 && BAR4_TYPE_18==0
// Parameter Type: Feature Setting
// 
// Include the BAR5 registers for function 18.
`define BAR5_ENABLED_18 1'h0


`define DEFAULT_BAR5_ENABLED_18 1'h0


// Name:           MEM5_SPACE_DECODER_18
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 18 && BAR5_ENABLED_18==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 18.
`define MEM5_SPACE_DECODER_18 1'h0


// Name:           PREFETCHABLE5_18
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 18 && BAR5_ENABLED_18==1 && MEM5_SPACE_DECODER_18==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 18.
`define PREFETCHABLE5_18 1'h0


// Name:           BAR5_TYPE_18
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 18.
`define BAR5_TYPE_18 2'h0


// Name:           BAR5_SIZING_SCHEME_18
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 18 && BAR5_ENABLED_18==1
// Parameter Type: Feature Setting
// 
// BAR5  Function 18 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR5_SIZING_SCHEME_18 2'h0


// Name:           CX_BAR5_RESIZABLE_18
// Default:        0x0 ((BAR5_SIZING_SCHEME_18==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR5_ENABLED_18==1) && (MEM5_SPACE_DECODER_18==0)
// Parameter Type: Feature Setting
// 
// Defines BAR5 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR5 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR5_RESIZABLE_18 1'h0


// Name:           CX_BAR5_RESOURCE_AVAIL_18
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 18 && CX_BAR5_RESIZABLE_18==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR5 of function 18. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR5 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR5_RESOURCE_AVAIL_18 32'h10


// Name:           BAR5_MASK_WRITABLE_18
// Default:        0x0 ((BAR5_ENABLED_18==1 && BAR5_SIZING_SCHEME_18 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 18 && BAR5_ENABLED_18==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR5 Mask through DBI
`define BAR5_MASK_WRITABLE_18 1'h0


// Name:           BAR5_MASK_18
// Default:        0xffff (CX_BAR5_RESIZABLE_18==1 ? [calc_bar_mask 
//                 CX_BAR5_RESOURCE_AVAIL_18] : MEM5_SPACE_DECODER_18==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 18 && BAR5_ENABLED_18==1 && MEM5_SPACE_DECODER_18==0 && 
//                 CX_BAR5_RESIZABLE_18==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR5 Mask register of function 18. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR5_MASK_18 32'hffff


// Name:           MEM_FUNC18_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 18 && BAR5_ENABLED_18==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_5 of function 18 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR5_TARGET_MAP to 1 maps all incoming requests for BAR5 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC18_BAR5_TARGET_MAP 1'h1


`define FUNC18_BARSIZE_32 128'h0


`define FUNC18_BARSIZE 128'h0


`define FUNC18_BAR0_BARSIZE_TRGT1 128'h0


`define FUNC18_BAR2_BARSIZE_TRGT1 128'h0


`define FUNC18_BAR4_BARSIZE_TRGT1 128'h0


`define FUNC18_BAR0_TRGT1_ADDR_WIDTH 1


`define FUNC18_BAR2_TRGT1_ADDR_WIDTH 1


`define FUNC18_BAR4_TRGT1_ADDR_WIDTH 1


// Name:         CX_NUM_RBARS_18
// Default:      0 ([calc_num_rbars CX_BAR0_RESIZABLE_18 CX_BAR1_RESIZABLE_18 
//               CX_BAR2_RESIZABLE_18 CX_BAR3_RESIZABLE_18 CX_BAR4_RESIZABLE_18 
//               CX_BAR5_RESIZABLE_18])
// Values:       -2147483648, ..., 2147483647
// 
// Number of resizable BARs
`define CX_NUM_RBARS_18 0

//-/ END:   BAR CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SR-IOV CAPABILITIES CONFIGURATION


// Name:           CX_VF_DEPENDENCY_LINK_18
// Default:        0x18
// Values:         0x0, ..., 0xff
// Enabled:        CX_VF_DEPENDENCY_LINK_SUPP && (CX_NFUNC > 18) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Specifies the 8-bit VF dependency link for PF18. Valid only if CX_VF_DEPENDENCY_LINK_SUPP=1.
`define CX_VF_DEPENDENCY_LINK_18 8'h18


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER1_18
// Default:        0x2 ((CX_NFUNC>=17) ? 32 : (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : 
//                 (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF18 in an ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER1_18 16'h2


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER0_18
// Default:        0x100
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF18 
//  in a non-ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER0_18 16'h100


// Name:           VF_STRIDE_ARI_CAP_HIER1_18
// Default:        0x2 (CX_VF_STRIDE_ALWAYS_ONE) ? 1 : ((CX_NFUNC>=17) ? 32 : 
//                 (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF18 in an ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER1_18 16'h2


// Name:           VF_STRIDE_ARI_CAP_HIER0_18
// Default:        0x100 ((CX_VF_STRIDE_ALWAYS_ONE) ? 0x0001 : 0x0100)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF18 in a non-ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER0_18 16'h100


// Name:           CX_VF_DEVICE_ID_18
// Default:        0x0 (CX_DEVICE_ID_18)
// Values:         0x0, ..., 0xffff
// Enabled:        (CX_NFUNC > 18) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 16-bit virtual function Device ID for PF18. 
//  It might be different from the physical function's.
`define CX_VF_DEVICE_ID_18 16'h0


// Name:           CX_VF_SUPP_PAGE_SIZE_18
// Default:        0x553
// Values:         0x553, ..., 0xffff
// Enabled:        (CX_NFUNC > 18) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 32-bit supported page sizes for virtual functions for PF18
`define CX_VF_SUPP_PAGE_SIZE_18 32'h553


// Name:           CX_ARI_CAP_HIER_PRSVD_18
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Specifies if ARI Capable Hierarchy bit is preserved across certain power state transitions 
//  Only present in PF0. Read Only Zero in this PF18.
`define CX_ARI_CAP_HIER_PRSVD_18 1'h0

//-/===========================================
//-/ START: VF BAR CONFIGURATION


// Name:           VF_BAR0_ENABLED_18
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 18)
// Parameter Type: Feature Setting
// 
// Include the VF BAR0 registers in PF18
`define VF_BAR0_ENABLED_18 1'h1


`define VF_DEFAULT_BAR0_ENABLED_18 1'h1


// Name:           VF_MEM0_SPACE_DECODER_18
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR0_ENABLED_18 && CX_SRIOV_ENABLE && (CX_NFUNC > 18)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Space Indicator 
//  ALWAYS set to Memory for Virtual Functions
`define VF_MEM0_SPACE_DECODER_18 1'h0


// Name:           VF_PREFETCHABLE0_18
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_18==1 && VF_MEM0_SPACE_DECODER_18==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 18)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Prefetchable 
//  When set indicates VF BAR0 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE0_18 1'h0


// Name:           VF_BAR0_TYPE_18
// Default:        64-bit ((VF_MEM0_SPACE_DECODER_18==1 || VF_BAR0_ENABLED_18==0) ? 0 
//                 : 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR0_ENABLED_18==1 && VF_MEM0_SPACE_DECODER_18==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 18)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 18; (bits [2:1] for a memory BAR).
`define VF_BAR0_TYPE_18 2'h2


// Name:           VF_BAR0_MASK_WRITABLE_18
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_18==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 18)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR0_MASK_WRITABLE_18 1'h0


// Name:           VF_BAR0_MASK_18
// Default:        0xfffff (VF_MEM0_SPACE_DECODER_18==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR0_ENABLED_18==1 && VF_MEM0_SPACE_DECODER_18==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 18)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Mask 
//  Determines the default of the VF BAR Mask register for PF18. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR0_MASK_18 64'hfffff


// Name:           VF_MEM_FUNC18_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR0_ENABLED_18==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE 
//                 && (CX_NFUNC > 18)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF18 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC18_BAR0_TARGET_MAP 1'h1


// Name:           VF_BAR1_ENABLED_18
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        (VF_BAR0_TYPE_18==0)  && CX_SRIOV_ENABLE && (CX_NFUNC > 18)
// Parameter Type: Feature Setting
// 
// Include the VF BAR1 registers in PF18
`define VF_BAR1_ENABLED_18 1'h0


`define VF_DEFAULT_BAR1_ENABLED_18 1'h0


// Name:           VF_MEM1_SPACE_DECODER_18
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR1_ENABLED_18==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 18)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Space Indicator
`define VF_MEM1_SPACE_DECODER_18 1'h0


// Name:           VF_PREFETCHABLE1_18
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_18==1 && VF_MEM1_SPACE_DECODER_18==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 18)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Prefetchable 
//  When set indicates VF BAR1 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE1_18 1'h0


// Name:           VF_BAR1_TYPE_18
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 18; (bits [2:1] for a memory BAR).
`define VF_BAR1_TYPE_18 2'h0


// Name:           VF_BAR1_MASK_WRITABLE_18
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_18==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 18)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR1_MASK_WRITABLE_18 1'h0


// Name:           VF_BAR1_MASK_18
// Default:        0xffff (VF_MEM1_SPACE_DECODER_18==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR1_ENABLED_18==1 && VF_MEM1_SPACE_DECODER_18==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 18)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Mask 
//  Determines the default of the VF BAR Mask register for PF18. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR1_MASK_18 32'hffff


// Name:           VF_MEM_FUNC18_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR1_ENABLED_18==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE 
//                 && (CX_NFUNC > 18)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF18 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC18_BAR1_TARGET_MAP 1'h1


// Name:           VF_BAR2_ENABLED_18
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 18)
// Parameter Type: Feature Setting
// 
// Include the VF BAR2 registers in PF18
`define VF_BAR2_ENABLED_18 1'h1


`define VF_DEFAULT_BAR2_ENABLED_18 1'h1


// Name:           VF_MEM2_SPACE_DECODER_18
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR2_ENABLED_18==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 18)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Memory Space Indicator
`define VF_MEM2_SPACE_DECODER_18 1'h0


// Name:           VF_PREFETCHABLE2_18
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_18==1 && VF_MEM2_SPACE_DECODER_18==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 18)
// Parameter Type: Register Default Setting
// 
// BAR2 Memory Prefetchable 
//  When set indicates VF BAR2 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE2_18 1'h0


// Name:           VF_BAR2_TYPE_18
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR2_ENABLED_18==1 && VF_MEM2_SPACE_DECODER_18==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 18)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 18; (bits [2:1] for a memory BAR).
`define VF_BAR2_TYPE_18 2'h0


// Name:           VF_BAR2_MASK_WRITABLE_18
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_18==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 18)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR2_MASK_WRITABLE_18 1'h0


// Name:           VF_BAR2_MASK_18
// Default:        0xfffff (VF_MEM2_SPACE_DECODER_18==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR2_ENABLED_18==1 && VF_MEM2_SPACE_DECODER_18==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 18)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Mask 
//  Determines the default of the VF BAR Mask register for PF18. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR2_MASK_18 64'hfffff


// Name:           VF_MEM_FUNC18_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR2_ENABLED_18==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 18)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF18 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC18_BAR2_TARGET_MAP 1'h1


// Name:           VF_BAR3_ENABLED_18
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_TYPE_18==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 18)
// Parameter Type: Feature Setting
// 
// Include the VF BAR3 registers in PF18
`define VF_BAR3_ENABLED_18 1'h0


`define VF_DEFAULT_BAR3_ENABLED_18 1'h0


// Name:           VF_MEM3_SPACE_DECODER_18
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR3_ENABLED_18==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 18)
// Parameter Type: Register Default Setting
// 
// BAR3 Memory Space Indicator
`define VF_MEM3_SPACE_DECODER_18 1'h0


// Name:           VF_PREFETCHABLE3_18
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_18==1 && VF_MEM3_SPACE_DECODER_18==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 18)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Memory Prefetchable 
//  When set indicates VF BAR3 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE3_18 1'h0


// Name:           VF_BAR3_TYPE_18
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 18; (bits [2:1] for a memory BAR).
`define VF_BAR3_TYPE_18 2'h0


// Name:           VF_BAR3_MASK_WRITABLE_18
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_18==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 18)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR3_MASK_WRITABLE_18 1'h0


// Name:           VF_BAR3_MASK_18
// Default:        0xffff (VF_MEM3_SPACE_DECODER_18==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR3_ENABLED_18==1 && VF_MEM3_SPACE_DECODER_18==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 18)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Mask 
//  Determines the default of the VF BAR Mask register for PF18. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR3_MASK_18 32'hffff


// Name:           VF_MEM_FUNC18_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR3_ENABLED_18==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 18)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF18 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC18_BAR3_TARGET_MAP 1'h1


// Name:           VF_BAR4_ENABLED_18
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 18)
// Parameter Type: Feature Setting
// 
// Include the VF BAR4 registers in PF18
`define VF_BAR4_ENABLED_18 1'h1


`define VF_DEFAULT_BAR4_ENABLED_18 1'h1


// Name:           VF_MEM4_SPACE_DECODER_18
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR4_ENABLED_18==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 18)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Space Indicator
`define VF_MEM4_SPACE_DECODER_18 1'h0


// Name:           VF_PREFETCHABLE4_18
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_18==1 && VF_MEM4_SPACE_DECODER_18==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 18)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Prefetchable 
//  When set indicates VF BAR4 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE4_18 1'h0


// Name:           VF_BAR4_TYPE_18
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR4_ENABLED_18==1 && VF_MEM4_SPACE_DECODER_18==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 18)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 18; (bits [2:1] for a memory BAR).
`define VF_BAR4_TYPE_18 2'h0


// Name:           VF_BAR4_MASK_WRITABLE_18
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_18==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 18)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR4_MASK_WRITABLE_18 1'h0


// Name:           VF_BAR4_MASK_18
// Default:        0xfff (VF_MEM4_SPACE_DECODER_18==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR4_ENABLED_18==1 && VF_MEM4_SPACE_DECODER_18==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 18)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Mask 
//  Determines the default of the VF BAR Mask register for PF18. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR4_MASK_18 64'hfff


// Name:           VF_MEM_FUNC18_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR4_ENABLED_18==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 18)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF18 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC18_BAR4_TARGET_MAP 1'h1


// Name:           VF_BAR5_ENABLED_18
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_TYPE_18==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 18)
// Parameter Type: Feature Setting
// 
// Include the VF BAR5 registers in PF18
`define VF_BAR5_ENABLED_18 1'h0


`define VF_DEFAULT_BAR5_ENABLED_18 1'h0


// Name:           VF_MEM5_SPACE_DECODER_18
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR5_ENABLED_18==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 18)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Space Indicator
`define VF_MEM5_SPACE_DECODER_18 1'h0


// Name:           VF_PREFETCHABLE5_18
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_18==1 && VF_MEM5_SPACE_DECODER_18==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 18)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Prefetchable 
//  When set indicates VF BAR5 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE5_18 1'h0


// Name:           VF_BAR5_TYPE_18
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 18; (bits [2:1] for a memory BAR).
`define VF_BAR5_TYPE_18 2'h0


// Name:           VF_BAR5_MASK_WRITABLE_18
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_18==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 18)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR5_MASK_WRITABLE_18 1'h0


// Name:           VF_BAR5_MASK_18
// Default:        0xffff (VF_MEM5_SPACE_DECODER_18==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR5_ENABLED_18==1 && VF_MEM5_SPACE_DECODER_18==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 18)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Mask 
//  Determines the default of the VF BAR Mask register for PF18. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR5_MASK_18 32'hffff


// Name:           VF_MEM_FUNC18_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR5_ENABLED_18==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 18)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF18 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC18_BAR5_TARGET_MAP 1'h1


`define VF_FUNC18_BARSIZE_32 128'h101000


`define VF_FUNC18_BARSIZE 128'h201000

//-/ END:   VF BAR CONFIGURATION
//-/===========================================

//-/ END:   SR-IOV CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: TPH CAPABILITIES CONFIGURATION


// Name:           TPH_IVEC_18
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Interrupt Vector Mode. If set indicates that the function supports the Interrupt Vector 
// Mode of operation. Function 18.
`define TPH_IVEC_18 1'h0


// Name:           TPH_DS_18
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Device Specific Mode. If set indicates that the function supports the Device Specific Mode 
// of operation. Function 18.
`define TPH_DS_18 1'h0


// Name:           TPH_ST_TABLE_LOC_18
// Default:        Not Present
// Values:         Not Present (0), TPH Requester Capability Structure (1), MSI-X 
//                 Table Structure (2)
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_DS_18 || TPH_IVEC_18))
// Parameter Type: Feature Setting
// 
// TLP Processing Hints Steering Tag Table Location. Value indicates if and where the ST Table is located. Function 18.
`define TPH_ST_TABLE_LOC_18 0

//located in the TPH Requester Capability structure. Please reduce the ST Table Size for this mode of operation"

// Name:           TPH_ST_TABLE_SIZE_18
// Default:        1
// Values:         1, ..., 2048
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_ST_TABLE_LOC_18 != 0))
// Parameter Type: Feature Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define TPH_ST_TABLE_SIZE_18 1


`define TPH_ST_TABLE_DEPTH_18 0

//-/ END:   TPH CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: ATS CAPABILITIES CONFIGURATION


// Name:           ATS_INV_Q_DPTH_18
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// The number of Invalidate Requests that the Function can accept before putting backpressure on the upstream connection. A 
// value of 0 indicates the function can accept 32 Invalidate requests. Function 18.
`define ATS_INV_Q_DPTH_18 5'd0


// Name:           ATS_STU_18
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// This value indicates to the Function the minimum number of 4096-byte blocks that is indicated in a Translation 
// Completion or Invalidate Request. This is a power of 2 multiplier and the number of blocks is 2^STU. A value of 0 indicates 1 block 
// and a value of 31 indicates 2^31 blocks (or 8 TB total). Function 18.
`define ATS_STU_18 5'd0

//-/ END:   ATS CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PRS CAPABILITIES CONFIGURATION


// Name:           CX_PRS_OUTSTANDING_CAPACITY_VALUE_18
// Default:        0x1
// Values:         0x0, ..., 0xffffffff
// Enabled:        (CX_PRS_ENABLE==1) && (CX_NFUNC > 18)
// Parameter Type: Register Default Setting
// 
// Register default for PRS Outstanding Capacity in PF18. 
// For more details, see the PRS_OUTSTANDING_CAPACITY field in the PRS_REQ_CAPACITY_REG register.
`define CX_PRS_OUTSTANDING_CAPACITY_VALUE_18 32'h1

//-/ END:   PRS CAPABILITIES CONFIGURATION
//-/===========================================


//-/===========================================
//--- START: RN


// Name:           CX_RN_IMM_VALUE_18
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 18)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for PF18.
`define CX_RN_IMM_VALUE_18 1'h0


// Name:           CX_RN_IMM_D0_VALUE_18
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 18)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for PF18.
`define CX_RN_IMM_D0_VALUE_18 1'h0


// Name:           CX_RN_FRS_VALUE_18
// Default:        0x0 (CX_RN_FRS_SUPPORTED==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_FRS_SUPPORTED==1) && (CX_NFUNC > 18)
// Parameter Type: Feature Setting
// 
// Function Readiness Status messaging supported for function PF18.
`define CX_RN_FRS_VALUE_18 1'h0


// Name:           CX_RN_RTR_VALID_18
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 18)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF18.
`define CX_RN_RTR_VALID_18 1'h0


// Name:           CX_RN_RTR_DL_UP_VALUE_18
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 18)
// Parameter Type: Register Default Setting
// 
// Register default for RTR DL Up Time field in PF18.
`define CX_RN_RTR_DL_UP_VALUE_18 12'h0


// Name:           CX_RN_RTR_RESET_VALUE_18
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 18)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF18.
`define CX_RN_RTR_RESET_VALUE_18 12'h0


// Name:           CX_RN_RTR_D3D0_VALUE_18
// Default:        0x0
// Values:         0x0, ..., 0x80a
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 18)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF18.
`define CX_RN_RTR_D3D0_VALUE_18 12'h0


// Name:           CX_RN_RTR_FLR_VALUE_18
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_FLR_ENABLE==1) && (CX_NFUNC > 18)
// Parameter Type: Register Default Setting
// 
// Register default for RTR FLR Time field in PF18.
`define CX_RN_RTR_FLR_VALUE_18 12'h0


// Name:           VF_RN_IMM_VALUE_18
// Default:        0x0 (CX_RN_IMM_VALUE_18 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 18))
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for VFs in PF18.
`define VF_RN_IMM_VALUE_18 1'h0


// Name:           VF_RN_IMM_D0_VALUE_18
// Default:        0x0 (CX_RN_IMM_D0_VALUE_18 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 18))
// Parameter Type: Register Default Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for VFs in PF18.
`define VF_RN_IMM_D0_VALUE_18 1'h0


// Name:           VF_RN_RTR_VALID_18
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 18) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF18 VFs.
`define VF_RN_RTR_VALID_18 1'h0


// Name:           VF_RN_RTR_RESET_VALUE_18
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_18)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 18) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF18 VFS.
`define VF_RN_RTR_RESET_VALUE_18 12'h0


// Name:           VF_RN_RTR_D3D0_VALUE_18
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_18)
// Values:         0x0, ..., 0x80a
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 18) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF18 VFS.
`define VF_RN_RTR_D3D0_VALUE_18 12'h0


// Name:           VF_RN_RTR_FLR_VALUE_18
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_18)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 18) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF18 VFs.
`define VF_RN_RTR_FLR_VALUE_18 12'h0


// Name:           EXT_VF_RN_RTR_VALID_18
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 18) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF18 VFs.
`define EXT_VF_RN_RTR_VALID_18 1'h0


// Name:           EXT_VF_RN_RTR_RESET_VALUE_18
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_18)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 18) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF18 VFS.
`define EXT_VF_RN_RTR_RESET_VALUE_18 12'h0


// Name:           EXT_VF_RN_RTR_D3D0_VALUE_18
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_18)
// Values:         0x0, ..., 0x80a
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 18) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF18 VFS.
`define EXT_VF_RN_RTR_D3D0_VALUE_18 12'h0


// Name:           EXT_VF_RN_RTR_FLR_VALUE_18
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_18)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 18) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF18 VFs.
`define EXT_VF_RN_RTR_FLR_VALUE_18 12'h0

//-/ END:   RN
//-/===========================================

//-/ START: LN CAPABILITIES CONFIGURATION
//-/===========================================


// Name:           CX_LN_REG_MAX_VALUE_18
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 18))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_64_SUPPORTED field in the LNR_CAP_OFF register for PF18.
`define CX_LN_REG_MAX_VALUE_18 5'h0


// Name:           CX_LN_128_SUPPORTED_VALUE_18
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 18))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_128_SUPPORTED field in the LNR_CAP_OFF register for PF18.
`define CX_LN_128_SUPPORTED_VALUE_18 1'h0


// Name:           CX_LN_64_SUPPORTED_VALUE_18
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 18))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_REGISTRATION_MAX field in the LNR_CAP_OFF register for PF18.
`define CX_LN_64_SUPPORTED_VALUE_18 1'h0

//-/ END:   LN CAPABILITIES CONFIGURATION
//-/===========================================




//-/==========================================
//-/ End FUNC18 Config
//-/==========================================

//-/===========================================
//-/ Function 19 Configuration Registers
//-/ ==========================================


// Name:         FUNC_19
// Default:      0 ((CX_NFUNC > 19) ? 1 : 0)
// Values:       0, 1
// 
// This parameter indicates that Function 19 is present
// `define FUNC_19

//-/===========================================
//-/ START: PCI-E CAPABILITIES CONFIGURATION


// Name:           PCIE_CAP_INT_MSG_NUM_19
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 19
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Message Number field in the PCI Express Capabilities Register. Function 19.
`define PCIE_CAP_INT_MSG_NUM_19 5'h0


// Name:           SLOT_IMPLEMENTED_19
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_NFUNC > 19))
// Parameter Type: Register Default Setting
// 
// Indicates that the PCI Express link associated with this Port is connected to a slot. Function 19.
`define SLOT_IMPLEMENTED_19 1'h0


// Name:           DEFAULT_PHANTOM_FUNC_SUPPORTED_19
// Default:        0x0
// Values:         0x0, ..., 0x3
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_PHANTOM_FUNC_SUPPORTED_19 2'h0


// Name:           DEFAULT_EXT_TAG_FIELD_SUPPORTED_19
// Default:        0x0 (DEFAULT_EXT_TAG_FIELD_SUPPORTED_0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 19
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_EXT_TAG_FIELD_SUPPORTED_19 1'h0



// Name:           DEFAULT_ATT_BUTT_PRE_19
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 19
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Button is present
`define DEFAULT_ATT_BUTT_PRE_19 1'h0


// Name:           DEFAULT_ATT_IND_PRE_19
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 19
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Indicator is present
`define DEFAULT_ATT_IND_PRE_19 1'h0


// Name:           DEFAULT_PWR_IND_PRE_19
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 19
// Parameter Type: Register Default Setting
// 
// When set indicates that a Power Indicator is present
`define DEFAULT_PWR_IND_PRE_19 1'h0


// Name:           DEFAULT_NO_SNOOP_SUPPORTED_19
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 19
// Parameter Type: Register Default Setting
// 
// Default value for the Enable No Snoop bit in the Device Control Register. Function 19.
`define DEFAULT_NO_SNOOP_SUPPORTED_19 1'h0


// Name:           ROOT_RCB_19
// Default:        64-bit
// Values:         64-bit (0x0), 128-bit (0x1)
// Parameter Type: Register Default Setting
// 
// Default value for the Read Completion Boundary (RCB) bit in the Link Control Register.
`define ROOT_RCB_19 1'h0


//-/ END:   PCI-E CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: MSI-X CAPABILITIES CONFIGURATION


// Name:           MSIX_TABLE_SIZE_19
// Default:        0x0
// Values:         0x0, ..., 0x7ff
// Enabled:        CX_NFUNC > 19 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the MSI-X Table Size field in the MSI-X Control Register. Function 19.
`define MSIX_TABLE_SIZE_19 11'h0


// Name:           MSIX_TABLE_BIR_19
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 19 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table BAR Indicator Register (BIR) field in the MSI-X Table Offset and BIR Register. Function 19.
`define MSIX_TABLE_BIR_19 3'h0


// Name:           MSIX_TABLE_OFFSET_19
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 19 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table Offset field in the MSI-X Table Offset and BIR Register. Function 19.
`define MSIX_TABLE_OFFSET_19 29'h0


// Name:           MSIX_PBA_BIR_19
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 19 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Pending Bit Array (PBA) BIR field in the MSI-X PBA Offset and BIR Register. Function 19.
`define MSIX_PBA_BIR_19 7'h0


// Name:           MSIX_PBA_OFFSET_19
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 19 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the PBA Offset field in the MSI-X PBA Offset and BIR Register. Function 19.
`define MSIX_PBA_OFFSET_19 29'h0

//-/ END:   MSI-X CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SATA CAPABILITIES CONFIGURATION


// Name:         SATA_HBA_OFFSET_19
// Default:      0x0
// Values:       0x0, ..., 0xfffff
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA Offset. Base address of the SATA HBA registers, 
//  as an offset from the base address of the BAR indicated 
//  by the SATA BAR field.
`define SATA_HBA_OFFSET_19 20'h0


// Name:         SATA_BAR_19
// Default:      0x0
// Values:       0x0, ..., 0xf
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA BAR. The bar that maps to SATA HBA registers,
`define SATA_BAR_19 4'h0

//-/ END:   SATA CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: AER CAPABILITIES CONFIGURATION


// Name:           DEFAULT_ECRC_CHK_CAP_19
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 19 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Check Capable bit in the Advanced Capabilities and Control Register. Function 19.
`define DEFAULT_ECRC_CHK_CAP_19 1'h1


// Name:           DEFAULT_ECRC_GEN_CAP_19
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 19 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Generation Capability bit in the Advanced Capabilities and Control Register. Function 19.
`define DEFAULT_ECRC_GEN_CAP_19 1'h1


// Name:           AER_INT_MSG_NUM_19
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Parameter Type: Register Default Setting
// 
// Default value for the Advanced Error Interrupt Message Number field of the Root Error Status Register. Function 19.
`define AER_INT_MSG_NUM_19 5'h0



// Name:           CX_HDR_LOG_DEPTH_19
// Default:        0x1
// Values:         0x1, 0x2, 0x4
// Enabled:        CX_NFUNC > 19 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Feature Setting.
// 
// Header Log Depth
`define CX_HDR_LOG_DEPTH_19 3'h1


`define CX_MULTIPLE_HDR_REC_CAP_19 1'h0

//-/ END:   AER CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PM CAPABILITIES CONFIGURATION


// Name:           PME_SUPPORT_19
// Default:        0x1b
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 19
// Parameter Type: Register Default Setting
// 
// Default value for the PME_Support field in the Power Management Capabilities Register. Function 19.
`define PME_SUPPORT_19 5'h1b


// Name:           D1_SUPPORT_19
// Default:        true
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 19
// Parameter Type: Register Default Setting
// 
// Default value for the D1 Support bit in the Power Management Capabilities Register. Function 19.
`define D1_SUPPORT_19 1'h1


// Name:           D2_SUPPORT_19
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 19
// Parameter Type: Register Default Setting
// 
// Default value for the D2 Support bit in the Power Management Capabilities Register. Function 19.
`define D2_SUPPORT_19 1'h0


// Name:           DEV_SPEC_INIT_19
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 19
// Parameter Type: Register Default Setting
// 
// Default value for the Device Specific Initialization (DSI) bit in the Power Management Capabilities Register. Function 
// 19.
`define DEV_SPEC_INIT_19 1'h0


// Name:           AUX_CURRENT_19
// Default:        375mA
// Values:         0mA (0x0), 55mA (0x1), 100mA (0x2), 160mA (0x3), 220mA (0x4), 270mA 
//                 (0x5), 320mA (0x6), 375mA (0x7)
// Enabled:        CX_NFUNC > 19
// Parameter Type: Register Default Setting
// 
// Default value for the Aux Current field in the Power Management Capabilities Register. Function 19.
`define AUX_CURRENT_19 3'h7


// Name:           DEFAULT_NO_SOFT_RESET_19
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 19
// Parameter Type: Register Default Setting
// 
// Default value for the No Soft Reset bit in the Power Management Control and Status Register. When set, you should not 
// reset any controller registers when transitioning from D3hot to D0. Therefore, you should not assert the non_sticky_rst_n 
// and sticky_rst_n inputs. Function 19.
`define DEFAULT_NO_SOFT_RESET_19 1'h0

//-/ END:   PM CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PCI BASIC CONFIGURATION


// Name:           CX_DEVICE_ID_19
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 19
// Parameter Type: Register Default Setting
// 
// Default value for the Device ID field in the Device ID and Vendor ID Register. Function 19.
`define CX_DEVICE_ID_19 16'h0


// Name:           CX_VENDOR_ID_19
// Default:        0x16c3
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 19
// Parameter Type: Register Default Setting
// 
// Default value for the Vendor ID field in the Device ID and Vendor ID Register. Function 19.
`define CX_VENDOR_ID_19 16'h16c3


// Name:           CX_REVISION_ID_19
// Default:        0x1
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 19
// Parameter Type: Register Default Setting
// 
// Default value for the Revision ID field in the Revision ID Register. Function 19.
`define CX_REVISION_ID_19 8'h1


// Name:           SUBSYS_DEV_ID_19
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 19
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 19.
`define SUBSYS_DEV_ID_19 16'h0


// Name:           SUBSYS_VENDOR_ID_19
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 19
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem Vendor ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 19.
`define SUBSYS_VENDOR_ID_19 16'h0


// Name:           BASE_CLASS_CODE_19
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 19
// Parameter Type: Register Default Setting
// 
// Default value for the Base Class Code field in the Class Code Register. Function 19.
`define BASE_CLASS_CODE_19 8'h0


// Name:           SUB_CLASS_CODE_19
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 19
// Parameter Type: Register Default Setting
// 
// Default value for the Subclass Code field in the Class Code Register. Function 19.
`define SUB_CLASS_CODE_19 8'h0


// Name:           IF_CODE_19
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 19
// Parameter Type: Register Default Setting
// 
// Default value for the Programming Interface field in the Class Code Register. Function 19.
`define IF_CODE_19 8'h0


// Name:           CARDBUS_CIS_PTR_19
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 19
// Parameter Type: Register Default Setting
// 
// Default value for the CardBus CIS Pointer Register. Function 19.
`define CARDBUS_CIS_PTR_19 16'h0


// Name:           INT_PIN_MAPPING_19
// Default:        INTA
// Values:         None (0x0), INTA (0x1), INTB (0x2), INTC (0x3), INTD (0x4)
// Enabled:        CX_NFUNC > 19
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Pin Register. Function 19.
`define INT_PIN_MAPPING_19 8'h1


// Name:           IO_DECODE_32_19
// Default:        16-bit
// Values:         16-bit (0x0), 32-bit (0x1)
// Enabled:        CX_NFUNC > 19
// Parameter Type: Register Default Setting
// 
// Default value for the 32-Bit I/O Space bit in the I/O Base and I/O Limit Register. Function 19.
`define IO_DECODE_32_19 1'h0


// Name:           MEM_DECODE_64_19
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x1)
// Enabled:        CX_NFUNC > 19
// Parameter Type: Register Default Setting
// 
// Default value for the 64-Bit Memory Addressing bit in the Prefetchable Memory Base and Limit Register. Function 19.
`define MEM_DECODE_64_19 1'h0


// Name:           ROM_BAR_ENABLED_19
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 19
// Parameter Type: Register Default Setting
// 
// Include the expansion ROM BAR registers. Function 19.
`define ROM_BAR_ENABLED_19 1'h1


`define DEFAULT_ROM_BAR_ENABLED_19 1'h1


// Name:           ROM_MASK_19
// Default:        0xffff
// Values:         0x7ff, ..., 0xffffff
// Enabled:        CX_NFUNC > 19 && ROM_BAR_ENABLED_19==1
// Parameter Type: Register Default Setting
// 
// Determines the default of the Expansion ROM BAR Mask register. Function 19. 
//  - The BAR Mask register specifies which bits of the Expansion ROM BAR are non-writable by host software, which 
//  determines the size of the BAR. 
//  - The maximum value for ROM_MASK_N is 0xFFFFFF because the maximum space that can be claimed by an Expansion ROM BAR 
//  is 16 MB. 
//  - For example: 32'hFFFF =BAR size of 2^16.
`define ROM_MASK_19 32'hffff


// Name:           ROM_MASK_WRITABLE_19
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 19 && ROM_BAR_ENABLED_19==1
// Parameter Type: Feature Setting
// 
// Determines if the Expansion ROM BAR Mask register for function 19 is writable by application software. If writing to a 
// Expansion ROM BAR Mask register is enabled, your application can write to the Expansion ROM BAR Mask register through the 
// DBI by asserting dbi_cs2 in addition to dbi_cs.
`define ROM_MASK_WRITABLE_19 1'h0


// Name:           ROM_FUNC19_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 19 && ROM_BAR_ENABLED_19==1 && TRGT1_POPULATE==1))
// Parameter Type: Register Default Setting
// 
// Direct incoming requests that pass filtering and match the Expansion ROM BAR of function 19 to either RTRGT0 or RTRGT1. 
//  - For example, setting ROM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for the Expansion ROM BAR of function 
//  0 to RTRGT1. 
//  - If TRGT1_POPULATE =0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define ROM_FUNC19_TARGET_MAP 1'h1


// Name:           CX_PCI_HEADER_DEFAULTS_VISIBLE_19
// Default:        0
// Values:         0, 1
// Parameter Type: Register Default Setting
// 
// Select here if you want to configure the defaults for the other PCI Standard Header registers for function 19. 
//  An extra window will appear under this page. To access it, click the plus/minus symbol in the hierarchy view on the 
//  left panel. 
//  This is optional but not usually recommended. 
//  You can also change these register defaults using the DBI before (or after) the link comes up.
`define CX_PCI_HEADER_DEFAULTS_VISIBLE_19 0

//-/ END:   PCI BASIC CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: BAR CONFIGURATION


// Name:           BAR0_ENABLED_19
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 19
// Parameter Type: Feature Setting
// 
// Include the BAR0 registers for function 19.
`define BAR0_ENABLED_19 1'h1


`define DEFAULT_BAR0_ENABLED_19 1'h1


// Name:           MEM0_SPACE_DECODER_19
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 19 && BAR0_ENABLED_19==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 19.
`define MEM0_SPACE_DECODER_19 1'h0


// Name:           PREFETCHABLE0_19
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 19 && BAR0_ENABLED_19==1 && MEM0_SPACE_DECODER_19==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 19.
`define PREFETCHABLE0_19 1'h0


// Name:           BAR0_TYPE_19
// Default:        64-bit ((MEM0_SPACE_DECODER_19==1 || BAR0_ENABLED_19==0) ? 0 : 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 19 && BAR0_ENABLED_19==1 && MEM0_SPACE_DECODER_19==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 19.
`define BAR0_TYPE_19 2'h2


// Name:           BAR0_SIZING_SCHEME_19
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 19 && BAR0_ENABLED_19==1
// Parameter Type: Feature Setting
// 
// BAR0 Function 19 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR0_SIZING_SCHEME_19 2'h0


// Name:           CX_BAR0_RESIZABLE_19
// Default:        0x0 ((BAR0_SIZING_SCHEME_19==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR0_ENABLED_19==1) && (MEM0_SPACE_DECODER_19==0)
// Parameter Type: Feature Setting
// 
// Defines BAR0 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR0 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR0_RESIZABLE_19 1'h0


// Name:           CX_BAR0_RESOURCE_AVAIL_19
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 19 && CX_BAR0_RESIZABLE_19==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR0 of function 19. 
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
// Example: 0x00000030 indicates that BAR0 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR0_RESOURCE_AVAIL_19 64'h10


// Name:           BAR0_MASK_WRITABLE_19
// Default:        0x0 ((BAR0_ENABLED_19==1 && BAR0_SIZING_SCHEME_19 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 19 && BAR0_ENABLED_19==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR0 Mask through DBI
`define BAR0_MASK_WRITABLE_19 1'h0


// Name:           BAR0_MASK_19
// Default:        0xfffff (CX_BAR0_RESIZABLE_19==1 ? [calc_bar_mask 
//                 CX_BAR0_RESOURCE_AVAIL_19] : MEM0_SPACE_DECODER_19==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 19 && BAR0_ENABLED_19==1 && MEM0_SPACE_DECODER_19==0 && 
//                 CX_BAR0_RESIZABLE_19==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR0 Mask register of function 19. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR0_MASK_19 64'hfffff


// Name:           MEM_FUNC19_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 19 && BAR0_ENABLED_19==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_0 of function 19 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming Requests for BAR0 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC19_BAR0_TARGET_MAP 1'h1


// Name:           BAR1_ENABLED_19
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 19 && BAR0_TYPE_19==0
// Parameter Type: Feature Setting
// 
// Include the BAR1 registers for function 19.
`define BAR1_ENABLED_19 1'h0


`define DEFAULT_BAR1_ENABLED_19 1'h0


// Name:           MEM1_SPACE_DECODER_19
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 19 && BAR1_ENABLED_19==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 19.
`define MEM1_SPACE_DECODER_19 1'h0


// Name:           PREFETCHABLE1_19
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 19 && BAR1_ENABLED_19==1 && MEM1_SPACE_DECODER_19==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 19.
`define PREFETCHABLE1_19 1'h0


// Name:           BAR1_TYPE_19
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 19.
`define BAR1_TYPE_19 2'h0


// Name:           BAR1_SIZING_SCHEME_19
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 19 && BAR1_ENABLED_19==1
// Parameter Type: Feature Setting
// 
// BAR1 Function 19 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR1_SIZING_SCHEME_19 2'h0


// Name:           CX_BAR1_RESIZABLE_19
// Default:        0x0 ((BAR1_SIZING_SCHEME_19==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR1_ENABLED_19==1) && (MEM1_SPACE_DECODER_19==0)
// Parameter Type: Feature Setting
// 
// Defines BAR1 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR1 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR1_RESIZABLE_19 1'h0


// Name:           CX_BAR1_RESOURCE_AVAIL_19
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 19 && CX_BAR1_RESIZABLE_19==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR1 of function 19. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR1 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR1_RESOURCE_AVAIL_19 32'h10


// Name:           BAR1_MASK_WRITABLE_19
// Default:        0x0 ((BAR1_ENABLED_19==1 && BAR1_SIZING_SCHEME_19 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 19 && BAR1_ENABLED_19==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR1 Mask through DBI
`define BAR1_MASK_WRITABLE_19 1'h0


// Name:           BAR1_MASK_19
// Default:        0xffff (CX_BAR1_RESIZABLE_19==1 ? [calc_bar_mask 
//                 CX_BAR1_RESOURCE_AVAIL_19] : MEM1_SPACE_DECODER_19==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 19 && BAR1_ENABLED_19==1 && MEM1_SPACE_DECODER_19==0 && 
//                 CX_BAR1_RESIZABLE_19==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR1 Mask register of function 19. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR1_MASK_19 32'hffff


// Name:           MEM_FUNC19_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 19 && BAR1_ENABLED_19==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_1 of function 19 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR1_TARGET_MAP to 1 maps all incoming Requests for BAR1 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC19_BAR1_TARGET_MAP 1'h1


// Name:           BAR2_ENABLED_19
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 19
// Parameter Type: Feature Setting
// 
// Include the BAR2 registers for function 19.
`define BAR2_ENABLED_19 1'h1


`define DEFAULT_BAR2_ENABLED_19 1'h1


// Name:           MEM2_SPACE_DECODER_19
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 19 && BAR2_ENABLED_19==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 19.
`define MEM2_SPACE_DECODER_19 1'h0


// Name:           PREFETCHABLE2_19
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 19 && BAR2_ENABLED_19==1 && MEM2_SPACE_DECODER_19==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 19.
`define PREFETCHABLE2_19 1'h0


// Name:           BAR2_TYPE_19
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 19 && BAR2_ENABLED_19==1 && MEM2_SPACE_DECODER_19==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 19.
`define BAR2_TYPE_19 2'h0


// Name:           BAR2_SIZING_SCHEME_19
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 19 && BAR2_ENABLED_19==1
// Parameter Type: Feature Setting
// 
// BAR2 Function 19 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR2_SIZING_SCHEME_19 2'h0


// Name:           CX_BAR2_RESIZABLE_19
// Default:        0x0 ((BAR2_SIZING_SCHEME_19==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR2_ENABLED_19==1) && (MEM2_SPACE_DECODER_19==0)
// Parameter Type: Feature Setting
// 
// Defines BAR2 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR2 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR2_RESIZABLE_19 1'h0


// Name:           CX_BAR2_RESOURCE_AVAIL_19
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 19 && CX_BAR2_RESIZABLE_19==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR2 of function 19. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR2 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR2_RESOURCE_AVAIL_19 64'h10


// Name:           BAR2_MASK_WRITABLE_19
// Default:        0x0 ((BAR2_ENABLED_19==1 && BAR2_SIZING_SCHEME_19 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 19 && BAR2_ENABLED_19==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR2 Mask through DBI
`define BAR2_MASK_WRITABLE_19 1'h0


// Name:           BAR2_MASK_19
// Default:        0xfffff (CX_BAR2_RESIZABLE_19==1 ? [calc_bar_mask 
//                 CX_BAR2_RESOURCE_AVAIL_19] : MEM2_SPACE_DECODER_19==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 19 && BAR2_ENABLED_19==1 && MEM2_SPACE_DECODER_19==0 && 
//                 CX_BAR2_RESIZABLE_19==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR2 Mask register of function 19. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR2_MASK_19 64'hfffff


// Name:           MEM_FUNC19_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 19 && BAR2_ENABLED_19==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_2 of function 19 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR2_TARGET_MAP to 1 maps all incoming requests for BAR2 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC19_BAR2_TARGET_MAP 1'h1


// Name:           BAR3_ENABLED_19
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 19 && BAR2_TYPE_19==0
// Parameter Type: Feature Setting
// 
// Include the BAR3 registers for function 19.
`define BAR3_ENABLED_19 1'h0



`define DEFAULT_BAR3_ENABLED_19 1'h0


// Name:           MEM3_SPACE_DECODER_19
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 19 && BAR3_ENABLED_19==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 19.
`define MEM3_SPACE_DECODER_19 1'h0


// Name:           PREFETCHABLE3_19
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 19 && BAR3_ENABLED_19==1 && MEM3_SPACE_DECODER_19==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 19.
`define PREFETCHABLE3_19 1'h0


// Name:           BAR3_TYPE_19
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 19.
`define BAR3_TYPE_19 2'h0


// Name:           BAR3_SIZING_SCHEME_19
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 19 && BAR3_ENABLED_19==1
// Parameter Type: Feature Setting
// 
// BAR3 Function 19 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR3_SIZING_SCHEME_19 2'h0


// Name:           CX_BAR3_RESIZABLE_19
// Default:        0x0 ((BAR3_SIZING_SCHEME_19==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR3_ENABLED_19==1) && (MEM3_SPACE_DECODER_19==0)
// Parameter Type: Feature Setting
// 
// Defines BAR3 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR3 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR3_RESIZABLE_19 1'h0


// Name:           CX_BAR3_RESOURCE_AVAIL_19
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 19 && CX_BAR3_RESIZABLE_19==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR3 of function 19. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR3 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR3_RESOURCE_AVAIL_19 32'h10


// Name:           BAR3_MASK_WRITABLE_19
// Default:        0x0 ((BAR3_ENABLED_19==1 && BAR3_SIZING_SCHEME_19 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 19 && BAR3_ENABLED_19==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR3 Mask through DBI
`define BAR3_MASK_WRITABLE_19 1'h0


// Name:           BAR3_MASK_19
// Default:        0xffff (CX_BAR3_RESIZABLE_19==1 ? [calc_bar_mask 
//                 CX_BAR3_RESOURCE_AVAIL_19] : MEM3_SPACE_DECODER_19==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 19 && BAR3_ENABLED_19==1 && MEM3_SPACE_DECODER_19==0 && 
//                 CX_BAR3_RESIZABLE_19==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR3 Mask register of function 19. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR3_MASK_19 32'hffff


// Name:           MEM_FUNC19_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 19 && BAR3_ENABLED_19==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_3 of function 19 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR3_TARGET_MAP to 1 maps all incoming requests for BAR3 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC19_BAR3_TARGET_MAP 1'h1


// Name:           BAR4_ENABLED_19
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 19
// Parameter Type: Feature Setting
// 
// Include the BAR4 registers for function 19.
`define BAR4_ENABLED_19 1'h1


`define DEFAULT_BAR4_ENABLED_19 1'h1



// Name:           MEM4_SPACE_DECODER_19
// Default:        I/O (BAR4_ENABLED_19==1)
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 19 && BAR4_ENABLED_19==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 19.
`define MEM4_SPACE_DECODER_19 1'h1


// Name:           PREFETCHABLE4_19
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 19 && BAR4_ENABLED_19==1 && MEM4_SPACE_DECODER_19==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 19.
`define PREFETCHABLE4_19 1'h0


// Name:           BAR4_TYPE_19
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 19 && BAR4_ENABLED_19==1 && MEM4_SPACE_DECODER_19==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 19.
`define BAR4_TYPE_19 2'h0


// Name:           BAR4_SIZING_SCHEME_19
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 19 && BAR4_ENABLED_19==1
// Parameter Type: Feature Setting
// 
// BAR4  Function 19 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR4_SIZING_SCHEME_19 2'h0


// Name:           CX_BAR4_RESIZABLE_19
// Default:        0x0 ((BAR4_SIZING_SCHEME_19==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR4_ENABLED_19==1) && (MEM4_SPACE_DECODER_19==0)
// Parameter Type: Feature Setting
// 
// Defines BAR4 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR4 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR4_RESIZABLE_19 1'h0


// Name:           CX_BAR4_RESOURCE_AVAIL_19
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 19 &&  CX_BAR4_RESIZABLE_19==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR4 of function 19. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR4 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR4_RESOURCE_AVAIL_19 64'h10


// Name:           BAR4_MASK_WRITABLE_19
// Default:        0x0 ((BAR4_ENABLED_19==1 && BAR4_SIZING_SCHEME_19 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 19 && BAR4_ENABLED_19==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR4 Mask through DBI
`define BAR4_MASK_WRITABLE_19 1'h0


// Name:           BAR4_MASK_19
// Default:        0xff (CX_BAR4_RESIZABLE_19==1 ? [calc_bar_mask 
//                 CX_BAR4_RESOURCE_AVAIL_19] : MEM4_SPACE_DECODER_19==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 19 && BAR4_ENABLED_19==1 && MEM4_SPACE_DECODER_19==0 && 
//                 CX_BAR4_RESIZABLE_19==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR4 Mask register of function 19. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR4_MASK_19 64'hff


// Name:           MEM_FUNC19_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 19 && BAR4_ENABLED_19==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_4 of function 19 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR4_TARGET_MAP to 1 maps all incoming requests for BAR4 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC19_BAR4_TARGET_MAP 1'h1


// Name:           BAR5_ENABLED_19
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 19 && BAR4_TYPE_19==0
// Parameter Type: Feature Setting
// 
// Include the BAR5 registers for function 19.
`define BAR5_ENABLED_19 1'h0


`define DEFAULT_BAR5_ENABLED_19 1'h0


// Name:           MEM5_SPACE_DECODER_19
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 19 && BAR5_ENABLED_19==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 19.
`define MEM5_SPACE_DECODER_19 1'h0


// Name:           PREFETCHABLE5_19
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 19 && BAR5_ENABLED_19==1 && MEM5_SPACE_DECODER_19==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 19.
`define PREFETCHABLE5_19 1'h0


// Name:           BAR5_TYPE_19
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 19.
`define BAR5_TYPE_19 2'h0


// Name:           BAR5_SIZING_SCHEME_19
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 19 && BAR5_ENABLED_19==1
// Parameter Type: Feature Setting
// 
// BAR5  Function 19 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR5_SIZING_SCHEME_19 2'h0


// Name:           CX_BAR5_RESIZABLE_19
// Default:        0x0 ((BAR5_SIZING_SCHEME_19==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR5_ENABLED_19==1) && (MEM5_SPACE_DECODER_19==0)
// Parameter Type: Feature Setting
// 
// Defines BAR5 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR5 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR5_RESIZABLE_19 1'h0


// Name:           CX_BAR5_RESOURCE_AVAIL_19
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 19 && CX_BAR5_RESIZABLE_19==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR5 of function 19. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR5 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR5_RESOURCE_AVAIL_19 32'h10


// Name:           BAR5_MASK_WRITABLE_19
// Default:        0x0 ((BAR5_ENABLED_19==1 && BAR5_SIZING_SCHEME_19 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 19 && BAR5_ENABLED_19==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR5 Mask through DBI
`define BAR5_MASK_WRITABLE_19 1'h0


// Name:           BAR5_MASK_19
// Default:        0xffff (CX_BAR5_RESIZABLE_19==1 ? [calc_bar_mask 
//                 CX_BAR5_RESOURCE_AVAIL_19] : MEM5_SPACE_DECODER_19==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 19 && BAR5_ENABLED_19==1 && MEM5_SPACE_DECODER_19==0 && 
//                 CX_BAR5_RESIZABLE_19==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR5 Mask register of function 19. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR5_MASK_19 32'hffff


// Name:           MEM_FUNC19_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 19 && BAR5_ENABLED_19==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_5 of function 19 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR5_TARGET_MAP to 1 maps all incoming requests for BAR5 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC19_BAR5_TARGET_MAP 1'h1


`define FUNC19_BARSIZE_32 128'h0


`define FUNC19_BARSIZE 128'h0


`define FUNC19_BAR0_BARSIZE_TRGT1 128'h0


`define FUNC19_BAR2_BARSIZE_TRGT1 128'h0


`define FUNC19_BAR4_BARSIZE_TRGT1 128'h0


`define FUNC19_BAR0_TRGT1_ADDR_WIDTH 1


`define FUNC19_BAR2_TRGT1_ADDR_WIDTH 1


`define FUNC19_BAR4_TRGT1_ADDR_WIDTH 1


// Name:         CX_NUM_RBARS_19
// Default:      0 ([calc_num_rbars CX_BAR0_RESIZABLE_19 CX_BAR1_RESIZABLE_19 
//               CX_BAR2_RESIZABLE_19 CX_BAR3_RESIZABLE_19 CX_BAR4_RESIZABLE_19 
//               CX_BAR5_RESIZABLE_19])
// Values:       -2147483648, ..., 2147483647
// 
// Number of resizable BARs
`define CX_NUM_RBARS_19 0

//-/ END:   BAR CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SR-IOV CAPABILITIES CONFIGURATION


// Name:           CX_VF_DEPENDENCY_LINK_19
// Default:        0x19
// Values:         0x0, ..., 0xff
// Enabled:        CX_VF_DEPENDENCY_LINK_SUPP && (CX_NFUNC > 19) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Specifies the 8-bit VF dependency link for PF19. Valid only if CX_VF_DEPENDENCY_LINK_SUPP=1.
`define CX_VF_DEPENDENCY_LINK_19 8'h19


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER1_19
// Default:        0x2 ((CX_NFUNC>=17) ? 32 : (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : 
//                 (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF19 in an ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER1_19 16'h2


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER0_19
// Default:        0x100
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF19 
//  in a non-ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER0_19 16'h100


// Name:           VF_STRIDE_ARI_CAP_HIER1_19
// Default:        0x2 (CX_VF_STRIDE_ALWAYS_ONE) ? 1 : ((CX_NFUNC>=17) ? 32 : 
//                 (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF19 in an ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER1_19 16'h2


// Name:           VF_STRIDE_ARI_CAP_HIER0_19
// Default:        0x100 ((CX_VF_STRIDE_ALWAYS_ONE) ? 0x0001 : 0x0100)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF19 in a non-ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER0_19 16'h100


// Name:           CX_VF_DEVICE_ID_19
// Default:        0x0 (CX_DEVICE_ID_19)
// Values:         0x0, ..., 0xffff
// Enabled:        (CX_NFUNC > 19) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 16-bit virtual function Device ID for PF19. 
//  It might be different from the physical function's.
`define CX_VF_DEVICE_ID_19 16'h0


// Name:           CX_VF_SUPP_PAGE_SIZE_19
// Default:        0x553
// Values:         0x553, ..., 0xffff
// Enabled:        (CX_NFUNC > 19) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 32-bit supported page sizes for virtual functions for PF19
`define CX_VF_SUPP_PAGE_SIZE_19 32'h553


// Name:           CX_ARI_CAP_HIER_PRSVD_19
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Specifies if ARI Capable Hierarchy bit is preserved across certain power state transitions 
//  Only present in PF0. Read Only Zero in this PF19.
`define CX_ARI_CAP_HIER_PRSVD_19 1'h0

//-/===========================================
//-/ START: VF BAR CONFIGURATION


// Name:           VF_BAR0_ENABLED_19
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 19)
// Parameter Type: Feature Setting
// 
// Include the VF BAR0 registers in PF19
`define VF_BAR0_ENABLED_19 1'h1


`define VF_DEFAULT_BAR0_ENABLED_19 1'h1


// Name:           VF_MEM0_SPACE_DECODER_19
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR0_ENABLED_19 && CX_SRIOV_ENABLE && (CX_NFUNC > 19)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Space Indicator 
//  ALWAYS set to Memory for Virtual Functions
`define VF_MEM0_SPACE_DECODER_19 1'h0


// Name:           VF_PREFETCHABLE0_19
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_19==1 && VF_MEM0_SPACE_DECODER_19==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 19)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Prefetchable 
//  When set indicates VF BAR0 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE0_19 1'h0


// Name:           VF_BAR0_TYPE_19
// Default:        64-bit ((VF_MEM0_SPACE_DECODER_19==1 || VF_BAR0_ENABLED_19==0) ? 0 
//                 : 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR0_ENABLED_19==1 && VF_MEM0_SPACE_DECODER_19==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 19)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 19; (bits [2:1] for a memory BAR).
`define VF_BAR0_TYPE_19 2'h2


// Name:           VF_BAR0_MASK_WRITABLE_19
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_19==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 19)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR0_MASK_WRITABLE_19 1'h0


// Name:           VF_BAR0_MASK_19
// Default:        0xfffff (VF_MEM0_SPACE_DECODER_19==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR0_ENABLED_19==1 && VF_MEM0_SPACE_DECODER_19==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 19)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Mask 
//  Determines the default of the VF BAR Mask register for PF19. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR0_MASK_19 64'hfffff


// Name:           VF_MEM_FUNC19_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR0_ENABLED_19==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE 
//                 && (CX_NFUNC > 19)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF19 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC19_BAR0_TARGET_MAP 1'h1


// Name:           VF_BAR1_ENABLED_19
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        (VF_BAR0_TYPE_19==0)  && CX_SRIOV_ENABLE && (CX_NFUNC > 19)
// Parameter Type: Feature Setting
// 
// Include the VF BAR1 registers in PF19
`define VF_BAR1_ENABLED_19 1'h0


`define VF_DEFAULT_BAR1_ENABLED_19 1'h0


// Name:           VF_MEM1_SPACE_DECODER_19
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR1_ENABLED_19==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 19)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Space Indicator
`define VF_MEM1_SPACE_DECODER_19 1'h0


// Name:           VF_PREFETCHABLE1_19
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_19==1 && VF_MEM1_SPACE_DECODER_19==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 19)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Prefetchable 
//  When set indicates VF BAR1 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE1_19 1'h0


// Name:           VF_BAR1_TYPE_19
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 19; (bits [2:1] for a memory BAR).
`define VF_BAR1_TYPE_19 2'h0


// Name:           VF_BAR1_MASK_WRITABLE_19
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_19==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 19)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR1_MASK_WRITABLE_19 1'h0


// Name:           VF_BAR1_MASK_19
// Default:        0xffff (VF_MEM1_SPACE_DECODER_19==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR1_ENABLED_19==1 && VF_MEM1_SPACE_DECODER_19==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 19)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Mask 
//  Determines the default of the VF BAR Mask register for PF19. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR1_MASK_19 32'hffff


// Name:           VF_MEM_FUNC19_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR1_ENABLED_19==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE 
//                 && (CX_NFUNC > 19)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF19 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC19_BAR1_TARGET_MAP 1'h1


// Name:           VF_BAR2_ENABLED_19
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 19)
// Parameter Type: Feature Setting
// 
// Include the VF BAR2 registers in PF19
`define VF_BAR2_ENABLED_19 1'h1


`define VF_DEFAULT_BAR2_ENABLED_19 1'h1


// Name:           VF_MEM2_SPACE_DECODER_19
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR2_ENABLED_19==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 19)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Memory Space Indicator
`define VF_MEM2_SPACE_DECODER_19 1'h0


// Name:           VF_PREFETCHABLE2_19
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_19==1 && VF_MEM2_SPACE_DECODER_19==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 19)
// Parameter Type: Register Default Setting
// 
// BAR2 Memory Prefetchable 
//  When set indicates VF BAR2 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE2_19 1'h0


// Name:           VF_BAR2_TYPE_19
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR2_ENABLED_19==1 && VF_MEM2_SPACE_DECODER_19==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 19)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 19; (bits [2:1] for a memory BAR).
`define VF_BAR2_TYPE_19 2'h0


// Name:           VF_BAR2_MASK_WRITABLE_19
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_19==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 19)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR2_MASK_WRITABLE_19 1'h0


// Name:           VF_BAR2_MASK_19
// Default:        0xfffff (VF_MEM2_SPACE_DECODER_19==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR2_ENABLED_19==1 && VF_MEM2_SPACE_DECODER_19==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 19)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Mask 
//  Determines the default of the VF BAR Mask register for PF19. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR2_MASK_19 64'hfffff


// Name:           VF_MEM_FUNC19_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR2_ENABLED_19==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 19)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF19 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC19_BAR2_TARGET_MAP 1'h1


// Name:           VF_BAR3_ENABLED_19
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_TYPE_19==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 19)
// Parameter Type: Feature Setting
// 
// Include the VF BAR3 registers in PF19
`define VF_BAR3_ENABLED_19 1'h0


`define VF_DEFAULT_BAR3_ENABLED_19 1'h0


// Name:           VF_MEM3_SPACE_DECODER_19
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR3_ENABLED_19==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 19)
// Parameter Type: Register Default Setting
// 
// BAR3 Memory Space Indicator
`define VF_MEM3_SPACE_DECODER_19 1'h0


// Name:           VF_PREFETCHABLE3_19
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_19==1 && VF_MEM3_SPACE_DECODER_19==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 19)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Memory Prefetchable 
//  When set indicates VF BAR3 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE3_19 1'h0


// Name:           VF_BAR3_TYPE_19
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 19; (bits [2:1] for a memory BAR).
`define VF_BAR3_TYPE_19 2'h0


// Name:           VF_BAR3_MASK_WRITABLE_19
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_19==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 19)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR3_MASK_WRITABLE_19 1'h0


// Name:           VF_BAR3_MASK_19
// Default:        0xffff (VF_MEM3_SPACE_DECODER_19==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR3_ENABLED_19==1 && VF_MEM3_SPACE_DECODER_19==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 19)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Mask 
//  Determines the default of the VF BAR Mask register for PF19. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR3_MASK_19 32'hffff


// Name:           VF_MEM_FUNC19_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR3_ENABLED_19==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 19)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF19 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC19_BAR3_TARGET_MAP 1'h1


// Name:           VF_BAR4_ENABLED_19
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 19)
// Parameter Type: Feature Setting
// 
// Include the VF BAR4 registers in PF19
`define VF_BAR4_ENABLED_19 1'h1


`define VF_DEFAULT_BAR4_ENABLED_19 1'h1


// Name:           VF_MEM4_SPACE_DECODER_19
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR4_ENABLED_19==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 19)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Space Indicator
`define VF_MEM4_SPACE_DECODER_19 1'h0


// Name:           VF_PREFETCHABLE4_19
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_19==1 && VF_MEM4_SPACE_DECODER_19==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 19)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Prefetchable 
//  When set indicates VF BAR4 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE4_19 1'h0


// Name:           VF_BAR4_TYPE_19
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR4_ENABLED_19==1 && VF_MEM4_SPACE_DECODER_19==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 19)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 19; (bits [2:1] for a memory BAR).
`define VF_BAR4_TYPE_19 2'h0


// Name:           VF_BAR4_MASK_WRITABLE_19
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_19==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 19)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR4_MASK_WRITABLE_19 1'h0


// Name:           VF_BAR4_MASK_19
// Default:        0xfff (VF_MEM4_SPACE_DECODER_19==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR4_ENABLED_19==1 && VF_MEM4_SPACE_DECODER_19==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 19)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Mask 
//  Determines the default of the VF BAR Mask register for PF19. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR4_MASK_19 64'hfff


// Name:           VF_MEM_FUNC19_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR4_ENABLED_19==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 19)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF19 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC19_BAR4_TARGET_MAP 1'h1


// Name:           VF_BAR5_ENABLED_19
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_TYPE_19==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 19)
// Parameter Type: Feature Setting
// 
// Include the VF BAR5 registers in PF19
`define VF_BAR5_ENABLED_19 1'h0


`define VF_DEFAULT_BAR5_ENABLED_19 1'h0


// Name:           VF_MEM5_SPACE_DECODER_19
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR5_ENABLED_19==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 19)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Space Indicator
`define VF_MEM5_SPACE_DECODER_19 1'h0


// Name:           VF_PREFETCHABLE5_19
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_19==1 && VF_MEM5_SPACE_DECODER_19==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 19)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Prefetchable 
//  When set indicates VF BAR5 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE5_19 1'h0


// Name:           VF_BAR5_TYPE_19
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 19; (bits [2:1] for a memory BAR).
`define VF_BAR5_TYPE_19 2'h0


// Name:           VF_BAR5_MASK_WRITABLE_19
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_19==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 19)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR5_MASK_WRITABLE_19 1'h0


// Name:           VF_BAR5_MASK_19
// Default:        0xffff (VF_MEM5_SPACE_DECODER_19==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR5_ENABLED_19==1 && VF_MEM5_SPACE_DECODER_19==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 19)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Mask 
//  Determines the default of the VF BAR Mask register for PF19. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR5_MASK_19 32'hffff


// Name:           VF_MEM_FUNC19_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR5_ENABLED_19==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 19)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF19 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC19_BAR5_TARGET_MAP 1'h1


`define VF_FUNC19_BARSIZE_32 128'h101000


`define VF_FUNC19_BARSIZE 128'h201000

//-/ END:   VF BAR CONFIGURATION
//-/===========================================

//-/ END:   SR-IOV CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: TPH CAPABILITIES CONFIGURATION


// Name:           TPH_IVEC_19
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Interrupt Vector Mode. If set indicates that the function supports the Interrupt Vector 
// Mode of operation. Function 19.
`define TPH_IVEC_19 1'h0


// Name:           TPH_DS_19
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Device Specific Mode. If set indicates that the function supports the Device Specific Mode 
// of operation. Function 19.
`define TPH_DS_19 1'h0


// Name:           TPH_ST_TABLE_LOC_19
// Default:        Not Present
// Values:         Not Present (0), TPH Requester Capability Structure (1), MSI-X 
//                 Table Structure (2)
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_DS_19 || TPH_IVEC_19))
// Parameter Type: Feature Setting
// 
// TLP Processing Hints Steering Tag Table Location. Value indicates if and where the ST Table is located. Function 19.
`define TPH_ST_TABLE_LOC_19 0

//located in the TPH Requester Capability structure. Please reduce the ST Table Size for this mode of operation"

// Name:           TPH_ST_TABLE_SIZE_19
// Default:        1
// Values:         1, ..., 2048
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_ST_TABLE_LOC_19 != 0))
// Parameter Type: Feature Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define TPH_ST_TABLE_SIZE_19 1


`define TPH_ST_TABLE_DEPTH_19 0

//-/ END:   TPH CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: ATS CAPABILITIES CONFIGURATION


// Name:           ATS_INV_Q_DPTH_19
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// The number of Invalidate Requests that the Function can accept before putting backpressure on the upstream connection. A 
// value of 0 indicates the function can accept 32 Invalidate requests. Function 19.
`define ATS_INV_Q_DPTH_19 5'd0


// Name:           ATS_STU_19
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// This value indicates to the Function the minimum number of 4096-byte blocks that is indicated in a Translation 
// Completion or Invalidate Request. This is a power of 2 multiplier and the number of blocks is 2^STU. A value of 0 indicates 1 block 
// and a value of 31 indicates 2^31 blocks (or 8 TB total). Function 19.
`define ATS_STU_19 5'd0

//-/ END:   ATS CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PRS CAPABILITIES CONFIGURATION


// Name:           CX_PRS_OUTSTANDING_CAPACITY_VALUE_19
// Default:        0x1
// Values:         0x0, ..., 0xffffffff
// Enabled:        (CX_PRS_ENABLE==1) && (CX_NFUNC > 19)
// Parameter Type: Register Default Setting
// 
// Register default for PRS Outstanding Capacity in PF19. 
// For more details, see the PRS_OUTSTANDING_CAPACITY field in the PRS_REQ_CAPACITY_REG register.
`define CX_PRS_OUTSTANDING_CAPACITY_VALUE_19 32'h1

//-/ END:   PRS CAPABILITIES CONFIGURATION
//-/===========================================


//-/===========================================
//--- START: RN


// Name:           CX_RN_IMM_VALUE_19
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 19)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for PF19.
`define CX_RN_IMM_VALUE_19 1'h0


// Name:           CX_RN_IMM_D0_VALUE_19
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 19)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for PF19.
`define CX_RN_IMM_D0_VALUE_19 1'h0


// Name:           CX_RN_FRS_VALUE_19
// Default:        0x0 (CX_RN_FRS_SUPPORTED==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_FRS_SUPPORTED==1) && (CX_NFUNC > 19)
// Parameter Type: Feature Setting
// 
// Function Readiness Status messaging supported for function PF19.
`define CX_RN_FRS_VALUE_19 1'h0


// Name:           CX_RN_RTR_VALID_19
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 19)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF19.
`define CX_RN_RTR_VALID_19 1'h0


// Name:           CX_RN_RTR_DL_UP_VALUE_19
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 19)
// Parameter Type: Register Default Setting
// 
// Register default for RTR DL Up Time field in PF19.
`define CX_RN_RTR_DL_UP_VALUE_19 12'h0


// Name:           CX_RN_RTR_RESET_VALUE_19
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 19)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF19.
`define CX_RN_RTR_RESET_VALUE_19 12'h0


// Name:           CX_RN_RTR_D3D0_VALUE_19
// Default:        0x0
// Values:         0x0, ..., 0x80a
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 19)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF19.
`define CX_RN_RTR_D3D0_VALUE_19 12'h0


// Name:           CX_RN_RTR_FLR_VALUE_19
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_FLR_ENABLE==1) && (CX_NFUNC > 19)
// Parameter Type: Register Default Setting
// 
// Register default for RTR FLR Time field in PF19.
`define CX_RN_RTR_FLR_VALUE_19 12'h0


// Name:           VF_RN_IMM_VALUE_19
// Default:        0x0 (CX_RN_IMM_VALUE_19 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 19))
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for VFs in PF19.
`define VF_RN_IMM_VALUE_19 1'h0


// Name:           VF_RN_IMM_D0_VALUE_19
// Default:        0x0 (CX_RN_IMM_D0_VALUE_19 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 19))
// Parameter Type: Register Default Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for VFs in PF19.
`define VF_RN_IMM_D0_VALUE_19 1'h0


// Name:           VF_RN_RTR_VALID_19
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 19) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF19 VFs.
`define VF_RN_RTR_VALID_19 1'h0


// Name:           VF_RN_RTR_RESET_VALUE_19
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_19)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 19) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF19 VFS.
`define VF_RN_RTR_RESET_VALUE_19 12'h0


// Name:           VF_RN_RTR_D3D0_VALUE_19
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_19)
// Values:         0x0, ..., 0x80a
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 19) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF19 VFS.
`define VF_RN_RTR_D3D0_VALUE_19 12'h0


// Name:           VF_RN_RTR_FLR_VALUE_19
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_19)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 19) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF19 VFs.
`define VF_RN_RTR_FLR_VALUE_19 12'h0


// Name:           EXT_VF_RN_RTR_VALID_19
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 19) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF19 VFs.
`define EXT_VF_RN_RTR_VALID_19 1'h0


// Name:           EXT_VF_RN_RTR_RESET_VALUE_19
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_19)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 19) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF19 VFS.
`define EXT_VF_RN_RTR_RESET_VALUE_19 12'h0


// Name:           EXT_VF_RN_RTR_D3D0_VALUE_19
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_19)
// Values:         0x0, ..., 0x80a
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 19) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF19 VFS.
`define EXT_VF_RN_RTR_D3D0_VALUE_19 12'h0


// Name:           EXT_VF_RN_RTR_FLR_VALUE_19
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_19)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 19) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF19 VFs.
`define EXT_VF_RN_RTR_FLR_VALUE_19 12'h0

//-/ END:   RN
//-/===========================================

//-/ START: LN CAPABILITIES CONFIGURATION
//-/===========================================


// Name:           CX_LN_REG_MAX_VALUE_19
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 19))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_64_SUPPORTED field in the LNR_CAP_OFF register for PF19.
`define CX_LN_REG_MAX_VALUE_19 5'h0


// Name:           CX_LN_128_SUPPORTED_VALUE_19
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 19))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_128_SUPPORTED field in the LNR_CAP_OFF register for PF19.
`define CX_LN_128_SUPPORTED_VALUE_19 1'h0


// Name:           CX_LN_64_SUPPORTED_VALUE_19
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 19))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_REGISTRATION_MAX field in the LNR_CAP_OFF register for PF19.
`define CX_LN_64_SUPPORTED_VALUE_19 1'h0

//-/ END:   LN CAPABILITIES CONFIGURATION
//-/===========================================




//-/==========================================
//-/ End FUNC19 Config
//-/==========================================

//-/===========================================
//-/ Function 20 Configuration Registers
//-/ ==========================================


// Name:         FUNC_20
// Default:      0 ((CX_NFUNC > 20) ? 1 : 0)
// Values:       0, 1
// 
// This parameter indicates that Function 20 is present
// `define FUNC_20

//-/===========================================
//-/ START: PCI-E CAPABILITIES CONFIGURATION


// Name:           PCIE_CAP_INT_MSG_NUM_20
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 20
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Message Number field in the PCI Express Capabilities Register. Function 20.
`define PCIE_CAP_INT_MSG_NUM_20 5'h0


// Name:           SLOT_IMPLEMENTED_20
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_NFUNC > 20))
// Parameter Type: Register Default Setting
// 
// Indicates that the PCI Express link associated with this Port is connected to a slot. Function 20.
`define SLOT_IMPLEMENTED_20 1'h0


// Name:           DEFAULT_PHANTOM_FUNC_SUPPORTED_20
// Default:        0x0
// Values:         0x0, ..., 0x3
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_PHANTOM_FUNC_SUPPORTED_20 2'h0


// Name:           DEFAULT_EXT_TAG_FIELD_SUPPORTED_20
// Default:        0x0 (DEFAULT_EXT_TAG_FIELD_SUPPORTED_0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 20
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_EXT_TAG_FIELD_SUPPORTED_20 1'h0



// Name:           DEFAULT_ATT_BUTT_PRE_20
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 20
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Button is present
`define DEFAULT_ATT_BUTT_PRE_20 1'h0


// Name:           DEFAULT_ATT_IND_PRE_20
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 20
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Indicator is present
`define DEFAULT_ATT_IND_PRE_20 1'h0


// Name:           DEFAULT_PWR_IND_PRE_20
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 20
// Parameter Type: Register Default Setting
// 
// When set indicates that a Power Indicator is present
`define DEFAULT_PWR_IND_PRE_20 1'h0


// Name:           DEFAULT_NO_SNOOP_SUPPORTED_20
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 20
// Parameter Type: Register Default Setting
// 
// Default value for the Enable No Snoop bit in the Device Control Register. Function 20.
`define DEFAULT_NO_SNOOP_SUPPORTED_20 1'h0


// Name:           ROOT_RCB_20
// Default:        64-bit
// Values:         64-bit (0x0), 128-bit (0x1)
// Parameter Type: Register Default Setting
// 
// Default value for the Read Completion Boundary (RCB) bit in the Link Control Register.
`define ROOT_RCB_20 1'h0


//-/ END:   PCI-E CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: MSI-X CAPABILITIES CONFIGURATION


// Name:           MSIX_TABLE_SIZE_20
// Default:        0x0
// Values:         0x0, ..., 0x7ff
// Enabled:        CX_NFUNC > 20 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the MSI-X Table Size field in the MSI-X Control Register. Function 20.
`define MSIX_TABLE_SIZE_20 11'h0


// Name:           MSIX_TABLE_BIR_20
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 20 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table BAR Indicator Register (BIR) field in the MSI-X Table Offset and BIR Register. Function 20.
`define MSIX_TABLE_BIR_20 3'h0


// Name:           MSIX_TABLE_OFFSET_20
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 20 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table Offset field in the MSI-X Table Offset and BIR Register. Function 20.
`define MSIX_TABLE_OFFSET_20 29'h0


// Name:           MSIX_PBA_BIR_20
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 20 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Pending Bit Array (PBA) BIR field in the MSI-X PBA Offset and BIR Register. Function 20.
`define MSIX_PBA_BIR_20 7'h0


// Name:           MSIX_PBA_OFFSET_20
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 20 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the PBA Offset field in the MSI-X PBA Offset and BIR Register. Function 20.
`define MSIX_PBA_OFFSET_20 29'h0

//-/ END:   MSI-X CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SATA CAPABILITIES CONFIGURATION


// Name:         SATA_HBA_OFFSET_20
// Default:      0x0
// Values:       0x0, ..., 0xfffff
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA Offset. Base address of the SATA HBA registers, 
//  as an offset from the base address of the BAR indicated 
//  by the SATA BAR field.
`define SATA_HBA_OFFSET_20 20'h0


// Name:         SATA_BAR_20
// Default:      0x0
// Values:       0x0, ..., 0xf
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA BAR. The bar that maps to SATA HBA registers,
`define SATA_BAR_20 4'h0

//-/ END:   SATA CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: AER CAPABILITIES CONFIGURATION


// Name:           DEFAULT_ECRC_CHK_CAP_20
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 20 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Check Capable bit in the Advanced Capabilities and Control Register. Function 20.
`define DEFAULT_ECRC_CHK_CAP_20 1'h1


// Name:           DEFAULT_ECRC_GEN_CAP_20
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 20 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Generation Capability bit in the Advanced Capabilities and Control Register. Function 20.
`define DEFAULT_ECRC_GEN_CAP_20 1'h1


// Name:           AER_INT_MSG_NUM_20
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Parameter Type: Register Default Setting
// 
// Default value for the Advanced Error Interrupt Message Number field of the Root Error Status Register. Function 20.
`define AER_INT_MSG_NUM_20 5'h0



// Name:           CX_HDR_LOG_DEPTH_20
// Default:        0x1
// Values:         0x1, 0x2, 0x4
// Enabled:        CX_NFUNC > 20 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Feature Setting.
// 
// Header Log Depth
`define CX_HDR_LOG_DEPTH_20 3'h1


`define CX_MULTIPLE_HDR_REC_CAP_20 1'h0

//-/ END:   AER CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PM CAPABILITIES CONFIGURATION


// Name:           PME_SUPPORT_20
// Default:        0x1b
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 20
// Parameter Type: Register Default Setting
// 
// Default value for the PME_Support field in the Power Management Capabilities Register. Function 20.
`define PME_SUPPORT_20 5'h1b


// Name:           D1_SUPPORT_20
// Default:        true
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 20
// Parameter Type: Register Default Setting
// 
// Default value for the D1 Support bit in the Power Management Capabilities Register. Function 20.
`define D1_SUPPORT_20 1'h1


// Name:           D2_SUPPORT_20
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 20
// Parameter Type: Register Default Setting
// 
// Default value for the D2 Support bit in the Power Management Capabilities Register. Function 20.
`define D2_SUPPORT_20 1'h0


// Name:           DEV_SPEC_INIT_20
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 20
// Parameter Type: Register Default Setting
// 
// Default value for the Device Specific Initialization (DSI) bit in the Power Management Capabilities Register. Function 
// 20.
`define DEV_SPEC_INIT_20 1'h0


// Name:           AUX_CURRENT_20
// Default:        375mA
// Values:         0mA (0x0), 55mA (0x1), 100mA (0x2), 160mA (0x3), 220mA (0x4), 270mA 
//                 (0x5), 320mA (0x6), 375mA (0x7)
// Enabled:        CX_NFUNC > 20
// Parameter Type: Register Default Setting
// 
// Default value for the Aux Current field in the Power Management Capabilities Register. Function 20.
`define AUX_CURRENT_20 3'h7


// Name:           DEFAULT_NO_SOFT_RESET_20
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 20
// Parameter Type: Register Default Setting
// 
// Default value for the No Soft Reset bit in the Power Management Control and Status Register. When set, you should not 
// reset any controller registers when transitioning from D3hot to D0. Therefore, you should not assert the non_sticky_rst_n 
// and sticky_rst_n inputs. Function 20.
`define DEFAULT_NO_SOFT_RESET_20 1'h0

//-/ END:   PM CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PCI BASIC CONFIGURATION


// Name:           CX_DEVICE_ID_20
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 20
// Parameter Type: Register Default Setting
// 
// Default value for the Device ID field in the Device ID and Vendor ID Register. Function 20.
`define CX_DEVICE_ID_20 16'h0


// Name:           CX_VENDOR_ID_20
// Default:        0x16c3
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 20
// Parameter Type: Register Default Setting
// 
// Default value for the Vendor ID field in the Device ID and Vendor ID Register. Function 20.
`define CX_VENDOR_ID_20 16'h16c3


// Name:           CX_REVISION_ID_20
// Default:        0x1
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 20
// Parameter Type: Register Default Setting
// 
// Default value for the Revision ID field in the Revision ID Register. Function 20.
`define CX_REVISION_ID_20 8'h1


// Name:           SUBSYS_DEV_ID_20
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 20
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 20.
`define SUBSYS_DEV_ID_20 16'h0


// Name:           SUBSYS_VENDOR_ID_20
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 20
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem Vendor ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 20.
`define SUBSYS_VENDOR_ID_20 16'h0


// Name:           BASE_CLASS_CODE_20
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 20
// Parameter Type: Register Default Setting
// 
// Default value for the Base Class Code field in the Class Code Register. Function 20.
`define BASE_CLASS_CODE_20 8'h0


// Name:           SUB_CLASS_CODE_20
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 20
// Parameter Type: Register Default Setting
// 
// Default value for the Subclass Code field in the Class Code Register. Function 20.
`define SUB_CLASS_CODE_20 8'h0


// Name:           IF_CODE_20
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 20
// Parameter Type: Register Default Setting
// 
// Default value for the Programming Interface field in the Class Code Register. Function 20.
`define IF_CODE_20 8'h0


// Name:           CARDBUS_CIS_PTR_20
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 20
// Parameter Type: Register Default Setting
// 
// Default value for the CardBus CIS Pointer Register. Function 20.
`define CARDBUS_CIS_PTR_20 16'h0


// Name:           INT_PIN_MAPPING_20
// Default:        INTA
// Values:         None (0x0), INTA (0x1), INTB (0x2), INTC (0x3), INTD (0x4)
// Enabled:        CX_NFUNC > 20
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Pin Register. Function 20.
`define INT_PIN_MAPPING_20 8'h1


// Name:           IO_DECODE_32_20
// Default:        16-bit
// Values:         16-bit (0x0), 32-bit (0x1)
// Enabled:        CX_NFUNC > 20
// Parameter Type: Register Default Setting
// 
// Default value for the 32-Bit I/O Space bit in the I/O Base and I/O Limit Register. Function 20.
`define IO_DECODE_32_20 1'h0


// Name:           MEM_DECODE_64_20
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x1)
// Enabled:        CX_NFUNC > 20
// Parameter Type: Register Default Setting
// 
// Default value for the 64-Bit Memory Addressing bit in the Prefetchable Memory Base and Limit Register. Function 20.
`define MEM_DECODE_64_20 1'h0


// Name:           ROM_BAR_ENABLED_20
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 20
// Parameter Type: Register Default Setting
// 
// Include the expansion ROM BAR registers. Function 20.
`define ROM_BAR_ENABLED_20 1'h1


`define DEFAULT_ROM_BAR_ENABLED_20 1'h1


// Name:           ROM_MASK_20
// Default:        0xffff
// Values:         0x7ff, ..., 0xffffff
// Enabled:        CX_NFUNC > 20 && ROM_BAR_ENABLED_20==1
// Parameter Type: Register Default Setting
// 
// Determines the default of the Expansion ROM BAR Mask register. Function 20. 
//  - The BAR Mask register specifies which bits of the Expansion ROM BAR are non-writable by host software, which 
//  determines the size of the BAR. 
//  - The maximum value for ROM_MASK_N is 0xFFFFFF because the maximum space that can be claimed by an Expansion ROM BAR 
//  is 16 MB. 
//  - For example: 32'hFFFF =BAR size of 2^16.
`define ROM_MASK_20 32'hffff


// Name:           ROM_MASK_WRITABLE_20
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 20 && ROM_BAR_ENABLED_20==1
// Parameter Type: Feature Setting
// 
// Determines if the Expansion ROM BAR Mask register for function 20 is writable by application software. If writing to a 
// Expansion ROM BAR Mask register is enabled, your application can write to the Expansion ROM BAR Mask register through the 
// DBI by asserting dbi_cs2 in addition to dbi_cs.
`define ROM_MASK_WRITABLE_20 1'h0


// Name:           ROM_FUNC20_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 20 && ROM_BAR_ENABLED_20==1 && TRGT1_POPULATE==1))
// Parameter Type: Register Default Setting
// 
// Direct incoming requests that pass filtering and match the Expansion ROM BAR of function 20 to either RTRGT0 or RTRGT1. 
//  - For example, setting ROM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for the Expansion ROM BAR of function 
//  0 to RTRGT1. 
//  - If TRGT1_POPULATE =0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define ROM_FUNC20_TARGET_MAP 1'h1


// Name:           CX_PCI_HEADER_DEFAULTS_VISIBLE_20
// Default:        0
// Values:         0, 1
// Parameter Type: Register Default Setting
// 
// Select here if you want to configure the defaults for the other PCI Standard Header registers for function 20. 
//  An extra window will appear under this page. To access it, click the plus/minus symbol in the hierarchy view on the 
//  left panel. 
//  This is optional but not usually recommended. 
//  You can also change these register defaults using the DBI before (or after) the link comes up.
`define CX_PCI_HEADER_DEFAULTS_VISIBLE_20 0

//-/ END:   PCI BASIC CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: BAR CONFIGURATION


// Name:           BAR0_ENABLED_20
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 20
// Parameter Type: Feature Setting
// 
// Include the BAR0 registers for function 20.
`define BAR0_ENABLED_20 1'h1


`define DEFAULT_BAR0_ENABLED_20 1'h1


// Name:           MEM0_SPACE_DECODER_20
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 20 && BAR0_ENABLED_20==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 20.
`define MEM0_SPACE_DECODER_20 1'h0


// Name:           PREFETCHABLE0_20
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 20 && BAR0_ENABLED_20==1 && MEM0_SPACE_DECODER_20==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 20.
`define PREFETCHABLE0_20 1'h0


// Name:           BAR0_TYPE_20
// Default:        64-bit ((MEM0_SPACE_DECODER_20==1 || BAR0_ENABLED_20==0) ? 0 : 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 20 && BAR0_ENABLED_20==1 && MEM0_SPACE_DECODER_20==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 20.
`define BAR0_TYPE_20 2'h2


// Name:           BAR0_SIZING_SCHEME_20
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 20 && BAR0_ENABLED_20==1
// Parameter Type: Feature Setting
// 
// BAR0 Function 20 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR0_SIZING_SCHEME_20 2'h0


// Name:           CX_BAR0_RESIZABLE_20
// Default:        0x0 ((BAR0_SIZING_SCHEME_20==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR0_ENABLED_20==1) && (MEM0_SPACE_DECODER_20==0)
// Parameter Type: Feature Setting
// 
// Defines BAR0 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR0 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR0_RESIZABLE_20 1'h0


// Name:           CX_BAR0_RESOURCE_AVAIL_20
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 20 && CX_BAR0_RESIZABLE_20==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR0 of function 20. 
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
// Example: 0x00000030 indicates that BAR0 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR0_RESOURCE_AVAIL_20 64'h10


// Name:           BAR0_MASK_WRITABLE_20
// Default:        0x0 ((BAR0_ENABLED_20==1 && BAR0_SIZING_SCHEME_20 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 20 && BAR0_ENABLED_20==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR0 Mask through DBI
`define BAR0_MASK_WRITABLE_20 1'h0


// Name:           BAR0_MASK_20
// Default:        0xfffff (CX_BAR0_RESIZABLE_20==1 ? [calc_bar_mask 
//                 CX_BAR0_RESOURCE_AVAIL_20] : MEM0_SPACE_DECODER_20==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 20 && BAR0_ENABLED_20==1 && MEM0_SPACE_DECODER_20==0 && 
//                 CX_BAR0_RESIZABLE_20==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR0 Mask register of function 20. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR0_MASK_20 64'hfffff


// Name:           MEM_FUNC20_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 20 && BAR0_ENABLED_20==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_0 of function 20 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming Requests for BAR0 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC20_BAR0_TARGET_MAP 1'h1


// Name:           BAR1_ENABLED_20
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 20 && BAR0_TYPE_20==0
// Parameter Type: Feature Setting
// 
// Include the BAR1 registers for function 20.
`define BAR1_ENABLED_20 1'h0


`define DEFAULT_BAR1_ENABLED_20 1'h0


// Name:           MEM1_SPACE_DECODER_20
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 20 && BAR1_ENABLED_20==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 20.
`define MEM1_SPACE_DECODER_20 1'h0


// Name:           PREFETCHABLE1_20
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 20 && BAR1_ENABLED_20==1 && MEM1_SPACE_DECODER_20==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 20.
`define PREFETCHABLE1_20 1'h0


// Name:           BAR1_TYPE_20
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 20.
`define BAR1_TYPE_20 2'h0


// Name:           BAR1_SIZING_SCHEME_20
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 20 && BAR1_ENABLED_20==1
// Parameter Type: Feature Setting
// 
// BAR1 Function 20 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR1_SIZING_SCHEME_20 2'h0


// Name:           CX_BAR1_RESIZABLE_20
// Default:        0x0 ((BAR1_SIZING_SCHEME_20==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR1_ENABLED_20==1) && (MEM1_SPACE_DECODER_20==0)
// Parameter Type: Feature Setting
// 
// Defines BAR1 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR1 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR1_RESIZABLE_20 1'h0


// Name:           CX_BAR1_RESOURCE_AVAIL_20
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 20 && CX_BAR1_RESIZABLE_20==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR1 of function 20. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR1 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR1_RESOURCE_AVAIL_20 32'h10


// Name:           BAR1_MASK_WRITABLE_20
// Default:        0x0 ((BAR1_ENABLED_20==1 && BAR1_SIZING_SCHEME_20 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 20 && BAR1_ENABLED_20==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR1 Mask through DBI
`define BAR1_MASK_WRITABLE_20 1'h0


// Name:           BAR1_MASK_20
// Default:        0xffff (CX_BAR1_RESIZABLE_20==1 ? [calc_bar_mask 
//                 CX_BAR1_RESOURCE_AVAIL_20] : MEM1_SPACE_DECODER_20==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 20 && BAR1_ENABLED_20==1 && MEM1_SPACE_DECODER_20==0 && 
//                 CX_BAR1_RESIZABLE_20==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR1 Mask register of function 20. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR1_MASK_20 32'hffff


// Name:           MEM_FUNC20_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 20 && BAR1_ENABLED_20==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_1 of function 20 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR1_TARGET_MAP to 1 maps all incoming Requests for BAR1 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC20_BAR1_TARGET_MAP 1'h1


// Name:           BAR2_ENABLED_20
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 20
// Parameter Type: Feature Setting
// 
// Include the BAR2 registers for function 20.
`define BAR2_ENABLED_20 1'h1


`define DEFAULT_BAR2_ENABLED_20 1'h1


// Name:           MEM2_SPACE_DECODER_20
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 20 && BAR2_ENABLED_20==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 20.
`define MEM2_SPACE_DECODER_20 1'h0


// Name:           PREFETCHABLE2_20
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 20 && BAR2_ENABLED_20==1 && MEM2_SPACE_DECODER_20==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 20.
`define PREFETCHABLE2_20 1'h0


// Name:           BAR2_TYPE_20
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 20 && BAR2_ENABLED_20==1 && MEM2_SPACE_DECODER_20==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 20.
`define BAR2_TYPE_20 2'h0


// Name:           BAR2_SIZING_SCHEME_20
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 20 && BAR2_ENABLED_20==1
// Parameter Type: Feature Setting
// 
// BAR2 Function 20 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR2_SIZING_SCHEME_20 2'h0


// Name:           CX_BAR2_RESIZABLE_20
// Default:        0x0 ((BAR2_SIZING_SCHEME_20==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR2_ENABLED_20==1) && (MEM2_SPACE_DECODER_20==0)
// Parameter Type: Feature Setting
// 
// Defines BAR2 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR2 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR2_RESIZABLE_20 1'h0


// Name:           CX_BAR2_RESOURCE_AVAIL_20
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 20 && CX_BAR2_RESIZABLE_20==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR2 of function 20. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR2 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR2_RESOURCE_AVAIL_20 64'h10


// Name:           BAR2_MASK_WRITABLE_20
// Default:        0x0 ((BAR2_ENABLED_20==1 && BAR2_SIZING_SCHEME_20 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 20 && BAR2_ENABLED_20==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR2 Mask through DBI
`define BAR2_MASK_WRITABLE_20 1'h0


// Name:           BAR2_MASK_20
// Default:        0xfffff (CX_BAR2_RESIZABLE_20==1 ? [calc_bar_mask 
//                 CX_BAR2_RESOURCE_AVAIL_20] : MEM2_SPACE_DECODER_20==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 20 && BAR2_ENABLED_20==1 && MEM2_SPACE_DECODER_20==0 && 
//                 CX_BAR2_RESIZABLE_20==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR2 Mask register of function 20. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR2_MASK_20 64'hfffff


// Name:           MEM_FUNC20_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 20 && BAR2_ENABLED_20==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_2 of function 20 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR2_TARGET_MAP to 1 maps all incoming requests for BAR2 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC20_BAR2_TARGET_MAP 1'h1


// Name:           BAR3_ENABLED_20
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 20 && BAR2_TYPE_20==0
// Parameter Type: Feature Setting
// 
// Include the BAR3 registers for function 20.
`define BAR3_ENABLED_20 1'h0



`define DEFAULT_BAR3_ENABLED_20 1'h0


// Name:           MEM3_SPACE_DECODER_20
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 20 && BAR3_ENABLED_20==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 20.
`define MEM3_SPACE_DECODER_20 1'h0


// Name:           PREFETCHABLE3_20
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 20 && BAR3_ENABLED_20==1 && MEM3_SPACE_DECODER_20==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 20.
`define PREFETCHABLE3_20 1'h0


// Name:           BAR3_TYPE_20
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 20.
`define BAR3_TYPE_20 2'h0


// Name:           BAR3_SIZING_SCHEME_20
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 20 && BAR3_ENABLED_20==1
// Parameter Type: Feature Setting
// 
// BAR3 Function 20 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR3_SIZING_SCHEME_20 2'h0


// Name:           CX_BAR3_RESIZABLE_20
// Default:        0x0 ((BAR3_SIZING_SCHEME_20==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR3_ENABLED_20==1) && (MEM3_SPACE_DECODER_20==0)
// Parameter Type: Feature Setting
// 
// Defines BAR3 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR3 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR3_RESIZABLE_20 1'h0


// Name:           CX_BAR3_RESOURCE_AVAIL_20
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 20 && CX_BAR3_RESIZABLE_20==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR3 of function 20. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR3 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR3_RESOURCE_AVAIL_20 32'h10


// Name:           BAR3_MASK_WRITABLE_20
// Default:        0x0 ((BAR3_ENABLED_20==1 && BAR3_SIZING_SCHEME_20 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 20 && BAR3_ENABLED_20==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR3 Mask through DBI
`define BAR3_MASK_WRITABLE_20 1'h0


// Name:           BAR3_MASK_20
// Default:        0xffff (CX_BAR3_RESIZABLE_20==1 ? [calc_bar_mask 
//                 CX_BAR3_RESOURCE_AVAIL_20] : MEM3_SPACE_DECODER_20==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 20 && BAR3_ENABLED_20==1 && MEM3_SPACE_DECODER_20==0 && 
//                 CX_BAR3_RESIZABLE_20==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR3 Mask register of function 20. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR3_MASK_20 32'hffff


// Name:           MEM_FUNC20_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 20 && BAR3_ENABLED_20==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_3 of function 20 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR3_TARGET_MAP to 1 maps all incoming requests for BAR3 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC20_BAR3_TARGET_MAP 1'h1


// Name:           BAR4_ENABLED_20
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 20
// Parameter Type: Feature Setting
// 
// Include the BAR4 registers for function 20.
`define BAR4_ENABLED_20 1'h1


`define DEFAULT_BAR4_ENABLED_20 1'h1



// Name:           MEM4_SPACE_DECODER_20
// Default:        I/O (BAR4_ENABLED_20==1)
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 20 && BAR4_ENABLED_20==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 20.
`define MEM4_SPACE_DECODER_20 1'h1


// Name:           PREFETCHABLE4_20
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 20 && BAR4_ENABLED_20==1 && MEM4_SPACE_DECODER_20==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 20.
`define PREFETCHABLE4_20 1'h0


// Name:           BAR4_TYPE_20
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 20 && BAR4_ENABLED_20==1 && MEM4_SPACE_DECODER_20==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 20.
`define BAR4_TYPE_20 2'h0


// Name:           BAR4_SIZING_SCHEME_20
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 20 && BAR4_ENABLED_20==1
// Parameter Type: Feature Setting
// 
// BAR4  Function 20 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR4_SIZING_SCHEME_20 2'h0


// Name:           CX_BAR4_RESIZABLE_20
// Default:        0x0 ((BAR4_SIZING_SCHEME_20==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR4_ENABLED_20==1) && (MEM4_SPACE_DECODER_20==0)
// Parameter Type: Feature Setting
// 
// Defines BAR4 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR4 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR4_RESIZABLE_20 1'h0


// Name:           CX_BAR4_RESOURCE_AVAIL_20
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 20 &&  CX_BAR4_RESIZABLE_20==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR4 of function 20. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR4 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR4_RESOURCE_AVAIL_20 64'h10


// Name:           BAR4_MASK_WRITABLE_20
// Default:        0x0 ((BAR4_ENABLED_20==1 && BAR4_SIZING_SCHEME_20 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 20 && BAR4_ENABLED_20==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR4 Mask through DBI
`define BAR4_MASK_WRITABLE_20 1'h0


// Name:           BAR4_MASK_20
// Default:        0xff (CX_BAR4_RESIZABLE_20==1 ? [calc_bar_mask 
//                 CX_BAR4_RESOURCE_AVAIL_20] : MEM4_SPACE_DECODER_20==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 20 && BAR4_ENABLED_20==1 && MEM4_SPACE_DECODER_20==0 && 
//                 CX_BAR4_RESIZABLE_20==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR4 Mask register of function 20. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR4_MASK_20 64'hff


// Name:           MEM_FUNC20_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 20 && BAR4_ENABLED_20==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_4 of function 20 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR4_TARGET_MAP to 1 maps all incoming requests for BAR4 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC20_BAR4_TARGET_MAP 1'h1


// Name:           BAR5_ENABLED_20
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 20 && BAR4_TYPE_20==0
// Parameter Type: Feature Setting
// 
// Include the BAR5 registers for function 20.
`define BAR5_ENABLED_20 1'h0


`define DEFAULT_BAR5_ENABLED_20 1'h0


// Name:           MEM5_SPACE_DECODER_20
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 20 && BAR5_ENABLED_20==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 20.
`define MEM5_SPACE_DECODER_20 1'h0


// Name:           PREFETCHABLE5_20
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 20 && BAR5_ENABLED_20==1 && MEM5_SPACE_DECODER_20==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 20.
`define PREFETCHABLE5_20 1'h0


// Name:           BAR5_TYPE_20
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 20.
`define BAR5_TYPE_20 2'h0


// Name:           BAR5_SIZING_SCHEME_20
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 20 && BAR5_ENABLED_20==1
// Parameter Type: Feature Setting
// 
// BAR5  Function 20 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR5_SIZING_SCHEME_20 2'h0


// Name:           CX_BAR5_RESIZABLE_20
// Default:        0x0 ((BAR5_SIZING_SCHEME_20==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR5_ENABLED_20==1) && (MEM5_SPACE_DECODER_20==0)
// Parameter Type: Feature Setting
// 
// Defines BAR5 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR5 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR5_RESIZABLE_20 1'h0


// Name:           CX_BAR5_RESOURCE_AVAIL_20
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 20 && CX_BAR5_RESIZABLE_20==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR5 of function 20. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR5 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR5_RESOURCE_AVAIL_20 32'h10


// Name:           BAR5_MASK_WRITABLE_20
// Default:        0x0 ((BAR5_ENABLED_20==1 && BAR5_SIZING_SCHEME_20 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 20 && BAR5_ENABLED_20==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR5 Mask through DBI
`define BAR5_MASK_WRITABLE_20 1'h0


// Name:           BAR5_MASK_20
// Default:        0xffff (CX_BAR5_RESIZABLE_20==1 ? [calc_bar_mask 
//                 CX_BAR5_RESOURCE_AVAIL_20] : MEM5_SPACE_DECODER_20==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 20 && BAR5_ENABLED_20==1 && MEM5_SPACE_DECODER_20==0 && 
//                 CX_BAR5_RESIZABLE_20==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR5 Mask register of function 20. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR5_MASK_20 32'hffff


// Name:           MEM_FUNC20_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 20 && BAR5_ENABLED_20==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_5 of function 20 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR5_TARGET_MAP to 1 maps all incoming requests for BAR5 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC20_BAR5_TARGET_MAP 1'h1


`define FUNC20_BARSIZE_32 128'h0


`define FUNC20_BARSIZE 128'h0


`define FUNC20_BAR0_BARSIZE_TRGT1 128'h0


`define FUNC20_BAR2_BARSIZE_TRGT1 128'h0


`define FUNC20_BAR4_BARSIZE_TRGT1 128'h0


`define FUNC20_BAR0_TRGT1_ADDR_WIDTH 1


`define FUNC20_BAR2_TRGT1_ADDR_WIDTH 1


`define FUNC20_BAR4_TRGT1_ADDR_WIDTH 1


// Name:         CX_NUM_RBARS_20
// Default:      0 ([calc_num_rbars CX_BAR0_RESIZABLE_20 CX_BAR1_RESIZABLE_20 
//               CX_BAR2_RESIZABLE_20 CX_BAR3_RESIZABLE_20 CX_BAR4_RESIZABLE_20 
//               CX_BAR5_RESIZABLE_20])
// Values:       -2147483648, ..., 2147483647
// 
// Number of resizable BARs
`define CX_NUM_RBARS_20 0

//-/ END:   BAR CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SR-IOV CAPABILITIES CONFIGURATION


// Name:           CX_VF_DEPENDENCY_LINK_20
// Default:        0x20
// Values:         0x0, ..., 0xff
// Enabled:        CX_VF_DEPENDENCY_LINK_SUPP && (CX_NFUNC > 20) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Specifies the 8-bit VF dependency link for PF20. Valid only if CX_VF_DEPENDENCY_LINK_SUPP=1.
`define CX_VF_DEPENDENCY_LINK_20 8'h20


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER1_20
// Default:        0x2 ((CX_NFUNC>=17) ? 32 : (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : 
//                 (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF20 in an ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER1_20 16'h2


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER0_20
// Default:        0x100
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF20 
//  in a non-ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER0_20 16'h100


// Name:           VF_STRIDE_ARI_CAP_HIER1_20
// Default:        0x2 (CX_VF_STRIDE_ALWAYS_ONE) ? 1 : ((CX_NFUNC>=17) ? 32 : 
//                 (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF20 in an ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER1_20 16'h2


// Name:           VF_STRIDE_ARI_CAP_HIER0_20
// Default:        0x100 ((CX_VF_STRIDE_ALWAYS_ONE) ? 0x0001 : 0x0100)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF20 in a non-ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER0_20 16'h100


// Name:           CX_VF_DEVICE_ID_20
// Default:        0x0 (CX_DEVICE_ID_20)
// Values:         0x0, ..., 0xffff
// Enabled:        (CX_NFUNC > 20) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 16-bit virtual function Device ID for PF20. 
//  It might be different from the physical function's.
`define CX_VF_DEVICE_ID_20 16'h0


// Name:           CX_VF_SUPP_PAGE_SIZE_20
// Default:        0x553
// Values:         0x553, ..., 0xffff
// Enabled:        (CX_NFUNC > 20) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 32-bit supported page sizes for virtual functions for PF20
`define CX_VF_SUPP_PAGE_SIZE_20 32'h553


// Name:           CX_ARI_CAP_HIER_PRSVD_20
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Specifies if ARI Capable Hierarchy bit is preserved across certain power state transitions 
//  Only present in PF0. Read Only Zero in this PF20.
`define CX_ARI_CAP_HIER_PRSVD_20 1'h0

//-/===========================================
//-/ START: VF BAR CONFIGURATION


// Name:           VF_BAR0_ENABLED_20
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 20)
// Parameter Type: Feature Setting
// 
// Include the VF BAR0 registers in PF20
`define VF_BAR0_ENABLED_20 1'h1


`define VF_DEFAULT_BAR0_ENABLED_20 1'h1


// Name:           VF_MEM0_SPACE_DECODER_20
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR0_ENABLED_20 && CX_SRIOV_ENABLE && (CX_NFUNC > 20)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Space Indicator 
//  ALWAYS set to Memory for Virtual Functions
`define VF_MEM0_SPACE_DECODER_20 1'h0


// Name:           VF_PREFETCHABLE0_20
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_20==1 && VF_MEM0_SPACE_DECODER_20==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 20)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Prefetchable 
//  When set indicates VF BAR0 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE0_20 1'h0


// Name:           VF_BAR0_TYPE_20
// Default:        64-bit ((VF_MEM0_SPACE_DECODER_20==1 || VF_BAR0_ENABLED_20==0) ? 0 
//                 : 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR0_ENABLED_20==1 && VF_MEM0_SPACE_DECODER_20==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 20)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 20; (bits [2:1] for a memory BAR).
`define VF_BAR0_TYPE_20 2'h2


// Name:           VF_BAR0_MASK_WRITABLE_20
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_20==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 20)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR0_MASK_WRITABLE_20 1'h0


// Name:           VF_BAR0_MASK_20
// Default:        0xfffff (VF_MEM0_SPACE_DECODER_20==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR0_ENABLED_20==1 && VF_MEM0_SPACE_DECODER_20==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 20)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Mask 
//  Determines the default of the VF BAR Mask register for PF20. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR0_MASK_20 64'hfffff


// Name:           VF_MEM_FUNC20_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR0_ENABLED_20==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE 
//                 && (CX_NFUNC > 20)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF20 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC20_BAR0_TARGET_MAP 1'h1


// Name:           VF_BAR1_ENABLED_20
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        (VF_BAR0_TYPE_20==0)  && CX_SRIOV_ENABLE && (CX_NFUNC > 20)
// Parameter Type: Feature Setting
// 
// Include the VF BAR1 registers in PF20
`define VF_BAR1_ENABLED_20 1'h0


`define VF_DEFAULT_BAR1_ENABLED_20 1'h0


// Name:           VF_MEM1_SPACE_DECODER_20
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR1_ENABLED_20==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 20)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Space Indicator
`define VF_MEM1_SPACE_DECODER_20 1'h0


// Name:           VF_PREFETCHABLE1_20
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_20==1 && VF_MEM1_SPACE_DECODER_20==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 20)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Prefetchable 
//  When set indicates VF BAR1 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE1_20 1'h0


// Name:           VF_BAR1_TYPE_20
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 20; (bits [2:1] for a memory BAR).
`define VF_BAR1_TYPE_20 2'h0


// Name:           VF_BAR1_MASK_WRITABLE_20
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_20==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 20)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR1_MASK_WRITABLE_20 1'h0


// Name:           VF_BAR1_MASK_20
// Default:        0xffff (VF_MEM1_SPACE_DECODER_20==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR1_ENABLED_20==1 && VF_MEM1_SPACE_DECODER_20==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 20)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Mask 
//  Determines the default of the VF BAR Mask register for PF20. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR1_MASK_20 32'hffff


// Name:           VF_MEM_FUNC20_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR1_ENABLED_20==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE 
//                 && (CX_NFUNC > 20)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF20 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC20_BAR1_TARGET_MAP 1'h1


// Name:           VF_BAR2_ENABLED_20
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 20)
// Parameter Type: Feature Setting
// 
// Include the VF BAR2 registers in PF20
`define VF_BAR2_ENABLED_20 1'h1


`define VF_DEFAULT_BAR2_ENABLED_20 1'h1


// Name:           VF_MEM2_SPACE_DECODER_20
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR2_ENABLED_20==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 20)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Memory Space Indicator
`define VF_MEM2_SPACE_DECODER_20 1'h0


// Name:           VF_PREFETCHABLE2_20
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_20==1 && VF_MEM2_SPACE_DECODER_20==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 20)
// Parameter Type: Register Default Setting
// 
// BAR2 Memory Prefetchable 
//  When set indicates VF BAR2 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE2_20 1'h0


// Name:           VF_BAR2_TYPE_20
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR2_ENABLED_20==1 && VF_MEM2_SPACE_DECODER_20==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 20)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 20; (bits [2:1] for a memory BAR).
`define VF_BAR2_TYPE_20 2'h0


// Name:           VF_BAR2_MASK_WRITABLE_20
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_20==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 20)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR2_MASK_WRITABLE_20 1'h0


// Name:           VF_BAR2_MASK_20
// Default:        0xfffff (VF_MEM2_SPACE_DECODER_20==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR2_ENABLED_20==1 && VF_MEM2_SPACE_DECODER_20==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 20)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Mask 
//  Determines the default of the VF BAR Mask register for PF20. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR2_MASK_20 64'hfffff


// Name:           VF_MEM_FUNC20_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR2_ENABLED_20==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 20)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF20 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC20_BAR2_TARGET_MAP 1'h1


// Name:           VF_BAR3_ENABLED_20
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_TYPE_20==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 20)
// Parameter Type: Feature Setting
// 
// Include the VF BAR3 registers in PF20
`define VF_BAR3_ENABLED_20 1'h0


`define VF_DEFAULT_BAR3_ENABLED_20 1'h0


// Name:           VF_MEM3_SPACE_DECODER_20
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR3_ENABLED_20==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 20)
// Parameter Type: Register Default Setting
// 
// BAR3 Memory Space Indicator
`define VF_MEM3_SPACE_DECODER_20 1'h0


// Name:           VF_PREFETCHABLE3_20
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_20==1 && VF_MEM3_SPACE_DECODER_20==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 20)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Memory Prefetchable 
//  When set indicates VF BAR3 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE3_20 1'h0


// Name:           VF_BAR3_TYPE_20
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 20; (bits [2:1] for a memory BAR).
`define VF_BAR3_TYPE_20 2'h0


// Name:           VF_BAR3_MASK_WRITABLE_20
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_20==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 20)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR3_MASK_WRITABLE_20 1'h0


// Name:           VF_BAR3_MASK_20
// Default:        0xffff (VF_MEM3_SPACE_DECODER_20==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR3_ENABLED_20==1 && VF_MEM3_SPACE_DECODER_20==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 20)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Mask 
//  Determines the default of the VF BAR Mask register for PF20. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR3_MASK_20 32'hffff


// Name:           VF_MEM_FUNC20_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR3_ENABLED_20==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 20)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF20 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC20_BAR3_TARGET_MAP 1'h1


// Name:           VF_BAR4_ENABLED_20
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 20)
// Parameter Type: Feature Setting
// 
// Include the VF BAR4 registers in PF20
`define VF_BAR4_ENABLED_20 1'h1


`define VF_DEFAULT_BAR4_ENABLED_20 1'h1


// Name:           VF_MEM4_SPACE_DECODER_20
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR4_ENABLED_20==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 20)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Space Indicator
`define VF_MEM4_SPACE_DECODER_20 1'h0


// Name:           VF_PREFETCHABLE4_20
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_20==1 && VF_MEM4_SPACE_DECODER_20==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 20)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Prefetchable 
//  When set indicates VF BAR4 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE4_20 1'h0


// Name:           VF_BAR4_TYPE_20
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR4_ENABLED_20==1 && VF_MEM4_SPACE_DECODER_20==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 20)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 20; (bits [2:1] for a memory BAR).
`define VF_BAR4_TYPE_20 2'h0


// Name:           VF_BAR4_MASK_WRITABLE_20
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_20==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 20)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR4_MASK_WRITABLE_20 1'h0


// Name:           VF_BAR4_MASK_20
// Default:        0xfff (VF_MEM4_SPACE_DECODER_20==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR4_ENABLED_20==1 && VF_MEM4_SPACE_DECODER_20==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 20)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Mask 
//  Determines the default of the VF BAR Mask register for PF20. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR4_MASK_20 64'hfff


// Name:           VF_MEM_FUNC20_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR4_ENABLED_20==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 20)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF20 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC20_BAR4_TARGET_MAP 1'h1


// Name:           VF_BAR5_ENABLED_20
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_TYPE_20==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 20)
// Parameter Type: Feature Setting
// 
// Include the VF BAR5 registers in PF20
`define VF_BAR5_ENABLED_20 1'h0


`define VF_DEFAULT_BAR5_ENABLED_20 1'h0


// Name:           VF_MEM5_SPACE_DECODER_20
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR5_ENABLED_20==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 20)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Space Indicator
`define VF_MEM5_SPACE_DECODER_20 1'h0


// Name:           VF_PREFETCHABLE5_20
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_20==1 && VF_MEM5_SPACE_DECODER_20==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 20)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Prefetchable 
//  When set indicates VF BAR5 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE5_20 1'h0


// Name:           VF_BAR5_TYPE_20
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 20; (bits [2:1] for a memory BAR).
`define VF_BAR5_TYPE_20 2'h0


// Name:           VF_BAR5_MASK_WRITABLE_20
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_20==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 20)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR5_MASK_WRITABLE_20 1'h0


// Name:           VF_BAR5_MASK_20
// Default:        0xffff (VF_MEM5_SPACE_DECODER_20==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR5_ENABLED_20==1 && VF_MEM5_SPACE_DECODER_20==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 20)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Mask 
//  Determines the default of the VF BAR Mask register for PF20. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR5_MASK_20 32'hffff


// Name:           VF_MEM_FUNC20_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR5_ENABLED_20==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 20)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF20 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC20_BAR5_TARGET_MAP 1'h1


`define VF_FUNC20_BARSIZE_32 128'h101000


`define VF_FUNC20_BARSIZE 128'h201000

//-/ END:   VF BAR CONFIGURATION
//-/===========================================

//-/ END:   SR-IOV CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: TPH CAPABILITIES CONFIGURATION


// Name:           TPH_IVEC_20
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Interrupt Vector Mode. If set indicates that the function supports the Interrupt Vector 
// Mode of operation. Function 20.
`define TPH_IVEC_20 1'h0


// Name:           TPH_DS_20
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Device Specific Mode. If set indicates that the function supports the Device Specific Mode 
// of operation. Function 20.
`define TPH_DS_20 1'h0


// Name:           TPH_ST_TABLE_LOC_20
// Default:        Not Present
// Values:         Not Present (0), TPH Requester Capability Structure (1), MSI-X 
//                 Table Structure (2)
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_DS_20 || TPH_IVEC_20))
// Parameter Type: Feature Setting
// 
// TLP Processing Hints Steering Tag Table Location. Value indicates if and where the ST Table is located. Function 20.
`define TPH_ST_TABLE_LOC_20 0

//located in the TPH Requester Capability structure. Please reduce the ST Table Size for this mode of operation"

// Name:           TPH_ST_TABLE_SIZE_20
// Default:        1
// Values:         1, ..., 2048
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_ST_TABLE_LOC_20 != 0))
// Parameter Type: Feature Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define TPH_ST_TABLE_SIZE_20 1


`define TPH_ST_TABLE_DEPTH_20 0

//-/ END:   TPH CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: ATS CAPABILITIES CONFIGURATION


// Name:           ATS_INV_Q_DPTH_20
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// The number of Invalidate Requests that the Function can accept before putting backpressure on the upstream connection. A 
// value of 0 indicates the function can accept 32 Invalidate requests. Function 20.
`define ATS_INV_Q_DPTH_20 5'd0


// Name:           ATS_STU_20
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// This value indicates to the Function the minimum number of 4096-byte blocks that is indicated in a Translation 
// Completion or Invalidate Request. This is a power of 2 multiplier and the number of blocks is 2^STU. A value of 0 indicates 1 block 
// and a value of 31 indicates 2^31 blocks (or 8 TB total). Function 20.
`define ATS_STU_20 5'd0

//-/ END:   ATS CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PRS CAPABILITIES CONFIGURATION


// Name:           CX_PRS_OUTSTANDING_CAPACITY_VALUE_20
// Default:        0x1
// Values:         0x0, ..., 0xffffffff
// Enabled:        (CX_PRS_ENABLE==1) && (CX_NFUNC > 20)
// Parameter Type: Register Default Setting
// 
// Register default for PRS Outstanding Capacity in PF20. 
// For more details, see the PRS_OUTSTANDING_CAPACITY field in the PRS_REQ_CAPACITY_REG register.
`define CX_PRS_OUTSTANDING_CAPACITY_VALUE_20 32'h1

//-/ END:   PRS CAPABILITIES CONFIGURATION
//-/===========================================


//-/===========================================
//--- START: RN


// Name:           CX_RN_IMM_VALUE_20
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 20)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for PF20.
`define CX_RN_IMM_VALUE_20 1'h0


// Name:           CX_RN_IMM_D0_VALUE_20
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 20)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for PF20.
`define CX_RN_IMM_D0_VALUE_20 1'h0


// Name:           CX_RN_FRS_VALUE_20
// Default:        0x0 (CX_RN_FRS_SUPPORTED==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_FRS_SUPPORTED==1) && (CX_NFUNC > 20)
// Parameter Type: Feature Setting
// 
// Function Readiness Status messaging supported for function PF20.
`define CX_RN_FRS_VALUE_20 1'h0


// Name:           CX_RN_RTR_VALID_20
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 20)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF20.
`define CX_RN_RTR_VALID_20 1'h0


// Name:           CX_RN_RTR_DL_UP_VALUE_20
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 20)
// Parameter Type: Register Default Setting
// 
// Register default for RTR DL Up Time field in PF20.
`define CX_RN_RTR_DL_UP_VALUE_20 12'h0


// Name:           CX_RN_RTR_RESET_VALUE_20
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 20)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF20.
`define CX_RN_RTR_RESET_VALUE_20 12'h0


// Name:           CX_RN_RTR_D3D0_VALUE_20
// Default:        0x0
// Values:         0x0, ..., 0x80a
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 20)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF20.
`define CX_RN_RTR_D3D0_VALUE_20 12'h0


// Name:           CX_RN_RTR_FLR_VALUE_20
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_FLR_ENABLE==1) && (CX_NFUNC > 20)
// Parameter Type: Register Default Setting
// 
// Register default for RTR FLR Time field in PF20.
`define CX_RN_RTR_FLR_VALUE_20 12'h0


// Name:           VF_RN_IMM_VALUE_20
// Default:        0x0 (CX_RN_IMM_VALUE_20 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 20))
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for VFs in PF20.
`define VF_RN_IMM_VALUE_20 1'h0


// Name:           VF_RN_IMM_D0_VALUE_20
// Default:        0x0 (CX_RN_IMM_D0_VALUE_20 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 20))
// Parameter Type: Register Default Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for VFs in PF20.
`define VF_RN_IMM_D0_VALUE_20 1'h0


// Name:           VF_RN_RTR_VALID_20
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 20) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF20 VFs.
`define VF_RN_RTR_VALID_20 1'h0


// Name:           VF_RN_RTR_RESET_VALUE_20
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_20)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 20) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF20 VFS.
`define VF_RN_RTR_RESET_VALUE_20 12'h0


// Name:           VF_RN_RTR_D3D0_VALUE_20
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_20)
// Values:         0x0, ..., 0x80a
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 20) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF20 VFS.
`define VF_RN_RTR_D3D0_VALUE_20 12'h0


// Name:           VF_RN_RTR_FLR_VALUE_20
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_20)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 20) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF20 VFs.
`define VF_RN_RTR_FLR_VALUE_20 12'h0


// Name:           EXT_VF_RN_RTR_VALID_20
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 20) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF20 VFs.
`define EXT_VF_RN_RTR_VALID_20 1'h0


// Name:           EXT_VF_RN_RTR_RESET_VALUE_20
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_20)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 20) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF20 VFS.
`define EXT_VF_RN_RTR_RESET_VALUE_20 12'h0


// Name:           EXT_VF_RN_RTR_D3D0_VALUE_20
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_20)
// Values:         0x0, ..., 0x80a
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 20) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF20 VFS.
`define EXT_VF_RN_RTR_D3D0_VALUE_20 12'h0


// Name:           EXT_VF_RN_RTR_FLR_VALUE_20
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_20)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 20) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF20 VFs.
`define EXT_VF_RN_RTR_FLR_VALUE_20 12'h0

//-/ END:   RN
//-/===========================================

//-/ START: LN CAPABILITIES CONFIGURATION
//-/===========================================


// Name:           CX_LN_REG_MAX_VALUE_20
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 20))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_64_SUPPORTED field in the LNR_CAP_OFF register for PF20.
`define CX_LN_REG_MAX_VALUE_20 5'h0


// Name:           CX_LN_128_SUPPORTED_VALUE_20
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 20))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_128_SUPPORTED field in the LNR_CAP_OFF register for PF20.
`define CX_LN_128_SUPPORTED_VALUE_20 1'h0


// Name:           CX_LN_64_SUPPORTED_VALUE_20
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 20))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_REGISTRATION_MAX field in the LNR_CAP_OFF register for PF20.
`define CX_LN_64_SUPPORTED_VALUE_20 1'h0

//-/ END:   LN CAPABILITIES CONFIGURATION
//-/===========================================




//-/==========================================
//-/ End FUNC20 Config
//-/==========================================

//-/===========================================
//-/ Function 21 Configuration Registers
//-/ ==========================================


// Name:         FUNC_21
// Default:      0 ((CX_NFUNC > 21) ? 1 : 0)
// Values:       0, 1
// 
// This parameter indicates that Function 21 is present
// `define FUNC_21

//-/===========================================
//-/ START: PCI-E CAPABILITIES CONFIGURATION


// Name:           PCIE_CAP_INT_MSG_NUM_21
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 21
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Message Number field in the PCI Express Capabilities Register. Function 21.
`define PCIE_CAP_INT_MSG_NUM_21 5'h0


// Name:           SLOT_IMPLEMENTED_21
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_NFUNC > 21))
// Parameter Type: Register Default Setting
// 
// Indicates that the PCI Express link associated with this Port is connected to a slot. Function 21.
`define SLOT_IMPLEMENTED_21 1'h0


// Name:           DEFAULT_PHANTOM_FUNC_SUPPORTED_21
// Default:        0x0
// Values:         0x0, ..., 0x3
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_PHANTOM_FUNC_SUPPORTED_21 2'h0


// Name:           DEFAULT_EXT_TAG_FIELD_SUPPORTED_21
// Default:        0x0 (DEFAULT_EXT_TAG_FIELD_SUPPORTED_0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 21
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_EXT_TAG_FIELD_SUPPORTED_21 1'h0



// Name:           DEFAULT_ATT_BUTT_PRE_21
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 21
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Button is present
`define DEFAULT_ATT_BUTT_PRE_21 1'h0


// Name:           DEFAULT_ATT_IND_PRE_21
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 21
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Indicator is present
`define DEFAULT_ATT_IND_PRE_21 1'h0


// Name:           DEFAULT_PWR_IND_PRE_21
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 21
// Parameter Type: Register Default Setting
// 
// When set indicates that a Power Indicator is present
`define DEFAULT_PWR_IND_PRE_21 1'h0


// Name:           DEFAULT_NO_SNOOP_SUPPORTED_21
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 21
// Parameter Type: Register Default Setting
// 
// Default value for the Enable No Snoop bit in the Device Control Register. Function 21.
`define DEFAULT_NO_SNOOP_SUPPORTED_21 1'h0


// Name:           ROOT_RCB_21
// Default:        64-bit
// Values:         64-bit (0x0), 128-bit (0x1)
// Parameter Type: Register Default Setting
// 
// Default value for the Read Completion Boundary (RCB) bit in the Link Control Register.
`define ROOT_RCB_21 1'h0


//-/ END:   PCI-E CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: MSI-X CAPABILITIES CONFIGURATION


// Name:           MSIX_TABLE_SIZE_21
// Default:        0x0
// Values:         0x0, ..., 0x7ff
// Enabled:        CX_NFUNC > 21 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the MSI-X Table Size field in the MSI-X Control Register. Function 21.
`define MSIX_TABLE_SIZE_21 11'h0


// Name:           MSIX_TABLE_BIR_21
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 21 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table BAR Indicator Register (BIR) field in the MSI-X Table Offset and BIR Register. Function 21.
`define MSIX_TABLE_BIR_21 3'h0


// Name:           MSIX_TABLE_OFFSET_21
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 21 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table Offset field in the MSI-X Table Offset and BIR Register. Function 21.
`define MSIX_TABLE_OFFSET_21 29'h0


// Name:           MSIX_PBA_BIR_21
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 21 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Pending Bit Array (PBA) BIR field in the MSI-X PBA Offset and BIR Register. Function 21.
`define MSIX_PBA_BIR_21 7'h0


// Name:           MSIX_PBA_OFFSET_21
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 21 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the PBA Offset field in the MSI-X PBA Offset and BIR Register. Function 21.
`define MSIX_PBA_OFFSET_21 29'h0

//-/ END:   MSI-X CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SATA CAPABILITIES CONFIGURATION


// Name:         SATA_HBA_OFFSET_21
// Default:      0x0
// Values:       0x0, ..., 0xfffff
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA Offset. Base address of the SATA HBA registers, 
//  as an offset from the base address of the BAR indicated 
//  by the SATA BAR field.
`define SATA_HBA_OFFSET_21 20'h0


// Name:         SATA_BAR_21
// Default:      0x0
// Values:       0x0, ..., 0xf
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA BAR. The bar that maps to SATA HBA registers,
`define SATA_BAR_21 4'h0

//-/ END:   SATA CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: AER CAPABILITIES CONFIGURATION


// Name:           DEFAULT_ECRC_CHK_CAP_21
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 21 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Check Capable bit in the Advanced Capabilities and Control Register. Function 21.
`define DEFAULT_ECRC_CHK_CAP_21 1'h1


// Name:           DEFAULT_ECRC_GEN_CAP_21
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 21 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Generation Capability bit in the Advanced Capabilities and Control Register. Function 21.
`define DEFAULT_ECRC_GEN_CAP_21 1'h1


// Name:           AER_INT_MSG_NUM_21
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Parameter Type: Register Default Setting
// 
// Default value for the Advanced Error Interrupt Message Number field of the Root Error Status Register. Function 21.
`define AER_INT_MSG_NUM_21 5'h0



// Name:           CX_HDR_LOG_DEPTH_21
// Default:        0x1
// Values:         0x1, 0x2, 0x4
// Enabled:        CX_NFUNC > 21 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Feature Setting.
// 
// Header Log Depth
`define CX_HDR_LOG_DEPTH_21 3'h1


`define CX_MULTIPLE_HDR_REC_CAP_21 1'h0

//-/ END:   AER CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PM CAPABILITIES CONFIGURATION


// Name:           PME_SUPPORT_21
// Default:        0x1b
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 21
// Parameter Type: Register Default Setting
// 
// Default value for the PME_Support field in the Power Management Capabilities Register. Function 21.
`define PME_SUPPORT_21 5'h1b


// Name:           D1_SUPPORT_21
// Default:        true
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 21
// Parameter Type: Register Default Setting
// 
// Default value for the D1 Support bit in the Power Management Capabilities Register. Function 21.
`define D1_SUPPORT_21 1'h1


// Name:           D2_SUPPORT_21
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 21
// Parameter Type: Register Default Setting
// 
// Default value for the D2 Support bit in the Power Management Capabilities Register. Function 21.
`define D2_SUPPORT_21 1'h0


// Name:           DEV_SPEC_INIT_21
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 21
// Parameter Type: Register Default Setting
// 
// Default value for the Device Specific Initialization (DSI) bit in the Power Management Capabilities Register. Function 
// 21.
`define DEV_SPEC_INIT_21 1'h0


// Name:           AUX_CURRENT_21
// Default:        375mA
// Values:         0mA (0x0), 55mA (0x1), 100mA (0x2), 160mA (0x3), 220mA (0x4), 270mA 
//                 (0x5), 320mA (0x6), 375mA (0x7)
// Enabled:        CX_NFUNC > 21
// Parameter Type: Register Default Setting
// 
// Default value for the Aux Current field in the Power Management Capabilities Register. Function 21.
`define AUX_CURRENT_21 3'h7


// Name:           DEFAULT_NO_SOFT_RESET_21
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 21
// Parameter Type: Register Default Setting
// 
// Default value for the No Soft Reset bit in the Power Management Control and Status Register. When set, you should not 
// reset any controller registers when transitioning from D3hot to D0. Therefore, you should not assert the non_sticky_rst_n 
// and sticky_rst_n inputs. Function 21.
`define DEFAULT_NO_SOFT_RESET_21 1'h0

//-/ END:   PM CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PCI BASIC CONFIGURATION


// Name:           CX_DEVICE_ID_21
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 21
// Parameter Type: Register Default Setting
// 
// Default value for the Device ID field in the Device ID and Vendor ID Register. Function 21.
`define CX_DEVICE_ID_21 16'h0


// Name:           CX_VENDOR_ID_21
// Default:        0x16c3
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 21
// Parameter Type: Register Default Setting
// 
// Default value for the Vendor ID field in the Device ID and Vendor ID Register. Function 21.
`define CX_VENDOR_ID_21 16'h16c3


// Name:           CX_REVISION_ID_21
// Default:        0x1
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 21
// Parameter Type: Register Default Setting
// 
// Default value for the Revision ID field in the Revision ID Register. Function 21.
`define CX_REVISION_ID_21 8'h1


// Name:           SUBSYS_DEV_ID_21
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 21
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 21.
`define SUBSYS_DEV_ID_21 16'h0


// Name:           SUBSYS_VENDOR_ID_21
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 21
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem Vendor ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 21.
`define SUBSYS_VENDOR_ID_21 16'h0


// Name:           BASE_CLASS_CODE_21
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 21
// Parameter Type: Register Default Setting
// 
// Default value for the Base Class Code field in the Class Code Register. Function 21.
`define BASE_CLASS_CODE_21 8'h0


// Name:           SUB_CLASS_CODE_21
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 21
// Parameter Type: Register Default Setting
// 
// Default value for the Subclass Code field in the Class Code Register. Function 21.
`define SUB_CLASS_CODE_21 8'h0


// Name:           IF_CODE_21
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 21
// Parameter Type: Register Default Setting
// 
// Default value for the Programming Interface field in the Class Code Register. Function 21.
`define IF_CODE_21 8'h0


// Name:           CARDBUS_CIS_PTR_21
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 21
// Parameter Type: Register Default Setting
// 
// Default value for the CardBus CIS Pointer Register. Function 21.
`define CARDBUS_CIS_PTR_21 16'h0


// Name:           INT_PIN_MAPPING_21
// Default:        INTA
// Values:         None (0x0), INTA (0x1), INTB (0x2), INTC (0x3), INTD (0x4)
// Enabled:        CX_NFUNC > 21
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Pin Register. Function 21.
`define INT_PIN_MAPPING_21 8'h1


// Name:           IO_DECODE_32_21
// Default:        16-bit
// Values:         16-bit (0x0), 32-bit (0x1)
// Enabled:        CX_NFUNC > 21
// Parameter Type: Register Default Setting
// 
// Default value for the 32-Bit I/O Space bit in the I/O Base and I/O Limit Register. Function 21.
`define IO_DECODE_32_21 1'h0


// Name:           MEM_DECODE_64_21
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x1)
// Enabled:        CX_NFUNC > 21
// Parameter Type: Register Default Setting
// 
// Default value for the 64-Bit Memory Addressing bit in the Prefetchable Memory Base and Limit Register. Function 21.
`define MEM_DECODE_64_21 1'h0


// Name:           ROM_BAR_ENABLED_21
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 21
// Parameter Type: Register Default Setting
// 
// Include the expansion ROM BAR registers. Function 21.
`define ROM_BAR_ENABLED_21 1'h1


`define DEFAULT_ROM_BAR_ENABLED_21 1'h1


// Name:           ROM_MASK_21
// Default:        0xffff
// Values:         0x7ff, ..., 0xffffff
// Enabled:        CX_NFUNC > 21 && ROM_BAR_ENABLED_21==1
// Parameter Type: Register Default Setting
// 
// Determines the default of the Expansion ROM BAR Mask register. Function 21. 
//  - The BAR Mask register specifies which bits of the Expansion ROM BAR are non-writable by host software, which 
//  determines the size of the BAR. 
//  - The maximum value for ROM_MASK_N is 0xFFFFFF because the maximum space that can be claimed by an Expansion ROM BAR 
//  is 16 MB. 
//  - For example: 32'hFFFF =BAR size of 2^16.
`define ROM_MASK_21 32'hffff


// Name:           ROM_MASK_WRITABLE_21
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 21 && ROM_BAR_ENABLED_21==1
// Parameter Type: Feature Setting
// 
// Determines if the Expansion ROM BAR Mask register for function 21 is writable by application software. If writing to a 
// Expansion ROM BAR Mask register is enabled, your application can write to the Expansion ROM BAR Mask register through the 
// DBI by asserting dbi_cs2 in addition to dbi_cs.
`define ROM_MASK_WRITABLE_21 1'h0


// Name:           ROM_FUNC21_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 21 && ROM_BAR_ENABLED_21==1 && TRGT1_POPULATE==1))
// Parameter Type: Register Default Setting
// 
// Direct incoming requests that pass filtering and match the Expansion ROM BAR of function 21 to either RTRGT0 or RTRGT1. 
//  - For example, setting ROM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for the Expansion ROM BAR of function 
//  0 to RTRGT1. 
//  - If TRGT1_POPULATE =0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define ROM_FUNC21_TARGET_MAP 1'h1


// Name:           CX_PCI_HEADER_DEFAULTS_VISIBLE_21
// Default:        0
// Values:         0, 1
// Parameter Type: Register Default Setting
// 
// Select here if you want to configure the defaults for the other PCI Standard Header registers for function 21. 
//  An extra window will appear under this page. To access it, click the plus/minus symbol in the hierarchy view on the 
//  left panel. 
//  This is optional but not usually recommended. 
//  You can also change these register defaults using the DBI before (or after) the link comes up.
`define CX_PCI_HEADER_DEFAULTS_VISIBLE_21 0

//-/ END:   PCI BASIC CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: BAR CONFIGURATION


// Name:           BAR0_ENABLED_21
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 21
// Parameter Type: Feature Setting
// 
// Include the BAR0 registers for function 21.
`define BAR0_ENABLED_21 1'h1


`define DEFAULT_BAR0_ENABLED_21 1'h1


// Name:           MEM0_SPACE_DECODER_21
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 21 && BAR0_ENABLED_21==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 21.
`define MEM0_SPACE_DECODER_21 1'h0


// Name:           PREFETCHABLE0_21
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 21 && BAR0_ENABLED_21==1 && MEM0_SPACE_DECODER_21==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 21.
`define PREFETCHABLE0_21 1'h0


// Name:           BAR0_TYPE_21
// Default:        64-bit ((MEM0_SPACE_DECODER_21==1 || BAR0_ENABLED_21==0) ? 0 : 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 21 && BAR0_ENABLED_21==1 && MEM0_SPACE_DECODER_21==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 21.
`define BAR0_TYPE_21 2'h2


// Name:           BAR0_SIZING_SCHEME_21
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 21 && BAR0_ENABLED_21==1
// Parameter Type: Feature Setting
// 
// BAR0 Function 21 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR0_SIZING_SCHEME_21 2'h0


// Name:           CX_BAR0_RESIZABLE_21
// Default:        0x0 ((BAR0_SIZING_SCHEME_21==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR0_ENABLED_21==1) && (MEM0_SPACE_DECODER_21==0)
// Parameter Type: Feature Setting
// 
// Defines BAR0 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR0 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR0_RESIZABLE_21 1'h0


// Name:           CX_BAR0_RESOURCE_AVAIL_21
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 21 && CX_BAR0_RESIZABLE_21==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR0 of function 21. 
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
// Example: 0x00000030 indicates that BAR0 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR0_RESOURCE_AVAIL_21 64'h10


// Name:           BAR0_MASK_WRITABLE_21
// Default:        0x0 ((BAR0_ENABLED_21==1 && BAR0_SIZING_SCHEME_21 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 21 && BAR0_ENABLED_21==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR0 Mask through DBI
`define BAR0_MASK_WRITABLE_21 1'h0


// Name:           BAR0_MASK_21
// Default:        0xfffff (CX_BAR0_RESIZABLE_21==1 ? [calc_bar_mask 
//                 CX_BAR0_RESOURCE_AVAIL_21] : MEM0_SPACE_DECODER_21==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 21 && BAR0_ENABLED_21==1 && MEM0_SPACE_DECODER_21==0 && 
//                 CX_BAR0_RESIZABLE_21==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR0 Mask register of function 21. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR0_MASK_21 64'hfffff


// Name:           MEM_FUNC21_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 21 && BAR0_ENABLED_21==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_0 of function 21 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming Requests for BAR0 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC21_BAR0_TARGET_MAP 1'h1


// Name:           BAR1_ENABLED_21
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 21 && BAR0_TYPE_21==0
// Parameter Type: Feature Setting
// 
// Include the BAR1 registers for function 21.
`define BAR1_ENABLED_21 1'h0


`define DEFAULT_BAR1_ENABLED_21 1'h0


// Name:           MEM1_SPACE_DECODER_21
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 21 && BAR1_ENABLED_21==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 21.
`define MEM1_SPACE_DECODER_21 1'h0


// Name:           PREFETCHABLE1_21
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 21 && BAR1_ENABLED_21==1 && MEM1_SPACE_DECODER_21==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 21.
`define PREFETCHABLE1_21 1'h0


// Name:           BAR1_TYPE_21
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 21.
`define BAR1_TYPE_21 2'h0


// Name:           BAR1_SIZING_SCHEME_21
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 21 && BAR1_ENABLED_21==1
// Parameter Type: Feature Setting
// 
// BAR1 Function 21 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR1_SIZING_SCHEME_21 2'h0


// Name:           CX_BAR1_RESIZABLE_21
// Default:        0x0 ((BAR1_SIZING_SCHEME_21==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR1_ENABLED_21==1) && (MEM1_SPACE_DECODER_21==0)
// Parameter Type: Feature Setting
// 
// Defines BAR1 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR1 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR1_RESIZABLE_21 1'h0


// Name:           CX_BAR1_RESOURCE_AVAIL_21
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 21 && CX_BAR1_RESIZABLE_21==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR1 of function 21. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR1 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR1_RESOURCE_AVAIL_21 32'h10


// Name:           BAR1_MASK_WRITABLE_21
// Default:        0x0 ((BAR1_ENABLED_21==1 && BAR1_SIZING_SCHEME_21 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 21 && BAR1_ENABLED_21==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR1 Mask through DBI
`define BAR1_MASK_WRITABLE_21 1'h0


// Name:           BAR1_MASK_21
// Default:        0xffff (CX_BAR1_RESIZABLE_21==1 ? [calc_bar_mask 
//                 CX_BAR1_RESOURCE_AVAIL_21] : MEM1_SPACE_DECODER_21==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 21 && BAR1_ENABLED_21==1 && MEM1_SPACE_DECODER_21==0 && 
//                 CX_BAR1_RESIZABLE_21==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR1 Mask register of function 21. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR1_MASK_21 32'hffff


// Name:           MEM_FUNC21_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 21 && BAR1_ENABLED_21==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_1 of function 21 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR1_TARGET_MAP to 1 maps all incoming Requests for BAR1 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC21_BAR1_TARGET_MAP 1'h1


// Name:           BAR2_ENABLED_21
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 21
// Parameter Type: Feature Setting
// 
// Include the BAR2 registers for function 21.
`define BAR2_ENABLED_21 1'h1


`define DEFAULT_BAR2_ENABLED_21 1'h1


// Name:           MEM2_SPACE_DECODER_21
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 21 && BAR2_ENABLED_21==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 21.
`define MEM2_SPACE_DECODER_21 1'h0


// Name:           PREFETCHABLE2_21
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 21 && BAR2_ENABLED_21==1 && MEM2_SPACE_DECODER_21==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 21.
`define PREFETCHABLE2_21 1'h0


// Name:           BAR2_TYPE_21
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 21 && BAR2_ENABLED_21==1 && MEM2_SPACE_DECODER_21==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 21.
`define BAR2_TYPE_21 2'h0


// Name:           BAR2_SIZING_SCHEME_21
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 21 && BAR2_ENABLED_21==1
// Parameter Type: Feature Setting
// 
// BAR2 Function 21 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR2_SIZING_SCHEME_21 2'h0


// Name:           CX_BAR2_RESIZABLE_21
// Default:        0x0 ((BAR2_SIZING_SCHEME_21==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR2_ENABLED_21==1) && (MEM2_SPACE_DECODER_21==0)
// Parameter Type: Feature Setting
// 
// Defines BAR2 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR2 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR2_RESIZABLE_21 1'h0


// Name:           CX_BAR2_RESOURCE_AVAIL_21
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 21 && CX_BAR2_RESIZABLE_21==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR2 of function 21. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR2 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR2_RESOURCE_AVAIL_21 64'h10


// Name:           BAR2_MASK_WRITABLE_21
// Default:        0x0 ((BAR2_ENABLED_21==1 && BAR2_SIZING_SCHEME_21 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 21 && BAR2_ENABLED_21==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR2 Mask through DBI
`define BAR2_MASK_WRITABLE_21 1'h0


// Name:           BAR2_MASK_21
// Default:        0xfffff (CX_BAR2_RESIZABLE_21==1 ? [calc_bar_mask 
//                 CX_BAR2_RESOURCE_AVAIL_21] : MEM2_SPACE_DECODER_21==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 21 && BAR2_ENABLED_21==1 && MEM2_SPACE_DECODER_21==0 && 
//                 CX_BAR2_RESIZABLE_21==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR2 Mask register of function 21. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR2_MASK_21 64'hfffff


// Name:           MEM_FUNC21_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 21 && BAR2_ENABLED_21==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_2 of function 21 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR2_TARGET_MAP to 1 maps all incoming requests for BAR2 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC21_BAR2_TARGET_MAP 1'h1


// Name:           BAR3_ENABLED_21
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 21 && BAR2_TYPE_21==0
// Parameter Type: Feature Setting
// 
// Include the BAR3 registers for function 21.
`define BAR3_ENABLED_21 1'h0



`define DEFAULT_BAR3_ENABLED_21 1'h0


// Name:           MEM3_SPACE_DECODER_21
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 21 && BAR3_ENABLED_21==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 21.
`define MEM3_SPACE_DECODER_21 1'h0


// Name:           PREFETCHABLE3_21
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 21 && BAR3_ENABLED_21==1 && MEM3_SPACE_DECODER_21==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 21.
`define PREFETCHABLE3_21 1'h0


// Name:           BAR3_TYPE_21
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 21.
`define BAR3_TYPE_21 2'h0


// Name:           BAR3_SIZING_SCHEME_21
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 21 && BAR3_ENABLED_21==1
// Parameter Type: Feature Setting
// 
// BAR3 Function 21 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR3_SIZING_SCHEME_21 2'h0


// Name:           CX_BAR3_RESIZABLE_21
// Default:        0x0 ((BAR3_SIZING_SCHEME_21==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR3_ENABLED_21==1) && (MEM3_SPACE_DECODER_21==0)
// Parameter Type: Feature Setting
// 
// Defines BAR3 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR3 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR3_RESIZABLE_21 1'h0


// Name:           CX_BAR3_RESOURCE_AVAIL_21
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 21 && CX_BAR3_RESIZABLE_21==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR3 of function 21. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR3 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR3_RESOURCE_AVAIL_21 32'h10


// Name:           BAR3_MASK_WRITABLE_21
// Default:        0x0 ((BAR3_ENABLED_21==1 && BAR3_SIZING_SCHEME_21 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 21 && BAR3_ENABLED_21==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR3 Mask through DBI
`define BAR3_MASK_WRITABLE_21 1'h0


// Name:           BAR3_MASK_21
// Default:        0xffff (CX_BAR3_RESIZABLE_21==1 ? [calc_bar_mask 
//                 CX_BAR3_RESOURCE_AVAIL_21] : MEM3_SPACE_DECODER_21==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 21 && BAR3_ENABLED_21==1 && MEM3_SPACE_DECODER_21==0 && 
//                 CX_BAR3_RESIZABLE_21==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR3 Mask register of function 21. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR3_MASK_21 32'hffff


// Name:           MEM_FUNC21_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 21 && BAR3_ENABLED_21==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_3 of function 21 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR3_TARGET_MAP to 1 maps all incoming requests for BAR3 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC21_BAR3_TARGET_MAP 1'h1


// Name:           BAR4_ENABLED_21
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 21
// Parameter Type: Feature Setting
// 
// Include the BAR4 registers for function 21.
`define BAR4_ENABLED_21 1'h1


`define DEFAULT_BAR4_ENABLED_21 1'h1



// Name:           MEM4_SPACE_DECODER_21
// Default:        I/O (BAR4_ENABLED_21==1)
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 21 && BAR4_ENABLED_21==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 21.
`define MEM4_SPACE_DECODER_21 1'h1


// Name:           PREFETCHABLE4_21
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 21 && BAR4_ENABLED_21==1 && MEM4_SPACE_DECODER_21==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 21.
`define PREFETCHABLE4_21 1'h0


// Name:           BAR4_TYPE_21
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 21 && BAR4_ENABLED_21==1 && MEM4_SPACE_DECODER_21==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 21.
`define BAR4_TYPE_21 2'h0


// Name:           BAR4_SIZING_SCHEME_21
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 21 && BAR4_ENABLED_21==1
// Parameter Type: Feature Setting
// 
// BAR4  Function 21 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR4_SIZING_SCHEME_21 2'h0


// Name:           CX_BAR4_RESIZABLE_21
// Default:        0x0 ((BAR4_SIZING_SCHEME_21==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR4_ENABLED_21==1) && (MEM4_SPACE_DECODER_21==0)
// Parameter Type: Feature Setting
// 
// Defines BAR4 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR4 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR4_RESIZABLE_21 1'h0


// Name:           CX_BAR4_RESOURCE_AVAIL_21
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 21 &&  CX_BAR4_RESIZABLE_21==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR4 of function 21. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR4 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR4_RESOURCE_AVAIL_21 64'h10


// Name:           BAR4_MASK_WRITABLE_21
// Default:        0x0 ((BAR4_ENABLED_21==1 && BAR4_SIZING_SCHEME_21 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 21 && BAR4_ENABLED_21==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR4 Mask through DBI
`define BAR4_MASK_WRITABLE_21 1'h0


// Name:           BAR4_MASK_21
// Default:        0xff (CX_BAR4_RESIZABLE_21==1 ? [calc_bar_mask 
//                 CX_BAR4_RESOURCE_AVAIL_21] : MEM4_SPACE_DECODER_21==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 21 && BAR4_ENABLED_21==1 && MEM4_SPACE_DECODER_21==0 && 
//                 CX_BAR4_RESIZABLE_21==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR4 Mask register of function 21. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR4_MASK_21 64'hff


// Name:           MEM_FUNC21_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 21 && BAR4_ENABLED_21==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_4 of function 21 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR4_TARGET_MAP to 1 maps all incoming requests for BAR4 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC21_BAR4_TARGET_MAP 1'h1


// Name:           BAR5_ENABLED_21
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 21 && BAR4_TYPE_21==0
// Parameter Type: Feature Setting
// 
// Include the BAR5 registers for function 21.
`define BAR5_ENABLED_21 1'h0


`define DEFAULT_BAR5_ENABLED_21 1'h0


// Name:           MEM5_SPACE_DECODER_21
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 21 && BAR5_ENABLED_21==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 21.
`define MEM5_SPACE_DECODER_21 1'h0


// Name:           PREFETCHABLE5_21
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 21 && BAR5_ENABLED_21==1 && MEM5_SPACE_DECODER_21==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 21.
`define PREFETCHABLE5_21 1'h0


// Name:           BAR5_TYPE_21
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 21.
`define BAR5_TYPE_21 2'h0


// Name:           BAR5_SIZING_SCHEME_21
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 21 && BAR5_ENABLED_21==1
// Parameter Type: Feature Setting
// 
// BAR5  Function 21 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR5_SIZING_SCHEME_21 2'h0


// Name:           CX_BAR5_RESIZABLE_21
// Default:        0x0 ((BAR5_SIZING_SCHEME_21==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR5_ENABLED_21==1) && (MEM5_SPACE_DECODER_21==0)
// Parameter Type: Feature Setting
// 
// Defines BAR5 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR5 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR5_RESIZABLE_21 1'h0


// Name:           CX_BAR5_RESOURCE_AVAIL_21
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 21 && CX_BAR5_RESIZABLE_21==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR5 of function 21. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR5 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR5_RESOURCE_AVAIL_21 32'h10


// Name:           BAR5_MASK_WRITABLE_21
// Default:        0x0 ((BAR5_ENABLED_21==1 && BAR5_SIZING_SCHEME_21 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 21 && BAR5_ENABLED_21==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR5 Mask through DBI
`define BAR5_MASK_WRITABLE_21 1'h0


// Name:           BAR5_MASK_21
// Default:        0xffff (CX_BAR5_RESIZABLE_21==1 ? [calc_bar_mask 
//                 CX_BAR5_RESOURCE_AVAIL_21] : MEM5_SPACE_DECODER_21==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 21 && BAR5_ENABLED_21==1 && MEM5_SPACE_DECODER_21==0 && 
//                 CX_BAR5_RESIZABLE_21==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR5 Mask register of function 21. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR5_MASK_21 32'hffff


// Name:           MEM_FUNC21_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 21 && BAR5_ENABLED_21==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_5 of function 21 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR5_TARGET_MAP to 1 maps all incoming requests for BAR5 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC21_BAR5_TARGET_MAP 1'h1


`define FUNC21_BARSIZE_32 128'h0


`define FUNC21_BARSIZE 128'h0


`define FUNC21_BAR0_BARSIZE_TRGT1 128'h0


`define FUNC21_BAR2_BARSIZE_TRGT1 128'h0


`define FUNC21_BAR4_BARSIZE_TRGT1 128'h0


`define FUNC21_BAR0_TRGT1_ADDR_WIDTH 1


`define FUNC21_BAR2_TRGT1_ADDR_WIDTH 1


`define FUNC21_BAR4_TRGT1_ADDR_WIDTH 1


// Name:         CX_NUM_RBARS_21
// Default:      0 ([calc_num_rbars CX_BAR0_RESIZABLE_21 CX_BAR1_RESIZABLE_21 
//               CX_BAR2_RESIZABLE_21 CX_BAR3_RESIZABLE_21 CX_BAR4_RESIZABLE_21 
//               CX_BAR5_RESIZABLE_21])
// Values:       -2147483648, ..., 2147483647
// 
// Number of resizable BARs
`define CX_NUM_RBARS_21 0

//-/ END:   BAR CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SR-IOV CAPABILITIES CONFIGURATION


// Name:           CX_VF_DEPENDENCY_LINK_21
// Default:        0x21
// Values:         0x0, ..., 0xff
// Enabled:        CX_VF_DEPENDENCY_LINK_SUPP && (CX_NFUNC > 21) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Specifies the 8-bit VF dependency link for PF21. Valid only if CX_VF_DEPENDENCY_LINK_SUPP=1.
`define CX_VF_DEPENDENCY_LINK_21 8'h21


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER1_21
// Default:        0x2 ((CX_NFUNC>=17) ? 32 : (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : 
//                 (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF21 in an ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER1_21 16'h2


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER0_21
// Default:        0x100
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF21 
//  in a non-ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER0_21 16'h100


// Name:           VF_STRIDE_ARI_CAP_HIER1_21
// Default:        0x2 (CX_VF_STRIDE_ALWAYS_ONE) ? 1 : ((CX_NFUNC>=17) ? 32 : 
//                 (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF21 in an ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER1_21 16'h2


// Name:           VF_STRIDE_ARI_CAP_HIER0_21
// Default:        0x100 ((CX_VF_STRIDE_ALWAYS_ONE) ? 0x0001 : 0x0100)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF21 in a non-ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER0_21 16'h100


// Name:           CX_VF_DEVICE_ID_21
// Default:        0x0 (CX_DEVICE_ID_21)
// Values:         0x0, ..., 0xffff
// Enabled:        (CX_NFUNC > 21) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 16-bit virtual function Device ID for PF21. 
//  It might be different from the physical function's.
`define CX_VF_DEVICE_ID_21 16'h0


// Name:           CX_VF_SUPP_PAGE_SIZE_21
// Default:        0x553
// Values:         0x553, ..., 0xffff
// Enabled:        (CX_NFUNC > 21) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 32-bit supported page sizes for virtual functions for PF21
`define CX_VF_SUPP_PAGE_SIZE_21 32'h553


// Name:           CX_ARI_CAP_HIER_PRSVD_21
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Specifies if ARI Capable Hierarchy bit is preserved across certain power state transitions 
//  Only present in PF0. Read Only Zero in this PF21.
`define CX_ARI_CAP_HIER_PRSVD_21 1'h0

//-/===========================================
//-/ START: VF BAR CONFIGURATION


// Name:           VF_BAR0_ENABLED_21
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 21)
// Parameter Type: Feature Setting
// 
// Include the VF BAR0 registers in PF21
`define VF_BAR0_ENABLED_21 1'h1


`define VF_DEFAULT_BAR0_ENABLED_21 1'h1


// Name:           VF_MEM0_SPACE_DECODER_21
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR0_ENABLED_21 && CX_SRIOV_ENABLE && (CX_NFUNC > 21)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Space Indicator 
//  ALWAYS set to Memory for Virtual Functions
`define VF_MEM0_SPACE_DECODER_21 1'h0


// Name:           VF_PREFETCHABLE0_21
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_21==1 && VF_MEM0_SPACE_DECODER_21==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 21)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Prefetchable 
//  When set indicates VF BAR0 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE0_21 1'h0


// Name:           VF_BAR0_TYPE_21
// Default:        64-bit ((VF_MEM0_SPACE_DECODER_21==1 || VF_BAR0_ENABLED_21==0) ? 0 
//                 : 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR0_ENABLED_21==1 && VF_MEM0_SPACE_DECODER_21==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 21)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 21; (bits [2:1] for a memory BAR).
`define VF_BAR0_TYPE_21 2'h2


// Name:           VF_BAR0_MASK_WRITABLE_21
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_21==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 21)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR0_MASK_WRITABLE_21 1'h0


// Name:           VF_BAR0_MASK_21
// Default:        0xfffff (VF_MEM0_SPACE_DECODER_21==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR0_ENABLED_21==1 && VF_MEM0_SPACE_DECODER_21==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 21)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Mask 
//  Determines the default of the VF BAR Mask register for PF21. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR0_MASK_21 64'hfffff


// Name:           VF_MEM_FUNC21_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR0_ENABLED_21==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE 
//                 && (CX_NFUNC > 21)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF21 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC21_BAR0_TARGET_MAP 1'h1


// Name:           VF_BAR1_ENABLED_21
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        (VF_BAR0_TYPE_21==0)  && CX_SRIOV_ENABLE && (CX_NFUNC > 21)
// Parameter Type: Feature Setting
// 
// Include the VF BAR1 registers in PF21
`define VF_BAR1_ENABLED_21 1'h0


`define VF_DEFAULT_BAR1_ENABLED_21 1'h0


// Name:           VF_MEM1_SPACE_DECODER_21
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR1_ENABLED_21==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 21)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Space Indicator
`define VF_MEM1_SPACE_DECODER_21 1'h0


// Name:           VF_PREFETCHABLE1_21
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_21==1 && VF_MEM1_SPACE_DECODER_21==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 21)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Prefetchable 
//  When set indicates VF BAR1 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE1_21 1'h0


// Name:           VF_BAR1_TYPE_21
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 21; (bits [2:1] for a memory BAR).
`define VF_BAR1_TYPE_21 2'h0


// Name:           VF_BAR1_MASK_WRITABLE_21
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_21==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 21)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR1_MASK_WRITABLE_21 1'h0


// Name:           VF_BAR1_MASK_21
// Default:        0xffff (VF_MEM1_SPACE_DECODER_21==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR1_ENABLED_21==1 && VF_MEM1_SPACE_DECODER_21==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 21)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Mask 
//  Determines the default of the VF BAR Mask register for PF21. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR1_MASK_21 32'hffff


// Name:           VF_MEM_FUNC21_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR1_ENABLED_21==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE 
//                 && (CX_NFUNC > 21)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF21 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC21_BAR1_TARGET_MAP 1'h1


// Name:           VF_BAR2_ENABLED_21
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 21)
// Parameter Type: Feature Setting
// 
// Include the VF BAR2 registers in PF21
`define VF_BAR2_ENABLED_21 1'h1


`define VF_DEFAULT_BAR2_ENABLED_21 1'h1


// Name:           VF_MEM2_SPACE_DECODER_21
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR2_ENABLED_21==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 21)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Memory Space Indicator
`define VF_MEM2_SPACE_DECODER_21 1'h0


// Name:           VF_PREFETCHABLE2_21
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_21==1 && VF_MEM2_SPACE_DECODER_21==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 21)
// Parameter Type: Register Default Setting
// 
// BAR2 Memory Prefetchable 
//  When set indicates VF BAR2 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE2_21 1'h0


// Name:           VF_BAR2_TYPE_21
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR2_ENABLED_21==1 && VF_MEM2_SPACE_DECODER_21==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 21)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 21; (bits [2:1] for a memory BAR).
`define VF_BAR2_TYPE_21 2'h0


// Name:           VF_BAR2_MASK_WRITABLE_21
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_21==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 21)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR2_MASK_WRITABLE_21 1'h0


// Name:           VF_BAR2_MASK_21
// Default:        0xfffff (VF_MEM2_SPACE_DECODER_21==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR2_ENABLED_21==1 && VF_MEM2_SPACE_DECODER_21==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 21)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Mask 
//  Determines the default of the VF BAR Mask register for PF21. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR2_MASK_21 64'hfffff


// Name:           VF_MEM_FUNC21_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR2_ENABLED_21==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 21)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF21 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC21_BAR2_TARGET_MAP 1'h1


// Name:           VF_BAR3_ENABLED_21
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_TYPE_21==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 21)
// Parameter Type: Feature Setting
// 
// Include the VF BAR3 registers in PF21
`define VF_BAR3_ENABLED_21 1'h0


`define VF_DEFAULT_BAR3_ENABLED_21 1'h0


// Name:           VF_MEM3_SPACE_DECODER_21
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR3_ENABLED_21==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 21)
// Parameter Type: Register Default Setting
// 
// BAR3 Memory Space Indicator
`define VF_MEM3_SPACE_DECODER_21 1'h0


// Name:           VF_PREFETCHABLE3_21
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_21==1 && VF_MEM3_SPACE_DECODER_21==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 21)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Memory Prefetchable 
//  When set indicates VF BAR3 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE3_21 1'h0


// Name:           VF_BAR3_TYPE_21
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 21; (bits [2:1] for a memory BAR).
`define VF_BAR3_TYPE_21 2'h0


// Name:           VF_BAR3_MASK_WRITABLE_21
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_21==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 21)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR3_MASK_WRITABLE_21 1'h0


// Name:           VF_BAR3_MASK_21
// Default:        0xffff (VF_MEM3_SPACE_DECODER_21==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR3_ENABLED_21==1 && VF_MEM3_SPACE_DECODER_21==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 21)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Mask 
//  Determines the default of the VF BAR Mask register for PF21. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR3_MASK_21 32'hffff


// Name:           VF_MEM_FUNC21_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR3_ENABLED_21==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 21)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF21 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC21_BAR3_TARGET_MAP 1'h1


// Name:           VF_BAR4_ENABLED_21
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 21)
// Parameter Type: Feature Setting
// 
// Include the VF BAR4 registers in PF21
`define VF_BAR4_ENABLED_21 1'h1


`define VF_DEFAULT_BAR4_ENABLED_21 1'h1


// Name:           VF_MEM4_SPACE_DECODER_21
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR4_ENABLED_21==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 21)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Space Indicator
`define VF_MEM4_SPACE_DECODER_21 1'h0


// Name:           VF_PREFETCHABLE4_21
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_21==1 && VF_MEM4_SPACE_DECODER_21==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 21)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Prefetchable 
//  When set indicates VF BAR4 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE4_21 1'h0


// Name:           VF_BAR4_TYPE_21
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR4_ENABLED_21==1 && VF_MEM4_SPACE_DECODER_21==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 21)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 21; (bits [2:1] for a memory BAR).
`define VF_BAR4_TYPE_21 2'h0


// Name:           VF_BAR4_MASK_WRITABLE_21
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_21==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 21)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR4_MASK_WRITABLE_21 1'h0


// Name:           VF_BAR4_MASK_21
// Default:        0xfff (VF_MEM4_SPACE_DECODER_21==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR4_ENABLED_21==1 && VF_MEM4_SPACE_DECODER_21==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 21)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Mask 
//  Determines the default of the VF BAR Mask register for PF21. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR4_MASK_21 64'hfff


// Name:           VF_MEM_FUNC21_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR4_ENABLED_21==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 21)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF21 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC21_BAR4_TARGET_MAP 1'h1


// Name:           VF_BAR5_ENABLED_21
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_TYPE_21==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 21)
// Parameter Type: Feature Setting
// 
// Include the VF BAR5 registers in PF21
`define VF_BAR5_ENABLED_21 1'h0


`define VF_DEFAULT_BAR5_ENABLED_21 1'h0


// Name:           VF_MEM5_SPACE_DECODER_21
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR5_ENABLED_21==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 21)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Space Indicator
`define VF_MEM5_SPACE_DECODER_21 1'h0


// Name:           VF_PREFETCHABLE5_21
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_21==1 && VF_MEM5_SPACE_DECODER_21==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 21)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Prefetchable 
//  When set indicates VF BAR5 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE5_21 1'h0


// Name:           VF_BAR5_TYPE_21
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 21; (bits [2:1] for a memory BAR).
`define VF_BAR5_TYPE_21 2'h0


// Name:           VF_BAR5_MASK_WRITABLE_21
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_21==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 21)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR5_MASK_WRITABLE_21 1'h0


// Name:           VF_BAR5_MASK_21
// Default:        0xffff (VF_MEM5_SPACE_DECODER_21==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR5_ENABLED_21==1 && VF_MEM5_SPACE_DECODER_21==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 21)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Mask 
//  Determines the default of the VF BAR Mask register for PF21. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR5_MASK_21 32'hffff


// Name:           VF_MEM_FUNC21_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR5_ENABLED_21==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 21)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF21 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC21_BAR5_TARGET_MAP 1'h1


`define VF_FUNC21_BARSIZE_32 128'h101000


`define VF_FUNC21_BARSIZE 128'h201000

//-/ END:   VF BAR CONFIGURATION
//-/===========================================

//-/ END:   SR-IOV CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: TPH CAPABILITIES CONFIGURATION


// Name:           TPH_IVEC_21
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Interrupt Vector Mode. If set indicates that the function supports the Interrupt Vector 
// Mode of operation. Function 21.
`define TPH_IVEC_21 1'h0


// Name:           TPH_DS_21
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Device Specific Mode. If set indicates that the function supports the Device Specific Mode 
// of operation. Function 21.
`define TPH_DS_21 1'h0


// Name:           TPH_ST_TABLE_LOC_21
// Default:        Not Present
// Values:         Not Present (0), TPH Requester Capability Structure (1), MSI-X 
//                 Table Structure (2)
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_DS_21 || TPH_IVEC_21))
// Parameter Type: Feature Setting
// 
// TLP Processing Hints Steering Tag Table Location. Value indicates if and where the ST Table is located. Function 21.
`define TPH_ST_TABLE_LOC_21 0

//located in the TPH Requester Capability structure. Please reduce the ST Table Size for this mode of operation"

// Name:           TPH_ST_TABLE_SIZE_21
// Default:        1
// Values:         1, ..., 2048
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_ST_TABLE_LOC_21 != 0))
// Parameter Type: Feature Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define TPH_ST_TABLE_SIZE_21 1


`define TPH_ST_TABLE_DEPTH_21 0

//-/ END:   TPH CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: ATS CAPABILITIES CONFIGURATION


// Name:           ATS_INV_Q_DPTH_21
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// The number of Invalidate Requests that the Function can accept before putting backpressure on the upstream connection. A 
// value of 0 indicates the function can accept 32 Invalidate requests. Function 21.
`define ATS_INV_Q_DPTH_21 5'd0


// Name:           ATS_STU_21
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// This value indicates to the Function the minimum number of 4096-byte blocks that is indicated in a Translation 
// Completion or Invalidate Request. This is a power of 2 multiplier and the number of blocks is 2^STU. A value of 0 indicates 1 block 
// and a value of 31 indicates 2^31 blocks (or 8 TB total). Function 21.
`define ATS_STU_21 5'd0

//-/ END:   ATS CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PRS CAPABILITIES CONFIGURATION


// Name:           CX_PRS_OUTSTANDING_CAPACITY_VALUE_21
// Default:        0x1
// Values:         0x0, ..., 0xffffffff
// Enabled:        (CX_PRS_ENABLE==1) && (CX_NFUNC > 21)
// Parameter Type: Register Default Setting
// 
// Register default for PRS Outstanding Capacity in PF21. 
// For more details, see the PRS_OUTSTANDING_CAPACITY field in the PRS_REQ_CAPACITY_REG register.
`define CX_PRS_OUTSTANDING_CAPACITY_VALUE_21 32'h1

//-/ END:   PRS CAPABILITIES CONFIGURATION
//-/===========================================


//-/===========================================
//--- START: RN


// Name:           CX_RN_IMM_VALUE_21
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 21)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for PF21.
`define CX_RN_IMM_VALUE_21 1'h0


// Name:           CX_RN_IMM_D0_VALUE_21
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 21)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for PF21.
`define CX_RN_IMM_D0_VALUE_21 1'h0


// Name:           CX_RN_FRS_VALUE_21
// Default:        0x0 (CX_RN_FRS_SUPPORTED==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_FRS_SUPPORTED==1) && (CX_NFUNC > 21)
// Parameter Type: Feature Setting
// 
// Function Readiness Status messaging supported for function PF21.
`define CX_RN_FRS_VALUE_21 1'h0


// Name:           CX_RN_RTR_VALID_21
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 21)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF21.
`define CX_RN_RTR_VALID_21 1'h0


// Name:           CX_RN_RTR_DL_UP_VALUE_21
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 21)
// Parameter Type: Register Default Setting
// 
// Register default for RTR DL Up Time field in PF21.
`define CX_RN_RTR_DL_UP_VALUE_21 12'h0


// Name:           CX_RN_RTR_RESET_VALUE_21
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 21)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF21.
`define CX_RN_RTR_RESET_VALUE_21 12'h0


// Name:           CX_RN_RTR_D3D0_VALUE_21
// Default:        0x0
// Values:         0x0, ..., 0x80a
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 21)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF21.
`define CX_RN_RTR_D3D0_VALUE_21 12'h0


// Name:           CX_RN_RTR_FLR_VALUE_21
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_FLR_ENABLE==1) && (CX_NFUNC > 21)
// Parameter Type: Register Default Setting
// 
// Register default for RTR FLR Time field in PF21.
`define CX_RN_RTR_FLR_VALUE_21 12'h0


// Name:           VF_RN_IMM_VALUE_21
// Default:        0x0 (CX_RN_IMM_VALUE_21 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 21))
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for VFs in PF21.
`define VF_RN_IMM_VALUE_21 1'h0


// Name:           VF_RN_IMM_D0_VALUE_21
// Default:        0x0 (CX_RN_IMM_D0_VALUE_21 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 21))
// Parameter Type: Register Default Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for VFs in PF21.
`define VF_RN_IMM_D0_VALUE_21 1'h0


// Name:           VF_RN_RTR_VALID_21
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 21) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF21 VFs.
`define VF_RN_RTR_VALID_21 1'h0


// Name:           VF_RN_RTR_RESET_VALUE_21
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_21)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 21) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF21 VFS.
`define VF_RN_RTR_RESET_VALUE_21 12'h0


// Name:           VF_RN_RTR_D3D0_VALUE_21
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_21)
// Values:         0x0, ..., 0x80a
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 21) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF21 VFS.
`define VF_RN_RTR_D3D0_VALUE_21 12'h0


// Name:           VF_RN_RTR_FLR_VALUE_21
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_21)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 21) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF21 VFs.
`define VF_RN_RTR_FLR_VALUE_21 12'h0


// Name:           EXT_VF_RN_RTR_VALID_21
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 21) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF21 VFs.
`define EXT_VF_RN_RTR_VALID_21 1'h0


// Name:           EXT_VF_RN_RTR_RESET_VALUE_21
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_21)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 21) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF21 VFS.
`define EXT_VF_RN_RTR_RESET_VALUE_21 12'h0


// Name:           EXT_VF_RN_RTR_D3D0_VALUE_21
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_21)
// Values:         0x0, ..., 0x80a
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 21) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF21 VFS.
`define EXT_VF_RN_RTR_D3D0_VALUE_21 12'h0


// Name:           EXT_VF_RN_RTR_FLR_VALUE_21
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_21)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 21) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF21 VFs.
`define EXT_VF_RN_RTR_FLR_VALUE_21 12'h0

//-/ END:   RN
//-/===========================================

//-/ START: LN CAPABILITIES CONFIGURATION
//-/===========================================


// Name:           CX_LN_REG_MAX_VALUE_21
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 21))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_64_SUPPORTED field in the LNR_CAP_OFF register for PF21.
`define CX_LN_REG_MAX_VALUE_21 5'h0


// Name:           CX_LN_128_SUPPORTED_VALUE_21
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 21))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_128_SUPPORTED field in the LNR_CAP_OFF register for PF21.
`define CX_LN_128_SUPPORTED_VALUE_21 1'h0


// Name:           CX_LN_64_SUPPORTED_VALUE_21
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 21))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_REGISTRATION_MAX field in the LNR_CAP_OFF register for PF21.
`define CX_LN_64_SUPPORTED_VALUE_21 1'h0

//-/ END:   LN CAPABILITIES CONFIGURATION
//-/===========================================




//-/==========================================
//-/ End FUNC21 Config
//-/==========================================

//-/===========================================
//-/ Function 22 Configuration Registers
//-/ ==========================================


// Name:         FUNC_22
// Default:      0 ((CX_NFUNC > 22) ? 1 : 0)
// Values:       0, 1
// 
// This parameter indicates that Function 22 is present
// `define FUNC_22

//-/===========================================
//-/ START: PCI-E CAPABILITIES CONFIGURATION


// Name:           PCIE_CAP_INT_MSG_NUM_22
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 22
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Message Number field in the PCI Express Capabilities Register. Function 22.
`define PCIE_CAP_INT_MSG_NUM_22 5'h0


// Name:           SLOT_IMPLEMENTED_22
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_NFUNC > 22))
// Parameter Type: Register Default Setting
// 
// Indicates that the PCI Express link associated with this Port is connected to a slot. Function 22.
`define SLOT_IMPLEMENTED_22 1'h0


// Name:           DEFAULT_PHANTOM_FUNC_SUPPORTED_22
// Default:        0x0
// Values:         0x0, ..., 0x3
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_PHANTOM_FUNC_SUPPORTED_22 2'h0


// Name:           DEFAULT_EXT_TAG_FIELD_SUPPORTED_22
// Default:        0x0 (DEFAULT_EXT_TAG_FIELD_SUPPORTED_0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 22
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_EXT_TAG_FIELD_SUPPORTED_22 1'h0



// Name:           DEFAULT_ATT_BUTT_PRE_22
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 22
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Button is present
`define DEFAULT_ATT_BUTT_PRE_22 1'h0


// Name:           DEFAULT_ATT_IND_PRE_22
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 22
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Indicator is present
`define DEFAULT_ATT_IND_PRE_22 1'h0


// Name:           DEFAULT_PWR_IND_PRE_22
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 22
// Parameter Type: Register Default Setting
// 
// When set indicates that a Power Indicator is present
`define DEFAULT_PWR_IND_PRE_22 1'h0


// Name:           DEFAULT_NO_SNOOP_SUPPORTED_22
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 22
// Parameter Type: Register Default Setting
// 
// Default value for the Enable No Snoop bit in the Device Control Register. Function 22.
`define DEFAULT_NO_SNOOP_SUPPORTED_22 1'h0


// Name:           ROOT_RCB_22
// Default:        64-bit
// Values:         64-bit (0x0), 128-bit (0x1)
// Parameter Type: Register Default Setting
// 
// Default value for the Read Completion Boundary (RCB) bit in the Link Control Register.
`define ROOT_RCB_22 1'h0


//-/ END:   PCI-E CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: MSI-X CAPABILITIES CONFIGURATION


// Name:           MSIX_TABLE_SIZE_22
// Default:        0x0
// Values:         0x0, ..., 0x7ff
// Enabled:        CX_NFUNC > 22 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the MSI-X Table Size field in the MSI-X Control Register. Function 22.
`define MSIX_TABLE_SIZE_22 11'h0


// Name:           MSIX_TABLE_BIR_22
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 22 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table BAR Indicator Register (BIR) field in the MSI-X Table Offset and BIR Register. Function 22.
`define MSIX_TABLE_BIR_22 3'h0


// Name:           MSIX_TABLE_OFFSET_22
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 22 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table Offset field in the MSI-X Table Offset and BIR Register. Function 22.
`define MSIX_TABLE_OFFSET_22 29'h0


// Name:           MSIX_PBA_BIR_22
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 22 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Pending Bit Array (PBA) BIR field in the MSI-X PBA Offset and BIR Register. Function 22.
`define MSIX_PBA_BIR_22 7'h0


// Name:           MSIX_PBA_OFFSET_22
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 22 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the PBA Offset field in the MSI-X PBA Offset and BIR Register. Function 22.
`define MSIX_PBA_OFFSET_22 29'h0

//-/ END:   MSI-X CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SATA CAPABILITIES CONFIGURATION


// Name:         SATA_HBA_OFFSET_22
// Default:      0x0
// Values:       0x0, ..., 0xfffff
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA Offset. Base address of the SATA HBA registers, 
//  as an offset from the base address of the BAR indicated 
//  by the SATA BAR field.
`define SATA_HBA_OFFSET_22 20'h0


// Name:         SATA_BAR_22
// Default:      0x0
// Values:       0x0, ..., 0xf
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA BAR. The bar that maps to SATA HBA registers,
`define SATA_BAR_22 4'h0

//-/ END:   SATA CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: AER CAPABILITIES CONFIGURATION


// Name:           DEFAULT_ECRC_CHK_CAP_22
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 22 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Check Capable bit in the Advanced Capabilities and Control Register. Function 22.
`define DEFAULT_ECRC_CHK_CAP_22 1'h1


// Name:           DEFAULT_ECRC_GEN_CAP_22
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 22 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Generation Capability bit in the Advanced Capabilities and Control Register. Function 22.
`define DEFAULT_ECRC_GEN_CAP_22 1'h1


// Name:           AER_INT_MSG_NUM_22
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Parameter Type: Register Default Setting
// 
// Default value for the Advanced Error Interrupt Message Number field of the Root Error Status Register. Function 22.
`define AER_INT_MSG_NUM_22 5'h0



// Name:           CX_HDR_LOG_DEPTH_22
// Default:        0x1
// Values:         0x1, 0x2, 0x4
// Enabled:        CX_NFUNC > 22 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Feature Setting.
// 
// Header Log Depth
`define CX_HDR_LOG_DEPTH_22 3'h1


`define CX_MULTIPLE_HDR_REC_CAP_22 1'h0

//-/ END:   AER CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PM CAPABILITIES CONFIGURATION


// Name:           PME_SUPPORT_22
// Default:        0x1b
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 22
// Parameter Type: Register Default Setting
// 
// Default value for the PME_Support field in the Power Management Capabilities Register. Function 22.
`define PME_SUPPORT_22 5'h1b


// Name:           D1_SUPPORT_22
// Default:        true
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 22
// Parameter Type: Register Default Setting
// 
// Default value for the D1 Support bit in the Power Management Capabilities Register. Function 22.
`define D1_SUPPORT_22 1'h1


// Name:           D2_SUPPORT_22
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 22
// Parameter Type: Register Default Setting
// 
// Default value for the D2 Support bit in the Power Management Capabilities Register. Function 22.
`define D2_SUPPORT_22 1'h0


// Name:           DEV_SPEC_INIT_22
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 22
// Parameter Type: Register Default Setting
// 
// Default value for the Device Specific Initialization (DSI) bit in the Power Management Capabilities Register. Function 
// 22.
`define DEV_SPEC_INIT_22 1'h0


// Name:           AUX_CURRENT_22
// Default:        375mA
// Values:         0mA (0x0), 55mA (0x1), 100mA (0x2), 160mA (0x3), 220mA (0x4), 270mA 
//                 (0x5), 320mA (0x6), 375mA (0x7)
// Enabled:        CX_NFUNC > 22
// Parameter Type: Register Default Setting
// 
// Default value for the Aux Current field in the Power Management Capabilities Register. Function 22.
`define AUX_CURRENT_22 3'h7


// Name:           DEFAULT_NO_SOFT_RESET_22
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 22
// Parameter Type: Register Default Setting
// 
// Default value for the No Soft Reset bit in the Power Management Control and Status Register. When set, you should not 
// reset any controller registers when transitioning from D3hot to D0. Therefore, you should not assert the non_sticky_rst_n 
// and sticky_rst_n inputs. Function 22.
`define DEFAULT_NO_SOFT_RESET_22 1'h0

//-/ END:   PM CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PCI BASIC CONFIGURATION


// Name:           CX_DEVICE_ID_22
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 22
// Parameter Type: Register Default Setting
// 
// Default value for the Device ID field in the Device ID and Vendor ID Register. Function 22.
`define CX_DEVICE_ID_22 16'h0


// Name:           CX_VENDOR_ID_22
// Default:        0x16c3
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 22
// Parameter Type: Register Default Setting
// 
// Default value for the Vendor ID field in the Device ID and Vendor ID Register. Function 22.
`define CX_VENDOR_ID_22 16'h16c3


// Name:           CX_REVISION_ID_22
// Default:        0x1
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 22
// Parameter Type: Register Default Setting
// 
// Default value for the Revision ID field in the Revision ID Register. Function 22.
`define CX_REVISION_ID_22 8'h1


// Name:           SUBSYS_DEV_ID_22
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 22
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 22.
`define SUBSYS_DEV_ID_22 16'h0


// Name:           SUBSYS_VENDOR_ID_22
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 22
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem Vendor ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 22.
`define SUBSYS_VENDOR_ID_22 16'h0


// Name:           BASE_CLASS_CODE_22
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 22
// Parameter Type: Register Default Setting
// 
// Default value for the Base Class Code field in the Class Code Register. Function 22.
`define BASE_CLASS_CODE_22 8'h0


// Name:           SUB_CLASS_CODE_22
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 22
// Parameter Type: Register Default Setting
// 
// Default value for the Subclass Code field in the Class Code Register. Function 22.
`define SUB_CLASS_CODE_22 8'h0


// Name:           IF_CODE_22
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 22
// Parameter Type: Register Default Setting
// 
// Default value for the Programming Interface field in the Class Code Register. Function 22.
`define IF_CODE_22 8'h0


// Name:           CARDBUS_CIS_PTR_22
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 22
// Parameter Type: Register Default Setting
// 
// Default value for the CardBus CIS Pointer Register. Function 22.
`define CARDBUS_CIS_PTR_22 16'h0


// Name:           INT_PIN_MAPPING_22
// Default:        INTA
// Values:         None (0x0), INTA (0x1), INTB (0x2), INTC (0x3), INTD (0x4)
// Enabled:        CX_NFUNC > 22
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Pin Register. Function 22.
`define INT_PIN_MAPPING_22 8'h1


// Name:           IO_DECODE_32_22
// Default:        16-bit
// Values:         16-bit (0x0), 32-bit (0x1)
// Enabled:        CX_NFUNC > 22
// Parameter Type: Register Default Setting
// 
// Default value for the 32-Bit I/O Space bit in the I/O Base and I/O Limit Register. Function 22.
`define IO_DECODE_32_22 1'h0


// Name:           MEM_DECODE_64_22
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x1)
// Enabled:        CX_NFUNC > 22
// Parameter Type: Register Default Setting
// 
// Default value for the 64-Bit Memory Addressing bit in the Prefetchable Memory Base and Limit Register. Function 22.
`define MEM_DECODE_64_22 1'h0


// Name:           ROM_BAR_ENABLED_22
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 22
// Parameter Type: Register Default Setting
// 
// Include the expansion ROM BAR registers. Function 22.
`define ROM_BAR_ENABLED_22 1'h1


`define DEFAULT_ROM_BAR_ENABLED_22 1'h1


// Name:           ROM_MASK_22
// Default:        0xffff
// Values:         0x7ff, ..., 0xffffff
// Enabled:        CX_NFUNC > 22 && ROM_BAR_ENABLED_22==1
// Parameter Type: Register Default Setting
// 
// Determines the default of the Expansion ROM BAR Mask register. Function 22. 
//  - The BAR Mask register specifies which bits of the Expansion ROM BAR are non-writable by host software, which 
//  determines the size of the BAR. 
//  - The maximum value for ROM_MASK_N is 0xFFFFFF because the maximum space that can be claimed by an Expansion ROM BAR 
//  is 16 MB. 
//  - For example: 32'hFFFF =BAR size of 2^16.
`define ROM_MASK_22 32'hffff


// Name:           ROM_MASK_WRITABLE_22
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 22 && ROM_BAR_ENABLED_22==1
// Parameter Type: Feature Setting
// 
// Determines if the Expansion ROM BAR Mask register for function 22 is writable by application software. If writing to a 
// Expansion ROM BAR Mask register is enabled, your application can write to the Expansion ROM BAR Mask register through the 
// DBI by asserting dbi_cs2 in addition to dbi_cs.
`define ROM_MASK_WRITABLE_22 1'h0


// Name:           ROM_FUNC22_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 22 && ROM_BAR_ENABLED_22==1 && TRGT1_POPULATE==1))
// Parameter Type: Register Default Setting
// 
// Direct incoming requests that pass filtering and match the Expansion ROM BAR of function 22 to either RTRGT0 or RTRGT1. 
//  - For example, setting ROM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for the Expansion ROM BAR of function 
//  0 to RTRGT1. 
//  - If TRGT1_POPULATE =0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define ROM_FUNC22_TARGET_MAP 1'h1


// Name:           CX_PCI_HEADER_DEFAULTS_VISIBLE_22
// Default:        0
// Values:         0, 1
// Parameter Type: Register Default Setting
// 
// Select here if you want to configure the defaults for the other PCI Standard Header registers for function 22. 
//  An extra window will appear under this page. To access it, click the plus/minus symbol in the hierarchy view on the 
//  left panel. 
//  This is optional but not usually recommended. 
//  You can also change these register defaults using the DBI before (or after) the link comes up.
`define CX_PCI_HEADER_DEFAULTS_VISIBLE_22 0

//-/ END:   PCI BASIC CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: BAR CONFIGURATION


// Name:           BAR0_ENABLED_22
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 22
// Parameter Type: Feature Setting
// 
// Include the BAR0 registers for function 22.
`define BAR0_ENABLED_22 1'h1


`define DEFAULT_BAR0_ENABLED_22 1'h1


// Name:           MEM0_SPACE_DECODER_22
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 22 && BAR0_ENABLED_22==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 22.
`define MEM0_SPACE_DECODER_22 1'h0


// Name:           PREFETCHABLE0_22
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 22 && BAR0_ENABLED_22==1 && MEM0_SPACE_DECODER_22==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 22.
`define PREFETCHABLE0_22 1'h0


// Name:           BAR0_TYPE_22
// Default:        64-bit ((MEM0_SPACE_DECODER_22==1 || BAR0_ENABLED_22==0) ? 0 : 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 22 && BAR0_ENABLED_22==1 && MEM0_SPACE_DECODER_22==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 22.
`define BAR0_TYPE_22 2'h2


// Name:           BAR0_SIZING_SCHEME_22
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 22 && BAR0_ENABLED_22==1
// Parameter Type: Feature Setting
// 
// BAR0 Function 22 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR0_SIZING_SCHEME_22 2'h0


// Name:           CX_BAR0_RESIZABLE_22
// Default:        0x0 ((BAR0_SIZING_SCHEME_22==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR0_ENABLED_22==1) && (MEM0_SPACE_DECODER_22==0)
// Parameter Type: Feature Setting
// 
// Defines BAR0 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR0 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR0_RESIZABLE_22 1'h0


// Name:           CX_BAR0_RESOURCE_AVAIL_22
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 22 && CX_BAR0_RESIZABLE_22==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR0 of function 22. 
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
// Example: 0x00000030 indicates that BAR0 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR0_RESOURCE_AVAIL_22 64'h10


// Name:           BAR0_MASK_WRITABLE_22
// Default:        0x0 ((BAR0_ENABLED_22==1 && BAR0_SIZING_SCHEME_22 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 22 && BAR0_ENABLED_22==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR0 Mask through DBI
`define BAR0_MASK_WRITABLE_22 1'h0


// Name:           BAR0_MASK_22
// Default:        0xfffff (CX_BAR0_RESIZABLE_22==1 ? [calc_bar_mask 
//                 CX_BAR0_RESOURCE_AVAIL_22] : MEM0_SPACE_DECODER_22==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 22 && BAR0_ENABLED_22==1 && MEM0_SPACE_DECODER_22==0 && 
//                 CX_BAR0_RESIZABLE_22==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR0 Mask register of function 22. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR0_MASK_22 64'hfffff


// Name:           MEM_FUNC22_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 22 && BAR0_ENABLED_22==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_0 of function 22 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming Requests for BAR0 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC22_BAR0_TARGET_MAP 1'h1


// Name:           BAR1_ENABLED_22
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 22 && BAR0_TYPE_22==0
// Parameter Type: Feature Setting
// 
// Include the BAR1 registers for function 22.
`define BAR1_ENABLED_22 1'h0


`define DEFAULT_BAR1_ENABLED_22 1'h0


// Name:           MEM1_SPACE_DECODER_22
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 22 && BAR1_ENABLED_22==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 22.
`define MEM1_SPACE_DECODER_22 1'h0


// Name:           PREFETCHABLE1_22
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 22 && BAR1_ENABLED_22==1 && MEM1_SPACE_DECODER_22==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 22.
`define PREFETCHABLE1_22 1'h0


// Name:           BAR1_TYPE_22
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 22.
`define BAR1_TYPE_22 2'h0


// Name:           BAR1_SIZING_SCHEME_22
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 22 && BAR1_ENABLED_22==1
// Parameter Type: Feature Setting
// 
// BAR1 Function 22 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR1_SIZING_SCHEME_22 2'h0


// Name:           CX_BAR1_RESIZABLE_22
// Default:        0x0 ((BAR1_SIZING_SCHEME_22==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR1_ENABLED_22==1) && (MEM1_SPACE_DECODER_22==0)
// Parameter Type: Feature Setting
// 
// Defines BAR1 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR1 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR1_RESIZABLE_22 1'h0


// Name:           CX_BAR1_RESOURCE_AVAIL_22
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 22 && CX_BAR1_RESIZABLE_22==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR1 of function 22. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR1 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR1_RESOURCE_AVAIL_22 32'h10


// Name:           BAR1_MASK_WRITABLE_22
// Default:        0x0 ((BAR1_ENABLED_22==1 && BAR1_SIZING_SCHEME_22 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 22 && BAR1_ENABLED_22==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR1 Mask through DBI
`define BAR1_MASK_WRITABLE_22 1'h0


// Name:           BAR1_MASK_22
// Default:        0xffff (CX_BAR1_RESIZABLE_22==1 ? [calc_bar_mask 
//                 CX_BAR1_RESOURCE_AVAIL_22] : MEM1_SPACE_DECODER_22==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 22 && BAR1_ENABLED_22==1 && MEM1_SPACE_DECODER_22==0 && 
//                 CX_BAR1_RESIZABLE_22==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR1 Mask register of function 22. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR1_MASK_22 32'hffff


// Name:           MEM_FUNC22_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 22 && BAR1_ENABLED_22==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_1 of function 22 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR1_TARGET_MAP to 1 maps all incoming Requests for BAR1 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC22_BAR1_TARGET_MAP 1'h1


// Name:           BAR2_ENABLED_22
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 22
// Parameter Type: Feature Setting
// 
// Include the BAR2 registers for function 22.
`define BAR2_ENABLED_22 1'h1


`define DEFAULT_BAR2_ENABLED_22 1'h1


// Name:           MEM2_SPACE_DECODER_22
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 22 && BAR2_ENABLED_22==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 22.
`define MEM2_SPACE_DECODER_22 1'h0


// Name:           PREFETCHABLE2_22
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 22 && BAR2_ENABLED_22==1 && MEM2_SPACE_DECODER_22==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 22.
`define PREFETCHABLE2_22 1'h0


// Name:           BAR2_TYPE_22
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 22 && BAR2_ENABLED_22==1 && MEM2_SPACE_DECODER_22==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 22.
`define BAR2_TYPE_22 2'h0


// Name:           BAR2_SIZING_SCHEME_22
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 22 && BAR2_ENABLED_22==1
// Parameter Type: Feature Setting
// 
// BAR2 Function 22 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR2_SIZING_SCHEME_22 2'h0


// Name:           CX_BAR2_RESIZABLE_22
// Default:        0x0 ((BAR2_SIZING_SCHEME_22==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR2_ENABLED_22==1) && (MEM2_SPACE_DECODER_22==0)
// Parameter Type: Feature Setting
// 
// Defines BAR2 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR2 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR2_RESIZABLE_22 1'h0


// Name:           CX_BAR2_RESOURCE_AVAIL_22
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 22 && CX_BAR2_RESIZABLE_22==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR2 of function 22. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR2 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR2_RESOURCE_AVAIL_22 64'h10


// Name:           BAR2_MASK_WRITABLE_22
// Default:        0x0 ((BAR2_ENABLED_22==1 && BAR2_SIZING_SCHEME_22 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 22 && BAR2_ENABLED_22==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR2 Mask through DBI
`define BAR2_MASK_WRITABLE_22 1'h0


// Name:           BAR2_MASK_22
// Default:        0xfffff (CX_BAR2_RESIZABLE_22==1 ? [calc_bar_mask 
//                 CX_BAR2_RESOURCE_AVAIL_22] : MEM2_SPACE_DECODER_22==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 22 && BAR2_ENABLED_22==1 && MEM2_SPACE_DECODER_22==0 && 
//                 CX_BAR2_RESIZABLE_22==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR2 Mask register of function 22. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR2_MASK_22 64'hfffff


// Name:           MEM_FUNC22_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 22 && BAR2_ENABLED_22==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_2 of function 22 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR2_TARGET_MAP to 1 maps all incoming requests for BAR2 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC22_BAR2_TARGET_MAP 1'h1


// Name:           BAR3_ENABLED_22
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 22 && BAR2_TYPE_22==0
// Parameter Type: Feature Setting
// 
// Include the BAR3 registers for function 22.
`define BAR3_ENABLED_22 1'h0



`define DEFAULT_BAR3_ENABLED_22 1'h0


// Name:           MEM3_SPACE_DECODER_22
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 22 && BAR3_ENABLED_22==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 22.
`define MEM3_SPACE_DECODER_22 1'h0


// Name:           PREFETCHABLE3_22
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 22 && BAR3_ENABLED_22==1 && MEM3_SPACE_DECODER_22==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 22.
`define PREFETCHABLE3_22 1'h0


// Name:           BAR3_TYPE_22
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 22.
`define BAR3_TYPE_22 2'h0


// Name:           BAR3_SIZING_SCHEME_22
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 22 && BAR3_ENABLED_22==1
// Parameter Type: Feature Setting
// 
// BAR3 Function 22 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR3_SIZING_SCHEME_22 2'h0


// Name:           CX_BAR3_RESIZABLE_22
// Default:        0x0 ((BAR3_SIZING_SCHEME_22==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR3_ENABLED_22==1) && (MEM3_SPACE_DECODER_22==0)
// Parameter Type: Feature Setting
// 
// Defines BAR3 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR3 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR3_RESIZABLE_22 1'h0


// Name:           CX_BAR3_RESOURCE_AVAIL_22
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 22 && CX_BAR3_RESIZABLE_22==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR3 of function 22. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR3 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR3_RESOURCE_AVAIL_22 32'h10


// Name:           BAR3_MASK_WRITABLE_22
// Default:        0x0 ((BAR3_ENABLED_22==1 && BAR3_SIZING_SCHEME_22 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 22 && BAR3_ENABLED_22==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR3 Mask through DBI
`define BAR3_MASK_WRITABLE_22 1'h0


// Name:           BAR3_MASK_22
// Default:        0xffff (CX_BAR3_RESIZABLE_22==1 ? [calc_bar_mask 
//                 CX_BAR3_RESOURCE_AVAIL_22] : MEM3_SPACE_DECODER_22==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 22 && BAR3_ENABLED_22==1 && MEM3_SPACE_DECODER_22==0 && 
//                 CX_BAR3_RESIZABLE_22==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR3 Mask register of function 22. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR3_MASK_22 32'hffff


// Name:           MEM_FUNC22_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 22 && BAR3_ENABLED_22==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_3 of function 22 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR3_TARGET_MAP to 1 maps all incoming requests for BAR3 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC22_BAR3_TARGET_MAP 1'h1


// Name:           BAR4_ENABLED_22
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 22
// Parameter Type: Feature Setting
// 
// Include the BAR4 registers for function 22.
`define BAR4_ENABLED_22 1'h1


`define DEFAULT_BAR4_ENABLED_22 1'h1



// Name:           MEM4_SPACE_DECODER_22
// Default:        I/O (BAR4_ENABLED_22==1)
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 22 && BAR4_ENABLED_22==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 22.
`define MEM4_SPACE_DECODER_22 1'h1


// Name:           PREFETCHABLE4_22
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 22 && BAR4_ENABLED_22==1 && MEM4_SPACE_DECODER_22==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 22.
`define PREFETCHABLE4_22 1'h0


// Name:           BAR4_TYPE_22
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 22 && BAR4_ENABLED_22==1 && MEM4_SPACE_DECODER_22==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 22.
`define BAR4_TYPE_22 2'h0


// Name:           BAR4_SIZING_SCHEME_22
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 22 && BAR4_ENABLED_22==1
// Parameter Type: Feature Setting
// 
// BAR4  Function 22 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR4_SIZING_SCHEME_22 2'h0


// Name:           CX_BAR4_RESIZABLE_22
// Default:        0x0 ((BAR4_SIZING_SCHEME_22==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR4_ENABLED_22==1) && (MEM4_SPACE_DECODER_22==0)
// Parameter Type: Feature Setting
// 
// Defines BAR4 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR4 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR4_RESIZABLE_22 1'h0


// Name:           CX_BAR4_RESOURCE_AVAIL_22
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 22 &&  CX_BAR4_RESIZABLE_22==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR4 of function 22. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR4 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR4_RESOURCE_AVAIL_22 64'h10


// Name:           BAR4_MASK_WRITABLE_22
// Default:        0x0 ((BAR4_ENABLED_22==1 && BAR4_SIZING_SCHEME_22 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 22 && BAR4_ENABLED_22==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR4 Mask through DBI
`define BAR4_MASK_WRITABLE_22 1'h0


// Name:           BAR4_MASK_22
// Default:        0xff (CX_BAR4_RESIZABLE_22==1 ? [calc_bar_mask 
//                 CX_BAR4_RESOURCE_AVAIL_22] : MEM4_SPACE_DECODER_22==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 22 && BAR4_ENABLED_22==1 && MEM4_SPACE_DECODER_22==0 && 
//                 CX_BAR4_RESIZABLE_22==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR4 Mask register of function 22. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR4_MASK_22 64'hff


// Name:           MEM_FUNC22_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 22 && BAR4_ENABLED_22==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_4 of function 22 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR4_TARGET_MAP to 1 maps all incoming requests for BAR4 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC22_BAR4_TARGET_MAP 1'h1


// Name:           BAR5_ENABLED_22
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 22 && BAR4_TYPE_22==0
// Parameter Type: Feature Setting
// 
// Include the BAR5 registers for function 22.
`define BAR5_ENABLED_22 1'h0


`define DEFAULT_BAR5_ENABLED_22 1'h0


// Name:           MEM5_SPACE_DECODER_22
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 22 && BAR5_ENABLED_22==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 22.
`define MEM5_SPACE_DECODER_22 1'h0


// Name:           PREFETCHABLE5_22
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 22 && BAR5_ENABLED_22==1 && MEM5_SPACE_DECODER_22==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 22.
`define PREFETCHABLE5_22 1'h0


// Name:           BAR5_TYPE_22
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 22.
`define BAR5_TYPE_22 2'h0


// Name:           BAR5_SIZING_SCHEME_22
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 22 && BAR5_ENABLED_22==1
// Parameter Type: Feature Setting
// 
// BAR5  Function 22 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR5_SIZING_SCHEME_22 2'h0


// Name:           CX_BAR5_RESIZABLE_22
// Default:        0x0 ((BAR5_SIZING_SCHEME_22==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR5_ENABLED_22==1) && (MEM5_SPACE_DECODER_22==0)
// Parameter Type: Feature Setting
// 
// Defines BAR5 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR5 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR5_RESIZABLE_22 1'h0


// Name:           CX_BAR5_RESOURCE_AVAIL_22
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 22 && CX_BAR5_RESIZABLE_22==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR5 of function 22. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR5 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR5_RESOURCE_AVAIL_22 32'h10


// Name:           BAR5_MASK_WRITABLE_22
// Default:        0x0 ((BAR5_ENABLED_22==1 && BAR5_SIZING_SCHEME_22 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 22 && BAR5_ENABLED_22==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR5 Mask through DBI
`define BAR5_MASK_WRITABLE_22 1'h0


// Name:           BAR5_MASK_22
// Default:        0xffff (CX_BAR5_RESIZABLE_22==1 ? [calc_bar_mask 
//                 CX_BAR5_RESOURCE_AVAIL_22] : MEM5_SPACE_DECODER_22==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 22 && BAR5_ENABLED_22==1 && MEM5_SPACE_DECODER_22==0 && 
//                 CX_BAR5_RESIZABLE_22==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR5 Mask register of function 22. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR5_MASK_22 32'hffff


// Name:           MEM_FUNC22_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 22 && BAR5_ENABLED_22==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_5 of function 22 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR5_TARGET_MAP to 1 maps all incoming requests for BAR5 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC22_BAR5_TARGET_MAP 1'h1


`define FUNC22_BARSIZE_32 128'h0


`define FUNC22_BARSIZE 128'h0


`define FUNC22_BAR0_BARSIZE_TRGT1 128'h0


`define FUNC22_BAR2_BARSIZE_TRGT1 128'h0


`define FUNC22_BAR4_BARSIZE_TRGT1 128'h0


`define FUNC22_BAR0_TRGT1_ADDR_WIDTH 1


`define FUNC22_BAR2_TRGT1_ADDR_WIDTH 1


`define FUNC22_BAR4_TRGT1_ADDR_WIDTH 1


// Name:         CX_NUM_RBARS_22
// Default:      0 ([calc_num_rbars CX_BAR0_RESIZABLE_22 CX_BAR1_RESIZABLE_22 
//               CX_BAR2_RESIZABLE_22 CX_BAR3_RESIZABLE_22 CX_BAR4_RESIZABLE_22 
//               CX_BAR5_RESIZABLE_22])
// Values:       -2147483648, ..., 2147483647
// 
// Number of resizable BARs
`define CX_NUM_RBARS_22 0

//-/ END:   BAR CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SR-IOV CAPABILITIES CONFIGURATION


// Name:           CX_VF_DEPENDENCY_LINK_22
// Default:        0x22
// Values:         0x0, ..., 0xff
// Enabled:        CX_VF_DEPENDENCY_LINK_SUPP && (CX_NFUNC > 22) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Specifies the 8-bit VF dependency link for PF22. Valid only if CX_VF_DEPENDENCY_LINK_SUPP=1.
`define CX_VF_DEPENDENCY_LINK_22 8'h22


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER1_22
// Default:        0x2 ((CX_NFUNC>=17) ? 32 : (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : 
//                 (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF22 in an ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER1_22 16'h2


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER0_22
// Default:        0x100
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF22 
//  in a non-ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER0_22 16'h100


// Name:           VF_STRIDE_ARI_CAP_HIER1_22
// Default:        0x2 (CX_VF_STRIDE_ALWAYS_ONE) ? 1 : ((CX_NFUNC>=17) ? 32 : 
//                 (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF22 in an ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER1_22 16'h2


// Name:           VF_STRIDE_ARI_CAP_HIER0_22
// Default:        0x100 ((CX_VF_STRIDE_ALWAYS_ONE) ? 0x0001 : 0x0100)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF22 in a non-ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER0_22 16'h100


// Name:           CX_VF_DEVICE_ID_22
// Default:        0x0 (CX_DEVICE_ID_22)
// Values:         0x0, ..., 0xffff
// Enabled:        (CX_NFUNC > 22) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 16-bit virtual function Device ID for PF22. 
//  It might be different from the physical function's.
`define CX_VF_DEVICE_ID_22 16'h0


// Name:           CX_VF_SUPP_PAGE_SIZE_22
// Default:        0x553
// Values:         0x553, ..., 0xffff
// Enabled:        (CX_NFUNC > 22) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 32-bit supported page sizes for virtual functions for PF22
`define CX_VF_SUPP_PAGE_SIZE_22 32'h553


// Name:           CX_ARI_CAP_HIER_PRSVD_22
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Specifies if ARI Capable Hierarchy bit is preserved across certain power state transitions 
//  Only present in PF0. Read Only Zero in this PF22.
`define CX_ARI_CAP_HIER_PRSVD_22 1'h0

//-/===========================================
//-/ START: VF BAR CONFIGURATION


// Name:           VF_BAR0_ENABLED_22
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 22)
// Parameter Type: Feature Setting
// 
// Include the VF BAR0 registers in PF22
`define VF_BAR0_ENABLED_22 1'h1


`define VF_DEFAULT_BAR0_ENABLED_22 1'h1


// Name:           VF_MEM0_SPACE_DECODER_22
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR0_ENABLED_22 && CX_SRIOV_ENABLE && (CX_NFUNC > 22)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Space Indicator 
//  ALWAYS set to Memory for Virtual Functions
`define VF_MEM0_SPACE_DECODER_22 1'h0


// Name:           VF_PREFETCHABLE0_22
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_22==1 && VF_MEM0_SPACE_DECODER_22==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 22)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Prefetchable 
//  When set indicates VF BAR0 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE0_22 1'h0


// Name:           VF_BAR0_TYPE_22
// Default:        64-bit ((VF_MEM0_SPACE_DECODER_22==1 || VF_BAR0_ENABLED_22==0) ? 0 
//                 : 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR0_ENABLED_22==1 && VF_MEM0_SPACE_DECODER_22==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 22)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 22; (bits [2:1] for a memory BAR).
`define VF_BAR0_TYPE_22 2'h2


// Name:           VF_BAR0_MASK_WRITABLE_22
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_22==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 22)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR0_MASK_WRITABLE_22 1'h0


// Name:           VF_BAR0_MASK_22
// Default:        0xfffff (VF_MEM0_SPACE_DECODER_22==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR0_ENABLED_22==1 && VF_MEM0_SPACE_DECODER_22==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 22)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Mask 
//  Determines the default of the VF BAR Mask register for PF22. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR0_MASK_22 64'hfffff


// Name:           VF_MEM_FUNC22_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR0_ENABLED_22==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE 
//                 && (CX_NFUNC > 22)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF22 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC22_BAR0_TARGET_MAP 1'h1


// Name:           VF_BAR1_ENABLED_22
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        (VF_BAR0_TYPE_22==0)  && CX_SRIOV_ENABLE && (CX_NFUNC > 22)
// Parameter Type: Feature Setting
// 
// Include the VF BAR1 registers in PF22
`define VF_BAR1_ENABLED_22 1'h0


`define VF_DEFAULT_BAR1_ENABLED_22 1'h0


// Name:           VF_MEM1_SPACE_DECODER_22
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR1_ENABLED_22==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 22)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Space Indicator
`define VF_MEM1_SPACE_DECODER_22 1'h0


// Name:           VF_PREFETCHABLE1_22
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_22==1 && VF_MEM1_SPACE_DECODER_22==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 22)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Prefetchable 
//  When set indicates VF BAR1 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE1_22 1'h0


// Name:           VF_BAR1_TYPE_22
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 22; (bits [2:1] for a memory BAR).
`define VF_BAR1_TYPE_22 2'h0


// Name:           VF_BAR1_MASK_WRITABLE_22
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_22==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 22)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR1_MASK_WRITABLE_22 1'h0


// Name:           VF_BAR1_MASK_22
// Default:        0xffff (VF_MEM1_SPACE_DECODER_22==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR1_ENABLED_22==1 && VF_MEM1_SPACE_DECODER_22==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 22)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Mask 
//  Determines the default of the VF BAR Mask register for PF22. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR1_MASK_22 32'hffff


// Name:           VF_MEM_FUNC22_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR1_ENABLED_22==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE 
//                 && (CX_NFUNC > 22)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF22 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC22_BAR1_TARGET_MAP 1'h1


// Name:           VF_BAR2_ENABLED_22
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 22)
// Parameter Type: Feature Setting
// 
// Include the VF BAR2 registers in PF22
`define VF_BAR2_ENABLED_22 1'h1


`define VF_DEFAULT_BAR2_ENABLED_22 1'h1


// Name:           VF_MEM2_SPACE_DECODER_22
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR2_ENABLED_22==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 22)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Memory Space Indicator
`define VF_MEM2_SPACE_DECODER_22 1'h0


// Name:           VF_PREFETCHABLE2_22
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_22==1 && VF_MEM2_SPACE_DECODER_22==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 22)
// Parameter Type: Register Default Setting
// 
// BAR2 Memory Prefetchable 
//  When set indicates VF BAR2 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE2_22 1'h0


// Name:           VF_BAR2_TYPE_22
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR2_ENABLED_22==1 && VF_MEM2_SPACE_DECODER_22==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 22)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 22; (bits [2:1] for a memory BAR).
`define VF_BAR2_TYPE_22 2'h0


// Name:           VF_BAR2_MASK_WRITABLE_22
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_22==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 22)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR2_MASK_WRITABLE_22 1'h0


// Name:           VF_BAR2_MASK_22
// Default:        0xfffff (VF_MEM2_SPACE_DECODER_22==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR2_ENABLED_22==1 && VF_MEM2_SPACE_DECODER_22==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 22)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Mask 
//  Determines the default of the VF BAR Mask register for PF22. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR2_MASK_22 64'hfffff


// Name:           VF_MEM_FUNC22_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR2_ENABLED_22==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 22)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF22 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC22_BAR2_TARGET_MAP 1'h1


// Name:           VF_BAR3_ENABLED_22
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_TYPE_22==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 22)
// Parameter Type: Feature Setting
// 
// Include the VF BAR3 registers in PF22
`define VF_BAR3_ENABLED_22 1'h0


`define VF_DEFAULT_BAR3_ENABLED_22 1'h0


// Name:           VF_MEM3_SPACE_DECODER_22
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR3_ENABLED_22==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 22)
// Parameter Type: Register Default Setting
// 
// BAR3 Memory Space Indicator
`define VF_MEM3_SPACE_DECODER_22 1'h0


// Name:           VF_PREFETCHABLE3_22
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_22==1 && VF_MEM3_SPACE_DECODER_22==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 22)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Memory Prefetchable 
//  When set indicates VF BAR3 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE3_22 1'h0


// Name:           VF_BAR3_TYPE_22
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 22; (bits [2:1] for a memory BAR).
`define VF_BAR3_TYPE_22 2'h0


// Name:           VF_BAR3_MASK_WRITABLE_22
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_22==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 22)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR3_MASK_WRITABLE_22 1'h0


// Name:           VF_BAR3_MASK_22
// Default:        0xffff (VF_MEM3_SPACE_DECODER_22==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR3_ENABLED_22==1 && VF_MEM3_SPACE_DECODER_22==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 22)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Mask 
//  Determines the default of the VF BAR Mask register for PF22. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR3_MASK_22 32'hffff


// Name:           VF_MEM_FUNC22_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR3_ENABLED_22==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 22)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF22 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC22_BAR3_TARGET_MAP 1'h1


// Name:           VF_BAR4_ENABLED_22
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 22)
// Parameter Type: Feature Setting
// 
// Include the VF BAR4 registers in PF22
`define VF_BAR4_ENABLED_22 1'h1


`define VF_DEFAULT_BAR4_ENABLED_22 1'h1


// Name:           VF_MEM4_SPACE_DECODER_22
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR4_ENABLED_22==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 22)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Space Indicator
`define VF_MEM4_SPACE_DECODER_22 1'h0


// Name:           VF_PREFETCHABLE4_22
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_22==1 && VF_MEM4_SPACE_DECODER_22==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 22)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Prefetchable 
//  When set indicates VF BAR4 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE4_22 1'h0


// Name:           VF_BAR4_TYPE_22
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR4_ENABLED_22==1 && VF_MEM4_SPACE_DECODER_22==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 22)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 22; (bits [2:1] for a memory BAR).
`define VF_BAR4_TYPE_22 2'h0


// Name:           VF_BAR4_MASK_WRITABLE_22
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_22==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 22)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR4_MASK_WRITABLE_22 1'h0


// Name:           VF_BAR4_MASK_22
// Default:        0xfff (VF_MEM4_SPACE_DECODER_22==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR4_ENABLED_22==1 && VF_MEM4_SPACE_DECODER_22==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 22)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Mask 
//  Determines the default of the VF BAR Mask register for PF22. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR4_MASK_22 64'hfff


// Name:           VF_MEM_FUNC22_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR4_ENABLED_22==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 22)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF22 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC22_BAR4_TARGET_MAP 1'h1


// Name:           VF_BAR5_ENABLED_22
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_TYPE_22==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 22)
// Parameter Type: Feature Setting
// 
// Include the VF BAR5 registers in PF22
`define VF_BAR5_ENABLED_22 1'h0


`define VF_DEFAULT_BAR5_ENABLED_22 1'h0


// Name:           VF_MEM5_SPACE_DECODER_22
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR5_ENABLED_22==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 22)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Space Indicator
`define VF_MEM5_SPACE_DECODER_22 1'h0


// Name:           VF_PREFETCHABLE5_22
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_22==1 && VF_MEM5_SPACE_DECODER_22==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 22)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Prefetchable 
//  When set indicates VF BAR5 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE5_22 1'h0


// Name:           VF_BAR5_TYPE_22
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 22; (bits [2:1] for a memory BAR).
`define VF_BAR5_TYPE_22 2'h0


// Name:           VF_BAR5_MASK_WRITABLE_22
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_22==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 22)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR5_MASK_WRITABLE_22 1'h0


// Name:           VF_BAR5_MASK_22
// Default:        0xffff (VF_MEM5_SPACE_DECODER_22==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR5_ENABLED_22==1 && VF_MEM5_SPACE_DECODER_22==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 22)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Mask 
//  Determines the default of the VF BAR Mask register for PF22. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR5_MASK_22 32'hffff


// Name:           VF_MEM_FUNC22_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR5_ENABLED_22==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 22)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF22 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC22_BAR5_TARGET_MAP 1'h1


`define VF_FUNC22_BARSIZE_32 128'h101000


`define VF_FUNC22_BARSIZE 128'h201000

//-/ END:   VF BAR CONFIGURATION
//-/===========================================

//-/ END:   SR-IOV CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: TPH CAPABILITIES CONFIGURATION


// Name:           TPH_IVEC_22
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Interrupt Vector Mode. If set indicates that the function supports the Interrupt Vector 
// Mode of operation. Function 22.
`define TPH_IVEC_22 1'h0


// Name:           TPH_DS_22
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Device Specific Mode. If set indicates that the function supports the Device Specific Mode 
// of operation. Function 22.
`define TPH_DS_22 1'h0


// Name:           TPH_ST_TABLE_LOC_22
// Default:        Not Present
// Values:         Not Present (0), TPH Requester Capability Structure (1), MSI-X 
//                 Table Structure (2)
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_DS_22 || TPH_IVEC_22))
// Parameter Type: Feature Setting
// 
// TLP Processing Hints Steering Tag Table Location. Value indicates if and where the ST Table is located. Function 22.
`define TPH_ST_TABLE_LOC_22 0

//located in the TPH Requester Capability structure. Please reduce the ST Table Size for this mode of operation"

// Name:           TPH_ST_TABLE_SIZE_22
// Default:        1
// Values:         1, ..., 2048
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_ST_TABLE_LOC_22 != 0))
// Parameter Type: Feature Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define TPH_ST_TABLE_SIZE_22 1


`define TPH_ST_TABLE_DEPTH_22 0

//-/ END:   TPH CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: ATS CAPABILITIES CONFIGURATION


// Name:           ATS_INV_Q_DPTH_22
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// The number of Invalidate Requests that the Function can accept before putting backpressure on the upstream connection. A 
// value of 0 indicates the function can accept 32 Invalidate requests. Function 22.
`define ATS_INV_Q_DPTH_22 5'd0


// Name:           ATS_STU_22
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// This value indicates to the Function the minimum number of 4096-byte blocks that is indicated in a Translation 
// Completion or Invalidate Request. This is a power of 2 multiplier and the number of blocks is 2^STU. A value of 0 indicates 1 block 
// and a value of 31 indicates 2^31 blocks (or 8 TB total). Function 22.
`define ATS_STU_22 5'd0

//-/ END:   ATS CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PRS CAPABILITIES CONFIGURATION


// Name:           CX_PRS_OUTSTANDING_CAPACITY_VALUE_22
// Default:        0x1
// Values:         0x0, ..., 0xffffffff
// Enabled:        (CX_PRS_ENABLE==1) && (CX_NFUNC > 22)
// Parameter Type: Register Default Setting
// 
// Register default for PRS Outstanding Capacity in PF22. 
// For more details, see the PRS_OUTSTANDING_CAPACITY field in the PRS_REQ_CAPACITY_REG register.
`define CX_PRS_OUTSTANDING_CAPACITY_VALUE_22 32'h1

//-/ END:   PRS CAPABILITIES CONFIGURATION
//-/===========================================


//-/===========================================
//--- START: RN


// Name:           CX_RN_IMM_VALUE_22
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 22)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for PF22.
`define CX_RN_IMM_VALUE_22 1'h0


// Name:           CX_RN_IMM_D0_VALUE_22
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 22)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for PF22.
`define CX_RN_IMM_D0_VALUE_22 1'h0


// Name:           CX_RN_FRS_VALUE_22
// Default:        0x0 (CX_RN_FRS_SUPPORTED==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_FRS_SUPPORTED==1) && (CX_NFUNC > 22)
// Parameter Type: Feature Setting
// 
// Function Readiness Status messaging supported for function PF22.
`define CX_RN_FRS_VALUE_22 1'h0


// Name:           CX_RN_RTR_VALID_22
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 22)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF22.
`define CX_RN_RTR_VALID_22 1'h0


// Name:           CX_RN_RTR_DL_UP_VALUE_22
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 22)
// Parameter Type: Register Default Setting
// 
// Register default for RTR DL Up Time field in PF22.
`define CX_RN_RTR_DL_UP_VALUE_22 12'h0


// Name:           CX_RN_RTR_RESET_VALUE_22
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 22)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF22.
`define CX_RN_RTR_RESET_VALUE_22 12'h0


// Name:           CX_RN_RTR_D3D0_VALUE_22
// Default:        0x0
// Values:         0x0, ..., 0x80a
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 22)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF22.
`define CX_RN_RTR_D3D0_VALUE_22 12'h0


// Name:           CX_RN_RTR_FLR_VALUE_22
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_FLR_ENABLE==1) && (CX_NFUNC > 22)
// Parameter Type: Register Default Setting
// 
// Register default for RTR FLR Time field in PF22.
`define CX_RN_RTR_FLR_VALUE_22 12'h0


// Name:           VF_RN_IMM_VALUE_22
// Default:        0x0 (CX_RN_IMM_VALUE_22 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 22))
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for VFs in PF22.
`define VF_RN_IMM_VALUE_22 1'h0


// Name:           VF_RN_IMM_D0_VALUE_22
// Default:        0x0 (CX_RN_IMM_D0_VALUE_22 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 22))
// Parameter Type: Register Default Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for VFs in PF22.
`define VF_RN_IMM_D0_VALUE_22 1'h0


// Name:           VF_RN_RTR_VALID_22
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 22) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF22 VFs.
`define VF_RN_RTR_VALID_22 1'h0


// Name:           VF_RN_RTR_RESET_VALUE_22
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_22)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 22) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF22 VFS.
`define VF_RN_RTR_RESET_VALUE_22 12'h0


// Name:           VF_RN_RTR_D3D0_VALUE_22
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_22)
// Values:         0x0, ..., 0x80a
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 22) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF22 VFS.
`define VF_RN_RTR_D3D0_VALUE_22 12'h0


// Name:           VF_RN_RTR_FLR_VALUE_22
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_22)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 22) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF22 VFs.
`define VF_RN_RTR_FLR_VALUE_22 12'h0


// Name:           EXT_VF_RN_RTR_VALID_22
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 22) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF22 VFs.
`define EXT_VF_RN_RTR_VALID_22 1'h0


// Name:           EXT_VF_RN_RTR_RESET_VALUE_22
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_22)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 22) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF22 VFS.
`define EXT_VF_RN_RTR_RESET_VALUE_22 12'h0


// Name:           EXT_VF_RN_RTR_D3D0_VALUE_22
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_22)
// Values:         0x0, ..., 0x80a
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 22) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF22 VFS.
`define EXT_VF_RN_RTR_D3D0_VALUE_22 12'h0


// Name:           EXT_VF_RN_RTR_FLR_VALUE_22
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_22)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 22) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF22 VFs.
`define EXT_VF_RN_RTR_FLR_VALUE_22 12'h0

//-/ END:   RN
//-/===========================================

//-/ START: LN CAPABILITIES CONFIGURATION
//-/===========================================


// Name:           CX_LN_REG_MAX_VALUE_22
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 22))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_64_SUPPORTED field in the LNR_CAP_OFF register for PF22.
`define CX_LN_REG_MAX_VALUE_22 5'h0


// Name:           CX_LN_128_SUPPORTED_VALUE_22
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 22))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_128_SUPPORTED field in the LNR_CAP_OFF register for PF22.
`define CX_LN_128_SUPPORTED_VALUE_22 1'h0


// Name:           CX_LN_64_SUPPORTED_VALUE_22
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 22))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_REGISTRATION_MAX field in the LNR_CAP_OFF register for PF22.
`define CX_LN_64_SUPPORTED_VALUE_22 1'h0

//-/ END:   LN CAPABILITIES CONFIGURATION
//-/===========================================




//-/==========================================
//-/ End FUNC22 Config
//-/==========================================

//-/===========================================
//-/ Function 23 Configuration Registers
//-/ ==========================================


// Name:         FUNC_23
// Default:      0 ((CX_NFUNC > 23) ? 1 : 0)
// Values:       0, 1
// 
// This parameter indicates that Function 23 is present
// `define FUNC_23

//-/===========================================
//-/ START: PCI-E CAPABILITIES CONFIGURATION


// Name:           PCIE_CAP_INT_MSG_NUM_23
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 23
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Message Number field in the PCI Express Capabilities Register. Function 23.
`define PCIE_CAP_INT_MSG_NUM_23 5'h0


// Name:           SLOT_IMPLEMENTED_23
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_NFUNC > 23))
// Parameter Type: Register Default Setting
// 
// Indicates that the PCI Express link associated with this Port is connected to a slot. Function 23.
`define SLOT_IMPLEMENTED_23 1'h0


// Name:           DEFAULT_PHANTOM_FUNC_SUPPORTED_23
// Default:        0x0
// Values:         0x0, ..., 0x3
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_PHANTOM_FUNC_SUPPORTED_23 2'h0


// Name:           DEFAULT_EXT_TAG_FIELD_SUPPORTED_23
// Default:        0x0 (DEFAULT_EXT_TAG_FIELD_SUPPORTED_0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 23
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_EXT_TAG_FIELD_SUPPORTED_23 1'h0



// Name:           DEFAULT_ATT_BUTT_PRE_23
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 23
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Button is present
`define DEFAULT_ATT_BUTT_PRE_23 1'h0


// Name:           DEFAULT_ATT_IND_PRE_23
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 23
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Indicator is present
`define DEFAULT_ATT_IND_PRE_23 1'h0


// Name:           DEFAULT_PWR_IND_PRE_23
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 23
// Parameter Type: Register Default Setting
// 
// When set indicates that a Power Indicator is present
`define DEFAULT_PWR_IND_PRE_23 1'h0


// Name:           DEFAULT_NO_SNOOP_SUPPORTED_23
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 23
// Parameter Type: Register Default Setting
// 
// Default value for the Enable No Snoop bit in the Device Control Register. Function 23.
`define DEFAULT_NO_SNOOP_SUPPORTED_23 1'h0


// Name:           ROOT_RCB_23
// Default:        64-bit
// Values:         64-bit (0x0), 128-bit (0x1)
// Parameter Type: Register Default Setting
// 
// Default value for the Read Completion Boundary (RCB) bit in the Link Control Register.
`define ROOT_RCB_23 1'h0


//-/ END:   PCI-E CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: MSI-X CAPABILITIES CONFIGURATION


// Name:           MSIX_TABLE_SIZE_23
// Default:        0x0
// Values:         0x0, ..., 0x7ff
// Enabled:        CX_NFUNC > 23 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the MSI-X Table Size field in the MSI-X Control Register. Function 23.
`define MSIX_TABLE_SIZE_23 11'h0


// Name:           MSIX_TABLE_BIR_23
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 23 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table BAR Indicator Register (BIR) field in the MSI-X Table Offset and BIR Register. Function 23.
`define MSIX_TABLE_BIR_23 3'h0


// Name:           MSIX_TABLE_OFFSET_23
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 23 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table Offset field in the MSI-X Table Offset and BIR Register. Function 23.
`define MSIX_TABLE_OFFSET_23 29'h0


// Name:           MSIX_PBA_BIR_23
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 23 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Pending Bit Array (PBA) BIR field in the MSI-X PBA Offset and BIR Register. Function 23.
`define MSIX_PBA_BIR_23 7'h0


// Name:           MSIX_PBA_OFFSET_23
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 23 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the PBA Offset field in the MSI-X PBA Offset and BIR Register. Function 23.
`define MSIX_PBA_OFFSET_23 29'h0

//-/ END:   MSI-X CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SATA CAPABILITIES CONFIGURATION


// Name:         SATA_HBA_OFFSET_23
// Default:      0x0
// Values:       0x0, ..., 0xfffff
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA Offset. Base address of the SATA HBA registers, 
//  as an offset from the base address of the BAR indicated 
//  by the SATA BAR field.
`define SATA_HBA_OFFSET_23 20'h0


// Name:         SATA_BAR_23
// Default:      0x0
// Values:       0x0, ..., 0xf
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA BAR. The bar that maps to SATA HBA registers,
`define SATA_BAR_23 4'h0

//-/ END:   SATA CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: AER CAPABILITIES CONFIGURATION


// Name:           DEFAULT_ECRC_CHK_CAP_23
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 23 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Check Capable bit in the Advanced Capabilities and Control Register. Function 23.
`define DEFAULT_ECRC_CHK_CAP_23 1'h1


// Name:           DEFAULT_ECRC_GEN_CAP_23
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 23 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Generation Capability bit in the Advanced Capabilities and Control Register. Function 23.
`define DEFAULT_ECRC_GEN_CAP_23 1'h1


// Name:           AER_INT_MSG_NUM_23
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Parameter Type: Register Default Setting
// 
// Default value for the Advanced Error Interrupt Message Number field of the Root Error Status Register. Function 23.
`define AER_INT_MSG_NUM_23 5'h0



// Name:           CX_HDR_LOG_DEPTH_23
// Default:        0x1
// Values:         0x1, 0x2, 0x4
// Enabled:        CX_NFUNC > 23 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Feature Setting.
// 
// Header Log Depth
`define CX_HDR_LOG_DEPTH_23 3'h1


`define CX_MULTIPLE_HDR_REC_CAP_23 1'h0

//-/ END:   AER CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PM CAPABILITIES CONFIGURATION


// Name:           PME_SUPPORT_23
// Default:        0x1b
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 23
// Parameter Type: Register Default Setting
// 
// Default value for the PME_Support field in the Power Management Capabilities Register. Function 23.
`define PME_SUPPORT_23 5'h1b


// Name:           D1_SUPPORT_23
// Default:        true
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 23
// Parameter Type: Register Default Setting
// 
// Default value for the D1 Support bit in the Power Management Capabilities Register. Function 23.
`define D1_SUPPORT_23 1'h1


// Name:           D2_SUPPORT_23
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 23
// Parameter Type: Register Default Setting
// 
// Default value for the D2 Support bit in the Power Management Capabilities Register. Function 23.
`define D2_SUPPORT_23 1'h0


// Name:           DEV_SPEC_INIT_23
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 23
// Parameter Type: Register Default Setting
// 
// Default value for the Device Specific Initialization (DSI) bit in the Power Management Capabilities Register. Function 
// 23.
`define DEV_SPEC_INIT_23 1'h0


// Name:           AUX_CURRENT_23
// Default:        375mA
// Values:         0mA (0x0), 55mA (0x1), 100mA (0x2), 160mA (0x3), 220mA (0x4), 270mA 
//                 (0x5), 320mA (0x6), 375mA (0x7)
// Enabled:        CX_NFUNC > 23
// Parameter Type: Register Default Setting
// 
// Default value for the Aux Current field in the Power Management Capabilities Register. Function 23.
`define AUX_CURRENT_23 3'h7


// Name:           DEFAULT_NO_SOFT_RESET_23
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 23
// Parameter Type: Register Default Setting
// 
// Default value for the No Soft Reset bit in the Power Management Control and Status Register. When set, you should not 
// reset any controller registers when transitioning from D3hot to D0. Therefore, you should not assert the non_sticky_rst_n 
// and sticky_rst_n inputs. Function 23.
`define DEFAULT_NO_SOFT_RESET_23 1'h0

//-/ END:   PM CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PCI BASIC CONFIGURATION


// Name:           CX_DEVICE_ID_23
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 23
// Parameter Type: Register Default Setting
// 
// Default value for the Device ID field in the Device ID and Vendor ID Register. Function 23.
`define CX_DEVICE_ID_23 16'h0


// Name:           CX_VENDOR_ID_23
// Default:        0x16c3
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 23
// Parameter Type: Register Default Setting
// 
// Default value for the Vendor ID field in the Device ID and Vendor ID Register. Function 23.
`define CX_VENDOR_ID_23 16'h16c3


// Name:           CX_REVISION_ID_23
// Default:        0x1
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 23
// Parameter Type: Register Default Setting
// 
// Default value for the Revision ID field in the Revision ID Register. Function 23.
`define CX_REVISION_ID_23 8'h1


// Name:           SUBSYS_DEV_ID_23
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 23
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 23.
`define SUBSYS_DEV_ID_23 16'h0


// Name:           SUBSYS_VENDOR_ID_23
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 23
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem Vendor ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 23.
`define SUBSYS_VENDOR_ID_23 16'h0


// Name:           BASE_CLASS_CODE_23
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 23
// Parameter Type: Register Default Setting
// 
// Default value for the Base Class Code field in the Class Code Register. Function 23.
`define BASE_CLASS_CODE_23 8'h0


// Name:           SUB_CLASS_CODE_23
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 23
// Parameter Type: Register Default Setting
// 
// Default value for the Subclass Code field in the Class Code Register. Function 23.
`define SUB_CLASS_CODE_23 8'h0


// Name:           IF_CODE_23
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 23
// Parameter Type: Register Default Setting
// 
// Default value for the Programming Interface field in the Class Code Register. Function 23.
`define IF_CODE_23 8'h0


// Name:           CARDBUS_CIS_PTR_23
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 23
// Parameter Type: Register Default Setting
// 
// Default value for the CardBus CIS Pointer Register. Function 23.
`define CARDBUS_CIS_PTR_23 16'h0


// Name:           INT_PIN_MAPPING_23
// Default:        INTA
// Values:         None (0x0), INTA (0x1), INTB (0x2), INTC (0x3), INTD (0x4)
// Enabled:        CX_NFUNC > 23
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Pin Register. Function 23.
`define INT_PIN_MAPPING_23 8'h1


// Name:           IO_DECODE_32_23
// Default:        16-bit
// Values:         16-bit (0x0), 32-bit (0x1)
// Enabled:        CX_NFUNC > 23
// Parameter Type: Register Default Setting
// 
// Default value for the 32-Bit I/O Space bit in the I/O Base and I/O Limit Register. Function 23.
`define IO_DECODE_32_23 1'h0


// Name:           MEM_DECODE_64_23
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x1)
// Enabled:        CX_NFUNC > 23
// Parameter Type: Register Default Setting
// 
// Default value for the 64-Bit Memory Addressing bit in the Prefetchable Memory Base and Limit Register. Function 23.
`define MEM_DECODE_64_23 1'h0


// Name:           ROM_BAR_ENABLED_23
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 23
// Parameter Type: Register Default Setting
// 
// Include the expansion ROM BAR registers. Function 23.
`define ROM_BAR_ENABLED_23 1'h1


`define DEFAULT_ROM_BAR_ENABLED_23 1'h1


// Name:           ROM_MASK_23
// Default:        0xffff
// Values:         0x7ff, ..., 0xffffff
// Enabled:        CX_NFUNC > 23 && ROM_BAR_ENABLED_23==1
// Parameter Type: Register Default Setting
// 
// Determines the default of the Expansion ROM BAR Mask register. Function 23. 
//  - The BAR Mask register specifies which bits of the Expansion ROM BAR are non-writable by host software, which 
//  determines the size of the BAR. 
//  - The maximum value for ROM_MASK_N is 0xFFFFFF because the maximum space that can be claimed by an Expansion ROM BAR 
//  is 16 MB. 
//  - For example: 32'hFFFF =BAR size of 2^16.
`define ROM_MASK_23 32'hffff


// Name:           ROM_MASK_WRITABLE_23
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 23 && ROM_BAR_ENABLED_23==1
// Parameter Type: Feature Setting
// 
// Determines if the Expansion ROM BAR Mask register for function 23 is writable by application software. If writing to a 
// Expansion ROM BAR Mask register is enabled, your application can write to the Expansion ROM BAR Mask register through the 
// DBI by asserting dbi_cs2 in addition to dbi_cs.
`define ROM_MASK_WRITABLE_23 1'h0


// Name:           ROM_FUNC23_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 23 && ROM_BAR_ENABLED_23==1 && TRGT1_POPULATE==1))
// Parameter Type: Register Default Setting
// 
// Direct incoming requests that pass filtering and match the Expansion ROM BAR of function 23 to either RTRGT0 or RTRGT1. 
//  - For example, setting ROM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for the Expansion ROM BAR of function 
//  0 to RTRGT1. 
//  - If TRGT1_POPULATE =0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define ROM_FUNC23_TARGET_MAP 1'h1


// Name:           CX_PCI_HEADER_DEFAULTS_VISIBLE_23
// Default:        0
// Values:         0, 1
// Parameter Type: Register Default Setting
// 
// Select here if you want to configure the defaults for the other PCI Standard Header registers for function 23. 
//  An extra window will appear under this page. To access it, click the plus/minus symbol in the hierarchy view on the 
//  left panel. 
//  This is optional but not usually recommended. 
//  You can also change these register defaults using the DBI before (or after) the link comes up.
`define CX_PCI_HEADER_DEFAULTS_VISIBLE_23 0

//-/ END:   PCI BASIC CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: BAR CONFIGURATION


// Name:           BAR0_ENABLED_23
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 23
// Parameter Type: Feature Setting
// 
// Include the BAR0 registers for function 23.
`define BAR0_ENABLED_23 1'h1


`define DEFAULT_BAR0_ENABLED_23 1'h1


// Name:           MEM0_SPACE_DECODER_23
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 23 && BAR0_ENABLED_23==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 23.
`define MEM0_SPACE_DECODER_23 1'h0


// Name:           PREFETCHABLE0_23
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 23 && BAR0_ENABLED_23==1 && MEM0_SPACE_DECODER_23==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 23.
`define PREFETCHABLE0_23 1'h0


// Name:           BAR0_TYPE_23
// Default:        64-bit ((MEM0_SPACE_DECODER_23==1 || BAR0_ENABLED_23==0) ? 0 : 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 23 && BAR0_ENABLED_23==1 && MEM0_SPACE_DECODER_23==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 23.
`define BAR0_TYPE_23 2'h2


// Name:           BAR0_SIZING_SCHEME_23
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 23 && BAR0_ENABLED_23==1
// Parameter Type: Feature Setting
// 
// BAR0 Function 23 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR0_SIZING_SCHEME_23 2'h0


// Name:           CX_BAR0_RESIZABLE_23
// Default:        0x0 ((BAR0_SIZING_SCHEME_23==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR0_ENABLED_23==1) && (MEM0_SPACE_DECODER_23==0)
// Parameter Type: Feature Setting
// 
// Defines BAR0 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR0 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR0_RESIZABLE_23 1'h0


// Name:           CX_BAR0_RESOURCE_AVAIL_23
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 23 && CX_BAR0_RESIZABLE_23==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR0 of function 23. 
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
// Example: 0x00000030 indicates that BAR0 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR0_RESOURCE_AVAIL_23 64'h10


// Name:           BAR0_MASK_WRITABLE_23
// Default:        0x0 ((BAR0_ENABLED_23==1 && BAR0_SIZING_SCHEME_23 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 23 && BAR0_ENABLED_23==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR0 Mask through DBI
`define BAR0_MASK_WRITABLE_23 1'h0


// Name:           BAR0_MASK_23
// Default:        0xfffff (CX_BAR0_RESIZABLE_23==1 ? [calc_bar_mask 
//                 CX_BAR0_RESOURCE_AVAIL_23] : MEM0_SPACE_DECODER_23==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 23 && BAR0_ENABLED_23==1 && MEM0_SPACE_DECODER_23==0 && 
//                 CX_BAR0_RESIZABLE_23==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR0 Mask register of function 23. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR0_MASK_23 64'hfffff


// Name:           MEM_FUNC23_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 23 && BAR0_ENABLED_23==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_0 of function 23 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming Requests for BAR0 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC23_BAR0_TARGET_MAP 1'h1


// Name:           BAR1_ENABLED_23
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 23 && BAR0_TYPE_23==0
// Parameter Type: Feature Setting
// 
// Include the BAR1 registers for function 23.
`define BAR1_ENABLED_23 1'h0


`define DEFAULT_BAR1_ENABLED_23 1'h0


// Name:           MEM1_SPACE_DECODER_23
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 23 && BAR1_ENABLED_23==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 23.
`define MEM1_SPACE_DECODER_23 1'h0


// Name:           PREFETCHABLE1_23
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 23 && BAR1_ENABLED_23==1 && MEM1_SPACE_DECODER_23==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 23.
`define PREFETCHABLE1_23 1'h0


// Name:           BAR1_TYPE_23
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 23.
`define BAR1_TYPE_23 2'h0


// Name:           BAR1_SIZING_SCHEME_23
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 23 && BAR1_ENABLED_23==1
// Parameter Type: Feature Setting
// 
// BAR1 Function 23 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR1_SIZING_SCHEME_23 2'h0


// Name:           CX_BAR1_RESIZABLE_23
// Default:        0x0 ((BAR1_SIZING_SCHEME_23==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR1_ENABLED_23==1) && (MEM1_SPACE_DECODER_23==0)
// Parameter Type: Feature Setting
// 
// Defines BAR1 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR1 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR1_RESIZABLE_23 1'h0


// Name:           CX_BAR1_RESOURCE_AVAIL_23
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 23 && CX_BAR1_RESIZABLE_23==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR1 of function 23. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR1 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR1_RESOURCE_AVAIL_23 32'h10


// Name:           BAR1_MASK_WRITABLE_23
// Default:        0x0 ((BAR1_ENABLED_23==1 && BAR1_SIZING_SCHEME_23 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 23 && BAR1_ENABLED_23==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR1 Mask through DBI
`define BAR1_MASK_WRITABLE_23 1'h0


// Name:           BAR1_MASK_23
// Default:        0xffff (CX_BAR1_RESIZABLE_23==1 ? [calc_bar_mask 
//                 CX_BAR1_RESOURCE_AVAIL_23] : MEM1_SPACE_DECODER_23==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 23 && BAR1_ENABLED_23==1 && MEM1_SPACE_DECODER_23==0 && 
//                 CX_BAR1_RESIZABLE_23==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR1 Mask register of function 23. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR1_MASK_23 32'hffff


// Name:           MEM_FUNC23_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 23 && BAR1_ENABLED_23==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_1 of function 23 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR1_TARGET_MAP to 1 maps all incoming Requests for BAR1 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC23_BAR1_TARGET_MAP 1'h1


// Name:           BAR2_ENABLED_23
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 23
// Parameter Type: Feature Setting
// 
// Include the BAR2 registers for function 23.
`define BAR2_ENABLED_23 1'h1


`define DEFAULT_BAR2_ENABLED_23 1'h1


// Name:           MEM2_SPACE_DECODER_23
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 23 && BAR2_ENABLED_23==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 23.
`define MEM2_SPACE_DECODER_23 1'h0


// Name:           PREFETCHABLE2_23
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 23 && BAR2_ENABLED_23==1 && MEM2_SPACE_DECODER_23==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 23.
`define PREFETCHABLE2_23 1'h0


// Name:           BAR2_TYPE_23
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 23 && BAR2_ENABLED_23==1 && MEM2_SPACE_DECODER_23==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 23.
`define BAR2_TYPE_23 2'h0


// Name:           BAR2_SIZING_SCHEME_23
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 23 && BAR2_ENABLED_23==1
// Parameter Type: Feature Setting
// 
// BAR2 Function 23 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR2_SIZING_SCHEME_23 2'h0


// Name:           CX_BAR2_RESIZABLE_23
// Default:        0x0 ((BAR2_SIZING_SCHEME_23==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR2_ENABLED_23==1) && (MEM2_SPACE_DECODER_23==0)
// Parameter Type: Feature Setting
// 
// Defines BAR2 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR2 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR2_RESIZABLE_23 1'h0


// Name:           CX_BAR2_RESOURCE_AVAIL_23
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 23 && CX_BAR2_RESIZABLE_23==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR2 of function 23. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR2 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR2_RESOURCE_AVAIL_23 64'h10


// Name:           BAR2_MASK_WRITABLE_23
// Default:        0x0 ((BAR2_ENABLED_23==1 && BAR2_SIZING_SCHEME_23 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 23 && BAR2_ENABLED_23==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR2 Mask through DBI
`define BAR2_MASK_WRITABLE_23 1'h0


// Name:           BAR2_MASK_23
// Default:        0xfffff (CX_BAR2_RESIZABLE_23==1 ? [calc_bar_mask 
//                 CX_BAR2_RESOURCE_AVAIL_23] : MEM2_SPACE_DECODER_23==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 23 && BAR2_ENABLED_23==1 && MEM2_SPACE_DECODER_23==0 && 
//                 CX_BAR2_RESIZABLE_23==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR2 Mask register of function 23. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR2_MASK_23 64'hfffff


// Name:           MEM_FUNC23_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 23 && BAR2_ENABLED_23==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_2 of function 23 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR2_TARGET_MAP to 1 maps all incoming requests for BAR2 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC23_BAR2_TARGET_MAP 1'h1


// Name:           BAR3_ENABLED_23
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 23 && BAR2_TYPE_23==0
// Parameter Type: Feature Setting
// 
// Include the BAR3 registers for function 23.
`define BAR3_ENABLED_23 1'h0



`define DEFAULT_BAR3_ENABLED_23 1'h0


// Name:           MEM3_SPACE_DECODER_23
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 23 && BAR3_ENABLED_23==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 23.
`define MEM3_SPACE_DECODER_23 1'h0


// Name:           PREFETCHABLE3_23
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 23 && BAR3_ENABLED_23==1 && MEM3_SPACE_DECODER_23==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 23.
`define PREFETCHABLE3_23 1'h0


// Name:           BAR3_TYPE_23
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 23.
`define BAR3_TYPE_23 2'h0


// Name:           BAR3_SIZING_SCHEME_23
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 23 && BAR3_ENABLED_23==1
// Parameter Type: Feature Setting
// 
// BAR3 Function 23 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR3_SIZING_SCHEME_23 2'h0


// Name:           CX_BAR3_RESIZABLE_23
// Default:        0x0 ((BAR3_SIZING_SCHEME_23==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR3_ENABLED_23==1) && (MEM3_SPACE_DECODER_23==0)
// Parameter Type: Feature Setting
// 
// Defines BAR3 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR3 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR3_RESIZABLE_23 1'h0


// Name:           CX_BAR3_RESOURCE_AVAIL_23
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 23 && CX_BAR3_RESIZABLE_23==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR3 of function 23. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR3 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR3_RESOURCE_AVAIL_23 32'h10


// Name:           BAR3_MASK_WRITABLE_23
// Default:        0x0 ((BAR3_ENABLED_23==1 && BAR3_SIZING_SCHEME_23 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 23 && BAR3_ENABLED_23==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR3 Mask through DBI
`define BAR3_MASK_WRITABLE_23 1'h0


// Name:           BAR3_MASK_23
// Default:        0xffff (CX_BAR3_RESIZABLE_23==1 ? [calc_bar_mask 
//                 CX_BAR3_RESOURCE_AVAIL_23] : MEM3_SPACE_DECODER_23==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 23 && BAR3_ENABLED_23==1 && MEM3_SPACE_DECODER_23==0 && 
//                 CX_BAR3_RESIZABLE_23==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR3 Mask register of function 23. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR3_MASK_23 32'hffff


// Name:           MEM_FUNC23_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 23 && BAR3_ENABLED_23==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_3 of function 23 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR3_TARGET_MAP to 1 maps all incoming requests for BAR3 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC23_BAR3_TARGET_MAP 1'h1


// Name:           BAR4_ENABLED_23
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 23
// Parameter Type: Feature Setting
// 
// Include the BAR4 registers for function 23.
`define BAR4_ENABLED_23 1'h1


`define DEFAULT_BAR4_ENABLED_23 1'h1



// Name:           MEM4_SPACE_DECODER_23
// Default:        I/O (BAR4_ENABLED_23==1)
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 23 && BAR4_ENABLED_23==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 23.
`define MEM4_SPACE_DECODER_23 1'h1


// Name:           PREFETCHABLE4_23
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 23 && BAR4_ENABLED_23==1 && MEM4_SPACE_DECODER_23==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 23.
`define PREFETCHABLE4_23 1'h0


// Name:           BAR4_TYPE_23
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 23 && BAR4_ENABLED_23==1 && MEM4_SPACE_DECODER_23==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 23.
`define BAR4_TYPE_23 2'h0


// Name:           BAR4_SIZING_SCHEME_23
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 23 && BAR4_ENABLED_23==1
// Parameter Type: Feature Setting
// 
// BAR4  Function 23 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR4_SIZING_SCHEME_23 2'h0


// Name:           CX_BAR4_RESIZABLE_23
// Default:        0x0 ((BAR4_SIZING_SCHEME_23==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR4_ENABLED_23==1) && (MEM4_SPACE_DECODER_23==0)
// Parameter Type: Feature Setting
// 
// Defines BAR4 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR4 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR4_RESIZABLE_23 1'h0


// Name:           CX_BAR4_RESOURCE_AVAIL_23
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 23 &&  CX_BAR4_RESIZABLE_23==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR4 of function 23. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR4 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR4_RESOURCE_AVAIL_23 64'h10


// Name:           BAR4_MASK_WRITABLE_23
// Default:        0x0 ((BAR4_ENABLED_23==1 && BAR4_SIZING_SCHEME_23 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 23 && BAR4_ENABLED_23==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR4 Mask through DBI
`define BAR4_MASK_WRITABLE_23 1'h0


// Name:           BAR4_MASK_23
// Default:        0xff (CX_BAR4_RESIZABLE_23==1 ? [calc_bar_mask 
//                 CX_BAR4_RESOURCE_AVAIL_23] : MEM4_SPACE_DECODER_23==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 23 && BAR4_ENABLED_23==1 && MEM4_SPACE_DECODER_23==0 && 
//                 CX_BAR4_RESIZABLE_23==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR4 Mask register of function 23. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR4_MASK_23 64'hff


// Name:           MEM_FUNC23_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 23 && BAR4_ENABLED_23==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_4 of function 23 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR4_TARGET_MAP to 1 maps all incoming requests for BAR4 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC23_BAR4_TARGET_MAP 1'h1


// Name:           BAR5_ENABLED_23
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 23 && BAR4_TYPE_23==0
// Parameter Type: Feature Setting
// 
// Include the BAR5 registers for function 23.
`define BAR5_ENABLED_23 1'h0


`define DEFAULT_BAR5_ENABLED_23 1'h0


// Name:           MEM5_SPACE_DECODER_23
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 23 && BAR5_ENABLED_23==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 23.
`define MEM5_SPACE_DECODER_23 1'h0


// Name:           PREFETCHABLE5_23
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 23 && BAR5_ENABLED_23==1 && MEM5_SPACE_DECODER_23==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 23.
`define PREFETCHABLE5_23 1'h0


// Name:           BAR5_TYPE_23
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 23.
`define BAR5_TYPE_23 2'h0


// Name:           BAR5_SIZING_SCHEME_23
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 23 && BAR5_ENABLED_23==1
// Parameter Type: Feature Setting
// 
// BAR5  Function 23 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR5_SIZING_SCHEME_23 2'h0


// Name:           CX_BAR5_RESIZABLE_23
// Default:        0x0 ((BAR5_SIZING_SCHEME_23==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR5_ENABLED_23==1) && (MEM5_SPACE_DECODER_23==0)
// Parameter Type: Feature Setting
// 
// Defines BAR5 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR5 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR5_RESIZABLE_23 1'h0


// Name:           CX_BAR5_RESOURCE_AVAIL_23
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 23 && CX_BAR5_RESIZABLE_23==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR5 of function 23. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR5 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR5_RESOURCE_AVAIL_23 32'h10


// Name:           BAR5_MASK_WRITABLE_23
// Default:        0x0 ((BAR5_ENABLED_23==1 && BAR5_SIZING_SCHEME_23 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 23 && BAR5_ENABLED_23==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR5 Mask through DBI
`define BAR5_MASK_WRITABLE_23 1'h0


// Name:           BAR5_MASK_23
// Default:        0xffff (CX_BAR5_RESIZABLE_23==1 ? [calc_bar_mask 
//                 CX_BAR5_RESOURCE_AVAIL_23] : MEM5_SPACE_DECODER_23==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 23 && BAR5_ENABLED_23==1 && MEM5_SPACE_DECODER_23==0 && 
//                 CX_BAR5_RESIZABLE_23==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR5 Mask register of function 23. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR5_MASK_23 32'hffff


// Name:           MEM_FUNC23_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 23 && BAR5_ENABLED_23==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_5 of function 23 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR5_TARGET_MAP to 1 maps all incoming requests for BAR5 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC23_BAR5_TARGET_MAP 1'h1


`define FUNC23_BARSIZE_32 128'h0


`define FUNC23_BARSIZE 128'h0


`define FUNC23_BAR0_BARSIZE_TRGT1 128'h0


`define FUNC23_BAR2_BARSIZE_TRGT1 128'h0


`define FUNC23_BAR4_BARSIZE_TRGT1 128'h0


`define FUNC23_BAR0_TRGT1_ADDR_WIDTH 1


`define FUNC23_BAR2_TRGT1_ADDR_WIDTH 1


`define FUNC23_BAR4_TRGT1_ADDR_WIDTH 1


// Name:         CX_NUM_RBARS_23
// Default:      0 ([calc_num_rbars CX_BAR0_RESIZABLE_23 CX_BAR1_RESIZABLE_23 
//               CX_BAR2_RESIZABLE_23 CX_BAR3_RESIZABLE_23 CX_BAR4_RESIZABLE_23 
//               CX_BAR5_RESIZABLE_23])
// Values:       -2147483648, ..., 2147483647
// 
// Number of resizable BARs
`define CX_NUM_RBARS_23 0

//-/ END:   BAR CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SR-IOV CAPABILITIES CONFIGURATION


// Name:           CX_VF_DEPENDENCY_LINK_23
// Default:        0x23
// Values:         0x0, ..., 0xff
// Enabled:        CX_VF_DEPENDENCY_LINK_SUPP && (CX_NFUNC > 23) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Specifies the 8-bit VF dependency link for PF23. Valid only if CX_VF_DEPENDENCY_LINK_SUPP=1.
`define CX_VF_DEPENDENCY_LINK_23 8'h23


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER1_23
// Default:        0x2 ((CX_NFUNC>=17) ? 32 : (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : 
//                 (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF23 in an ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER1_23 16'h2


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER0_23
// Default:        0x100
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF23 
//  in a non-ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER0_23 16'h100


// Name:           VF_STRIDE_ARI_CAP_HIER1_23
// Default:        0x2 (CX_VF_STRIDE_ALWAYS_ONE) ? 1 : ((CX_NFUNC>=17) ? 32 : 
//                 (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF23 in an ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER1_23 16'h2


// Name:           VF_STRIDE_ARI_CAP_HIER0_23
// Default:        0x100 ((CX_VF_STRIDE_ALWAYS_ONE) ? 0x0001 : 0x0100)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF23 in a non-ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER0_23 16'h100


// Name:           CX_VF_DEVICE_ID_23
// Default:        0x0 (CX_DEVICE_ID_23)
// Values:         0x0, ..., 0xffff
// Enabled:        (CX_NFUNC > 23) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 16-bit virtual function Device ID for PF23. 
//  It might be different from the physical function's.
`define CX_VF_DEVICE_ID_23 16'h0


// Name:           CX_VF_SUPP_PAGE_SIZE_23
// Default:        0x553
// Values:         0x553, ..., 0xffff
// Enabled:        (CX_NFUNC > 23) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 32-bit supported page sizes for virtual functions for PF23
`define CX_VF_SUPP_PAGE_SIZE_23 32'h553


// Name:           CX_ARI_CAP_HIER_PRSVD_23
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Specifies if ARI Capable Hierarchy bit is preserved across certain power state transitions 
//  Only present in PF0. Read Only Zero in this PF23.
`define CX_ARI_CAP_HIER_PRSVD_23 1'h0

//-/===========================================
//-/ START: VF BAR CONFIGURATION


// Name:           VF_BAR0_ENABLED_23
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 23)
// Parameter Type: Feature Setting
// 
// Include the VF BAR0 registers in PF23
`define VF_BAR0_ENABLED_23 1'h1


`define VF_DEFAULT_BAR0_ENABLED_23 1'h1


// Name:           VF_MEM0_SPACE_DECODER_23
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR0_ENABLED_23 && CX_SRIOV_ENABLE && (CX_NFUNC > 23)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Space Indicator 
//  ALWAYS set to Memory for Virtual Functions
`define VF_MEM0_SPACE_DECODER_23 1'h0


// Name:           VF_PREFETCHABLE0_23
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_23==1 && VF_MEM0_SPACE_DECODER_23==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 23)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Prefetchable 
//  When set indicates VF BAR0 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE0_23 1'h0


// Name:           VF_BAR0_TYPE_23
// Default:        64-bit ((VF_MEM0_SPACE_DECODER_23==1 || VF_BAR0_ENABLED_23==0) ? 0 
//                 : 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR0_ENABLED_23==1 && VF_MEM0_SPACE_DECODER_23==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 23)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 23; (bits [2:1] for a memory BAR).
`define VF_BAR0_TYPE_23 2'h2


// Name:           VF_BAR0_MASK_WRITABLE_23
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_23==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 23)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR0_MASK_WRITABLE_23 1'h0


// Name:           VF_BAR0_MASK_23
// Default:        0xfffff (VF_MEM0_SPACE_DECODER_23==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR0_ENABLED_23==1 && VF_MEM0_SPACE_DECODER_23==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 23)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Mask 
//  Determines the default of the VF BAR Mask register for PF23. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR0_MASK_23 64'hfffff


// Name:           VF_MEM_FUNC23_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR0_ENABLED_23==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE 
//                 && (CX_NFUNC > 23)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF23 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC23_BAR0_TARGET_MAP 1'h1


// Name:           VF_BAR1_ENABLED_23
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        (VF_BAR0_TYPE_23==0)  && CX_SRIOV_ENABLE && (CX_NFUNC > 23)
// Parameter Type: Feature Setting
// 
// Include the VF BAR1 registers in PF23
`define VF_BAR1_ENABLED_23 1'h0


`define VF_DEFAULT_BAR1_ENABLED_23 1'h0


// Name:           VF_MEM1_SPACE_DECODER_23
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR1_ENABLED_23==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 23)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Space Indicator
`define VF_MEM1_SPACE_DECODER_23 1'h0


// Name:           VF_PREFETCHABLE1_23
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_23==1 && VF_MEM1_SPACE_DECODER_23==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 23)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Prefetchable 
//  When set indicates VF BAR1 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE1_23 1'h0


// Name:           VF_BAR1_TYPE_23
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 23; (bits [2:1] for a memory BAR).
`define VF_BAR1_TYPE_23 2'h0


// Name:           VF_BAR1_MASK_WRITABLE_23
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_23==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 23)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR1_MASK_WRITABLE_23 1'h0


// Name:           VF_BAR1_MASK_23
// Default:        0xffff (VF_MEM1_SPACE_DECODER_23==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR1_ENABLED_23==1 && VF_MEM1_SPACE_DECODER_23==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 23)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Mask 
//  Determines the default of the VF BAR Mask register for PF23. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR1_MASK_23 32'hffff


// Name:           VF_MEM_FUNC23_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR1_ENABLED_23==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE 
//                 && (CX_NFUNC > 23)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF23 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC23_BAR1_TARGET_MAP 1'h1


// Name:           VF_BAR2_ENABLED_23
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 23)
// Parameter Type: Feature Setting
// 
// Include the VF BAR2 registers in PF23
`define VF_BAR2_ENABLED_23 1'h1


`define VF_DEFAULT_BAR2_ENABLED_23 1'h1


// Name:           VF_MEM2_SPACE_DECODER_23
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR2_ENABLED_23==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 23)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Memory Space Indicator
`define VF_MEM2_SPACE_DECODER_23 1'h0


// Name:           VF_PREFETCHABLE2_23
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_23==1 && VF_MEM2_SPACE_DECODER_23==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 23)
// Parameter Type: Register Default Setting
// 
// BAR2 Memory Prefetchable 
//  When set indicates VF BAR2 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE2_23 1'h0


// Name:           VF_BAR2_TYPE_23
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR2_ENABLED_23==1 && VF_MEM2_SPACE_DECODER_23==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 23)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 23; (bits [2:1] for a memory BAR).
`define VF_BAR2_TYPE_23 2'h0


// Name:           VF_BAR2_MASK_WRITABLE_23
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_23==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 23)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR2_MASK_WRITABLE_23 1'h0


// Name:           VF_BAR2_MASK_23
// Default:        0xfffff (VF_MEM2_SPACE_DECODER_23==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR2_ENABLED_23==1 && VF_MEM2_SPACE_DECODER_23==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 23)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Mask 
//  Determines the default of the VF BAR Mask register for PF23. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR2_MASK_23 64'hfffff


// Name:           VF_MEM_FUNC23_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR2_ENABLED_23==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 23)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF23 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC23_BAR2_TARGET_MAP 1'h1


// Name:           VF_BAR3_ENABLED_23
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_TYPE_23==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 23)
// Parameter Type: Feature Setting
// 
// Include the VF BAR3 registers in PF23
`define VF_BAR3_ENABLED_23 1'h0


`define VF_DEFAULT_BAR3_ENABLED_23 1'h0


// Name:           VF_MEM3_SPACE_DECODER_23
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR3_ENABLED_23==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 23)
// Parameter Type: Register Default Setting
// 
// BAR3 Memory Space Indicator
`define VF_MEM3_SPACE_DECODER_23 1'h0


// Name:           VF_PREFETCHABLE3_23
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_23==1 && VF_MEM3_SPACE_DECODER_23==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 23)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Memory Prefetchable 
//  When set indicates VF BAR3 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE3_23 1'h0


// Name:           VF_BAR3_TYPE_23
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 23; (bits [2:1] for a memory BAR).
`define VF_BAR3_TYPE_23 2'h0


// Name:           VF_BAR3_MASK_WRITABLE_23
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_23==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 23)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR3_MASK_WRITABLE_23 1'h0


// Name:           VF_BAR3_MASK_23
// Default:        0xffff (VF_MEM3_SPACE_DECODER_23==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR3_ENABLED_23==1 && VF_MEM3_SPACE_DECODER_23==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 23)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Mask 
//  Determines the default of the VF BAR Mask register for PF23. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR3_MASK_23 32'hffff


// Name:           VF_MEM_FUNC23_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR3_ENABLED_23==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 23)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF23 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC23_BAR3_TARGET_MAP 1'h1


// Name:           VF_BAR4_ENABLED_23
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 23)
// Parameter Type: Feature Setting
// 
// Include the VF BAR4 registers in PF23
`define VF_BAR4_ENABLED_23 1'h1


`define VF_DEFAULT_BAR4_ENABLED_23 1'h1


// Name:           VF_MEM4_SPACE_DECODER_23
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR4_ENABLED_23==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 23)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Space Indicator
`define VF_MEM4_SPACE_DECODER_23 1'h0


// Name:           VF_PREFETCHABLE4_23
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_23==1 && VF_MEM4_SPACE_DECODER_23==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 23)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Prefetchable 
//  When set indicates VF BAR4 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE4_23 1'h0


// Name:           VF_BAR4_TYPE_23
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR4_ENABLED_23==1 && VF_MEM4_SPACE_DECODER_23==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 23)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 23; (bits [2:1] for a memory BAR).
`define VF_BAR4_TYPE_23 2'h0


// Name:           VF_BAR4_MASK_WRITABLE_23
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_23==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 23)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR4_MASK_WRITABLE_23 1'h0


// Name:           VF_BAR4_MASK_23
// Default:        0xfff (VF_MEM4_SPACE_DECODER_23==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR4_ENABLED_23==1 && VF_MEM4_SPACE_DECODER_23==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 23)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Mask 
//  Determines the default of the VF BAR Mask register for PF23. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR4_MASK_23 64'hfff


// Name:           VF_MEM_FUNC23_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR4_ENABLED_23==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 23)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF23 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC23_BAR4_TARGET_MAP 1'h1


// Name:           VF_BAR5_ENABLED_23
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_TYPE_23==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 23)
// Parameter Type: Feature Setting
// 
// Include the VF BAR5 registers in PF23
`define VF_BAR5_ENABLED_23 1'h0


`define VF_DEFAULT_BAR5_ENABLED_23 1'h0


// Name:           VF_MEM5_SPACE_DECODER_23
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR5_ENABLED_23==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 23)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Space Indicator
`define VF_MEM5_SPACE_DECODER_23 1'h0


// Name:           VF_PREFETCHABLE5_23
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_23==1 && VF_MEM5_SPACE_DECODER_23==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 23)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Prefetchable 
//  When set indicates VF BAR5 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE5_23 1'h0


// Name:           VF_BAR5_TYPE_23
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 23; (bits [2:1] for a memory BAR).
`define VF_BAR5_TYPE_23 2'h0


// Name:           VF_BAR5_MASK_WRITABLE_23
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_23==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 23)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR5_MASK_WRITABLE_23 1'h0


// Name:           VF_BAR5_MASK_23
// Default:        0xffff (VF_MEM5_SPACE_DECODER_23==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR5_ENABLED_23==1 && VF_MEM5_SPACE_DECODER_23==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 23)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Mask 
//  Determines the default of the VF BAR Mask register for PF23. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR5_MASK_23 32'hffff


// Name:           VF_MEM_FUNC23_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR5_ENABLED_23==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 23)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF23 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC23_BAR5_TARGET_MAP 1'h1


`define VF_FUNC23_BARSIZE_32 128'h101000


`define VF_FUNC23_BARSIZE 128'h201000

//-/ END:   VF BAR CONFIGURATION
//-/===========================================

//-/ END:   SR-IOV CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: TPH CAPABILITIES CONFIGURATION


// Name:           TPH_IVEC_23
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Interrupt Vector Mode. If set indicates that the function supports the Interrupt Vector 
// Mode of operation. Function 23.
`define TPH_IVEC_23 1'h0


// Name:           TPH_DS_23
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Device Specific Mode. If set indicates that the function supports the Device Specific Mode 
// of operation. Function 23.
`define TPH_DS_23 1'h0


// Name:           TPH_ST_TABLE_LOC_23
// Default:        Not Present
// Values:         Not Present (0), TPH Requester Capability Structure (1), MSI-X 
//                 Table Structure (2)
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_DS_23 || TPH_IVEC_23))
// Parameter Type: Feature Setting
// 
// TLP Processing Hints Steering Tag Table Location. Value indicates if and where the ST Table is located. Function 23.
`define TPH_ST_TABLE_LOC_23 0

//located in the TPH Requester Capability structure. Please reduce the ST Table Size for this mode of operation"

// Name:           TPH_ST_TABLE_SIZE_23
// Default:        1
// Values:         1, ..., 2048
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_ST_TABLE_LOC_23 != 0))
// Parameter Type: Feature Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define TPH_ST_TABLE_SIZE_23 1


`define TPH_ST_TABLE_DEPTH_23 0

//-/ END:   TPH CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: ATS CAPABILITIES CONFIGURATION


// Name:           ATS_INV_Q_DPTH_23
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// The number of Invalidate Requests that the Function can accept before putting backpressure on the upstream connection. A 
// value of 0 indicates the function can accept 32 Invalidate requests. Function 23.
`define ATS_INV_Q_DPTH_23 5'd0


// Name:           ATS_STU_23
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// This value indicates to the Function the minimum number of 4096-byte blocks that is indicated in a Translation 
// Completion or Invalidate Request. This is a power of 2 multiplier and the number of blocks is 2^STU. A value of 0 indicates 1 block 
// and a value of 31 indicates 2^31 blocks (or 8 TB total). Function 23.
`define ATS_STU_23 5'd0

//-/ END:   ATS CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PRS CAPABILITIES CONFIGURATION


// Name:           CX_PRS_OUTSTANDING_CAPACITY_VALUE_23
// Default:        0x1
// Values:         0x0, ..., 0xffffffff
// Enabled:        (CX_PRS_ENABLE==1) && (CX_NFUNC > 23)
// Parameter Type: Register Default Setting
// 
// Register default for PRS Outstanding Capacity in PF23. 
// For more details, see the PRS_OUTSTANDING_CAPACITY field in the PRS_REQ_CAPACITY_REG register.
`define CX_PRS_OUTSTANDING_CAPACITY_VALUE_23 32'h1

//-/ END:   PRS CAPABILITIES CONFIGURATION
//-/===========================================


//-/===========================================
//--- START: RN


// Name:           CX_RN_IMM_VALUE_23
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 23)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for PF23.
`define CX_RN_IMM_VALUE_23 1'h0


// Name:           CX_RN_IMM_D0_VALUE_23
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 23)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for PF23.
`define CX_RN_IMM_D0_VALUE_23 1'h0


// Name:           CX_RN_FRS_VALUE_23
// Default:        0x0 (CX_RN_FRS_SUPPORTED==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_FRS_SUPPORTED==1) && (CX_NFUNC > 23)
// Parameter Type: Feature Setting
// 
// Function Readiness Status messaging supported for function PF23.
`define CX_RN_FRS_VALUE_23 1'h0


// Name:           CX_RN_RTR_VALID_23
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 23)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF23.
`define CX_RN_RTR_VALID_23 1'h0


// Name:           CX_RN_RTR_DL_UP_VALUE_23
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 23)
// Parameter Type: Register Default Setting
// 
// Register default for RTR DL Up Time field in PF23.
`define CX_RN_RTR_DL_UP_VALUE_23 12'h0


// Name:           CX_RN_RTR_RESET_VALUE_23
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 23)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF23.
`define CX_RN_RTR_RESET_VALUE_23 12'h0


// Name:           CX_RN_RTR_D3D0_VALUE_23
// Default:        0x0
// Values:         0x0, ..., 0x80a
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 23)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF23.
`define CX_RN_RTR_D3D0_VALUE_23 12'h0


// Name:           CX_RN_RTR_FLR_VALUE_23
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_FLR_ENABLE==1) && (CX_NFUNC > 23)
// Parameter Type: Register Default Setting
// 
// Register default for RTR FLR Time field in PF23.
`define CX_RN_RTR_FLR_VALUE_23 12'h0


// Name:           VF_RN_IMM_VALUE_23
// Default:        0x0 (CX_RN_IMM_VALUE_23 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 23))
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for VFs in PF23.
`define VF_RN_IMM_VALUE_23 1'h0


// Name:           VF_RN_IMM_D0_VALUE_23
// Default:        0x0 (CX_RN_IMM_D0_VALUE_23 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 23))
// Parameter Type: Register Default Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for VFs in PF23.
`define VF_RN_IMM_D0_VALUE_23 1'h0


// Name:           VF_RN_RTR_VALID_23
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 23) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF23 VFs.
`define VF_RN_RTR_VALID_23 1'h0


// Name:           VF_RN_RTR_RESET_VALUE_23
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_23)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 23) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF23 VFS.
`define VF_RN_RTR_RESET_VALUE_23 12'h0


// Name:           VF_RN_RTR_D3D0_VALUE_23
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_23)
// Values:         0x0, ..., 0x80a
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 23) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF23 VFS.
`define VF_RN_RTR_D3D0_VALUE_23 12'h0


// Name:           VF_RN_RTR_FLR_VALUE_23
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_23)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 23) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF23 VFs.
`define VF_RN_RTR_FLR_VALUE_23 12'h0


// Name:           EXT_VF_RN_RTR_VALID_23
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 23) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF23 VFs.
`define EXT_VF_RN_RTR_VALID_23 1'h0


// Name:           EXT_VF_RN_RTR_RESET_VALUE_23
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_23)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 23) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF23 VFS.
`define EXT_VF_RN_RTR_RESET_VALUE_23 12'h0


// Name:           EXT_VF_RN_RTR_D3D0_VALUE_23
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_23)
// Values:         0x0, ..., 0x80a
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 23) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF23 VFS.
`define EXT_VF_RN_RTR_D3D0_VALUE_23 12'h0


// Name:           EXT_VF_RN_RTR_FLR_VALUE_23
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_23)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 23) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF23 VFs.
`define EXT_VF_RN_RTR_FLR_VALUE_23 12'h0

//-/ END:   RN
//-/===========================================

//-/ START: LN CAPABILITIES CONFIGURATION
//-/===========================================


// Name:           CX_LN_REG_MAX_VALUE_23
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 23))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_64_SUPPORTED field in the LNR_CAP_OFF register for PF23.
`define CX_LN_REG_MAX_VALUE_23 5'h0


// Name:           CX_LN_128_SUPPORTED_VALUE_23
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 23))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_128_SUPPORTED field in the LNR_CAP_OFF register for PF23.
`define CX_LN_128_SUPPORTED_VALUE_23 1'h0


// Name:           CX_LN_64_SUPPORTED_VALUE_23
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 23))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_REGISTRATION_MAX field in the LNR_CAP_OFF register for PF23.
`define CX_LN_64_SUPPORTED_VALUE_23 1'h0

//-/ END:   LN CAPABILITIES CONFIGURATION
//-/===========================================




//-/==========================================
//-/ End FUNC23 Config
//-/==========================================

//-/===========================================
//-/ Function 24 Configuration Registers
//-/ ==========================================


// Name:         FUNC_24
// Default:      0 ((CX_NFUNC > 24) ? 1 : 0)
// Values:       0, 1
// 
// This parameter indicates that Function 24 is present
// `define FUNC_24

//-/===========================================
//-/ START: PCI-E CAPABILITIES CONFIGURATION


// Name:           PCIE_CAP_INT_MSG_NUM_24
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 24
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Message Number field in the PCI Express Capabilities Register. Function 24.
`define PCIE_CAP_INT_MSG_NUM_24 5'h0


// Name:           SLOT_IMPLEMENTED_24
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_NFUNC > 24))
// Parameter Type: Register Default Setting
// 
// Indicates that the PCI Express link associated with this Port is connected to a slot. Function 24.
`define SLOT_IMPLEMENTED_24 1'h0


// Name:           DEFAULT_PHANTOM_FUNC_SUPPORTED_24
// Default:        0x0
// Values:         0x0, ..., 0x3
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_PHANTOM_FUNC_SUPPORTED_24 2'h0


// Name:           DEFAULT_EXT_TAG_FIELD_SUPPORTED_24
// Default:        0x0 (DEFAULT_EXT_TAG_FIELD_SUPPORTED_0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 24
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_EXT_TAG_FIELD_SUPPORTED_24 1'h0



// Name:           DEFAULT_ATT_BUTT_PRE_24
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 24
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Button is present
`define DEFAULT_ATT_BUTT_PRE_24 1'h0


// Name:           DEFAULT_ATT_IND_PRE_24
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 24
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Indicator is present
`define DEFAULT_ATT_IND_PRE_24 1'h0


// Name:           DEFAULT_PWR_IND_PRE_24
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 24
// Parameter Type: Register Default Setting
// 
// When set indicates that a Power Indicator is present
`define DEFAULT_PWR_IND_PRE_24 1'h0


// Name:           DEFAULT_NO_SNOOP_SUPPORTED_24
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 24
// Parameter Type: Register Default Setting
// 
// Default value for the Enable No Snoop bit in the Device Control Register. Function 24.
`define DEFAULT_NO_SNOOP_SUPPORTED_24 1'h0


// Name:           ROOT_RCB_24
// Default:        64-bit
// Values:         64-bit (0x0), 128-bit (0x1)
// Parameter Type: Register Default Setting
// 
// Default value for the Read Completion Boundary (RCB) bit in the Link Control Register.
`define ROOT_RCB_24 1'h0


//-/ END:   PCI-E CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: MSI-X CAPABILITIES CONFIGURATION


// Name:           MSIX_TABLE_SIZE_24
// Default:        0x0
// Values:         0x0, ..., 0x7ff
// Enabled:        CX_NFUNC > 24 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the MSI-X Table Size field in the MSI-X Control Register. Function 24.
`define MSIX_TABLE_SIZE_24 11'h0


// Name:           MSIX_TABLE_BIR_24
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 24 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table BAR Indicator Register (BIR) field in the MSI-X Table Offset and BIR Register. Function 24.
`define MSIX_TABLE_BIR_24 3'h0


// Name:           MSIX_TABLE_OFFSET_24
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 24 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table Offset field in the MSI-X Table Offset and BIR Register. Function 24.
`define MSIX_TABLE_OFFSET_24 29'h0


// Name:           MSIX_PBA_BIR_24
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 24 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Pending Bit Array (PBA) BIR field in the MSI-X PBA Offset and BIR Register. Function 24.
`define MSIX_PBA_BIR_24 7'h0


// Name:           MSIX_PBA_OFFSET_24
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 24 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the PBA Offset field in the MSI-X PBA Offset and BIR Register. Function 24.
`define MSIX_PBA_OFFSET_24 29'h0

//-/ END:   MSI-X CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SATA CAPABILITIES CONFIGURATION


// Name:         SATA_HBA_OFFSET_24
// Default:      0x0
// Values:       0x0, ..., 0xfffff
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA Offset. Base address of the SATA HBA registers, 
//  as an offset from the base address of the BAR indicated 
//  by the SATA BAR field.
`define SATA_HBA_OFFSET_24 20'h0


// Name:         SATA_BAR_24
// Default:      0x0
// Values:       0x0, ..., 0xf
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA BAR. The bar that maps to SATA HBA registers,
`define SATA_BAR_24 4'h0

//-/ END:   SATA CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: AER CAPABILITIES CONFIGURATION


// Name:           DEFAULT_ECRC_CHK_CAP_24
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 24 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Check Capable bit in the Advanced Capabilities and Control Register. Function 24.
`define DEFAULT_ECRC_CHK_CAP_24 1'h1


// Name:           DEFAULT_ECRC_GEN_CAP_24
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 24 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Generation Capability bit in the Advanced Capabilities and Control Register. Function 24.
`define DEFAULT_ECRC_GEN_CAP_24 1'h1


// Name:           AER_INT_MSG_NUM_24
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Parameter Type: Register Default Setting
// 
// Default value for the Advanced Error Interrupt Message Number field of the Root Error Status Register. Function 24.
`define AER_INT_MSG_NUM_24 5'h0



// Name:           CX_HDR_LOG_DEPTH_24
// Default:        0x1
// Values:         0x1, 0x2, 0x4
// Enabled:        CX_NFUNC > 24 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Feature Setting.
// 
// Header Log Depth
`define CX_HDR_LOG_DEPTH_24 3'h1


`define CX_MULTIPLE_HDR_REC_CAP_24 1'h0

//-/ END:   AER CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PM CAPABILITIES CONFIGURATION


// Name:           PME_SUPPORT_24
// Default:        0x1b
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 24
// Parameter Type: Register Default Setting
// 
// Default value for the PME_Support field in the Power Management Capabilities Register. Function 24.
`define PME_SUPPORT_24 5'h1b


// Name:           D1_SUPPORT_24
// Default:        true
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 24
// Parameter Type: Register Default Setting
// 
// Default value for the D1 Support bit in the Power Management Capabilities Register. Function 24.
`define D1_SUPPORT_24 1'h1


// Name:           D2_SUPPORT_24
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 24
// Parameter Type: Register Default Setting
// 
// Default value for the D2 Support bit in the Power Management Capabilities Register. Function 24.
`define D2_SUPPORT_24 1'h0


// Name:           DEV_SPEC_INIT_24
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 24
// Parameter Type: Register Default Setting
// 
// Default value for the Device Specific Initialization (DSI) bit in the Power Management Capabilities Register. Function 
// 24.
`define DEV_SPEC_INIT_24 1'h0


// Name:           AUX_CURRENT_24
// Default:        375mA
// Values:         0mA (0x0), 55mA (0x1), 100mA (0x2), 160mA (0x3), 220mA (0x4), 270mA 
//                 (0x5), 320mA (0x6), 375mA (0x7)
// Enabled:        CX_NFUNC > 24
// Parameter Type: Register Default Setting
// 
// Default value for the Aux Current field in the Power Management Capabilities Register. Function 24.
`define AUX_CURRENT_24 3'h7


// Name:           DEFAULT_NO_SOFT_RESET_24
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 24
// Parameter Type: Register Default Setting
// 
// Default value for the No Soft Reset bit in the Power Management Control and Status Register. When set, you should not 
// reset any controller registers when transitioning from D3hot to D0. Therefore, you should not assert the non_sticky_rst_n 
// and sticky_rst_n inputs. Function 24.
`define DEFAULT_NO_SOFT_RESET_24 1'h0

//-/ END:   PM CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PCI BASIC CONFIGURATION


// Name:           CX_DEVICE_ID_24
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 24
// Parameter Type: Register Default Setting
// 
// Default value for the Device ID field in the Device ID and Vendor ID Register. Function 24.
`define CX_DEVICE_ID_24 16'h0


// Name:           CX_VENDOR_ID_24
// Default:        0x16c3
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 24
// Parameter Type: Register Default Setting
// 
// Default value for the Vendor ID field in the Device ID and Vendor ID Register. Function 24.
`define CX_VENDOR_ID_24 16'h16c3


// Name:           CX_REVISION_ID_24
// Default:        0x1
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 24
// Parameter Type: Register Default Setting
// 
// Default value for the Revision ID field in the Revision ID Register. Function 24.
`define CX_REVISION_ID_24 8'h1


// Name:           SUBSYS_DEV_ID_24
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 24
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 24.
`define SUBSYS_DEV_ID_24 16'h0


// Name:           SUBSYS_VENDOR_ID_24
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 24
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem Vendor ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 24.
`define SUBSYS_VENDOR_ID_24 16'h0


// Name:           BASE_CLASS_CODE_24
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 24
// Parameter Type: Register Default Setting
// 
// Default value for the Base Class Code field in the Class Code Register. Function 24.
`define BASE_CLASS_CODE_24 8'h0


// Name:           SUB_CLASS_CODE_24
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 24
// Parameter Type: Register Default Setting
// 
// Default value for the Subclass Code field in the Class Code Register. Function 24.
`define SUB_CLASS_CODE_24 8'h0


// Name:           IF_CODE_24
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 24
// Parameter Type: Register Default Setting
// 
// Default value for the Programming Interface field in the Class Code Register. Function 24.
`define IF_CODE_24 8'h0


// Name:           CARDBUS_CIS_PTR_24
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 24
// Parameter Type: Register Default Setting
// 
// Default value for the CardBus CIS Pointer Register. Function 24.
`define CARDBUS_CIS_PTR_24 16'h0


// Name:           INT_PIN_MAPPING_24
// Default:        INTA
// Values:         None (0x0), INTA (0x1), INTB (0x2), INTC (0x3), INTD (0x4)
// Enabled:        CX_NFUNC > 24
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Pin Register. Function 24.
`define INT_PIN_MAPPING_24 8'h1


// Name:           IO_DECODE_32_24
// Default:        16-bit
// Values:         16-bit (0x0), 32-bit (0x1)
// Enabled:        CX_NFUNC > 24
// Parameter Type: Register Default Setting
// 
// Default value for the 32-Bit I/O Space bit in the I/O Base and I/O Limit Register. Function 24.
`define IO_DECODE_32_24 1'h0


// Name:           MEM_DECODE_64_24
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x1)
// Enabled:        CX_NFUNC > 24
// Parameter Type: Register Default Setting
// 
// Default value for the 64-Bit Memory Addressing bit in the Prefetchable Memory Base and Limit Register. Function 24.
`define MEM_DECODE_64_24 1'h0


// Name:           ROM_BAR_ENABLED_24
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 24
// Parameter Type: Register Default Setting
// 
// Include the expansion ROM BAR registers. Function 24.
`define ROM_BAR_ENABLED_24 1'h1


`define DEFAULT_ROM_BAR_ENABLED_24 1'h1


// Name:           ROM_MASK_24
// Default:        0xffff
// Values:         0x7ff, ..., 0xffffff
// Enabled:        CX_NFUNC > 24 && ROM_BAR_ENABLED_24==1
// Parameter Type: Register Default Setting
// 
// Determines the default of the Expansion ROM BAR Mask register. Function 24. 
//  - The BAR Mask register specifies which bits of the Expansion ROM BAR are non-writable by host software, which 
//  determines the size of the BAR. 
//  - The maximum value for ROM_MASK_N is 0xFFFFFF because the maximum space that can be claimed by an Expansion ROM BAR 
//  is 16 MB. 
//  - For example: 32'hFFFF =BAR size of 2^16.
`define ROM_MASK_24 32'hffff


// Name:           ROM_MASK_WRITABLE_24
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 24 && ROM_BAR_ENABLED_24==1
// Parameter Type: Feature Setting
// 
// Determines if the Expansion ROM BAR Mask register for function 24 is writable by application software. If writing to a 
// Expansion ROM BAR Mask register is enabled, your application can write to the Expansion ROM BAR Mask register through the 
// DBI by asserting dbi_cs2 in addition to dbi_cs.
`define ROM_MASK_WRITABLE_24 1'h0


// Name:           ROM_FUNC24_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 24 && ROM_BAR_ENABLED_24==1 && TRGT1_POPULATE==1))
// Parameter Type: Register Default Setting
// 
// Direct incoming requests that pass filtering and match the Expansion ROM BAR of function 24 to either RTRGT0 or RTRGT1. 
//  - For example, setting ROM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for the Expansion ROM BAR of function 
//  0 to RTRGT1. 
//  - If TRGT1_POPULATE =0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define ROM_FUNC24_TARGET_MAP 1'h1


// Name:           CX_PCI_HEADER_DEFAULTS_VISIBLE_24
// Default:        0
// Values:         0, 1
// Parameter Type: Register Default Setting
// 
// Select here if you want to configure the defaults for the other PCI Standard Header registers for function 24. 
//  An extra window will appear under this page. To access it, click the plus/minus symbol in the hierarchy view on the 
//  left panel. 
//  This is optional but not usually recommended. 
//  You can also change these register defaults using the DBI before (or after) the link comes up.
`define CX_PCI_HEADER_DEFAULTS_VISIBLE_24 0

//-/ END:   PCI BASIC CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: BAR CONFIGURATION


// Name:           BAR0_ENABLED_24
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 24
// Parameter Type: Feature Setting
// 
// Include the BAR0 registers for function 24.
`define BAR0_ENABLED_24 1'h1


`define DEFAULT_BAR0_ENABLED_24 1'h1


// Name:           MEM0_SPACE_DECODER_24
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 24 && BAR0_ENABLED_24==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 24.
`define MEM0_SPACE_DECODER_24 1'h0


// Name:           PREFETCHABLE0_24
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 24 && BAR0_ENABLED_24==1 && MEM0_SPACE_DECODER_24==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 24.
`define PREFETCHABLE0_24 1'h0


// Name:           BAR0_TYPE_24
// Default:        64-bit ((MEM0_SPACE_DECODER_24==1 || BAR0_ENABLED_24==0) ? 0 : 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 24 && BAR0_ENABLED_24==1 && MEM0_SPACE_DECODER_24==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 24.
`define BAR0_TYPE_24 2'h2


// Name:           BAR0_SIZING_SCHEME_24
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 24 && BAR0_ENABLED_24==1
// Parameter Type: Feature Setting
// 
// BAR0 Function 24 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR0_SIZING_SCHEME_24 2'h0


// Name:           CX_BAR0_RESIZABLE_24
// Default:        0x0 ((BAR0_SIZING_SCHEME_24==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR0_ENABLED_24==1) && (MEM0_SPACE_DECODER_24==0)
// Parameter Type: Feature Setting
// 
// Defines BAR0 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR0 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR0_RESIZABLE_24 1'h0


// Name:           CX_BAR0_RESOURCE_AVAIL_24
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 24 && CX_BAR0_RESIZABLE_24==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR0 of function 24. 
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
// Example: 0x00000030 indicates that BAR0 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR0_RESOURCE_AVAIL_24 64'h10


// Name:           BAR0_MASK_WRITABLE_24
// Default:        0x0 ((BAR0_ENABLED_24==1 && BAR0_SIZING_SCHEME_24 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 24 && BAR0_ENABLED_24==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR0 Mask through DBI
`define BAR0_MASK_WRITABLE_24 1'h0


// Name:           BAR0_MASK_24
// Default:        0xfffff (CX_BAR0_RESIZABLE_24==1 ? [calc_bar_mask 
//                 CX_BAR0_RESOURCE_AVAIL_24] : MEM0_SPACE_DECODER_24==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 24 && BAR0_ENABLED_24==1 && MEM0_SPACE_DECODER_24==0 && 
//                 CX_BAR0_RESIZABLE_24==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR0 Mask register of function 24. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR0_MASK_24 64'hfffff


// Name:           MEM_FUNC24_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 24 && BAR0_ENABLED_24==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_0 of function 24 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming Requests for BAR0 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC24_BAR0_TARGET_MAP 1'h1


// Name:           BAR1_ENABLED_24
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 24 && BAR0_TYPE_24==0
// Parameter Type: Feature Setting
// 
// Include the BAR1 registers for function 24.
`define BAR1_ENABLED_24 1'h0


`define DEFAULT_BAR1_ENABLED_24 1'h0


// Name:           MEM1_SPACE_DECODER_24
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 24 && BAR1_ENABLED_24==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 24.
`define MEM1_SPACE_DECODER_24 1'h0


// Name:           PREFETCHABLE1_24
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 24 && BAR1_ENABLED_24==1 && MEM1_SPACE_DECODER_24==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 24.
`define PREFETCHABLE1_24 1'h0


// Name:           BAR1_TYPE_24
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 24.
`define BAR1_TYPE_24 2'h0


// Name:           BAR1_SIZING_SCHEME_24
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 24 && BAR1_ENABLED_24==1
// Parameter Type: Feature Setting
// 
// BAR1 Function 24 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR1_SIZING_SCHEME_24 2'h0


// Name:           CX_BAR1_RESIZABLE_24
// Default:        0x0 ((BAR1_SIZING_SCHEME_24==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR1_ENABLED_24==1) && (MEM1_SPACE_DECODER_24==0)
// Parameter Type: Feature Setting
// 
// Defines BAR1 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR1 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR1_RESIZABLE_24 1'h0


// Name:           CX_BAR1_RESOURCE_AVAIL_24
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 24 && CX_BAR1_RESIZABLE_24==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR1 of function 24. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR1 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR1_RESOURCE_AVAIL_24 32'h10


// Name:           BAR1_MASK_WRITABLE_24
// Default:        0x0 ((BAR1_ENABLED_24==1 && BAR1_SIZING_SCHEME_24 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 24 && BAR1_ENABLED_24==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR1 Mask through DBI
`define BAR1_MASK_WRITABLE_24 1'h0


// Name:           BAR1_MASK_24
// Default:        0xffff (CX_BAR1_RESIZABLE_24==1 ? [calc_bar_mask 
//                 CX_BAR1_RESOURCE_AVAIL_24] : MEM1_SPACE_DECODER_24==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 24 && BAR1_ENABLED_24==1 && MEM1_SPACE_DECODER_24==0 && 
//                 CX_BAR1_RESIZABLE_24==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR1 Mask register of function 24. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR1_MASK_24 32'hffff


// Name:           MEM_FUNC24_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 24 && BAR1_ENABLED_24==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_1 of function 24 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR1_TARGET_MAP to 1 maps all incoming Requests for BAR1 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC24_BAR1_TARGET_MAP 1'h1


// Name:           BAR2_ENABLED_24
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 24
// Parameter Type: Feature Setting
// 
// Include the BAR2 registers for function 24.
`define BAR2_ENABLED_24 1'h1


`define DEFAULT_BAR2_ENABLED_24 1'h1


// Name:           MEM2_SPACE_DECODER_24
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 24 && BAR2_ENABLED_24==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 24.
`define MEM2_SPACE_DECODER_24 1'h0


// Name:           PREFETCHABLE2_24
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 24 && BAR2_ENABLED_24==1 && MEM2_SPACE_DECODER_24==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 24.
`define PREFETCHABLE2_24 1'h0


// Name:           BAR2_TYPE_24
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 24 && BAR2_ENABLED_24==1 && MEM2_SPACE_DECODER_24==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 24.
`define BAR2_TYPE_24 2'h0


// Name:           BAR2_SIZING_SCHEME_24
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 24 && BAR2_ENABLED_24==1
// Parameter Type: Feature Setting
// 
// BAR2 Function 24 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR2_SIZING_SCHEME_24 2'h0


// Name:           CX_BAR2_RESIZABLE_24
// Default:        0x0 ((BAR2_SIZING_SCHEME_24==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR2_ENABLED_24==1) && (MEM2_SPACE_DECODER_24==0)
// Parameter Type: Feature Setting
// 
// Defines BAR2 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR2 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR2_RESIZABLE_24 1'h0


// Name:           CX_BAR2_RESOURCE_AVAIL_24
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 24 && CX_BAR2_RESIZABLE_24==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR2 of function 24. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR2 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR2_RESOURCE_AVAIL_24 64'h10


// Name:           BAR2_MASK_WRITABLE_24
// Default:        0x0 ((BAR2_ENABLED_24==1 && BAR2_SIZING_SCHEME_24 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 24 && BAR2_ENABLED_24==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR2 Mask through DBI
`define BAR2_MASK_WRITABLE_24 1'h0


// Name:           BAR2_MASK_24
// Default:        0xfffff (CX_BAR2_RESIZABLE_24==1 ? [calc_bar_mask 
//                 CX_BAR2_RESOURCE_AVAIL_24] : MEM2_SPACE_DECODER_24==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 24 && BAR2_ENABLED_24==1 && MEM2_SPACE_DECODER_24==0 && 
//                 CX_BAR2_RESIZABLE_24==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR2 Mask register of function 24. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR2_MASK_24 64'hfffff


// Name:           MEM_FUNC24_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 24 && BAR2_ENABLED_24==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_2 of function 24 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR2_TARGET_MAP to 1 maps all incoming requests for BAR2 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC24_BAR2_TARGET_MAP 1'h1


// Name:           BAR3_ENABLED_24
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 24 && BAR2_TYPE_24==0
// Parameter Type: Feature Setting
// 
// Include the BAR3 registers for function 24.
`define BAR3_ENABLED_24 1'h0



`define DEFAULT_BAR3_ENABLED_24 1'h0


// Name:           MEM3_SPACE_DECODER_24
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 24 && BAR3_ENABLED_24==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 24.
`define MEM3_SPACE_DECODER_24 1'h0


// Name:           PREFETCHABLE3_24
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 24 && BAR3_ENABLED_24==1 && MEM3_SPACE_DECODER_24==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 24.
`define PREFETCHABLE3_24 1'h0


// Name:           BAR3_TYPE_24
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 24.
`define BAR3_TYPE_24 2'h0


// Name:           BAR3_SIZING_SCHEME_24
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 24 && BAR3_ENABLED_24==1
// Parameter Type: Feature Setting
// 
// BAR3 Function 24 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR3_SIZING_SCHEME_24 2'h0


// Name:           CX_BAR3_RESIZABLE_24
// Default:        0x0 ((BAR3_SIZING_SCHEME_24==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR3_ENABLED_24==1) && (MEM3_SPACE_DECODER_24==0)
// Parameter Type: Feature Setting
// 
// Defines BAR3 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR3 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR3_RESIZABLE_24 1'h0


// Name:           CX_BAR3_RESOURCE_AVAIL_24
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 24 && CX_BAR3_RESIZABLE_24==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR3 of function 24. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR3 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR3_RESOURCE_AVAIL_24 32'h10


// Name:           BAR3_MASK_WRITABLE_24
// Default:        0x0 ((BAR3_ENABLED_24==1 && BAR3_SIZING_SCHEME_24 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 24 && BAR3_ENABLED_24==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR3 Mask through DBI
`define BAR3_MASK_WRITABLE_24 1'h0


// Name:           BAR3_MASK_24
// Default:        0xffff (CX_BAR3_RESIZABLE_24==1 ? [calc_bar_mask 
//                 CX_BAR3_RESOURCE_AVAIL_24] : MEM3_SPACE_DECODER_24==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 24 && BAR3_ENABLED_24==1 && MEM3_SPACE_DECODER_24==0 && 
//                 CX_BAR3_RESIZABLE_24==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR3 Mask register of function 24. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR3_MASK_24 32'hffff


// Name:           MEM_FUNC24_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 24 && BAR3_ENABLED_24==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_3 of function 24 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR3_TARGET_MAP to 1 maps all incoming requests for BAR3 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC24_BAR3_TARGET_MAP 1'h1


// Name:           BAR4_ENABLED_24
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 24
// Parameter Type: Feature Setting
// 
// Include the BAR4 registers for function 24.
`define BAR4_ENABLED_24 1'h1


`define DEFAULT_BAR4_ENABLED_24 1'h1



// Name:           MEM4_SPACE_DECODER_24
// Default:        I/O (BAR4_ENABLED_24==1)
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 24 && BAR4_ENABLED_24==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 24.
`define MEM4_SPACE_DECODER_24 1'h1


// Name:           PREFETCHABLE4_24
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 24 && BAR4_ENABLED_24==1 && MEM4_SPACE_DECODER_24==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 24.
`define PREFETCHABLE4_24 1'h0


// Name:           BAR4_TYPE_24
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 24 && BAR4_ENABLED_24==1 && MEM4_SPACE_DECODER_24==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 24.
`define BAR4_TYPE_24 2'h0


// Name:           BAR4_SIZING_SCHEME_24
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 24 && BAR4_ENABLED_24==1
// Parameter Type: Feature Setting
// 
// BAR4  Function 24 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR4_SIZING_SCHEME_24 2'h0


// Name:           CX_BAR4_RESIZABLE_24
// Default:        0x0 ((BAR4_SIZING_SCHEME_24==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR4_ENABLED_24==1) && (MEM4_SPACE_DECODER_24==0)
// Parameter Type: Feature Setting
// 
// Defines BAR4 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR4 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR4_RESIZABLE_24 1'h0


// Name:           CX_BAR4_RESOURCE_AVAIL_24
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 24 &&  CX_BAR4_RESIZABLE_24==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR4 of function 24. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR4 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR4_RESOURCE_AVAIL_24 64'h10


// Name:           BAR4_MASK_WRITABLE_24
// Default:        0x0 ((BAR4_ENABLED_24==1 && BAR4_SIZING_SCHEME_24 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 24 && BAR4_ENABLED_24==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR4 Mask through DBI
`define BAR4_MASK_WRITABLE_24 1'h0


// Name:           BAR4_MASK_24
// Default:        0xff (CX_BAR4_RESIZABLE_24==1 ? [calc_bar_mask 
//                 CX_BAR4_RESOURCE_AVAIL_24] : MEM4_SPACE_DECODER_24==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 24 && BAR4_ENABLED_24==1 && MEM4_SPACE_DECODER_24==0 && 
//                 CX_BAR4_RESIZABLE_24==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR4 Mask register of function 24. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR4_MASK_24 64'hff


// Name:           MEM_FUNC24_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 24 && BAR4_ENABLED_24==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_4 of function 24 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR4_TARGET_MAP to 1 maps all incoming requests for BAR4 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC24_BAR4_TARGET_MAP 1'h1


// Name:           BAR5_ENABLED_24
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 24 && BAR4_TYPE_24==0
// Parameter Type: Feature Setting
// 
// Include the BAR5 registers for function 24.
`define BAR5_ENABLED_24 1'h0


`define DEFAULT_BAR5_ENABLED_24 1'h0


// Name:           MEM5_SPACE_DECODER_24
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 24 && BAR5_ENABLED_24==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 24.
`define MEM5_SPACE_DECODER_24 1'h0


// Name:           PREFETCHABLE5_24
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 24 && BAR5_ENABLED_24==1 && MEM5_SPACE_DECODER_24==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 24.
`define PREFETCHABLE5_24 1'h0


// Name:           BAR5_TYPE_24
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 24.
`define BAR5_TYPE_24 2'h0


// Name:           BAR5_SIZING_SCHEME_24
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 24 && BAR5_ENABLED_24==1
// Parameter Type: Feature Setting
// 
// BAR5  Function 24 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR5_SIZING_SCHEME_24 2'h0


// Name:           CX_BAR5_RESIZABLE_24
// Default:        0x0 ((BAR5_SIZING_SCHEME_24==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR5_ENABLED_24==1) && (MEM5_SPACE_DECODER_24==0)
// Parameter Type: Feature Setting
// 
// Defines BAR5 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR5 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR5_RESIZABLE_24 1'h0


// Name:           CX_BAR5_RESOURCE_AVAIL_24
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 24 && CX_BAR5_RESIZABLE_24==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR5 of function 24. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR5 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR5_RESOURCE_AVAIL_24 32'h10


// Name:           BAR5_MASK_WRITABLE_24
// Default:        0x0 ((BAR5_ENABLED_24==1 && BAR5_SIZING_SCHEME_24 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 24 && BAR5_ENABLED_24==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR5 Mask through DBI
`define BAR5_MASK_WRITABLE_24 1'h0


// Name:           BAR5_MASK_24
// Default:        0xffff (CX_BAR5_RESIZABLE_24==1 ? [calc_bar_mask 
//                 CX_BAR5_RESOURCE_AVAIL_24] : MEM5_SPACE_DECODER_24==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 24 && BAR5_ENABLED_24==1 && MEM5_SPACE_DECODER_24==0 && 
//                 CX_BAR5_RESIZABLE_24==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR5 Mask register of function 24. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR5_MASK_24 32'hffff


// Name:           MEM_FUNC24_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 24 && BAR5_ENABLED_24==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_5 of function 24 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR5_TARGET_MAP to 1 maps all incoming requests for BAR5 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC24_BAR5_TARGET_MAP 1'h1


`define FUNC24_BARSIZE_32 128'h0


`define FUNC24_BARSIZE 128'h0


`define FUNC24_BAR0_BARSIZE_TRGT1 128'h0


`define FUNC24_BAR2_BARSIZE_TRGT1 128'h0


`define FUNC24_BAR4_BARSIZE_TRGT1 128'h0


`define FUNC24_BAR0_TRGT1_ADDR_WIDTH 1


`define FUNC24_BAR2_TRGT1_ADDR_WIDTH 1


`define FUNC24_BAR4_TRGT1_ADDR_WIDTH 1


// Name:         CX_NUM_RBARS_24
// Default:      0 ([calc_num_rbars CX_BAR0_RESIZABLE_24 CX_BAR1_RESIZABLE_24 
//               CX_BAR2_RESIZABLE_24 CX_BAR3_RESIZABLE_24 CX_BAR4_RESIZABLE_24 
//               CX_BAR5_RESIZABLE_24])
// Values:       -2147483648, ..., 2147483647
// 
// Number of resizable BARs
`define CX_NUM_RBARS_24 0

//-/ END:   BAR CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SR-IOV CAPABILITIES CONFIGURATION


// Name:           CX_VF_DEPENDENCY_LINK_24
// Default:        0x24
// Values:         0x0, ..., 0xff
// Enabled:        CX_VF_DEPENDENCY_LINK_SUPP && (CX_NFUNC > 24) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Specifies the 8-bit VF dependency link for PF24. Valid only if CX_VF_DEPENDENCY_LINK_SUPP=1.
`define CX_VF_DEPENDENCY_LINK_24 8'h24


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER1_24
// Default:        0x2 ((CX_NFUNC>=17) ? 32 : (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : 
//                 (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF24 in an ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER1_24 16'h2


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER0_24
// Default:        0x100
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF24 
//  in a non-ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER0_24 16'h100


// Name:           VF_STRIDE_ARI_CAP_HIER1_24
// Default:        0x2 (CX_VF_STRIDE_ALWAYS_ONE) ? 1 : ((CX_NFUNC>=17) ? 32 : 
//                 (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF24 in an ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER1_24 16'h2


// Name:           VF_STRIDE_ARI_CAP_HIER0_24
// Default:        0x100 ((CX_VF_STRIDE_ALWAYS_ONE) ? 0x0001 : 0x0100)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF24 in a non-ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER0_24 16'h100


// Name:           CX_VF_DEVICE_ID_24
// Default:        0x0 (CX_DEVICE_ID_24)
// Values:         0x0, ..., 0xffff
// Enabled:        (CX_NFUNC > 24) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 16-bit virtual function Device ID for PF24. 
//  It might be different from the physical function's.
`define CX_VF_DEVICE_ID_24 16'h0


// Name:           CX_VF_SUPP_PAGE_SIZE_24
// Default:        0x553
// Values:         0x553, ..., 0xffff
// Enabled:        (CX_NFUNC > 24) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 32-bit supported page sizes for virtual functions for PF24
`define CX_VF_SUPP_PAGE_SIZE_24 32'h553


// Name:           CX_ARI_CAP_HIER_PRSVD_24
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Specifies if ARI Capable Hierarchy bit is preserved across certain power state transitions 
//  Only present in PF0. Read Only Zero in this PF24.
`define CX_ARI_CAP_HIER_PRSVD_24 1'h0

//-/===========================================
//-/ START: VF BAR CONFIGURATION


// Name:           VF_BAR0_ENABLED_24
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 24)
// Parameter Type: Feature Setting
// 
// Include the VF BAR0 registers in PF24
`define VF_BAR0_ENABLED_24 1'h1


`define VF_DEFAULT_BAR0_ENABLED_24 1'h1


// Name:           VF_MEM0_SPACE_DECODER_24
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR0_ENABLED_24 && CX_SRIOV_ENABLE && (CX_NFUNC > 24)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Space Indicator 
//  ALWAYS set to Memory for Virtual Functions
`define VF_MEM0_SPACE_DECODER_24 1'h0


// Name:           VF_PREFETCHABLE0_24
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_24==1 && VF_MEM0_SPACE_DECODER_24==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 24)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Prefetchable 
//  When set indicates VF BAR0 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE0_24 1'h0


// Name:           VF_BAR0_TYPE_24
// Default:        64-bit ((VF_MEM0_SPACE_DECODER_24==1 || VF_BAR0_ENABLED_24==0) ? 0 
//                 : 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR0_ENABLED_24==1 && VF_MEM0_SPACE_DECODER_24==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 24)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 24; (bits [2:1] for a memory BAR).
`define VF_BAR0_TYPE_24 2'h2


// Name:           VF_BAR0_MASK_WRITABLE_24
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_24==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 24)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR0_MASK_WRITABLE_24 1'h0


// Name:           VF_BAR0_MASK_24
// Default:        0xfffff (VF_MEM0_SPACE_DECODER_24==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR0_ENABLED_24==1 && VF_MEM0_SPACE_DECODER_24==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 24)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Mask 
//  Determines the default of the VF BAR Mask register for PF24. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR0_MASK_24 64'hfffff


// Name:           VF_MEM_FUNC24_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR0_ENABLED_24==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE 
//                 && (CX_NFUNC > 24)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF24 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC24_BAR0_TARGET_MAP 1'h1


// Name:           VF_BAR1_ENABLED_24
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        (VF_BAR0_TYPE_24==0)  && CX_SRIOV_ENABLE && (CX_NFUNC > 24)
// Parameter Type: Feature Setting
// 
// Include the VF BAR1 registers in PF24
`define VF_BAR1_ENABLED_24 1'h0


`define VF_DEFAULT_BAR1_ENABLED_24 1'h0


// Name:           VF_MEM1_SPACE_DECODER_24
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR1_ENABLED_24==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 24)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Space Indicator
`define VF_MEM1_SPACE_DECODER_24 1'h0


// Name:           VF_PREFETCHABLE1_24
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_24==1 && VF_MEM1_SPACE_DECODER_24==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 24)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Prefetchable 
//  When set indicates VF BAR1 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE1_24 1'h0


// Name:           VF_BAR1_TYPE_24
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 24; (bits [2:1] for a memory BAR).
`define VF_BAR1_TYPE_24 2'h0


// Name:           VF_BAR1_MASK_WRITABLE_24
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_24==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 24)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR1_MASK_WRITABLE_24 1'h0


// Name:           VF_BAR1_MASK_24
// Default:        0xffff (VF_MEM1_SPACE_DECODER_24==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR1_ENABLED_24==1 && VF_MEM1_SPACE_DECODER_24==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 24)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Mask 
//  Determines the default of the VF BAR Mask register for PF24. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR1_MASK_24 32'hffff


// Name:           VF_MEM_FUNC24_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR1_ENABLED_24==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE 
//                 && (CX_NFUNC > 24)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF24 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC24_BAR1_TARGET_MAP 1'h1


// Name:           VF_BAR2_ENABLED_24
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 24)
// Parameter Type: Feature Setting
// 
// Include the VF BAR2 registers in PF24
`define VF_BAR2_ENABLED_24 1'h1


`define VF_DEFAULT_BAR2_ENABLED_24 1'h1


// Name:           VF_MEM2_SPACE_DECODER_24
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR2_ENABLED_24==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 24)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Memory Space Indicator
`define VF_MEM2_SPACE_DECODER_24 1'h0


// Name:           VF_PREFETCHABLE2_24
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_24==1 && VF_MEM2_SPACE_DECODER_24==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 24)
// Parameter Type: Register Default Setting
// 
// BAR2 Memory Prefetchable 
//  When set indicates VF BAR2 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE2_24 1'h0


// Name:           VF_BAR2_TYPE_24
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR2_ENABLED_24==1 && VF_MEM2_SPACE_DECODER_24==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 24)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 24; (bits [2:1] for a memory BAR).
`define VF_BAR2_TYPE_24 2'h0


// Name:           VF_BAR2_MASK_WRITABLE_24
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_24==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 24)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR2_MASK_WRITABLE_24 1'h0


// Name:           VF_BAR2_MASK_24
// Default:        0xfffff (VF_MEM2_SPACE_DECODER_24==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR2_ENABLED_24==1 && VF_MEM2_SPACE_DECODER_24==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 24)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Mask 
//  Determines the default of the VF BAR Mask register for PF24. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR2_MASK_24 64'hfffff


// Name:           VF_MEM_FUNC24_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR2_ENABLED_24==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 24)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF24 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC24_BAR2_TARGET_MAP 1'h1


// Name:           VF_BAR3_ENABLED_24
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_TYPE_24==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 24)
// Parameter Type: Feature Setting
// 
// Include the VF BAR3 registers in PF24
`define VF_BAR3_ENABLED_24 1'h0


`define VF_DEFAULT_BAR3_ENABLED_24 1'h0


// Name:           VF_MEM3_SPACE_DECODER_24
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR3_ENABLED_24==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 24)
// Parameter Type: Register Default Setting
// 
// BAR3 Memory Space Indicator
`define VF_MEM3_SPACE_DECODER_24 1'h0


// Name:           VF_PREFETCHABLE3_24
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_24==1 && VF_MEM3_SPACE_DECODER_24==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 24)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Memory Prefetchable 
//  When set indicates VF BAR3 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE3_24 1'h0


// Name:           VF_BAR3_TYPE_24
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 24; (bits [2:1] for a memory BAR).
`define VF_BAR3_TYPE_24 2'h0


// Name:           VF_BAR3_MASK_WRITABLE_24
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_24==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 24)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR3_MASK_WRITABLE_24 1'h0


// Name:           VF_BAR3_MASK_24
// Default:        0xffff (VF_MEM3_SPACE_DECODER_24==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR3_ENABLED_24==1 && VF_MEM3_SPACE_DECODER_24==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 24)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Mask 
//  Determines the default of the VF BAR Mask register for PF24. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR3_MASK_24 32'hffff


// Name:           VF_MEM_FUNC24_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR3_ENABLED_24==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 24)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF24 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC24_BAR3_TARGET_MAP 1'h1


// Name:           VF_BAR4_ENABLED_24
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 24)
// Parameter Type: Feature Setting
// 
// Include the VF BAR4 registers in PF24
`define VF_BAR4_ENABLED_24 1'h1


`define VF_DEFAULT_BAR4_ENABLED_24 1'h1


// Name:           VF_MEM4_SPACE_DECODER_24
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR4_ENABLED_24==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 24)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Space Indicator
`define VF_MEM4_SPACE_DECODER_24 1'h0


// Name:           VF_PREFETCHABLE4_24
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_24==1 && VF_MEM4_SPACE_DECODER_24==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 24)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Prefetchable 
//  When set indicates VF BAR4 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE4_24 1'h0


// Name:           VF_BAR4_TYPE_24
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR4_ENABLED_24==1 && VF_MEM4_SPACE_DECODER_24==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 24)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 24; (bits [2:1] for a memory BAR).
`define VF_BAR4_TYPE_24 2'h0


// Name:           VF_BAR4_MASK_WRITABLE_24
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_24==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 24)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR4_MASK_WRITABLE_24 1'h0


// Name:           VF_BAR4_MASK_24
// Default:        0xfff (VF_MEM4_SPACE_DECODER_24==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR4_ENABLED_24==1 && VF_MEM4_SPACE_DECODER_24==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 24)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Mask 
//  Determines the default of the VF BAR Mask register for PF24. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR4_MASK_24 64'hfff


// Name:           VF_MEM_FUNC24_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR4_ENABLED_24==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 24)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF24 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC24_BAR4_TARGET_MAP 1'h1


// Name:           VF_BAR5_ENABLED_24
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_TYPE_24==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 24)
// Parameter Type: Feature Setting
// 
// Include the VF BAR5 registers in PF24
`define VF_BAR5_ENABLED_24 1'h0


`define VF_DEFAULT_BAR5_ENABLED_24 1'h0


// Name:           VF_MEM5_SPACE_DECODER_24
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR5_ENABLED_24==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 24)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Space Indicator
`define VF_MEM5_SPACE_DECODER_24 1'h0


// Name:           VF_PREFETCHABLE5_24
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_24==1 && VF_MEM5_SPACE_DECODER_24==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 24)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Prefetchable 
//  When set indicates VF BAR5 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE5_24 1'h0


// Name:           VF_BAR5_TYPE_24
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 24; (bits [2:1] for a memory BAR).
`define VF_BAR5_TYPE_24 2'h0


// Name:           VF_BAR5_MASK_WRITABLE_24
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_24==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 24)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR5_MASK_WRITABLE_24 1'h0


// Name:           VF_BAR5_MASK_24
// Default:        0xffff (VF_MEM5_SPACE_DECODER_24==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR5_ENABLED_24==1 && VF_MEM5_SPACE_DECODER_24==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 24)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Mask 
//  Determines the default of the VF BAR Mask register for PF24. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR5_MASK_24 32'hffff


// Name:           VF_MEM_FUNC24_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR5_ENABLED_24==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 24)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF24 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC24_BAR5_TARGET_MAP 1'h1


`define VF_FUNC24_BARSIZE_32 128'h101000


`define VF_FUNC24_BARSIZE 128'h201000

//-/ END:   VF BAR CONFIGURATION
//-/===========================================

//-/ END:   SR-IOV CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: TPH CAPABILITIES CONFIGURATION


// Name:           TPH_IVEC_24
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Interrupt Vector Mode. If set indicates that the function supports the Interrupt Vector 
// Mode of operation. Function 24.
`define TPH_IVEC_24 1'h0


// Name:           TPH_DS_24
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Device Specific Mode. If set indicates that the function supports the Device Specific Mode 
// of operation. Function 24.
`define TPH_DS_24 1'h0


// Name:           TPH_ST_TABLE_LOC_24
// Default:        Not Present
// Values:         Not Present (0), TPH Requester Capability Structure (1), MSI-X 
//                 Table Structure (2)
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_DS_24 || TPH_IVEC_24))
// Parameter Type: Feature Setting
// 
// TLP Processing Hints Steering Tag Table Location. Value indicates if and where the ST Table is located. Function 24.
`define TPH_ST_TABLE_LOC_24 0

//located in the TPH Requester Capability structure. Please reduce the ST Table Size for this mode of operation"

// Name:           TPH_ST_TABLE_SIZE_24
// Default:        1
// Values:         1, ..., 2048
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_ST_TABLE_LOC_24 != 0))
// Parameter Type: Feature Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define TPH_ST_TABLE_SIZE_24 1


`define TPH_ST_TABLE_DEPTH_24 0

//-/ END:   TPH CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: ATS CAPABILITIES CONFIGURATION


// Name:           ATS_INV_Q_DPTH_24
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// The number of Invalidate Requests that the Function can accept before putting backpressure on the upstream connection. A 
// value of 0 indicates the function can accept 32 Invalidate requests. Function 24.
`define ATS_INV_Q_DPTH_24 5'd0


// Name:           ATS_STU_24
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// This value indicates to the Function the minimum number of 4096-byte blocks that is indicated in a Translation 
// Completion or Invalidate Request. This is a power of 2 multiplier and the number of blocks is 2^STU. A value of 0 indicates 1 block 
// and a value of 31 indicates 2^31 blocks (or 8 TB total). Function 24.
`define ATS_STU_24 5'd0

//-/ END:   ATS CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PRS CAPABILITIES CONFIGURATION


// Name:           CX_PRS_OUTSTANDING_CAPACITY_VALUE_24
// Default:        0x1
// Values:         0x0, ..., 0xffffffff
// Enabled:        (CX_PRS_ENABLE==1) && (CX_NFUNC > 24)
// Parameter Type: Register Default Setting
// 
// Register default for PRS Outstanding Capacity in PF24. 
// For more details, see the PRS_OUTSTANDING_CAPACITY field in the PRS_REQ_CAPACITY_REG register.
`define CX_PRS_OUTSTANDING_CAPACITY_VALUE_24 32'h1

//-/ END:   PRS CAPABILITIES CONFIGURATION
//-/===========================================


//-/===========================================
//--- START: RN


// Name:           CX_RN_IMM_VALUE_24
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 24)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for PF24.
`define CX_RN_IMM_VALUE_24 1'h0


// Name:           CX_RN_IMM_D0_VALUE_24
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 24)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for PF24.
`define CX_RN_IMM_D0_VALUE_24 1'h0


// Name:           CX_RN_FRS_VALUE_24
// Default:        0x0 (CX_RN_FRS_SUPPORTED==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_FRS_SUPPORTED==1) && (CX_NFUNC > 24)
// Parameter Type: Feature Setting
// 
// Function Readiness Status messaging supported for function PF24.
`define CX_RN_FRS_VALUE_24 1'h0


// Name:           CX_RN_RTR_VALID_24
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 24)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF24.
`define CX_RN_RTR_VALID_24 1'h0


// Name:           CX_RN_RTR_DL_UP_VALUE_24
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 24)
// Parameter Type: Register Default Setting
// 
// Register default for RTR DL Up Time field in PF24.
`define CX_RN_RTR_DL_UP_VALUE_24 12'h0


// Name:           CX_RN_RTR_RESET_VALUE_24
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 24)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF24.
`define CX_RN_RTR_RESET_VALUE_24 12'h0


// Name:           CX_RN_RTR_D3D0_VALUE_24
// Default:        0x0
// Values:         0x0, ..., 0x80a
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 24)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF24.
`define CX_RN_RTR_D3D0_VALUE_24 12'h0


// Name:           CX_RN_RTR_FLR_VALUE_24
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_FLR_ENABLE==1) && (CX_NFUNC > 24)
// Parameter Type: Register Default Setting
// 
// Register default for RTR FLR Time field in PF24.
`define CX_RN_RTR_FLR_VALUE_24 12'h0


// Name:           VF_RN_IMM_VALUE_24
// Default:        0x0 (CX_RN_IMM_VALUE_24 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 24))
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for VFs in PF24.
`define VF_RN_IMM_VALUE_24 1'h0


// Name:           VF_RN_IMM_D0_VALUE_24
// Default:        0x0 (CX_RN_IMM_D0_VALUE_24 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 24))
// Parameter Type: Register Default Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for VFs in PF24.
`define VF_RN_IMM_D0_VALUE_24 1'h0


// Name:           VF_RN_RTR_VALID_24
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 24) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF24 VFs.
`define VF_RN_RTR_VALID_24 1'h0


// Name:           VF_RN_RTR_RESET_VALUE_24
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_24)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 24) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF24 VFS.
`define VF_RN_RTR_RESET_VALUE_24 12'h0


// Name:           VF_RN_RTR_D3D0_VALUE_24
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_24)
// Values:         0x0, ..., 0x80a
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 24) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF24 VFS.
`define VF_RN_RTR_D3D0_VALUE_24 12'h0


// Name:           VF_RN_RTR_FLR_VALUE_24
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_24)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 24) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF24 VFs.
`define VF_RN_RTR_FLR_VALUE_24 12'h0


// Name:           EXT_VF_RN_RTR_VALID_24
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 24) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF24 VFs.
`define EXT_VF_RN_RTR_VALID_24 1'h0


// Name:           EXT_VF_RN_RTR_RESET_VALUE_24
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_24)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 24) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF24 VFS.
`define EXT_VF_RN_RTR_RESET_VALUE_24 12'h0


// Name:           EXT_VF_RN_RTR_D3D0_VALUE_24
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_24)
// Values:         0x0, ..., 0x80a
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 24) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF24 VFS.
`define EXT_VF_RN_RTR_D3D0_VALUE_24 12'h0


// Name:           EXT_VF_RN_RTR_FLR_VALUE_24
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_24)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 24) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF24 VFs.
`define EXT_VF_RN_RTR_FLR_VALUE_24 12'h0

//-/ END:   RN
//-/===========================================

//-/ START: LN CAPABILITIES CONFIGURATION
//-/===========================================


// Name:           CX_LN_REG_MAX_VALUE_24
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 24))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_64_SUPPORTED field in the LNR_CAP_OFF register for PF24.
`define CX_LN_REG_MAX_VALUE_24 5'h0


// Name:           CX_LN_128_SUPPORTED_VALUE_24
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 24))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_128_SUPPORTED field in the LNR_CAP_OFF register for PF24.
`define CX_LN_128_SUPPORTED_VALUE_24 1'h0


// Name:           CX_LN_64_SUPPORTED_VALUE_24
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 24))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_REGISTRATION_MAX field in the LNR_CAP_OFF register for PF24.
`define CX_LN_64_SUPPORTED_VALUE_24 1'h0

//-/ END:   LN CAPABILITIES CONFIGURATION
//-/===========================================




//-/==========================================
//-/ End FUNC24 Config
//-/==========================================

//-/===========================================
//-/ Function 25 Configuration Registers
//-/ ==========================================


// Name:         FUNC_25
// Default:      0 ((CX_NFUNC > 25) ? 1 : 0)
// Values:       0, 1
// 
// This parameter indicates that Function 25 is present
// `define FUNC_25

//-/===========================================
//-/ START: PCI-E CAPABILITIES CONFIGURATION


// Name:           PCIE_CAP_INT_MSG_NUM_25
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 25
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Message Number field in the PCI Express Capabilities Register. Function 25.
`define PCIE_CAP_INT_MSG_NUM_25 5'h0


// Name:           SLOT_IMPLEMENTED_25
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_NFUNC > 25))
// Parameter Type: Register Default Setting
// 
// Indicates that the PCI Express link associated with this Port is connected to a slot. Function 25.
`define SLOT_IMPLEMENTED_25 1'h0


// Name:           DEFAULT_PHANTOM_FUNC_SUPPORTED_25
// Default:        0x0
// Values:         0x0, ..., 0x3
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_PHANTOM_FUNC_SUPPORTED_25 2'h0


// Name:           DEFAULT_EXT_TAG_FIELD_SUPPORTED_25
// Default:        0x0 (DEFAULT_EXT_TAG_FIELD_SUPPORTED_0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 25
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_EXT_TAG_FIELD_SUPPORTED_25 1'h0



// Name:           DEFAULT_ATT_BUTT_PRE_25
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 25
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Button is present
`define DEFAULT_ATT_BUTT_PRE_25 1'h0


// Name:           DEFAULT_ATT_IND_PRE_25
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 25
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Indicator is present
`define DEFAULT_ATT_IND_PRE_25 1'h0


// Name:           DEFAULT_PWR_IND_PRE_25
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 25
// Parameter Type: Register Default Setting
// 
// When set indicates that a Power Indicator is present
`define DEFAULT_PWR_IND_PRE_25 1'h0


// Name:           DEFAULT_NO_SNOOP_SUPPORTED_25
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 25
// Parameter Type: Register Default Setting
// 
// Default value for the Enable No Snoop bit in the Device Control Register. Function 25.
`define DEFAULT_NO_SNOOP_SUPPORTED_25 1'h0


// Name:           ROOT_RCB_25
// Default:        64-bit
// Values:         64-bit (0x0), 128-bit (0x1)
// Parameter Type: Register Default Setting
// 
// Default value for the Read Completion Boundary (RCB) bit in the Link Control Register.
`define ROOT_RCB_25 1'h0


//-/ END:   PCI-E CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: MSI-X CAPABILITIES CONFIGURATION


// Name:           MSIX_TABLE_SIZE_25
// Default:        0x0
// Values:         0x0, ..., 0x7ff
// Enabled:        CX_NFUNC > 25 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the MSI-X Table Size field in the MSI-X Control Register. Function 25.
`define MSIX_TABLE_SIZE_25 11'h0


// Name:           MSIX_TABLE_BIR_25
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 25 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table BAR Indicator Register (BIR) field in the MSI-X Table Offset and BIR Register. Function 25.
`define MSIX_TABLE_BIR_25 3'h0


// Name:           MSIX_TABLE_OFFSET_25
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 25 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table Offset field in the MSI-X Table Offset and BIR Register. Function 25.
`define MSIX_TABLE_OFFSET_25 29'h0


// Name:           MSIX_PBA_BIR_25
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 25 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Pending Bit Array (PBA) BIR field in the MSI-X PBA Offset and BIR Register. Function 25.
`define MSIX_PBA_BIR_25 7'h0


// Name:           MSIX_PBA_OFFSET_25
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 25 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the PBA Offset field in the MSI-X PBA Offset and BIR Register. Function 25.
`define MSIX_PBA_OFFSET_25 29'h0

//-/ END:   MSI-X CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SATA CAPABILITIES CONFIGURATION


// Name:         SATA_HBA_OFFSET_25
// Default:      0x0
// Values:       0x0, ..., 0xfffff
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA Offset. Base address of the SATA HBA registers, 
//  as an offset from the base address of the BAR indicated 
//  by the SATA BAR field.
`define SATA_HBA_OFFSET_25 20'h0


// Name:         SATA_BAR_25
// Default:      0x0
// Values:       0x0, ..., 0xf
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA BAR. The bar that maps to SATA HBA registers,
`define SATA_BAR_25 4'h0

//-/ END:   SATA CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: AER CAPABILITIES CONFIGURATION


// Name:           DEFAULT_ECRC_CHK_CAP_25
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 25 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Check Capable bit in the Advanced Capabilities and Control Register. Function 25.
`define DEFAULT_ECRC_CHK_CAP_25 1'h1


// Name:           DEFAULT_ECRC_GEN_CAP_25
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 25 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Generation Capability bit in the Advanced Capabilities and Control Register. Function 25.
`define DEFAULT_ECRC_GEN_CAP_25 1'h1


// Name:           AER_INT_MSG_NUM_25
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Parameter Type: Register Default Setting
// 
// Default value for the Advanced Error Interrupt Message Number field of the Root Error Status Register. Function 25.
`define AER_INT_MSG_NUM_25 5'h0



// Name:           CX_HDR_LOG_DEPTH_25
// Default:        0x1
// Values:         0x1, 0x2, 0x4
// Enabled:        CX_NFUNC > 25 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Feature Setting.
// 
// Header Log Depth
`define CX_HDR_LOG_DEPTH_25 3'h1


`define CX_MULTIPLE_HDR_REC_CAP_25 1'h0

//-/ END:   AER CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PM CAPABILITIES CONFIGURATION


// Name:           PME_SUPPORT_25
// Default:        0x1b
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 25
// Parameter Type: Register Default Setting
// 
// Default value for the PME_Support field in the Power Management Capabilities Register. Function 25.
`define PME_SUPPORT_25 5'h1b


// Name:           D1_SUPPORT_25
// Default:        true
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 25
// Parameter Type: Register Default Setting
// 
// Default value for the D1 Support bit in the Power Management Capabilities Register. Function 25.
`define D1_SUPPORT_25 1'h1


// Name:           D2_SUPPORT_25
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 25
// Parameter Type: Register Default Setting
// 
// Default value for the D2 Support bit in the Power Management Capabilities Register. Function 25.
`define D2_SUPPORT_25 1'h0


// Name:           DEV_SPEC_INIT_25
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 25
// Parameter Type: Register Default Setting
// 
// Default value for the Device Specific Initialization (DSI) bit in the Power Management Capabilities Register. Function 
// 25.
`define DEV_SPEC_INIT_25 1'h0


// Name:           AUX_CURRENT_25
// Default:        375mA
// Values:         0mA (0x0), 55mA (0x1), 100mA (0x2), 160mA (0x3), 220mA (0x4), 270mA 
//                 (0x5), 320mA (0x6), 375mA (0x7)
// Enabled:        CX_NFUNC > 25
// Parameter Type: Register Default Setting
// 
// Default value for the Aux Current field in the Power Management Capabilities Register. Function 25.
`define AUX_CURRENT_25 3'h7


// Name:           DEFAULT_NO_SOFT_RESET_25
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 25
// Parameter Type: Register Default Setting
// 
// Default value for the No Soft Reset bit in the Power Management Control and Status Register. When set, you should not 
// reset any controller registers when transitioning from D3hot to D0. Therefore, you should not assert the non_sticky_rst_n 
// and sticky_rst_n inputs. Function 25.
`define DEFAULT_NO_SOFT_RESET_25 1'h0

//-/ END:   PM CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PCI BASIC CONFIGURATION


// Name:           CX_DEVICE_ID_25
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 25
// Parameter Type: Register Default Setting
// 
// Default value for the Device ID field in the Device ID and Vendor ID Register. Function 25.
`define CX_DEVICE_ID_25 16'h0


// Name:           CX_VENDOR_ID_25
// Default:        0x16c3
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 25
// Parameter Type: Register Default Setting
// 
// Default value for the Vendor ID field in the Device ID and Vendor ID Register. Function 25.
`define CX_VENDOR_ID_25 16'h16c3


// Name:           CX_REVISION_ID_25
// Default:        0x1
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 25
// Parameter Type: Register Default Setting
// 
// Default value for the Revision ID field in the Revision ID Register. Function 25.
`define CX_REVISION_ID_25 8'h1


// Name:           SUBSYS_DEV_ID_25
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 25
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 25.
`define SUBSYS_DEV_ID_25 16'h0


// Name:           SUBSYS_VENDOR_ID_25
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 25
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem Vendor ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 25.
`define SUBSYS_VENDOR_ID_25 16'h0


// Name:           BASE_CLASS_CODE_25
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 25
// Parameter Type: Register Default Setting
// 
// Default value for the Base Class Code field in the Class Code Register. Function 25.
`define BASE_CLASS_CODE_25 8'h0


// Name:           SUB_CLASS_CODE_25
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 25
// Parameter Type: Register Default Setting
// 
// Default value for the Subclass Code field in the Class Code Register. Function 25.
`define SUB_CLASS_CODE_25 8'h0


// Name:           IF_CODE_25
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 25
// Parameter Type: Register Default Setting
// 
// Default value for the Programming Interface field in the Class Code Register. Function 25.
`define IF_CODE_25 8'h0


// Name:           CARDBUS_CIS_PTR_25
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 25
// Parameter Type: Register Default Setting
// 
// Default value for the CardBus CIS Pointer Register. Function 25.
`define CARDBUS_CIS_PTR_25 16'h0


// Name:           INT_PIN_MAPPING_25
// Default:        INTA
// Values:         None (0x0), INTA (0x1), INTB (0x2), INTC (0x3), INTD (0x4)
// Enabled:        CX_NFUNC > 25
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Pin Register. Function 25.
`define INT_PIN_MAPPING_25 8'h1


// Name:           IO_DECODE_32_25
// Default:        16-bit
// Values:         16-bit (0x0), 32-bit (0x1)
// Enabled:        CX_NFUNC > 25
// Parameter Type: Register Default Setting
// 
// Default value for the 32-Bit I/O Space bit in the I/O Base and I/O Limit Register. Function 25.
`define IO_DECODE_32_25 1'h0


// Name:           MEM_DECODE_64_25
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x1)
// Enabled:        CX_NFUNC > 25
// Parameter Type: Register Default Setting
// 
// Default value for the 64-Bit Memory Addressing bit in the Prefetchable Memory Base and Limit Register. Function 25.
`define MEM_DECODE_64_25 1'h0


// Name:           ROM_BAR_ENABLED_25
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 25
// Parameter Type: Register Default Setting
// 
// Include the expansion ROM BAR registers. Function 25.
`define ROM_BAR_ENABLED_25 1'h1


`define DEFAULT_ROM_BAR_ENABLED_25 1'h1


// Name:           ROM_MASK_25
// Default:        0xffff
// Values:         0x7ff, ..., 0xffffff
// Enabled:        CX_NFUNC > 25 && ROM_BAR_ENABLED_25==1
// Parameter Type: Register Default Setting
// 
// Determines the default of the Expansion ROM BAR Mask register. Function 25. 
//  - The BAR Mask register specifies which bits of the Expansion ROM BAR are non-writable by host software, which 
//  determines the size of the BAR. 
//  - The maximum value for ROM_MASK_N is 0xFFFFFF because the maximum space that can be claimed by an Expansion ROM BAR 
//  is 16 MB. 
//  - For example: 32'hFFFF =BAR size of 2^16.
`define ROM_MASK_25 32'hffff


// Name:           ROM_MASK_WRITABLE_25
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 25 && ROM_BAR_ENABLED_25==1
// Parameter Type: Feature Setting
// 
// Determines if the Expansion ROM BAR Mask register for function 25 is writable by application software. If writing to a 
// Expansion ROM BAR Mask register is enabled, your application can write to the Expansion ROM BAR Mask register through the 
// DBI by asserting dbi_cs2 in addition to dbi_cs.
`define ROM_MASK_WRITABLE_25 1'h0


// Name:           ROM_FUNC25_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 25 && ROM_BAR_ENABLED_25==1 && TRGT1_POPULATE==1))
// Parameter Type: Register Default Setting
// 
// Direct incoming requests that pass filtering and match the Expansion ROM BAR of function 25 to either RTRGT0 or RTRGT1. 
//  - For example, setting ROM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for the Expansion ROM BAR of function 
//  0 to RTRGT1. 
//  - If TRGT1_POPULATE =0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define ROM_FUNC25_TARGET_MAP 1'h1


// Name:           CX_PCI_HEADER_DEFAULTS_VISIBLE_25
// Default:        0
// Values:         0, 1
// Parameter Type: Register Default Setting
// 
// Select here if you want to configure the defaults for the other PCI Standard Header registers for function 25. 
//  An extra window will appear under this page. To access it, click the plus/minus symbol in the hierarchy view on the 
//  left panel. 
//  This is optional but not usually recommended. 
//  You can also change these register defaults using the DBI before (or after) the link comes up.
`define CX_PCI_HEADER_DEFAULTS_VISIBLE_25 0

//-/ END:   PCI BASIC CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: BAR CONFIGURATION


// Name:           BAR0_ENABLED_25
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 25
// Parameter Type: Feature Setting
// 
// Include the BAR0 registers for function 25.
`define BAR0_ENABLED_25 1'h1


`define DEFAULT_BAR0_ENABLED_25 1'h1


// Name:           MEM0_SPACE_DECODER_25
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 25 && BAR0_ENABLED_25==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 25.
`define MEM0_SPACE_DECODER_25 1'h0


// Name:           PREFETCHABLE0_25
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 25 && BAR0_ENABLED_25==1 && MEM0_SPACE_DECODER_25==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 25.
`define PREFETCHABLE0_25 1'h0


// Name:           BAR0_TYPE_25
// Default:        64-bit ((MEM0_SPACE_DECODER_25==1 || BAR0_ENABLED_25==0) ? 0 : 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 25 && BAR0_ENABLED_25==1 && MEM0_SPACE_DECODER_25==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 25.
`define BAR0_TYPE_25 2'h2


// Name:           BAR0_SIZING_SCHEME_25
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 25 && BAR0_ENABLED_25==1
// Parameter Type: Feature Setting
// 
// BAR0 Function 25 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR0_SIZING_SCHEME_25 2'h0


// Name:           CX_BAR0_RESIZABLE_25
// Default:        0x0 ((BAR0_SIZING_SCHEME_25==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR0_ENABLED_25==1) && (MEM0_SPACE_DECODER_25==0)
// Parameter Type: Feature Setting
// 
// Defines BAR0 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR0 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR0_RESIZABLE_25 1'h0


// Name:           CX_BAR0_RESOURCE_AVAIL_25
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 25 && CX_BAR0_RESIZABLE_25==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR0 of function 25. 
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
// Example: 0x00000030 indicates that BAR0 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR0_RESOURCE_AVAIL_25 64'h10


// Name:           BAR0_MASK_WRITABLE_25
// Default:        0x0 ((BAR0_ENABLED_25==1 && BAR0_SIZING_SCHEME_25 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 25 && BAR0_ENABLED_25==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR0 Mask through DBI
`define BAR0_MASK_WRITABLE_25 1'h0


// Name:           BAR0_MASK_25
// Default:        0xfffff (CX_BAR0_RESIZABLE_25==1 ? [calc_bar_mask 
//                 CX_BAR0_RESOURCE_AVAIL_25] : MEM0_SPACE_DECODER_25==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 25 && BAR0_ENABLED_25==1 && MEM0_SPACE_DECODER_25==0 && 
//                 CX_BAR0_RESIZABLE_25==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR0 Mask register of function 25. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR0_MASK_25 64'hfffff


// Name:           MEM_FUNC25_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 25 && BAR0_ENABLED_25==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_0 of function 25 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming Requests for BAR0 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC25_BAR0_TARGET_MAP 1'h1


// Name:           BAR1_ENABLED_25
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 25 && BAR0_TYPE_25==0
// Parameter Type: Feature Setting
// 
// Include the BAR1 registers for function 25.
`define BAR1_ENABLED_25 1'h0


`define DEFAULT_BAR1_ENABLED_25 1'h0


// Name:           MEM1_SPACE_DECODER_25
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 25 && BAR1_ENABLED_25==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 25.
`define MEM1_SPACE_DECODER_25 1'h0


// Name:           PREFETCHABLE1_25
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 25 && BAR1_ENABLED_25==1 && MEM1_SPACE_DECODER_25==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 25.
`define PREFETCHABLE1_25 1'h0


// Name:           BAR1_TYPE_25
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 25.
`define BAR1_TYPE_25 2'h0


// Name:           BAR1_SIZING_SCHEME_25
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 25 && BAR1_ENABLED_25==1
// Parameter Type: Feature Setting
// 
// BAR1 Function 25 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR1_SIZING_SCHEME_25 2'h0


// Name:           CX_BAR1_RESIZABLE_25
// Default:        0x0 ((BAR1_SIZING_SCHEME_25==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR1_ENABLED_25==1) && (MEM1_SPACE_DECODER_25==0)
// Parameter Type: Feature Setting
// 
// Defines BAR1 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR1 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR1_RESIZABLE_25 1'h0


// Name:           CX_BAR1_RESOURCE_AVAIL_25
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 25 && CX_BAR1_RESIZABLE_25==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR1 of function 25. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR1 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR1_RESOURCE_AVAIL_25 32'h10


// Name:           BAR1_MASK_WRITABLE_25
// Default:        0x0 ((BAR1_ENABLED_25==1 && BAR1_SIZING_SCHEME_25 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 25 && BAR1_ENABLED_25==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR1 Mask through DBI
`define BAR1_MASK_WRITABLE_25 1'h0


// Name:           BAR1_MASK_25
// Default:        0xffff (CX_BAR1_RESIZABLE_25==1 ? [calc_bar_mask 
//                 CX_BAR1_RESOURCE_AVAIL_25] : MEM1_SPACE_DECODER_25==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 25 && BAR1_ENABLED_25==1 && MEM1_SPACE_DECODER_25==0 && 
//                 CX_BAR1_RESIZABLE_25==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR1 Mask register of function 25. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR1_MASK_25 32'hffff


// Name:           MEM_FUNC25_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 25 && BAR1_ENABLED_25==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_1 of function 25 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR1_TARGET_MAP to 1 maps all incoming Requests for BAR1 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC25_BAR1_TARGET_MAP 1'h1


// Name:           BAR2_ENABLED_25
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 25
// Parameter Type: Feature Setting
// 
// Include the BAR2 registers for function 25.
`define BAR2_ENABLED_25 1'h1


`define DEFAULT_BAR2_ENABLED_25 1'h1


// Name:           MEM2_SPACE_DECODER_25
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 25 && BAR2_ENABLED_25==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 25.
`define MEM2_SPACE_DECODER_25 1'h0


// Name:           PREFETCHABLE2_25
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 25 && BAR2_ENABLED_25==1 && MEM2_SPACE_DECODER_25==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 25.
`define PREFETCHABLE2_25 1'h0


// Name:           BAR2_TYPE_25
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 25 && BAR2_ENABLED_25==1 && MEM2_SPACE_DECODER_25==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 25.
`define BAR2_TYPE_25 2'h0


// Name:           BAR2_SIZING_SCHEME_25
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 25 && BAR2_ENABLED_25==1
// Parameter Type: Feature Setting
// 
// BAR2 Function 25 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR2_SIZING_SCHEME_25 2'h0


// Name:           CX_BAR2_RESIZABLE_25
// Default:        0x0 ((BAR2_SIZING_SCHEME_25==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR2_ENABLED_25==1) && (MEM2_SPACE_DECODER_25==0)
// Parameter Type: Feature Setting
// 
// Defines BAR2 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR2 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR2_RESIZABLE_25 1'h0


// Name:           CX_BAR2_RESOURCE_AVAIL_25
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 25 && CX_BAR2_RESIZABLE_25==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR2 of function 25. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR2 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR2_RESOURCE_AVAIL_25 64'h10


// Name:           BAR2_MASK_WRITABLE_25
// Default:        0x0 ((BAR2_ENABLED_25==1 && BAR2_SIZING_SCHEME_25 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 25 && BAR2_ENABLED_25==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR2 Mask through DBI
`define BAR2_MASK_WRITABLE_25 1'h0


// Name:           BAR2_MASK_25
// Default:        0xfffff (CX_BAR2_RESIZABLE_25==1 ? [calc_bar_mask 
//                 CX_BAR2_RESOURCE_AVAIL_25] : MEM2_SPACE_DECODER_25==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 25 && BAR2_ENABLED_25==1 && MEM2_SPACE_DECODER_25==0 && 
//                 CX_BAR2_RESIZABLE_25==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR2 Mask register of function 25. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR2_MASK_25 64'hfffff


// Name:           MEM_FUNC25_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 25 && BAR2_ENABLED_25==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_2 of function 25 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR2_TARGET_MAP to 1 maps all incoming requests for BAR2 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC25_BAR2_TARGET_MAP 1'h1


// Name:           BAR3_ENABLED_25
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 25 && BAR2_TYPE_25==0
// Parameter Type: Feature Setting
// 
// Include the BAR3 registers for function 25.
`define BAR3_ENABLED_25 1'h0



`define DEFAULT_BAR3_ENABLED_25 1'h0


// Name:           MEM3_SPACE_DECODER_25
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 25 && BAR3_ENABLED_25==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 25.
`define MEM3_SPACE_DECODER_25 1'h0


// Name:           PREFETCHABLE3_25
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 25 && BAR3_ENABLED_25==1 && MEM3_SPACE_DECODER_25==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 25.
`define PREFETCHABLE3_25 1'h0


// Name:           BAR3_TYPE_25
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 25.
`define BAR3_TYPE_25 2'h0


// Name:           BAR3_SIZING_SCHEME_25
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 25 && BAR3_ENABLED_25==1
// Parameter Type: Feature Setting
// 
// BAR3 Function 25 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR3_SIZING_SCHEME_25 2'h0


// Name:           CX_BAR3_RESIZABLE_25
// Default:        0x0 ((BAR3_SIZING_SCHEME_25==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR3_ENABLED_25==1) && (MEM3_SPACE_DECODER_25==0)
// Parameter Type: Feature Setting
// 
// Defines BAR3 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR3 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR3_RESIZABLE_25 1'h0


// Name:           CX_BAR3_RESOURCE_AVAIL_25
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 25 && CX_BAR3_RESIZABLE_25==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR3 of function 25. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR3 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR3_RESOURCE_AVAIL_25 32'h10


// Name:           BAR3_MASK_WRITABLE_25
// Default:        0x0 ((BAR3_ENABLED_25==1 && BAR3_SIZING_SCHEME_25 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 25 && BAR3_ENABLED_25==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR3 Mask through DBI
`define BAR3_MASK_WRITABLE_25 1'h0


// Name:           BAR3_MASK_25
// Default:        0xffff (CX_BAR3_RESIZABLE_25==1 ? [calc_bar_mask 
//                 CX_BAR3_RESOURCE_AVAIL_25] : MEM3_SPACE_DECODER_25==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 25 && BAR3_ENABLED_25==1 && MEM3_SPACE_DECODER_25==0 && 
//                 CX_BAR3_RESIZABLE_25==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR3 Mask register of function 25. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR3_MASK_25 32'hffff


// Name:           MEM_FUNC25_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 25 && BAR3_ENABLED_25==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_3 of function 25 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR3_TARGET_MAP to 1 maps all incoming requests for BAR3 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC25_BAR3_TARGET_MAP 1'h1


// Name:           BAR4_ENABLED_25
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 25
// Parameter Type: Feature Setting
// 
// Include the BAR4 registers for function 25.
`define BAR4_ENABLED_25 1'h1


`define DEFAULT_BAR4_ENABLED_25 1'h1



// Name:           MEM4_SPACE_DECODER_25
// Default:        I/O (BAR4_ENABLED_25==1)
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 25 && BAR4_ENABLED_25==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 25.
`define MEM4_SPACE_DECODER_25 1'h1


// Name:           PREFETCHABLE4_25
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 25 && BAR4_ENABLED_25==1 && MEM4_SPACE_DECODER_25==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 25.
`define PREFETCHABLE4_25 1'h0


// Name:           BAR4_TYPE_25
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 25 && BAR4_ENABLED_25==1 && MEM4_SPACE_DECODER_25==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 25.
`define BAR4_TYPE_25 2'h0


// Name:           BAR4_SIZING_SCHEME_25
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 25 && BAR4_ENABLED_25==1
// Parameter Type: Feature Setting
// 
// BAR4  Function 25 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR4_SIZING_SCHEME_25 2'h0


// Name:           CX_BAR4_RESIZABLE_25
// Default:        0x0 ((BAR4_SIZING_SCHEME_25==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR4_ENABLED_25==1) && (MEM4_SPACE_DECODER_25==0)
// Parameter Type: Feature Setting
// 
// Defines BAR4 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR4 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR4_RESIZABLE_25 1'h0


// Name:           CX_BAR4_RESOURCE_AVAIL_25
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 25 &&  CX_BAR4_RESIZABLE_25==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR4 of function 25. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR4 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR4_RESOURCE_AVAIL_25 64'h10


// Name:           BAR4_MASK_WRITABLE_25
// Default:        0x0 ((BAR4_ENABLED_25==1 && BAR4_SIZING_SCHEME_25 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 25 && BAR4_ENABLED_25==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR4 Mask through DBI
`define BAR4_MASK_WRITABLE_25 1'h0


// Name:           BAR4_MASK_25
// Default:        0xff (CX_BAR4_RESIZABLE_25==1 ? [calc_bar_mask 
//                 CX_BAR4_RESOURCE_AVAIL_25] : MEM4_SPACE_DECODER_25==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 25 && BAR4_ENABLED_25==1 && MEM4_SPACE_DECODER_25==0 && 
//                 CX_BAR4_RESIZABLE_25==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR4 Mask register of function 25. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR4_MASK_25 64'hff


// Name:           MEM_FUNC25_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 25 && BAR4_ENABLED_25==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_4 of function 25 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR4_TARGET_MAP to 1 maps all incoming requests for BAR4 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC25_BAR4_TARGET_MAP 1'h1


// Name:           BAR5_ENABLED_25
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 25 && BAR4_TYPE_25==0
// Parameter Type: Feature Setting
// 
// Include the BAR5 registers for function 25.
`define BAR5_ENABLED_25 1'h0


`define DEFAULT_BAR5_ENABLED_25 1'h0


// Name:           MEM5_SPACE_DECODER_25
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 25 && BAR5_ENABLED_25==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 25.
`define MEM5_SPACE_DECODER_25 1'h0


// Name:           PREFETCHABLE5_25
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 25 && BAR5_ENABLED_25==1 && MEM5_SPACE_DECODER_25==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 25.
`define PREFETCHABLE5_25 1'h0


// Name:           BAR5_TYPE_25
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 25.
`define BAR5_TYPE_25 2'h0


// Name:           BAR5_SIZING_SCHEME_25
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 25 && BAR5_ENABLED_25==1
// Parameter Type: Feature Setting
// 
// BAR5  Function 25 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR5_SIZING_SCHEME_25 2'h0


// Name:           CX_BAR5_RESIZABLE_25
// Default:        0x0 ((BAR5_SIZING_SCHEME_25==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR5_ENABLED_25==1) && (MEM5_SPACE_DECODER_25==0)
// Parameter Type: Feature Setting
// 
// Defines BAR5 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR5 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR5_RESIZABLE_25 1'h0


// Name:           CX_BAR5_RESOURCE_AVAIL_25
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 25 && CX_BAR5_RESIZABLE_25==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR5 of function 25. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR5 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR5_RESOURCE_AVAIL_25 32'h10


// Name:           BAR5_MASK_WRITABLE_25
// Default:        0x0 ((BAR5_ENABLED_25==1 && BAR5_SIZING_SCHEME_25 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 25 && BAR5_ENABLED_25==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR5 Mask through DBI
`define BAR5_MASK_WRITABLE_25 1'h0


// Name:           BAR5_MASK_25
// Default:        0xffff (CX_BAR5_RESIZABLE_25==1 ? [calc_bar_mask 
//                 CX_BAR5_RESOURCE_AVAIL_25] : MEM5_SPACE_DECODER_25==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 25 && BAR5_ENABLED_25==1 && MEM5_SPACE_DECODER_25==0 && 
//                 CX_BAR5_RESIZABLE_25==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR5 Mask register of function 25. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR5_MASK_25 32'hffff


// Name:           MEM_FUNC25_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 25 && BAR5_ENABLED_25==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_5 of function 25 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR5_TARGET_MAP to 1 maps all incoming requests for BAR5 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC25_BAR5_TARGET_MAP 1'h1


`define FUNC25_BARSIZE_32 128'h0


`define FUNC25_BARSIZE 128'h0


`define FUNC25_BAR0_BARSIZE_TRGT1 128'h0


`define FUNC25_BAR2_BARSIZE_TRGT1 128'h0


`define FUNC25_BAR4_BARSIZE_TRGT1 128'h0


`define FUNC25_BAR0_TRGT1_ADDR_WIDTH 1


`define FUNC25_BAR2_TRGT1_ADDR_WIDTH 1


`define FUNC25_BAR4_TRGT1_ADDR_WIDTH 1


// Name:         CX_NUM_RBARS_25
// Default:      0 ([calc_num_rbars CX_BAR0_RESIZABLE_25 CX_BAR1_RESIZABLE_25 
//               CX_BAR2_RESIZABLE_25 CX_BAR3_RESIZABLE_25 CX_BAR4_RESIZABLE_25 
//               CX_BAR5_RESIZABLE_25])
// Values:       -2147483648, ..., 2147483647
// 
// Number of resizable BARs
`define CX_NUM_RBARS_25 0

//-/ END:   BAR CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SR-IOV CAPABILITIES CONFIGURATION


// Name:           CX_VF_DEPENDENCY_LINK_25
// Default:        0x25
// Values:         0x0, ..., 0xff
// Enabled:        CX_VF_DEPENDENCY_LINK_SUPP && (CX_NFUNC > 25) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Specifies the 8-bit VF dependency link for PF25. Valid only if CX_VF_DEPENDENCY_LINK_SUPP=1.
`define CX_VF_DEPENDENCY_LINK_25 8'h25


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER1_25
// Default:        0x2 ((CX_NFUNC>=17) ? 32 : (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : 
//                 (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF25 in an ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER1_25 16'h2


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER0_25
// Default:        0x100
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF25 
//  in a non-ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER0_25 16'h100


// Name:           VF_STRIDE_ARI_CAP_HIER1_25
// Default:        0x2 (CX_VF_STRIDE_ALWAYS_ONE) ? 1 : ((CX_NFUNC>=17) ? 32 : 
//                 (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF25 in an ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER1_25 16'h2


// Name:           VF_STRIDE_ARI_CAP_HIER0_25
// Default:        0x100 ((CX_VF_STRIDE_ALWAYS_ONE) ? 0x0001 : 0x0100)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF25 in a non-ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER0_25 16'h100


// Name:           CX_VF_DEVICE_ID_25
// Default:        0x0 (CX_DEVICE_ID_25)
// Values:         0x0, ..., 0xffff
// Enabled:        (CX_NFUNC > 25) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 16-bit virtual function Device ID for PF25. 
//  It might be different from the physical function's.
`define CX_VF_DEVICE_ID_25 16'h0


// Name:           CX_VF_SUPP_PAGE_SIZE_25
// Default:        0x553
// Values:         0x553, ..., 0xffff
// Enabled:        (CX_NFUNC > 25) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 32-bit supported page sizes for virtual functions for PF25
`define CX_VF_SUPP_PAGE_SIZE_25 32'h553


// Name:           CX_ARI_CAP_HIER_PRSVD_25
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Specifies if ARI Capable Hierarchy bit is preserved across certain power state transitions 
//  Only present in PF0. Read Only Zero in this PF25.
`define CX_ARI_CAP_HIER_PRSVD_25 1'h0

//-/===========================================
//-/ START: VF BAR CONFIGURATION


// Name:           VF_BAR0_ENABLED_25
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 25)
// Parameter Type: Feature Setting
// 
// Include the VF BAR0 registers in PF25
`define VF_BAR0_ENABLED_25 1'h1


`define VF_DEFAULT_BAR0_ENABLED_25 1'h1


// Name:           VF_MEM0_SPACE_DECODER_25
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR0_ENABLED_25 && CX_SRIOV_ENABLE && (CX_NFUNC > 25)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Space Indicator 
//  ALWAYS set to Memory for Virtual Functions
`define VF_MEM0_SPACE_DECODER_25 1'h0


// Name:           VF_PREFETCHABLE0_25
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_25==1 && VF_MEM0_SPACE_DECODER_25==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 25)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Prefetchable 
//  When set indicates VF BAR0 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE0_25 1'h0


// Name:           VF_BAR0_TYPE_25
// Default:        64-bit ((VF_MEM0_SPACE_DECODER_25==1 || VF_BAR0_ENABLED_25==0) ? 0 
//                 : 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR0_ENABLED_25==1 && VF_MEM0_SPACE_DECODER_25==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 25)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 25; (bits [2:1] for a memory BAR).
`define VF_BAR0_TYPE_25 2'h2


// Name:           VF_BAR0_MASK_WRITABLE_25
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_25==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 25)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR0_MASK_WRITABLE_25 1'h0


// Name:           VF_BAR0_MASK_25
// Default:        0xfffff (VF_MEM0_SPACE_DECODER_25==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR0_ENABLED_25==1 && VF_MEM0_SPACE_DECODER_25==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 25)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Mask 
//  Determines the default of the VF BAR Mask register for PF25. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR0_MASK_25 64'hfffff


// Name:           VF_MEM_FUNC25_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR0_ENABLED_25==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE 
//                 && (CX_NFUNC > 25)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF25 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC25_BAR0_TARGET_MAP 1'h1


// Name:           VF_BAR1_ENABLED_25
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        (VF_BAR0_TYPE_25==0)  && CX_SRIOV_ENABLE && (CX_NFUNC > 25)
// Parameter Type: Feature Setting
// 
// Include the VF BAR1 registers in PF25
`define VF_BAR1_ENABLED_25 1'h0


`define VF_DEFAULT_BAR1_ENABLED_25 1'h0


// Name:           VF_MEM1_SPACE_DECODER_25
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR1_ENABLED_25==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 25)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Space Indicator
`define VF_MEM1_SPACE_DECODER_25 1'h0


// Name:           VF_PREFETCHABLE1_25
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_25==1 && VF_MEM1_SPACE_DECODER_25==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 25)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Prefetchable 
//  When set indicates VF BAR1 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE1_25 1'h0


// Name:           VF_BAR1_TYPE_25
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 25; (bits [2:1] for a memory BAR).
`define VF_BAR1_TYPE_25 2'h0


// Name:           VF_BAR1_MASK_WRITABLE_25
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_25==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 25)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR1_MASK_WRITABLE_25 1'h0


// Name:           VF_BAR1_MASK_25
// Default:        0xffff (VF_MEM1_SPACE_DECODER_25==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR1_ENABLED_25==1 && VF_MEM1_SPACE_DECODER_25==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 25)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Mask 
//  Determines the default of the VF BAR Mask register for PF25. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR1_MASK_25 32'hffff


// Name:           VF_MEM_FUNC25_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR1_ENABLED_25==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE 
//                 && (CX_NFUNC > 25)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF25 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC25_BAR1_TARGET_MAP 1'h1


// Name:           VF_BAR2_ENABLED_25
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 25)
// Parameter Type: Feature Setting
// 
// Include the VF BAR2 registers in PF25
`define VF_BAR2_ENABLED_25 1'h1


`define VF_DEFAULT_BAR2_ENABLED_25 1'h1


// Name:           VF_MEM2_SPACE_DECODER_25
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR2_ENABLED_25==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 25)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Memory Space Indicator
`define VF_MEM2_SPACE_DECODER_25 1'h0


// Name:           VF_PREFETCHABLE2_25
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_25==1 && VF_MEM2_SPACE_DECODER_25==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 25)
// Parameter Type: Register Default Setting
// 
// BAR2 Memory Prefetchable 
//  When set indicates VF BAR2 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE2_25 1'h0


// Name:           VF_BAR2_TYPE_25
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR2_ENABLED_25==1 && VF_MEM2_SPACE_DECODER_25==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 25)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 25; (bits [2:1] for a memory BAR).
`define VF_BAR2_TYPE_25 2'h0


// Name:           VF_BAR2_MASK_WRITABLE_25
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_25==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 25)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR2_MASK_WRITABLE_25 1'h0


// Name:           VF_BAR2_MASK_25
// Default:        0xfffff (VF_MEM2_SPACE_DECODER_25==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR2_ENABLED_25==1 && VF_MEM2_SPACE_DECODER_25==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 25)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Mask 
//  Determines the default of the VF BAR Mask register for PF25. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR2_MASK_25 64'hfffff


// Name:           VF_MEM_FUNC25_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR2_ENABLED_25==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 25)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF25 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC25_BAR2_TARGET_MAP 1'h1


// Name:           VF_BAR3_ENABLED_25
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_TYPE_25==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 25)
// Parameter Type: Feature Setting
// 
// Include the VF BAR3 registers in PF25
`define VF_BAR3_ENABLED_25 1'h0


`define VF_DEFAULT_BAR3_ENABLED_25 1'h0


// Name:           VF_MEM3_SPACE_DECODER_25
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR3_ENABLED_25==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 25)
// Parameter Type: Register Default Setting
// 
// BAR3 Memory Space Indicator
`define VF_MEM3_SPACE_DECODER_25 1'h0


// Name:           VF_PREFETCHABLE3_25
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_25==1 && VF_MEM3_SPACE_DECODER_25==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 25)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Memory Prefetchable 
//  When set indicates VF BAR3 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE3_25 1'h0


// Name:           VF_BAR3_TYPE_25
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 25; (bits [2:1] for a memory BAR).
`define VF_BAR3_TYPE_25 2'h0


// Name:           VF_BAR3_MASK_WRITABLE_25
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_25==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 25)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR3_MASK_WRITABLE_25 1'h0


// Name:           VF_BAR3_MASK_25
// Default:        0xffff (VF_MEM3_SPACE_DECODER_25==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR3_ENABLED_25==1 && VF_MEM3_SPACE_DECODER_25==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 25)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Mask 
//  Determines the default of the VF BAR Mask register for PF25. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR3_MASK_25 32'hffff


// Name:           VF_MEM_FUNC25_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR3_ENABLED_25==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 25)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF25 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC25_BAR3_TARGET_MAP 1'h1


// Name:           VF_BAR4_ENABLED_25
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 25)
// Parameter Type: Feature Setting
// 
// Include the VF BAR4 registers in PF25
`define VF_BAR4_ENABLED_25 1'h1


`define VF_DEFAULT_BAR4_ENABLED_25 1'h1


// Name:           VF_MEM4_SPACE_DECODER_25
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR4_ENABLED_25==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 25)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Space Indicator
`define VF_MEM4_SPACE_DECODER_25 1'h0


// Name:           VF_PREFETCHABLE4_25
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_25==1 && VF_MEM4_SPACE_DECODER_25==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 25)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Prefetchable 
//  When set indicates VF BAR4 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE4_25 1'h0


// Name:           VF_BAR4_TYPE_25
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR4_ENABLED_25==1 && VF_MEM4_SPACE_DECODER_25==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 25)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 25; (bits [2:1] for a memory BAR).
`define VF_BAR4_TYPE_25 2'h0


// Name:           VF_BAR4_MASK_WRITABLE_25
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_25==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 25)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR4_MASK_WRITABLE_25 1'h0


// Name:           VF_BAR4_MASK_25
// Default:        0xfff (VF_MEM4_SPACE_DECODER_25==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR4_ENABLED_25==1 && VF_MEM4_SPACE_DECODER_25==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 25)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Mask 
//  Determines the default of the VF BAR Mask register for PF25. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR4_MASK_25 64'hfff


// Name:           VF_MEM_FUNC25_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR4_ENABLED_25==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 25)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF25 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC25_BAR4_TARGET_MAP 1'h1


// Name:           VF_BAR5_ENABLED_25
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_TYPE_25==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 25)
// Parameter Type: Feature Setting
// 
// Include the VF BAR5 registers in PF25
`define VF_BAR5_ENABLED_25 1'h0


`define VF_DEFAULT_BAR5_ENABLED_25 1'h0


// Name:           VF_MEM5_SPACE_DECODER_25
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR5_ENABLED_25==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 25)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Space Indicator
`define VF_MEM5_SPACE_DECODER_25 1'h0


// Name:           VF_PREFETCHABLE5_25
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_25==1 && VF_MEM5_SPACE_DECODER_25==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 25)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Prefetchable 
//  When set indicates VF BAR5 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE5_25 1'h0


// Name:           VF_BAR5_TYPE_25
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 25; (bits [2:1] for a memory BAR).
`define VF_BAR5_TYPE_25 2'h0


// Name:           VF_BAR5_MASK_WRITABLE_25
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_25==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 25)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR5_MASK_WRITABLE_25 1'h0


// Name:           VF_BAR5_MASK_25
// Default:        0xffff (VF_MEM5_SPACE_DECODER_25==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR5_ENABLED_25==1 && VF_MEM5_SPACE_DECODER_25==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 25)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Mask 
//  Determines the default of the VF BAR Mask register for PF25. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR5_MASK_25 32'hffff


// Name:           VF_MEM_FUNC25_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR5_ENABLED_25==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 25)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF25 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC25_BAR5_TARGET_MAP 1'h1


`define VF_FUNC25_BARSIZE_32 128'h101000


`define VF_FUNC25_BARSIZE 128'h201000

//-/ END:   VF BAR CONFIGURATION
//-/===========================================

//-/ END:   SR-IOV CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: TPH CAPABILITIES CONFIGURATION


// Name:           TPH_IVEC_25
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Interrupt Vector Mode. If set indicates that the function supports the Interrupt Vector 
// Mode of operation. Function 25.
`define TPH_IVEC_25 1'h0


// Name:           TPH_DS_25
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Device Specific Mode. If set indicates that the function supports the Device Specific Mode 
// of operation. Function 25.
`define TPH_DS_25 1'h0


// Name:           TPH_ST_TABLE_LOC_25
// Default:        Not Present
// Values:         Not Present (0), TPH Requester Capability Structure (1), MSI-X 
//                 Table Structure (2)
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_DS_25 || TPH_IVEC_25))
// Parameter Type: Feature Setting
// 
// TLP Processing Hints Steering Tag Table Location. Value indicates if and where the ST Table is located. Function 25.
`define TPH_ST_TABLE_LOC_25 0

//located in the TPH Requester Capability structure. Please reduce the ST Table Size for this mode of operation"

// Name:           TPH_ST_TABLE_SIZE_25
// Default:        1
// Values:         1, ..., 2048
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_ST_TABLE_LOC_25 != 0))
// Parameter Type: Feature Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define TPH_ST_TABLE_SIZE_25 1


`define TPH_ST_TABLE_DEPTH_25 0

//-/ END:   TPH CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: ATS CAPABILITIES CONFIGURATION


// Name:           ATS_INV_Q_DPTH_25
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// The number of Invalidate Requests that the Function can accept before putting backpressure on the upstream connection. A 
// value of 0 indicates the function can accept 32 Invalidate requests. Function 25.
`define ATS_INV_Q_DPTH_25 5'd0


// Name:           ATS_STU_25
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// This value indicates to the Function the minimum number of 4096-byte blocks that is indicated in a Translation 
// Completion or Invalidate Request. This is a power of 2 multiplier and the number of blocks is 2^STU. A value of 0 indicates 1 block 
// and a value of 31 indicates 2^31 blocks (or 8 TB total). Function 25.
`define ATS_STU_25 5'd0

//-/ END:   ATS CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PRS CAPABILITIES CONFIGURATION


// Name:           CX_PRS_OUTSTANDING_CAPACITY_VALUE_25
// Default:        0x1
// Values:         0x0, ..., 0xffffffff
// Enabled:        (CX_PRS_ENABLE==1) && (CX_NFUNC > 25)
// Parameter Type: Register Default Setting
// 
// Register default for PRS Outstanding Capacity in PF25. 
// For more details, see the PRS_OUTSTANDING_CAPACITY field in the PRS_REQ_CAPACITY_REG register.
`define CX_PRS_OUTSTANDING_CAPACITY_VALUE_25 32'h1

//-/ END:   PRS CAPABILITIES CONFIGURATION
//-/===========================================


//-/===========================================
//--- START: RN


// Name:           CX_RN_IMM_VALUE_25
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 25)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for PF25.
`define CX_RN_IMM_VALUE_25 1'h0


// Name:           CX_RN_IMM_D0_VALUE_25
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 25)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for PF25.
`define CX_RN_IMM_D0_VALUE_25 1'h0


// Name:           CX_RN_FRS_VALUE_25
// Default:        0x0 (CX_RN_FRS_SUPPORTED==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_FRS_SUPPORTED==1) && (CX_NFUNC > 25)
// Parameter Type: Feature Setting
// 
// Function Readiness Status messaging supported for function PF25.
`define CX_RN_FRS_VALUE_25 1'h0


// Name:           CX_RN_RTR_VALID_25
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 25)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF25.
`define CX_RN_RTR_VALID_25 1'h0


// Name:           CX_RN_RTR_DL_UP_VALUE_25
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 25)
// Parameter Type: Register Default Setting
// 
// Register default for RTR DL Up Time field in PF25.
`define CX_RN_RTR_DL_UP_VALUE_25 12'h0


// Name:           CX_RN_RTR_RESET_VALUE_25
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 25)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF25.
`define CX_RN_RTR_RESET_VALUE_25 12'h0


// Name:           CX_RN_RTR_D3D0_VALUE_25
// Default:        0x0
// Values:         0x0, ..., 0x80a
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 25)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF25.
`define CX_RN_RTR_D3D0_VALUE_25 12'h0


// Name:           CX_RN_RTR_FLR_VALUE_25
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_FLR_ENABLE==1) && (CX_NFUNC > 25)
// Parameter Type: Register Default Setting
// 
// Register default for RTR FLR Time field in PF25.
`define CX_RN_RTR_FLR_VALUE_25 12'h0


// Name:           VF_RN_IMM_VALUE_25
// Default:        0x0 (CX_RN_IMM_VALUE_25 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 25))
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for VFs in PF25.
`define VF_RN_IMM_VALUE_25 1'h0


// Name:           VF_RN_IMM_D0_VALUE_25
// Default:        0x0 (CX_RN_IMM_D0_VALUE_25 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 25))
// Parameter Type: Register Default Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for VFs in PF25.
`define VF_RN_IMM_D0_VALUE_25 1'h0


// Name:           VF_RN_RTR_VALID_25
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 25) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF25 VFs.
`define VF_RN_RTR_VALID_25 1'h0


// Name:           VF_RN_RTR_RESET_VALUE_25
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_25)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 25) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF25 VFS.
`define VF_RN_RTR_RESET_VALUE_25 12'h0


// Name:           VF_RN_RTR_D3D0_VALUE_25
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_25)
// Values:         0x0, ..., 0x80a
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 25) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF25 VFS.
`define VF_RN_RTR_D3D0_VALUE_25 12'h0


// Name:           VF_RN_RTR_FLR_VALUE_25
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_25)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 25) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF25 VFs.
`define VF_RN_RTR_FLR_VALUE_25 12'h0


// Name:           EXT_VF_RN_RTR_VALID_25
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 25) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF25 VFs.
`define EXT_VF_RN_RTR_VALID_25 1'h0


// Name:           EXT_VF_RN_RTR_RESET_VALUE_25
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_25)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 25) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF25 VFS.
`define EXT_VF_RN_RTR_RESET_VALUE_25 12'h0


// Name:           EXT_VF_RN_RTR_D3D0_VALUE_25
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_25)
// Values:         0x0, ..., 0x80a
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 25) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF25 VFS.
`define EXT_VF_RN_RTR_D3D0_VALUE_25 12'h0


// Name:           EXT_VF_RN_RTR_FLR_VALUE_25
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_25)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 25) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF25 VFs.
`define EXT_VF_RN_RTR_FLR_VALUE_25 12'h0

//-/ END:   RN
//-/===========================================

//-/ START: LN CAPABILITIES CONFIGURATION
//-/===========================================


// Name:           CX_LN_REG_MAX_VALUE_25
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 25))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_64_SUPPORTED field in the LNR_CAP_OFF register for PF25.
`define CX_LN_REG_MAX_VALUE_25 5'h0


// Name:           CX_LN_128_SUPPORTED_VALUE_25
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 25))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_128_SUPPORTED field in the LNR_CAP_OFF register for PF25.
`define CX_LN_128_SUPPORTED_VALUE_25 1'h0


// Name:           CX_LN_64_SUPPORTED_VALUE_25
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 25))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_REGISTRATION_MAX field in the LNR_CAP_OFF register for PF25.
`define CX_LN_64_SUPPORTED_VALUE_25 1'h0

//-/ END:   LN CAPABILITIES CONFIGURATION
//-/===========================================




//-/==========================================
//-/ End FUNC25 Config
//-/==========================================

//-/===========================================
//-/ Function 26 Configuration Registers
//-/ ==========================================


// Name:         FUNC_26
// Default:      0 ((CX_NFUNC > 26) ? 1 : 0)
// Values:       0, 1
// 
// This parameter indicates that Function 26 is present
// `define FUNC_26

//-/===========================================
//-/ START: PCI-E CAPABILITIES CONFIGURATION


// Name:           PCIE_CAP_INT_MSG_NUM_26
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 26
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Message Number field in the PCI Express Capabilities Register. Function 26.
`define PCIE_CAP_INT_MSG_NUM_26 5'h0


// Name:           SLOT_IMPLEMENTED_26
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_NFUNC > 26))
// Parameter Type: Register Default Setting
// 
// Indicates that the PCI Express link associated with this Port is connected to a slot. Function 26.
`define SLOT_IMPLEMENTED_26 1'h0


// Name:           DEFAULT_PHANTOM_FUNC_SUPPORTED_26
// Default:        0x0
// Values:         0x0, ..., 0x3
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_PHANTOM_FUNC_SUPPORTED_26 2'h0


// Name:           DEFAULT_EXT_TAG_FIELD_SUPPORTED_26
// Default:        0x0 (DEFAULT_EXT_TAG_FIELD_SUPPORTED_0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 26
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_EXT_TAG_FIELD_SUPPORTED_26 1'h0



// Name:           DEFAULT_ATT_BUTT_PRE_26
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 26
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Button is present
`define DEFAULT_ATT_BUTT_PRE_26 1'h0


// Name:           DEFAULT_ATT_IND_PRE_26
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 26
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Indicator is present
`define DEFAULT_ATT_IND_PRE_26 1'h0


// Name:           DEFAULT_PWR_IND_PRE_26
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 26
// Parameter Type: Register Default Setting
// 
// When set indicates that a Power Indicator is present
`define DEFAULT_PWR_IND_PRE_26 1'h0


// Name:           DEFAULT_NO_SNOOP_SUPPORTED_26
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 26
// Parameter Type: Register Default Setting
// 
// Default value for the Enable No Snoop bit in the Device Control Register. Function 26.
`define DEFAULT_NO_SNOOP_SUPPORTED_26 1'h0


// Name:           ROOT_RCB_26
// Default:        64-bit
// Values:         64-bit (0x0), 128-bit (0x1)
// Parameter Type: Register Default Setting
// 
// Default value for the Read Completion Boundary (RCB) bit in the Link Control Register.
`define ROOT_RCB_26 1'h0


//-/ END:   PCI-E CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: MSI-X CAPABILITIES CONFIGURATION


// Name:           MSIX_TABLE_SIZE_26
// Default:        0x0
// Values:         0x0, ..., 0x7ff
// Enabled:        CX_NFUNC > 26 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the MSI-X Table Size field in the MSI-X Control Register. Function 26.
`define MSIX_TABLE_SIZE_26 11'h0


// Name:           MSIX_TABLE_BIR_26
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 26 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table BAR Indicator Register (BIR) field in the MSI-X Table Offset and BIR Register. Function 26.
`define MSIX_TABLE_BIR_26 3'h0


// Name:           MSIX_TABLE_OFFSET_26
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 26 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table Offset field in the MSI-X Table Offset and BIR Register. Function 26.
`define MSIX_TABLE_OFFSET_26 29'h0


// Name:           MSIX_PBA_BIR_26
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 26 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Pending Bit Array (PBA) BIR field in the MSI-X PBA Offset and BIR Register. Function 26.
`define MSIX_PBA_BIR_26 7'h0


// Name:           MSIX_PBA_OFFSET_26
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 26 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the PBA Offset field in the MSI-X PBA Offset and BIR Register. Function 26.
`define MSIX_PBA_OFFSET_26 29'h0

//-/ END:   MSI-X CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SATA CAPABILITIES CONFIGURATION


// Name:         SATA_HBA_OFFSET_26
// Default:      0x0
// Values:       0x0, ..., 0xfffff
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA Offset. Base address of the SATA HBA registers, 
//  as an offset from the base address of the BAR indicated 
//  by the SATA BAR field.
`define SATA_HBA_OFFSET_26 20'h0


// Name:         SATA_BAR_26
// Default:      0x0
// Values:       0x0, ..., 0xf
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA BAR. The bar that maps to SATA HBA registers,
`define SATA_BAR_26 4'h0

//-/ END:   SATA CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: AER CAPABILITIES CONFIGURATION


// Name:           DEFAULT_ECRC_CHK_CAP_26
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 26 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Check Capable bit in the Advanced Capabilities and Control Register. Function 26.
`define DEFAULT_ECRC_CHK_CAP_26 1'h1


// Name:           DEFAULT_ECRC_GEN_CAP_26
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 26 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Generation Capability bit in the Advanced Capabilities and Control Register. Function 26.
`define DEFAULT_ECRC_GEN_CAP_26 1'h1


// Name:           AER_INT_MSG_NUM_26
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Parameter Type: Register Default Setting
// 
// Default value for the Advanced Error Interrupt Message Number field of the Root Error Status Register. Function 26.
`define AER_INT_MSG_NUM_26 5'h0



// Name:           CX_HDR_LOG_DEPTH_26
// Default:        0x1
// Values:         0x1, 0x2, 0x4
// Enabled:        CX_NFUNC > 26 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Feature Setting.
// 
// Header Log Depth
`define CX_HDR_LOG_DEPTH_26 3'h1


`define CX_MULTIPLE_HDR_REC_CAP_26 1'h0

//-/ END:   AER CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PM CAPABILITIES CONFIGURATION


// Name:           PME_SUPPORT_26
// Default:        0x1b
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 26
// Parameter Type: Register Default Setting
// 
// Default value for the PME_Support field in the Power Management Capabilities Register. Function 26.
`define PME_SUPPORT_26 5'h1b


// Name:           D1_SUPPORT_26
// Default:        true
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 26
// Parameter Type: Register Default Setting
// 
// Default value for the D1 Support bit in the Power Management Capabilities Register. Function 26.
`define D1_SUPPORT_26 1'h1


// Name:           D2_SUPPORT_26
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 26
// Parameter Type: Register Default Setting
// 
// Default value for the D2 Support bit in the Power Management Capabilities Register. Function 26.
`define D2_SUPPORT_26 1'h0


// Name:           DEV_SPEC_INIT_26
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 26
// Parameter Type: Register Default Setting
// 
// Default value for the Device Specific Initialization (DSI) bit in the Power Management Capabilities Register. Function 
// 26.
`define DEV_SPEC_INIT_26 1'h0


// Name:           AUX_CURRENT_26
// Default:        375mA
// Values:         0mA (0x0), 55mA (0x1), 100mA (0x2), 160mA (0x3), 220mA (0x4), 270mA 
//                 (0x5), 320mA (0x6), 375mA (0x7)
// Enabled:        CX_NFUNC > 26
// Parameter Type: Register Default Setting
// 
// Default value for the Aux Current field in the Power Management Capabilities Register. Function 26.
`define AUX_CURRENT_26 3'h7


// Name:           DEFAULT_NO_SOFT_RESET_26
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 26
// Parameter Type: Register Default Setting
// 
// Default value for the No Soft Reset bit in the Power Management Control and Status Register. When set, you should not 
// reset any controller registers when transitioning from D3hot to D0. Therefore, you should not assert the non_sticky_rst_n 
// and sticky_rst_n inputs. Function 26.
`define DEFAULT_NO_SOFT_RESET_26 1'h0

//-/ END:   PM CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PCI BASIC CONFIGURATION


// Name:           CX_DEVICE_ID_26
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 26
// Parameter Type: Register Default Setting
// 
// Default value for the Device ID field in the Device ID and Vendor ID Register. Function 26.
`define CX_DEVICE_ID_26 16'h0


// Name:           CX_VENDOR_ID_26
// Default:        0x16c3
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 26
// Parameter Type: Register Default Setting
// 
// Default value for the Vendor ID field in the Device ID and Vendor ID Register. Function 26.
`define CX_VENDOR_ID_26 16'h16c3


// Name:           CX_REVISION_ID_26
// Default:        0x1
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 26
// Parameter Type: Register Default Setting
// 
// Default value for the Revision ID field in the Revision ID Register. Function 26.
`define CX_REVISION_ID_26 8'h1


// Name:           SUBSYS_DEV_ID_26
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 26
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 26.
`define SUBSYS_DEV_ID_26 16'h0


// Name:           SUBSYS_VENDOR_ID_26
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 26
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem Vendor ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 26.
`define SUBSYS_VENDOR_ID_26 16'h0


// Name:           BASE_CLASS_CODE_26
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 26
// Parameter Type: Register Default Setting
// 
// Default value for the Base Class Code field in the Class Code Register. Function 26.
`define BASE_CLASS_CODE_26 8'h0


// Name:           SUB_CLASS_CODE_26
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 26
// Parameter Type: Register Default Setting
// 
// Default value for the Subclass Code field in the Class Code Register. Function 26.
`define SUB_CLASS_CODE_26 8'h0


// Name:           IF_CODE_26
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 26
// Parameter Type: Register Default Setting
// 
// Default value for the Programming Interface field in the Class Code Register. Function 26.
`define IF_CODE_26 8'h0


// Name:           CARDBUS_CIS_PTR_26
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 26
// Parameter Type: Register Default Setting
// 
// Default value for the CardBus CIS Pointer Register. Function 26.
`define CARDBUS_CIS_PTR_26 16'h0


// Name:           INT_PIN_MAPPING_26
// Default:        INTA
// Values:         None (0x0), INTA (0x1), INTB (0x2), INTC (0x3), INTD (0x4)
// Enabled:        CX_NFUNC > 26
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Pin Register. Function 26.
`define INT_PIN_MAPPING_26 8'h1


// Name:           IO_DECODE_32_26
// Default:        16-bit
// Values:         16-bit (0x0), 32-bit (0x1)
// Enabled:        CX_NFUNC > 26
// Parameter Type: Register Default Setting
// 
// Default value for the 32-Bit I/O Space bit in the I/O Base and I/O Limit Register. Function 26.
`define IO_DECODE_32_26 1'h0


// Name:           MEM_DECODE_64_26
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x1)
// Enabled:        CX_NFUNC > 26
// Parameter Type: Register Default Setting
// 
// Default value for the 64-Bit Memory Addressing bit in the Prefetchable Memory Base and Limit Register. Function 26.
`define MEM_DECODE_64_26 1'h0


// Name:           ROM_BAR_ENABLED_26
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 26
// Parameter Type: Register Default Setting
// 
// Include the expansion ROM BAR registers. Function 26.
`define ROM_BAR_ENABLED_26 1'h1


`define DEFAULT_ROM_BAR_ENABLED_26 1'h1


// Name:           ROM_MASK_26
// Default:        0xffff
// Values:         0x7ff, ..., 0xffffff
// Enabled:        CX_NFUNC > 26 && ROM_BAR_ENABLED_26==1
// Parameter Type: Register Default Setting
// 
// Determines the default of the Expansion ROM BAR Mask register. Function 26. 
//  - The BAR Mask register specifies which bits of the Expansion ROM BAR are non-writable by host software, which 
//  determines the size of the BAR. 
//  - The maximum value for ROM_MASK_N is 0xFFFFFF because the maximum space that can be claimed by an Expansion ROM BAR 
//  is 16 MB. 
//  - For example: 32'hFFFF =BAR size of 2^16.
`define ROM_MASK_26 32'hffff


// Name:           ROM_MASK_WRITABLE_26
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 26 && ROM_BAR_ENABLED_26==1
// Parameter Type: Feature Setting
// 
// Determines if the Expansion ROM BAR Mask register for function 26 is writable by application software. If writing to a 
// Expansion ROM BAR Mask register is enabled, your application can write to the Expansion ROM BAR Mask register through the 
// DBI by asserting dbi_cs2 in addition to dbi_cs.
`define ROM_MASK_WRITABLE_26 1'h0


// Name:           ROM_FUNC26_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 26 && ROM_BAR_ENABLED_26==1 && TRGT1_POPULATE==1))
// Parameter Type: Register Default Setting
// 
// Direct incoming requests that pass filtering and match the Expansion ROM BAR of function 26 to either RTRGT0 or RTRGT1. 
//  - For example, setting ROM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for the Expansion ROM BAR of function 
//  0 to RTRGT1. 
//  - If TRGT1_POPULATE =0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define ROM_FUNC26_TARGET_MAP 1'h1


// Name:           CX_PCI_HEADER_DEFAULTS_VISIBLE_26
// Default:        0
// Values:         0, 1
// Parameter Type: Register Default Setting
// 
// Select here if you want to configure the defaults for the other PCI Standard Header registers for function 26. 
//  An extra window will appear under this page. To access it, click the plus/minus symbol in the hierarchy view on the 
//  left panel. 
//  This is optional but not usually recommended. 
//  You can also change these register defaults using the DBI before (or after) the link comes up.
`define CX_PCI_HEADER_DEFAULTS_VISIBLE_26 0

//-/ END:   PCI BASIC CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: BAR CONFIGURATION


// Name:           BAR0_ENABLED_26
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 26
// Parameter Type: Feature Setting
// 
// Include the BAR0 registers for function 26.
`define BAR0_ENABLED_26 1'h1


`define DEFAULT_BAR0_ENABLED_26 1'h1


// Name:           MEM0_SPACE_DECODER_26
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 26 && BAR0_ENABLED_26==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 26.
`define MEM0_SPACE_DECODER_26 1'h0


// Name:           PREFETCHABLE0_26
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 26 && BAR0_ENABLED_26==1 && MEM0_SPACE_DECODER_26==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 26.
`define PREFETCHABLE0_26 1'h0


// Name:           BAR0_TYPE_26
// Default:        64-bit ((MEM0_SPACE_DECODER_26==1 || BAR0_ENABLED_26==0) ? 0 : 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 26 && BAR0_ENABLED_26==1 && MEM0_SPACE_DECODER_26==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 26.
`define BAR0_TYPE_26 2'h2


// Name:           BAR0_SIZING_SCHEME_26
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 26 && BAR0_ENABLED_26==1
// Parameter Type: Feature Setting
// 
// BAR0 Function 26 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR0_SIZING_SCHEME_26 2'h0


// Name:           CX_BAR0_RESIZABLE_26
// Default:        0x0 ((BAR0_SIZING_SCHEME_26==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR0_ENABLED_26==1) && (MEM0_SPACE_DECODER_26==0)
// Parameter Type: Feature Setting
// 
// Defines BAR0 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR0 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR0_RESIZABLE_26 1'h0


// Name:           CX_BAR0_RESOURCE_AVAIL_26
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 26 && CX_BAR0_RESIZABLE_26==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR0 of function 26. 
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
// Example: 0x00000030 indicates that BAR0 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR0_RESOURCE_AVAIL_26 64'h10


// Name:           BAR0_MASK_WRITABLE_26
// Default:        0x0 ((BAR0_ENABLED_26==1 && BAR0_SIZING_SCHEME_26 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 26 && BAR0_ENABLED_26==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR0 Mask through DBI
`define BAR0_MASK_WRITABLE_26 1'h0


// Name:           BAR0_MASK_26
// Default:        0xfffff (CX_BAR0_RESIZABLE_26==1 ? [calc_bar_mask 
//                 CX_BAR0_RESOURCE_AVAIL_26] : MEM0_SPACE_DECODER_26==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 26 && BAR0_ENABLED_26==1 && MEM0_SPACE_DECODER_26==0 && 
//                 CX_BAR0_RESIZABLE_26==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR0 Mask register of function 26. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR0_MASK_26 64'hfffff


// Name:           MEM_FUNC26_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 26 && BAR0_ENABLED_26==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_0 of function 26 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming Requests for BAR0 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC26_BAR0_TARGET_MAP 1'h1


// Name:           BAR1_ENABLED_26
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 26 && BAR0_TYPE_26==0
// Parameter Type: Feature Setting
// 
// Include the BAR1 registers for function 26.
`define BAR1_ENABLED_26 1'h0


`define DEFAULT_BAR1_ENABLED_26 1'h0


// Name:           MEM1_SPACE_DECODER_26
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 26 && BAR1_ENABLED_26==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 26.
`define MEM1_SPACE_DECODER_26 1'h0


// Name:           PREFETCHABLE1_26
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 26 && BAR1_ENABLED_26==1 && MEM1_SPACE_DECODER_26==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 26.
`define PREFETCHABLE1_26 1'h0


// Name:           BAR1_TYPE_26
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 26.
`define BAR1_TYPE_26 2'h0


// Name:           BAR1_SIZING_SCHEME_26
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 26 && BAR1_ENABLED_26==1
// Parameter Type: Feature Setting
// 
// BAR1 Function 26 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR1_SIZING_SCHEME_26 2'h0


// Name:           CX_BAR1_RESIZABLE_26
// Default:        0x0 ((BAR1_SIZING_SCHEME_26==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR1_ENABLED_26==1) && (MEM1_SPACE_DECODER_26==0)
// Parameter Type: Feature Setting
// 
// Defines BAR1 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR1 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR1_RESIZABLE_26 1'h0


// Name:           CX_BAR1_RESOURCE_AVAIL_26
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 26 && CX_BAR1_RESIZABLE_26==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR1 of function 26. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR1 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR1_RESOURCE_AVAIL_26 32'h10


// Name:           BAR1_MASK_WRITABLE_26
// Default:        0x0 ((BAR1_ENABLED_26==1 && BAR1_SIZING_SCHEME_26 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 26 && BAR1_ENABLED_26==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR1 Mask through DBI
`define BAR1_MASK_WRITABLE_26 1'h0


// Name:           BAR1_MASK_26
// Default:        0xffff (CX_BAR1_RESIZABLE_26==1 ? [calc_bar_mask 
//                 CX_BAR1_RESOURCE_AVAIL_26] : MEM1_SPACE_DECODER_26==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 26 && BAR1_ENABLED_26==1 && MEM1_SPACE_DECODER_26==0 && 
//                 CX_BAR1_RESIZABLE_26==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR1 Mask register of function 26. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR1_MASK_26 32'hffff


// Name:           MEM_FUNC26_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 26 && BAR1_ENABLED_26==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_1 of function 26 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR1_TARGET_MAP to 1 maps all incoming Requests for BAR1 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC26_BAR1_TARGET_MAP 1'h1


// Name:           BAR2_ENABLED_26
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 26
// Parameter Type: Feature Setting
// 
// Include the BAR2 registers for function 26.
`define BAR2_ENABLED_26 1'h1


`define DEFAULT_BAR2_ENABLED_26 1'h1


// Name:           MEM2_SPACE_DECODER_26
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 26 && BAR2_ENABLED_26==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 26.
`define MEM2_SPACE_DECODER_26 1'h0


// Name:           PREFETCHABLE2_26
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 26 && BAR2_ENABLED_26==1 && MEM2_SPACE_DECODER_26==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 26.
`define PREFETCHABLE2_26 1'h0


// Name:           BAR2_TYPE_26
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 26 && BAR2_ENABLED_26==1 && MEM2_SPACE_DECODER_26==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 26.
`define BAR2_TYPE_26 2'h0


// Name:           BAR2_SIZING_SCHEME_26
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 26 && BAR2_ENABLED_26==1
// Parameter Type: Feature Setting
// 
// BAR2 Function 26 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR2_SIZING_SCHEME_26 2'h0


// Name:           CX_BAR2_RESIZABLE_26
// Default:        0x0 ((BAR2_SIZING_SCHEME_26==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR2_ENABLED_26==1) && (MEM2_SPACE_DECODER_26==0)
// Parameter Type: Feature Setting
// 
// Defines BAR2 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR2 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR2_RESIZABLE_26 1'h0


// Name:           CX_BAR2_RESOURCE_AVAIL_26
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 26 && CX_BAR2_RESIZABLE_26==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR2 of function 26. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR2 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR2_RESOURCE_AVAIL_26 64'h10


// Name:           BAR2_MASK_WRITABLE_26
// Default:        0x0 ((BAR2_ENABLED_26==1 && BAR2_SIZING_SCHEME_26 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 26 && BAR2_ENABLED_26==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR2 Mask through DBI
`define BAR2_MASK_WRITABLE_26 1'h0


// Name:           BAR2_MASK_26
// Default:        0xfffff (CX_BAR2_RESIZABLE_26==1 ? [calc_bar_mask 
//                 CX_BAR2_RESOURCE_AVAIL_26] : MEM2_SPACE_DECODER_26==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 26 && BAR2_ENABLED_26==1 && MEM2_SPACE_DECODER_26==0 && 
//                 CX_BAR2_RESIZABLE_26==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR2 Mask register of function 26. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR2_MASK_26 64'hfffff


// Name:           MEM_FUNC26_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 26 && BAR2_ENABLED_26==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_2 of function 26 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR2_TARGET_MAP to 1 maps all incoming requests for BAR2 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC26_BAR2_TARGET_MAP 1'h1


// Name:           BAR3_ENABLED_26
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 26 && BAR2_TYPE_26==0
// Parameter Type: Feature Setting
// 
// Include the BAR3 registers for function 26.
`define BAR3_ENABLED_26 1'h0



`define DEFAULT_BAR3_ENABLED_26 1'h0


// Name:           MEM3_SPACE_DECODER_26
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 26 && BAR3_ENABLED_26==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 26.
`define MEM3_SPACE_DECODER_26 1'h0


// Name:           PREFETCHABLE3_26
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 26 && BAR3_ENABLED_26==1 && MEM3_SPACE_DECODER_26==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 26.
`define PREFETCHABLE3_26 1'h0


// Name:           BAR3_TYPE_26
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 26.
`define BAR3_TYPE_26 2'h0


// Name:           BAR3_SIZING_SCHEME_26
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 26 && BAR3_ENABLED_26==1
// Parameter Type: Feature Setting
// 
// BAR3 Function 26 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR3_SIZING_SCHEME_26 2'h0


// Name:           CX_BAR3_RESIZABLE_26
// Default:        0x0 ((BAR3_SIZING_SCHEME_26==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR3_ENABLED_26==1) && (MEM3_SPACE_DECODER_26==0)
// Parameter Type: Feature Setting
// 
// Defines BAR3 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR3 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR3_RESIZABLE_26 1'h0


// Name:           CX_BAR3_RESOURCE_AVAIL_26
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 26 && CX_BAR3_RESIZABLE_26==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR3 of function 26. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR3 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR3_RESOURCE_AVAIL_26 32'h10


// Name:           BAR3_MASK_WRITABLE_26
// Default:        0x0 ((BAR3_ENABLED_26==1 && BAR3_SIZING_SCHEME_26 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 26 && BAR3_ENABLED_26==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR3 Mask through DBI
`define BAR3_MASK_WRITABLE_26 1'h0


// Name:           BAR3_MASK_26
// Default:        0xffff (CX_BAR3_RESIZABLE_26==1 ? [calc_bar_mask 
//                 CX_BAR3_RESOURCE_AVAIL_26] : MEM3_SPACE_DECODER_26==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 26 && BAR3_ENABLED_26==1 && MEM3_SPACE_DECODER_26==0 && 
//                 CX_BAR3_RESIZABLE_26==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR3 Mask register of function 26. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR3_MASK_26 32'hffff


// Name:           MEM_FUNC26_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 26 && BAR3_ENABLED_26==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_3 of function 26 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR3_TARGET_MAP to 1 maps all incoming requests for BAR3 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC26_BAR3_TARGET_MAP 1'h1


// Name:           BAR4_ENABLED_26
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 26
// Parameter Type: Feature Setting
// 
// Include the BAR4 registers for function 26.
`define BAR4_ENABLED_26 1'h1


`define DEFAULT_BAR4_ENABLED_26 1'h1



// Name:           MEM4_SPACE_DECODER_26
// Default:        I/O (BAR4_ENABLED_26==1)
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 26 && BAR4_ENABLED_26==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 26.
`define MEM4_SPACE_DECODER_26 1'h1


// Name:           PREFETCHABLE4_26
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 26 && BAR4_ENABLED_26==1 && MEM4_SPACE_DECODER_26==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 26.
`define PREFETCHABLE4_26 1'h0


// Name:           BAR4_TYPE_26
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 26 && BAR4_ENABLED_26==1 && MEM4_SPACE_DECODER_26==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 26.
`define BAR4_TYPE_26 2'h0


// Name:           BAR4_SIZING_SCHEME_26
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 26 && BAR4_ENABLED_26==1
// Parameter Type: Feature Setting
// 
// BAR4  Function 26 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR4_SIZING_SCHEME_26 2'h0


// Name:           CX_BAR4_RESIZABLE_26
// Default:        0x0 ((BAR4_SIZING_SCHEME_26==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR4_ENABLED_26==1) && (MEM4_SPACE_DECODER_26==0)
// Parameter Type: Feature Setting
// 
// Defines BAR4 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR4 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR4_RESIZABLE_26 1'h0


// Name:           CX_BAR4_RESOURCE_AVAIL_26
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 26 &&  CX_BAR4_RESIZABLE_26==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR4 of function 26. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR4 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR4_RESOURCE_AVAIL_26 64'h10


// Name:           BAR4_MASK_WRITABLE_26
// Default:        0x0 ((BAR4_ENABLED_26==1 && BAR4_SIZING_SCHEME_26 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 26 && BAR4_ENABLED_26==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR4 Mask through DBI
`define BAR4_MASK_WRITABLE_26 1'h0


// Name:           BAR4_MASK_26
// Default:        0xff (CX_BAR4_RESIZABLE_26==1 ? [calc_bar_mask 
//                 CX_BAR4_RESOURCE_AVAIL_26] : MEM4_SPACE_DECODER_26==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 26 && BAR4_ENABLED_26==1 && MEM4_SPACE_DECODER_26==0 && 
//                 CX_BAR4_RESIZABLE_26==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR4 Mask register of function 26. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR4_MASK_26 64'hff


// Name:           MEM_FUNC26_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 26 && BAR4_ENABLED_26==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_4 of function 26 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR4_TARGET_MAP to 1 maps all incoming requests for BAR4 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC26_BAR4_TARGET_MAP 1'h1


// Name:           BAR5_ENABLED_26
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 26 && BAR4_TYPE_26==0
// Parameter Type: Feature Setting
// 
// Include the BAR5 registers for function 26.
`define BAR5_ENABLED_26 1'h0


`define DEFAULT_BAR5_ENABLED_26 1'h0


// Name:           MEM5_SPACE_DECODER_26
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 26 && BAR5_ENABLED_26==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 26.
`define MEM5_SPACE_DECODER_26 1'h0


// Name:           PREFETCHABLE5_26
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 26 && BAR5_ENABLED_26==1 && MEM5_SPACE_DECODER_26==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 26.
`define PREFETCHABLE5_26 1'h0


// Name:           BAR5_TYPE_26
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 26.
`define BAR5_TYPE_26 2'h0


// Name:           BAR5_SIZING_SCHEME_26
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 26 && BAR5_ENABLED_26==1
// Parameter Type: Feature Setting
// 
// BAR5  Function 26 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR5_SIZING_SCHEME_26 2'h0


// Name:           CX_BAR5_RESIZABLE_26
// Default:        0x0 ((BAR5_SIZING_SCHEME_26==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR5_ENABLED_26==1) && (MEM5_SPACE_DECODER_26==0)
// Parameter Type: Feature Setting
// 
// Defines BAR5 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR5 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR5_RESIZABLE_26 1'h0


// Name:           CX_BAR5_RESOURCE_AVAIL_26
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 26 && CX_BAR5_RESIZABLE_26==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR5 of function 26. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR5 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR5_RESOURCE_AVAIL_26 32'h10


// Name:           BAR5_MASK_WRITABLE_26
// Default:        0x0 ((BAR5_ENABLED_26==1 && BAR5_SIZING_SCHEME_26 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 26 && BAR5_ENABLED_26==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR5 Mask through DBI
`define BAR5_MASK_WRITABLE_26 1'h0


// Name:           BAR5_MASK_26
// Default:        0xffff (CX_BAR5_RESIZABLE_26==1 ? [calc_bar_mask 
//                 CX_BAR5_RESOURCE_AVAIL_26] : MEM5_SPACE_DECODER_26==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 26 && BAR5_ENABLED_26==1 && MEM5_SPACE_DECODER_26==0 && 
//                 CX_BAR5_RESIZABLE_26==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR5 Mask register of function 26. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR5_MASK_26 32'hffff


// Name:           MEM_FUNC26_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 26 && BAR5_ENABLED_26==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_5 of function 26 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR5_TARGET_MAP to 1 maps all incoming requests for BAR5 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC26_BAR5_TARGET_MAP 1'h1


`define FUNC26_BARSIZE_32 128'h0


`define FUNC26_BARSIZE 128'h0


`define FUNC26_BAR0_BARSIZE_TRGT1 128'h0


`define FUNC26_BAR2_BARSIZE_TRGT1 128'h0


`define FUNC26_BAR4_BARSIZE_TRGT1 128'h0


`define FUNC26_BAR0_TRGT1_ADDR_WIDTH 1


`define FUNC26_BAR2_TRGT1_ADDR_WIDTH 1


`define FUNC26_BAR4_TRGT1_ADDR_WIDTH 1


// Name:         CX_NUM_RBARS_26
// Default:      0 ([calc_num_rbars CX_BAR0_RESIZABLE_26 CX_BAR1_RESIZABLE_26 
//               CX_BAR2_RESIZABLE_26 CX_BAR3_RESIZABLE_26 CX_BAR4_RESIZABLE_26 
//               CX_BAR5_RESIZABLE_26])
// Values:       -2147483648, ..., 2147483647
// 
// Number of resizable BARs
`define CX_NUM_RBARS_26 0

//-/ END:   BAR CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SR-IOV CAPABILITIES CONFIGURATION


// Name:           CX_VF_DEPENDENCY_LINK_26
// Default:        0x26
// Values:         0x0, ..., 0xff
// Enabled:        CX_VF_DEPENDENCY_LINK_SUPP && (CX_NFUNC > 26) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Specifies the 8-bit VF dependency link for PF26. Valid only if CX_VF_DEPENDENCY_LINK_SUPP=1.
`define CX_VF_DEPENDENCY_LINK_26 8'h26


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER1_26
// Default:        0x2 ((CX_NFUNC>=17) ? 32 : (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : 
//                 (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF26 in an ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER1_26 16'h2


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER0_26
// Default:        0x100
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF26 
//  in a non-ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER0_26 16'h100


// Name:           VF_STRIDE_ARI_CAP_HIER1_26
// Default:        0x2 (CX_VF_STRIDE_ALWAYS_ONE) ? 1 : ((CX_NFUNC>=17) ? 32 : 
//                 (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF26 in an ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER1_26 16'h2


// Name:           VF_STRIDE_ARI_CAP_HIER0_26
// Default:        0x100 ((CX_VF_STRIDE_ALWAYS_ONE) ? 0x0001 : 0x0100)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF26 in a non-ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER0_26 16'h100


// Name:           CX_VF_DEVICE_ID_26
// Default:        0x0 (CX_DEVICE_ID_26)
// Values:         0x0, ..., 0xffff
// Enabled:        (CX_NFUNC > 26) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 16-bit virtual function Device ID for PF26. 
//  It might be different from the physical function's.
`define CX_VF_DEVICE_ID_26 16'h0


// Name:           CX_VF_SUPP_PAGE_SIZE_26
// Default:        0x553
// Values:         0x553, ..., 0xffff
// Enabled:        (CX_NFUNC > 26) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 32-bit supported page sizes for virtual functions for PF26
`define CX_VF_SUPP_PAGE_SIZE_26 32'h553


// Name:           CX_ARI_CAP_HIER_PRSVD_26
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Specifies if ARI Capable Hierarchy bit is preserved across certain power state transitions 
//  Only present in PF0. Read Only Zero in this PF26.
`define CX_ARI_CAP_HIER_PRSVD_26 1'h0

//-/===========================================
//-/ START: VF BAR CONFIGURATION


// Name:           VF_BAR0_ENABLED_26
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 26)
// Parameter Type: Feature Setting
// 
// Include the VF BAR0 registers in PF26
`define VF_BAR0_ENABLED_26 1'h1


`define VF_DEFAULT_BAR0_ENABLED_26 1'h1


// Name:           VF_MEM0_SPACE_DECODER_26
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR0_ENABLED_26 && CX_SRIOV_ENABLE && (CX_NFUNC > 26)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Space Indicator 
//  ALWAYS set to Memory for Virtual Functions
`define VF_MEM0_SPACE_DECODER_26 1'h0


// Name:           VF_PREFETCHABLE0_26
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_26==1 && VF_MEM0_SPACE_DECODER_26==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 26)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Prefetchable 
//  When set indicates VF BAR0 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE0_26 1'h0


// Name:           VF_BAR0_TYPE_26
// Default:        64-bit ((VF_MEM0_SPACE_DECODER_26==1 || VF_BAR0_ENABLED_26==0) ? 0 
//                 : 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR0_ENABLED_26==1 && VF_MEM0_SPACE_DECODER_26==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 26)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 26; (bits [2:1] for a memory BAR).
`define VF_BAR0_TYPE_26 2'h2


// Name:           VF_BAR0_MASK_WRITABLE_26
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_26==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 26)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR0_MASK_WRITABLE_26 1'h0


// Name:           VF_BAR0_MASK_26
// Default:        0xfffff (VF_MEM0_SPACE_DECODER_26==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR0_ENABLED_26==1 && VF_MEM0_SPACE_DECODER_26==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 26)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Mask 
//  Determines the default of the VF BAR Mask register for PF26. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR0_MASK_26 64'hfffff


// Name:           VF_MEM_FUNC26_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR0_ENABLED_26==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE 
//                 && (CX_NFUNC > 26)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF26 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC26_BAR0_TARGET_MAP 1'h1


// Name:           VF_BAR1_ENABLED_26
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        (VF_BAR0_TYPE_26==0)  && CX_SRIOV_ENABLE && (CX_NFUNC > 26)
// Parameter Type: Feature Setting
// 
// Include the VF BAR1 registers in PF26
`define VF_BAR1_ENABLED_26 1'h0


`define VF_DEFAULT_BAR1_ENABLED_26 1'h0


// Name:           VF_MEM1_SPACE_DECODER_26
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR1_ENABLED_26==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 26)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Space Indicator
`define VF_MEM1_SPACE_DECODER_26 1'h0


// Name:           VF_PREFETCHABLE1_26
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_26==1 && VF_MEM1_SPACE_DECODER_26==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 26)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Prefetchable 
//  When set indicates VF BAR1 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE1_26 1'h0


// Name:           VF_BAR1_TYPE_26
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 26; (bits [2:1] for a memory BAR).
`define VF_BAR1_TYPE_26 2'h0


// Name:           VF_BAR1_MASK_WRITABLE_26
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_26==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 26)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR1_MASK_WRITABLE_26 1'h0


// Name:           VF_BAR1_MASK_26
// Default:        0xffff (VF_MEM1_SPACE_DECODER_26==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR1_ENABLED_26==1 && VF_MEM1_SPACE_DECODER_26==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 26)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Mask 
//  Determines the default of the VF BAR Mask register for PF26. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR1_MASK_26 32'hffff


// Name:           VF_MEM_FUNC26_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR1_ENABLED_26==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE 
//                 && (CX_NFUNC > 26)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF26 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC26_BAR1_TARGET_MAP 1'h1


// Name:           VF_BAR2_ENABLED_26
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 26)
// Parameter Type: Feature Setting
// 
// Include the VF BAR2 registers in PF26
`define VF_BAR2_ENABLED_26 1'h1


`define VF_DEFAULT_BAR2_ENABLED_26 1'h1


// Name:           VF_MEM2_SPACE_DECODER_26
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR2_ENABLED_26==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 26)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Memory Space Indicator
`define VF_MEM2_SPACE_DECODER_26 1'h0


// Name:           VF_PREFETCHABLE2_26
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_26==1 && VF_MEM2_SPACE_DECODER_26==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 26)
// Parameter Type: Register Default Setting
// 
// BAR2 Memory Prefetchable 
//  When set indicates VF BAR2 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE2_26 1'h0


// Name:           VF_BAR2_TYPE_26
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR2_ENABLED_26==1 && VF_MEM2_SPACE_DECODER_26==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 26)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 26; (bits [2:1] for a memory BAR).
`define VF_BAR2_TYPE_26 2'h0


// Name:           VF_BAR2_MASK_WRITABLE_26
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_26==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 26)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR2_MASK_WRITABLE_26 1'h0


// Name:           VF_BAR2_MASK_26
// Default:        0xfffff (VF_MEM2_SPACE_DECODER_26==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR2_ENABLED_26==1 && VF_MEM2_SPACE_DECODER_26==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 26)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Mask 
//  Determines the default of the VF BAR Mask register for PF26. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR2_MASK_26 64'hfffff


// Name:           VF_MEM_FUNC26_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR2_ENABLED_26==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 26)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF26 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC26_BAR2_TARGET_MAP 1'h1


// Name:           VF_BAR3_ENABLED_26
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_TYPE_26==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 26)
// Parameter Type: Feature Setting
// 
// Include the VF BAR3 registers in PF26
`define VF_BAR3_ENABLED_26 1'h0


`define VF_DEFAULT_BAR3_ENABLED_26 1'h0


// Name:           VF_MEM3_SPACE_DECODER_26
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR3_ENABLED_26==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 26)
// Parameter Type: Register Default Setting
// 
// BAR3 Memory Space Indicator
`define VF_MEM3_SPACE_DECODER_26 1'h0


// Name:           VF_PREFETCHABLE3_26
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_26==1 && VF_MEM3_SPACE_DECODER_26==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 26)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Memory Prefetchable 
//  When set indicates VF BAR3 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE3_26 1'h0


// Name:           VF_BAR3_TYPE_26
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 26; (bits [2:1] for a memory BAR).
`define VF_BAR3_TYPE_26 2'h0


// Name:           VF_BAR3_MASK_WRITABLE_26
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_26==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 26)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR3_MASK_WRITABLE_26 1'h0


// Name:           VF_BAR3_MASK_26
// Default:        0xffff (VF_MEM3_SPACE_DECODER_26==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR3_ENABLED_26==1 && VF_MEM3_SPACE_DECODER_26==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 26)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Mask 
//  Determines the default of the VF BAR Mask register for PF26. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR3_MASK_26 32'hffff


// Name:           VF_MEM_FUNC26_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR3_ENABLED_26==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 26)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF26 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC26_BAR3_TARGET_MAP 1'h1


// Name:           VF_BAR4_ENABLED_26
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 26)
// Parameter Type: Feature Setting
// 
// Include the VF BAR4 registers in PF26
`define VF_BAR4_ENABLED_26 1'h1


`define VF_DEFAULT_BAR4_ENABLED_26 1'h1


// Name:           VF_MEM4_SPACE_DECODER_26
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR4_ENABLED_26==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 26)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Space Indicator
`define VF_MEM4_SPACE_DECODER_26 1'h0


// Name:           VF_PREFETCHABLE4_26
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_26==1 && VF_MEM4_SPACE_DECODER_26==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 26)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Prefetchable 
//  When set indicates VF BAR4 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE4_26 1'h0


// Name:           VF_BAR4_TYPE_26
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR4_ENABLED_26==1 && VF_MEM4_SPACE_DECODER_26==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 26)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 26; (bits [2:1] for a memory BAR).
`define VF_BAR4_TYPE_26 2'h0


// Name:           VF_BAR4_MASK_WRITABLE_26
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_26==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 26)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR4_MASK_WRITABLE_26 1'h0


// Name:           VF_BAR4_MASK_26
// Default:        0xfff (VF_MEM4_SPACE_DECODER_26==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR4_ENABLED_26==1 && VF_MEM4_SPACE_DECODER_26==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 26)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Mask 
//  Determines the default of the VF BAR Mask register for PF26. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR4_MASK_26 64'hfff


// Name:           VF_MEM_FUNC26_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR4_ENABLED_26==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 26)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF26 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC26_BAR4_TARGET_MAP 1'h1


// Name:           VF_BAR5_ENABLED_26
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_TYPE_26==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 26)
// Parameter Type: Feature Setting
// 
// Include the VF BAR5 registers in PF26
`define VF_BAR5_ENABLED_26 1'h0


`define VF_DEFAULT_BAR5_ENABLED_26 1'h0


// Name:           VF_MEM5_SPACE_DECODER_26
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR5_ENABLED_26==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 26)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Space Indicator
`define VF_MEM5_SPACE_DECODER_26 1'h0


// Name:           VF_PREFETCHABLE5_26
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_26==1 && VF_MEM5_SPACE_DECODER_26==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 26)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Prefetchable 
//  When set indicates VF BAR5 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE5_26 1'h0


// Name:           VF_BAR5_TYPE_26
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 26; (bits [2:1] for a memory BAR).
`define VF_BAR5_TYPE_26 2'h0


// Name:           VF_BAR5_MASK_WRITABLE_26
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_26==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 26)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR5_MASK_WRITABLE_26 1'h0


// Name:           VF_BAR5_MASK_26
// Default:        0xffff (VF_MEM5_SPACE_DECODER_26==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR5_ENABLED_26==1 && VF_MEM5_SPACE_DECODER_26==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 26)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Mask 
//  Determines the default of the VF BAR Mask register for PF26. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR5_MASK_26 32'hffff


// Name:           VF_MEM_FUNC26_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR5_ENABLED_26==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 26)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF26 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC26_BAR5_TARGET_MAP 1'h1


`define VF_FUNC26_BARSIZE_32 128'h101000


`define VF_FUNC26_BARSIZE 128'h201000

//-/ END:   VF BAR CONFIGURATION
//-/===========================================

//-/ END:   SR-IOV CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: TPH CAPABILITIES CONFIGURATION


// Name:           TPH_IVEC_26
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Interrupt Vector Mode. If set indicates that the function supports the Interrupt Vector 
// Mode of operation. Function 26.
`define TPH_IVEC_26 1'h0


// Name:           TPH_DS_26
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Device Specific Mode. If set indicates that the function supports the Device Specific Mode 
// of operation. Function 26.
`define TPH_DS_26 1'h0


// Name:           TPH_ST_TABLE_LOC_26
// Default:        Not Present
// Values:         Not Present (0), TPH Requester Capability Structure (1), MSI-X 
//                 Table Structure (2)
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_DS_26 || TPH_IVEC_26))
// Parameter Type: Feature Setting
// 
// TLP Processing Hints Steering Tag Table Location. Value indicates if and where the ST Table is located. Function 26.
`define TPH_ST_TABLE_LOC_26 0

//located in the TPH Requester Capability structure. Please reduce the ST Table Size for this mode of operation"

// Name:           TPH_ST_TABLE_SIZE_26
// Default:        1
// Values:         1, ..., 2048
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_ST_TABLE_LOC_26 != 0))
// Parameter Type: Feature Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define TPH_ST_TABLE_SIZE_26 1


`define TPH_ST_TABLE_DEPTH_26 0

//-/ END:   TPH CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: ATS CAPABILITIES CONFIGURATION


// Name:           ATS_INV_Q_DPTH_26
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// The number of Invalidate Requests that the Function can accept before putting backpressure on the upstream connection. A 
// value of 0 indicates the function can accept 32 Invalidate requests. Function 26.
`define ATS_INV_Q_DPTH_26 5'd0


// Name:           ATS_STU_26
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// This value indicates to the Function the minimum number of 4096-byte blocks that is indicated in a Translation 
// Completion or Invalidate Request. This is a power of 2 multiplier and the number of blocks is 2^STU. A value of 0 indicates 1 block 
// and a value of 31 indicates 2^31 blocks (or 8 TB total). Function 26.
`define ATS_STU_26 5'd0

//-/ END:   ATS CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PRS CAPABILITIES CONFIGURATION


// Name:           CX_PRS_OUTSTANDING_CAPACITY_VALUE_26
// Default:        0x1
// Values:         0x0, ..., 0xffffffff
// Enabled:        (CX_PRS_ENABLE==1) && (CX_NFUNC > 26)
// Parameter Type: Register Default Setting
// 
// Register default for PRS Outstanding Capacity in PF26. 
// For more details, see the PRS_OUTSTANDING_CAPACITY field in the PRS_REQ_CAPACITY_REG register.
`define CX_PRS_OUTSTANDING_CAPACITY_VALUE_26 32'h1

//-/ END:   PRS CAPABILITIES CONFIGURATION
//-/===========================================


//-/===========================================
//--- START: RN


// Name:           CX_RN_IMM_VALUE_26
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 26)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for PF26.
`define CX_RN_IMM_VALUE_26 1'h0


// Name:           CX_RN_IMM_D0_VALUE_26
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 26)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for PF26.
`define CX_RN_IMM_D0_VALUE_26 1'h0


// Name:           CX_RN_FRS_VALUE_26
// Default:        0x0 (CX_RN_FRS_SUPPORTED==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_FRS_SUPPORTED==1) && (CX_NFUNC > 26)
// Parameter Type: Feature Setting
// 
// Function Readiness Status messaging supported for function PF26.
`define CX_RN_FRS_VALUE_26 1'h0


// Name:           CX_RN_RTR_VALID_26
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 26)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF26.
`define CX_RN_RTR_VALID_26 1'h0


// Name:           CX_RN_RTR_DL_UP_VALUE_26
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 26)
// Parameter Type: Register Default Setting
// 
// Register default for RTR DL Up Time field in PF26.
`define CX_RN_RTR_DL_UP_VALUE_26 12'h0


// Name:           CX_RN_RTR_RESET_VALUE_26
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 26)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF26.
`define CX_RN_RTR_RESET_VALUE_26 12'h0


// Name:           CX_RN_RTR_D3D0_VALUE_26
// Default:        0x0
// Values:         0x0, ..., 0x80a
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 26)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF26.
`define CX_RN_RTR_D3D0_VALUE_26 12'h0


// Name:           CX_RN_RTR_FLR_VALUE_26
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_FLR_ENABLE==1) && (CX_NFUNC > 26)
// Parameter Type: Register Default Setting
// 
// Register default for RTR FLR Time field in PF26.
`define CX_RN_RTR_FLR_VALUE_26 12'h0


// Name:           VF_RN_IMM_VALUE_26
// Default:        0x0 (CX_RN_IMM_VALUE_26 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 26))
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for VFs in PF26.
`define VF_RN_IMM_VALUE_26 1'h0


// Name:           VF_RN_IMM_D0_VALUE_26
// Default:        0x0 (CX_RN_IMM_D0_VALUE_26 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 26))
// Parameter Type: Register Default Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for VFs in PF26.
`define VF_RN_IMM_D0_VALUE_26 1'h0


// Name:           VF_RN_RTR_VALID_26
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 26) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF26 VFs.
`define VF_RN_RTR_VALID_26 1'h0


// Name:           VF_RN_RTR_RESET_VALUE_26
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_26)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 26) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF26 VFS.
`define VF_RN_RTR_RESET_VALUE_26 12'h0


// Name:           VF_RN_RTR_D3D0_VALUE_26
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_26)
// Values:         0x0, ..., 0x80a
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 26) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF26 VFS.
`define VF_RN_RTR_D3D0_VALUE_26 12'h0


// Name:           VF_RN_RTR_FLR_VALUE_26
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_26)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 26) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF26 VFs.
`define VF_RN_RTR_FLR_VALUE_26 12'h0


// Name:           EXT_VF_RN_RTR_VALID_26
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 26) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF26 VFs.
`define EXT_VF_RN_RTR_VALID_26 1'h0


// Name:           EXT_VF_RN_RTR_RESET_VALUE_26
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_26)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 26) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF26 VFS.
`define EXT_VF_RN_RTR_RESET_VALUE_26 12'h0


// Name:           EXT_VF_RN_RTR_D3D0_VALUE_26
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_26)
// Values:         0x0, ..., 0x80a
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 26) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF26 VFS.
`define EXT_VF_RN_RTR_D3D0_VALUE_26 12'h0


// Name:           EXT_VF_RN_RTR_FLR_VALUE_26
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_26)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 26) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF26 VFs.
`define EXT_VF_RN_RTR_FLR_VALUE_26 12'h0

//-/ END:   RN
//-/===========================================

//-/ START: LN CAPABILITIES CONFIGURATION
//-/===========================================


// Name:           CX_LN_REG_MAX_VALUE_26
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 26))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_64_SUPPORTED field in the LNR_CAP_OFF register for PF26.
`define CX_LN_REG_MAX_VALUE_26 5'h0


// Name:           CX_LN_128_SUPPORTED_VALUE_26
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 26))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_128_SUPPORTED field in the LNR_CAP_OFF register for PF26.
`define CX_LN_128_SUPPORTED_VALUE_26 1'h0


// Name:           CX_LN_64_SUPPORTED_VALUE_26
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 26))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_REGISTRATION_MAX field in the LNR_CAP_OFF register for PF26.
`define CX_LN_64_SUPPORTED_VALUE_26 1'h0

//-/ END:   LN CAPABILITIES CONFIGURATION
//-/===========================================




//-/==========================================
//-/ End FUNC26 Config
//-/==========================================

//-/===========================================
//-/ Function 27 Configuration Registers
//-/ ==========================================


// Name:         FUNC_27
// Default:      0 ((CX_NFUNC > 27) ? 1 : 0)
// Values:       0, 1
// 
// This parameter indicates that Function 27 is present
// `define FUNC_27

//-/===========================================
//-/ START: PCI-E CAPABILITIES CONFIGURATION


// Name:           PCIE_CAP_INT_MSG_NUM_27
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 27
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Message Number field in the PCI Express Capabilities Register. Function 27.
`define PCIE_CAP_INT_MSG_NUM_27 5'h0


// Name:           SLOT_IMPLEMENTED_27
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_NFUNC > 27))
// Parameter Type: Register Default Setting
// 
// Indicates that the PCI Express link associated with this Port is connected to a slot. Function 27.
`define SLOT_IMPLEMENTED_27 1'h0


// Name:           DEFAULT_PHANTOM_FUNC_SUPPORTED_27
// Default:        0x0
// Values:         0x0, ..., 0x3
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_PHANTOM_FUNC_SUPPORTED_27 2'h0


// Name:           DEFAULT_EXT_TAG_FIELD_SUPPORTED_27
// Default:        0x0 (DEFAULT_EXT_TAG_FIELD_SUPPORTED_0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 27
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_EXT_TAG_FIELD_SUPPORTED_27 1'h0



// Name:           DEFAULT_ATT_BUTT_PRE_27
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 27
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Button is present
`define DEFAULT_ATT_BUTT_PRE_27 1'h0


// Name:           DEFAULT_ATT_IND_PRE_27
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 27
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Indicator is present
`define DEFAULT_ATT_IND_PRE_27 1'h0


// Name:           DEFAULT_PWR_IND_PRE_27
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 27
// Parameter Type: Register Default Setting
// 
// When set indicates that a Power Indicator is present
`define DEFAULT_PWR_IND_PRE_27 1'h0


// Name:           DEFAULT_NO_SNOOP_SUPPORTED_27
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 27
// Parameter Type: Register Default Setting
// 
// Default value for the Enable No Snoop bit in the Device Control Register. Function 27.
`define DEFAULT_NO_SNOOP_SUPPORTED_27 1'h0


// Name:           ROOT_RCB_27
// Default:        64-bit
// Values:         64-bit (0x0), 128-bit (0x1)
// Parameter Type: Register Default Setting
// 
// Default value for the Read Completion Boundary (RCB) bit in the Link Control Register.
`define ROOT_RCB_27 1'h0


//-/ END:   PCI-E CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: MSI-X CAPABILITIES CONFIGURATION


// Name:           MSIX_TABLE_SIZE_27
// Default:        0x0
// Values:         0x0, ..., 0x7ff
// Enabled:        CX_NFUNC > 27 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the MSI-X Table Size field in the MSI-X Control Register. Function 27.
`define MSIX_TABLE_SIZE_27 11'h0


// Name:           MSIX_TABLE_BIR_27
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 27 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table BAR Indicator Register (BIR) field in the MSI-X Table Offset and BIR Register. Function 27.
`define MSIX_TABLE_BIR_27 3'h0


// Name:           MSIX_TABLE_OFFSET_27
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 27 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table Offset field in the MSI-X Table Offset and BIR Register. Function 27.
`define MSIX_TABLE_OFFSET_27 29'h0


// Name:           MSIX_PBA_BIR_27
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 27 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Pending Bit Array (PBA) BIR field in the MSI-X PBA Offset and BIR Register. Function 27.
`define MSIX_PBA_BIR_27 7'h0


// Name:           MSIX_PBA_OFFSET_27
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 27 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the PBA Offset field in the MSI-X PBA Offset and BIR Register. Function 27.
`define MSIX_PBA_OFFSET_27 29'h0

//-/ END:   MSI-X CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SATA CAPABILITIES CONFIGURATION


// Name:         SATA_HBA_OFFSET_27
// Default:      0x0
// Values:       0x0, ..., 0xfffff
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA Offset. Base address of the SATA HBA registers, 
//  as an offset from the base address of the BAR indicated 
//  by the SATA BAR field.
`define SATA_HBA_OFFSET_27 20'h0


// Name:         SATA_BAR_27
// Default:      0x0
// Values:       0x0, ..., 0xf
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA BAR. The bar that maps to SATA HBA registers,
`define SATA_BAR_27 4'h0

//-/ END:   SATA CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: AER CAPABILITIES CONFIGURATION


// Name:           DEFAULT_ECRC_CHK_CAP_27
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 27 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Check Capable bit in the Advanced Capabilities and Control Register. Function 27.
`define DEFAULT_ECRC_CHK_CAP_27 1'h1


// Name:           DEFAULT_ECRC_GEN_CAP_27
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 27 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Generation Capability bit in the Advanced Capabilities and Control Register. Function 27.
`define DEFAULT_ECRC_GEN_CAP_27 1'h1


// Name:           AER_INT_MSG_NUM_27
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Parameter Type: Register Default Setting
// 
// Default value for the Advanced Error Interrupt Message Number field of the Root Error Status Register. Function 27.
`define AER_INT_MSG_NUM_27 5'h0



// Name:           CX_HDR_LOG_DEPTH_27
// Default:        0x1
// Values:         0x1, 0x2, 0x4
// Enabled:        CX_NFUNC > 27 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Feature Setting.
// 
// Header Log Depth
`define CX_HDR_LOG_DEPTH_27 3'h1


`define CX_MULTIPLE_HDR_REC_CAP_27 1'h0

//-/ END:   AER CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PM CAPABILITIES CONFIGURATION


// Name:           PME_SUPPORT_27
// Default:        0x1b
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 27
// Parameter Type: Register Default Setting
// 
// Default value for the PME_Support field in the Power Management Capabilities Register. Function 27.
`define PME_SUPPORT_27 5'h1b


// Name:           D1_SUPPORT_27
// Default:        true
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 27
// Parameter Type: Register Default Setting
// 
// Default value for the D1 Support bit in the Power Management Capabilities Register. Function 27.
`define D1_SUPPORT_27 1'h1


// Name:           D2_SUPPORT_27
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 27
// Parameter Type: Register Default Setting
// 
// Default value for the D2 Support bit in the Power Management Capabilities Register. Function 27.
`define D2_SUPPORT_27 1'h0


// Name:           DEV_SPEC_INIT_27
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 27
// Parameter Type: Register Default Setting
// 
// Default value for the Device Specific Initialization (DSI) bit in the Power Management Capabilities Register. Function 
// 27.
`define DEV_SPEC_INIT_27 1'h0


// Name:           AUX_CURRENT_27
// Default:        375mA
// Values:         0mA (0x0), 55mA (0x1), 100mA (0x2), 160mA (0x3), 220mA (0x4), 270mA 
//                 (0x5), 320mA (0x6), 375mA (0x7)
// Enabled:        CX_NFUNC > 27
// Parameter Type: Register Default Setting
// 
// Default value for the Aux Current field in the Power Management Capabilities Register. Function 27.
`define AUX_CURRENT_27 3'h7


// Name:           DEFAULT_NO_SOFT_RESET_27
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 27
// Parameter Type: Register Default Setting
// 
// Default value for the No Soft Reset bit in the Power Management Control and Status Register. When set, you should not 
// reset any controller registers when transitioning from D3hot to D0. Therefore, you should not assert the non_sticky_rst_n 
// and sticky_rst_n inputs. Function 27.
`define DEFAULT_NO_SOFT_RESET_27 1'h0

//-/ END:   PM CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PCI BASIC CONFIGURATION


// Name:           CX_DEVICE_ID_27
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 27
// Parameter Type: Register Default Setting
// 
// Default value for the Device ID field in the Device ID and Vendor ID Register. Function 27.
`define CX_DEVICE_ID_27 16'h0


// Name:           CX_VENDOR_ID_27
// Default:        0x16c3
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 27
// Parameter Type: Register Default Setting
// 
// Default value for the Vendor ID field in the Device ID and Vendor ID Register. Function 27.
`define CX_VENDOR_ID_27 16'h16c3


// Name:           CX_REVISION_ID_27
// Default:        0x1
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 27
// Parameter Type: Register Default Setting
// 
// Default value for the Revision ID field in the Revision ID Register. Function 27.
`define CX_REVISION_ID_27 8'h1


// Name:           SUBSYS_DEV_ID_27
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 27
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 27.
`define SUBSYS_DEV_ID_27 16'h0


// Name:           SUBSYS_VENDOR_ID_27
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 27
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem Vendor ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 27.
`define SUBSYS_VENDOR_ID_27 16'h0


// Name:           BASE_CLASS_CODE_27
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 27
// Parameter Type: Register Default Setting
// 
// Default value for the Base Class Code field in the Class Code Register. Function 27.
`define BASE_CLASS_CODE_27 8'h0


// Name:           SUB_CLASS_CODE_27
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 27
// Parameter Type: Register Default Setting
// 
// Default value for the Subclass Code field in the Class Code Register. Function 27.
`define SUB_CLASS_CODE_27 8'h0


// Name:           IF_CODE_27
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 27
// Parameter Type: Register Default Setting
// 
// Default value for the Programming Interface field in the Class Code Register. Function 27.
`define IF_CODE_27 8'h0


// Name:           CARDBUS_CIS_PTR_27
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 27
// Parameter Type: Register Default Setting
// 
// Default value for the CardBus CIS Pointer Register. Function 27.
`define CARDBUS_CIS_PTR_27 16'h0


// Name:           INT_PIN_MAPPING_27
// Default:        INTA
// Values:         None (0x0), INTA (0x1), INTB (0x2), INTC (0x3), INTD (0x4)
// Enabled:        CX_NFUNC > 27
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Pin Register. Function 27.
`define INT_PIN_MAPPING_27 8'h1


// Name:           IO_DECODE_32_27
// Default:        16-bit
// Values:         16-bit (0x0), 32-bit (0x1)
// Enabled:        CX_NFUNC > 27
// Parameter Type: Register Default Setting
// 
// Default value for the 32-Bit I/O Space bit in the I/O Base and I/O Limit Register. Function 27.
`define IO_DECODE_32_27 1'h0


// Name:           MEM_DECODE_64_27
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x1)
// Enabled:        CX_NFUNC > 27
// Parameter Type: Register Default Setting
// 
// Default value for the 64-Bit Memory Addressing bit in the Prefetchable Memory Base and Limit Register. Function 27.
`define MEM_DECODE_64_27 1'h0


// Name:           ROM_BAR_ENABLED_27
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 27
// Parameter Type: Register Default Setting
// 
// Include the expansion ROM BAR registers. Function 27.
`define ROM_BAR_ENABLED_27 1'h1


`define DEFAULT_ROM_BAR_ENABLED_27 1'h1


// Name:           ROM_MASK_27
// Default:        0xffff
// Values:         0x7ff, ..., 0xffffff
// Enabled:        CX_NFUNC > 27 && ROM_BAR_ENABLED_27==1
// Parameter Type: Register Default Setting
// 
// Determines the default of the Expansion ROM BAR Mask register. Function 27. 
//  - The BAR Mask register specifies which bits of the Expansion ROM BAR are non-writable by host software, which 
//  determines the size of the BAR. 
//  - The maximum value for ROM_MASK_N is 0xFFFFFF because the maximum space that can be claimed by an Expansion ROM BAR 
//  is 16 MB. 
//  - For example: 32'hFFFF =BAR size of 2^16.
`define ROM_MASK_27 32'hffff


// Name:           ROM_MASK_WRITABLE_27
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 27 && ROM_BAR_ENABLED_27==1
// Parameter Type: Feature Setting
// 
// Determines if the Expansion ROM BAR Mask register for function 27 is writable by application software. If writing to a 
// Expansion ROM BAR Mask register is enabled, your application can write to the Expansion ROM BAR Mask register through the 
// DBI by asserting dbi_cs2 in addition to dbi_cs.
`define ROM_MASK_WRITABLE_27 1'h0


// Name:           ROM_FUNC27_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 27 && ROM_BAR_ENABLED_27==1 && TRGT1_POPULATE==1))
// Parameter Type: Register Default Setting
// 
// Direct incoming requests that pass filtering and match the Expansion ROM BAR of function 27 to either RTRGT0 or RTRGT1. 
//  - For example, setting ROM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for the Expansion ROM BAR of function 
//  0 to RTRGT1. 
//  - If TRGT1_POPULATE =0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define ROM_FUNC27_TARGET_MAP 1'h1


// Name:           CX_PCI_HEADER_DEFAULTS_VISIBLE_27
// Default:        0
// Values:         0, 1
// Parameter Type: Register Default Setting
// 
// Select here if you want to configure the defaults for the other PCI Standard Header registers for function 27. 
//  An extra window will appear under this page. To access it, click the plus/minus symbol in the hierarchy view on the 
//  left panel. 
//  This is optional but not usually recommended. 
//  You can also change these register defaults using the DBI before (or after) the link comes up.
`define CX_PCI_HEADER_DEFAULTS_VISIBLE_27 0

//-/ END:   PCI BASIC CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: BAR CONFIGURATION


// Name:           BAR0_ENABLED_27
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 27
// Parameter Type: Feature Setting
// 
// Include the BAR0 registers for function 27.
`define BAR0_ENABLED_27 1'h1


`define DEFAULT_BAR0_ENABLED_27 1'h1


// Name:           MEM0_SPACE_DECODER_27
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 27 && BAR0_ENABLED_27==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 27.
`define MEM0_SPACE_DECODER_27 1'h0


// Name:           PREFETCHABLE0_27
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 27 && BAR0_ENABLED_27==1 && MEM0_SPACE_DECODER_27==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 27.
`define PREFETCHABLE0_27 1'h0


// Name:           BAR0_TYPE_27
// Default:        64-bit ((MEM0_SPACE_DECODER_27==1 || BAR0_ENABLED_27==0) ? 0 : 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 27 && BAR0_ENABLED_27==1 && MEM0_SPACE_DECODER_27==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 27.
`define BAR0_TYPE_27 2'h2


// Name:           BAR0_SIZING_SCHEME_27
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 27 && BAR0_ENABLED_27==1
// Parameter Type: Feature Setting
// 
// BAR0 Function 27 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR0_SIZING_SCHEME_27 2'h0


// Name:           CX_BAR0_RESIZABLE_27
// Default:        0x0 ((BAR0_SIZING_SCHEME_27==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR0_ENABLED_27==1) && (MEM0_SPACE_DECODER_27==0)
// Parameter Type: Feature Setting
// 
// Defines BAR0 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR0 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR0_RESIZABLE_27 1'h0


// Name:           CX_BAR0_RESOURCE_AVAIL_27
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 27 && CX_BAR0_RESIZABLE_27==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR0 of function 27. 
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
// Example: 0x00000030 indicates that BAR0 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR0_RESOURCE_AVAIL_27 64'h10


// Name:           BAR0_MASK_WRITABLE_27
// Default:        0x0 ((BAR0_ENABLED_27==1 && BAR0_SIZING_SCHEME_27 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 27 && BAR0_ENABLED_27==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR0 Mask through DBI
`define BAR0_MASK_WRITABLE_27 1'h0


// Name:           BAR0_MASK_27
// Default:        0xfffff (CX_BAR0_RESIZABLE_27==1 ? [calc_bar_mask 
//                 CX_BAR0_RESOURCE_AVAIL_27] : MEM0_SPACE_DECODER_27==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 27 && BAR0_ENABLED_27==1 && MEM0_SPACE_DECODER_27==0 && 
//                 CX_BAR0_RESIZABLE_27==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR0 Mask register of function 27. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR0_MASK_27 64'hfffff


// Name:           MEM_FUNC27_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 27 && BAR0_ENABLED_27==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_0 of function 27 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming Requests for BAR0 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC27_BAR0_TARGET_MAP 1'h1


// Name:           BAR1_ENABLED_27
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 27 && BAR0_TYPE_27==0
// Parameter Type: Feature Setting
// 
// Include the BAR1 registers for function 27.
`define BAR1_ENABLED_27 1'h0


`define DEFAULT_BAR1_ENABLED_27 1'h0


// Name:           MEM1_SPACE_DECODER_27
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 27 && BAR1_ENABLED_27==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 27.
`define MEM1_SPACE_DECODER_27 1'h0


// Name:           PREFETCHABLE1_27
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 27 && BAR1_ENABLED_27==1 && MEM1_SPACE_DECODER_27==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 27.
`define PREFETCHABLE1_27 1'h0


// Name:           BAR1_TYPE_27
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 27.
`define BAR1_TYPE_27 2'h0


// Name:           BAR1_SIZING_SCHEME_27
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 27 && BAR1_ENABLED_27==1
// Parameter Type: Feature Setting
// 
// BAR1 Function 27 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR1_SIZING_SCHEME_27 2'h0


// Name:           CX_BAR1_RESIZABLE_27
// Default:        0x0 ((BAR1_SIZING_SCHEME_27==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR1_ENABLED_27==1) && (MEM1_SPACE_DECODER_27==0)
// Parameter Type: Feature Setting
// 
// Defines BAR1 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR1 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR1_RESIZABLE_27 1'h0


// Name:           CX_BAR1_RESOURCE_AVAIL_27
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 27 && CX_BAR1_RESIZABLE_27==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR1 of function 27. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR1 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR1_RESOURCE_AVAIL_27 32'h10


// Name:           BAR1_MASK_WRITABLE_27
// Default:        0x0 ((BAR1_ENABLED_27==1 && BAR1_SIZING_SCHEME_27 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 27 && BAR1_ENABLED_27==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR1 Mask through DBI
`define BAR1_MASK_WRITABLE_27 1'h0


// Name:           BAR1_MASK_27
// Default:        0xffff (CX_BAR1_RESIZABLE_27==1 ? [calc_bar_mask 
//                 CX_BAR1_RESOURCE_AVAIL_27] : MEM1_SPACE_DECODER_27==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 27 && BAR1_ENABLED_27==1 && MEM1_SPACE_DECODER_27==0 && 
//                 CX_BAR1_RESIZABLE_27==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR1 Mask register of function 27. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR1_MASK_27 32'hffff


// Name:           MEM_FUNC27_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 27 && BAR1_ENABLED_27==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_1 of function 27 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR1_TARGET_MAP to 1 maps all incoming Requests for BAR1 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC27_BAR1_TARGET_MAP 1'h1


// Name:           BAR2_ENABLED_27
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 27
// Parameter Type: Feature Setting
// 
// Include the BAR2 registers for function 27.
`define BAR2_ENABLED_27 1'h1


`define DEFAULT_BAR2_ENABLED_27 1'h1


// Name:           MEM2_SPACE_DECODER_27
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 27 && BAR2_ENABLED_27==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 27.
`define MEM2_SPACE_DECODER_27 1'h0


// Name:           PREFETCHABLE2_27
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 27 && BAR2_ENABLED_27==1 && MEM2_SPACE_DECODER_27==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 27.
`define PREFETCHABLE2_27 1'h0


// Name:           BAR2_TYPE_27
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 27 && BAR2_ENABLED_27==1 && MEM2_SPACE_DECODER_27==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 27.
`define BAR2_TYPE_27 2'h0


// Name:           BAR2_SIZING_SCHEME_27
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 27 && BAR2_ENABLED_27==1
// Parameter Type: Feature Setting
// 
// BAR2 Function 27 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR2_SIZING_SCHEME_27 2'h0


// Name:           CX_BAR2_RESIZABLE_27
// Default:        0x0 ((BAR2_SIZING_SCHEME_27==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR2_ENABLED_27==1) && (MEM2_SPACE_DECODER_27==0)
// Parameter Type: Feature Setting
// 
// Defines BAR2 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR2 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR2_RESIZABLE_27 1'h0


// Name:           CX_BAR2_RESOURCE_AVAIL_27
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 27 && CX_BAR2_RESIZABLE_27==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR2 of function 27. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR2 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR2_RESOURCE_AVAIL_27 64'h10


// Name:           BAR2_MASK_WRITABLE_27
// Default:        0x0 ((BAR2_ENABLED_27==1 && BAR2_SIZING_SCHEME_27 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 27 && BAR2_ENABLED_27==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR2 Mask through DBI
`define BAR2_MASK_WRITABLE_27 1'h0


// Name:           BAR2_MASK_27
// Default:        0xfffff (CX_BAR2_RESIZABLE_27==1 ? [calc_bar_mask 
//                 CX_BAR2_RESOURCE_AVAIL_27] : MEM2_SPACE_DECODER_27==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 27 && BAR2_ENABLED_27==1 && MEM2_SPACE_DECODER_27==0 && 
//                 CX_BAR2_RESIZABLE_27==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR2 Mask register of function 27. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR2_MASK_27 64'hfffff


// Name:           MEM_FUNC27_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 27 && BAR2_ENABLED_27==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_2 of function 27 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR2_TARGET_MAP to 1 maps all incoming requests for BAR2 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC27_BAR2_TARGET_MAP 1'h1


// Name:           BAR3_ENABLED_27
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 27 && BAR2_TYPE_27==0
// Parameter Type: Feature Setting
// 
// Include the BAR3 registers for function 27.
`define BAR3_ENABLED_27 1'h0



`define DEFAULT_BAR3_ENABLED_27 1'h0


// Name:           MEM3_SPACE_DECODER_27
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 27 && BAR3_ENABLED_27==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 27.
`define MEM3_SPACE_DECODER_27 1'h0


// Name:           PREFETCHABLE3_27
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 27 && BAR3_ENABLED_27==1 && MEM3_SPACE_DECODER_27==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 27.
`define PREFETCHABLE3_27 1'h0


// Name:           BAR3_TYPE_27
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 27.
`define BAR3_TYPE_27 2'h0


// Name:           BAR3_SIZING_SCHEME_27
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 27 && BAR3_ENABLED_27==1
// Parameter Type: Feature Setting
// 
// BAR3 Function 27 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR3_SIZING_SCHEME_27 2'h0


// Name:           CX_BAR3_RESIZABLE_27
// Default:        0x0 ((BAR3_SIZING_SCHEME_27==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR3_ENABLED_27==1) && (MEM3_SPACE_DECODER_27==0)
// Parameter Type: Feature Setting
// 
// Defines BAR3 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR3 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR3_RESIZABLE_27 1'h0


// Name:           CX_BAR3_RESOURCE_AVAIL_27
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 27 && CX_BAR3_RESIZABLE_27==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR3 of function 27. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR3 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR3_RESOURCE_AVAIL_27 32'h10


// Name:           BAR3_MASK_WRITABLE_27
// Default:        0x0 ((BAR3_ENABLED_27==1 && BAR3_SIZING_SCHEME_27 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 27 && BAR3_ENABLED_27==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR3 Mask through DBI
`define BAR3_MASK_WRITABLE_27 1'h0


// Name:           BAR3_MASK_27
// Default:        0xffff (CX_BAR3_RESIZABLE_27==1 ? [calc_bar_mask 
//                 CX_BAR3_RESOURCE_AVAIL_27] : MEM3_SPACE_DECODER_27==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 27 && BAR3_ENABLED_27==1 && MEM3_SPACE_DECODER_27==0 && 
//                 CX_BAR3_RESIZABLE_27==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR3 Mask register of function 27. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR3_MASK_27 32'hffff


// Name:           MEM_FUNC27_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 27 && BAR3_ENABLED_27==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_3 of function 27 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR3_TARGET_MAP to 1 maps all incoming requests for BAR3 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC27_BAR3_TARGET_MAP 1'h1


// Name:           BAR4_ENABLED_27
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 27
// Parameter Type: Feature Setting
// 
// Include the BAR4 registers for function 27.
`define BAR4_ENABLED_27 1'h1


`define DEFAULT_BAR4_ENABLED_27 1'h1



// Name:           MEM4_SPACE_DECODER_27
// Default:        I/O (BAR4_ENABLED_27==1)
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 27 && BAR4_ENABLED_27==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 27.
`define MEM4_SPACE_DECODER_27 1'h1


// Name:           PREFETCHABLE4_27
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 27 && BAR4_ENABLED_27==1 && MEM4_SPACE_DECODER_27==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 27.
`define PREFETCHABLE4_27 1'h0


// Name:           BAR4_TYPE_27
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 27 && BAR4_ENABLED_27==1 && MEM4_SPACE_DECODER_27==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 27.
`define BAR4_TYPE_27 2'h0


// Name:           BAR4_SIZING_SCHEME_27
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 27 && BAR4_ENABLED_27==1
// Parameter Type: Feature Setting
// 
// BAR4  Function 27 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR4_SIZING_SCHEME_27 2'h0


// Name:           CX_BAR4_RESIZABLE_27
// Default:        0x0 ((BAR4_SIZING_SCHEME_27==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR4_ENABLED_27==1) && (MEM4_SPACE_DECODER_27==0)
// Parameter Type: Feature Setting
// 
// Defines BAR4 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR4 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR4_RESIZABLE_27 1'h0


// Name:           CX_BAR4_RESOURCE_AVAIL_27
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 27 &&  CX_BAR4_RESIZABLE_27==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR4 of function 27. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR4 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR4_RESOURCE_AVAIL_27 64'h10


// Name:           BAR4_MASK_WRITABLE_27
// Default:        0x0 ((BAR4_ENABLED_27==1 && BAR4_SIZING_SCHEME_27 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 27 && BAR4_ENABLED_27==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR4 Mask through DBI
`define BAR4_MASK_WRITABLE_27 1'h0


// Name:           BAR4_MASK_27
// Default:        0xff (CX_BAR4_RESIZABLE_27==1 ? [calc_bar_mask 
//                 CX_BAR4_RESOURCE_AVAIL_27] : MEM4_SPACE_DECODER_27==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 27 && BAR4_ENABLED_27==1 && MEM4_SPACE_DECODER_27==0 && 
//                 CX_BAR4_RESIZABLE_27==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR4 Mask register of function 27. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR4_MASK_27 64'hff


// Name:           MEM_FUNC27_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 27 && BAR4_ENABLED_27==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_4 of function 27 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR4_TARGET_MAP to 1 maps all incoming requests for BAR4 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC27_BAR4_TARGET_MAP 1'h1


// Name:           BAR5_ENABLED_27
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 27 && BAR4_TYPE_27==0
// Parameter Type: Feature Setting
// 
// Include the BAR5 registers for function 27.
`define BAR5_ENABLED_27 1'h0


`define DEFAULT_BAR5_ENABLED_27 1'h0


// Name:           MEM5_SPACE_DECODER_27
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 27 && BAR5_ENABLED_27==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 27.
`define MEM5_SPACE_DECODER_27 1'h0


// Name:           PREFETCHABLE5_27
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 27 && BAR5_ENABLED_27==1 && MEM5_SPACE_DECODER_27==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 27.
`define PREFETCHABLE5_27 1'h0


// Name:           BAR5_TYPE_27
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 27.
`define BAR5_TYPE_27 2'h0


// Name:           BAR5_SIZING_SCHEME_27
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 27 && BAR5_ENABLED_27==1
// Parameter Type: Feature Setting
// 
// BAR5  Function 27 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR5_SIZING_SCHEME_27 2'h0


// Name:           CX_BAR5_RESIZABLE_27
// Default:        0x0 ((BAR5_SIZING_SCHEME_27==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR5_ENABLED_27==1) && (MEM5_SPACE_DECODER_27==0)
// Parameter Type: Feature Setting
// 
// Defines BAR5 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR5 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR5_RESIZABLE_27 1'h0


// Name:           CX_BAR5_RESOURCE_AVAIL_27
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 27 && CX_BAR5_RESIZABLE_27==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR5 of function 27. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR5 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR5_RESOURCE_AVAIL_27 32'h10


// Name:           BAR5_MASK_WRITABLE_27
// Default:        0x0 ((BAR5_ENABLED_27==1 && BAR5_SIZING_SCHEME_27 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 27 && BAR5_ENABLED_27==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR5 Mask through DBI
`define BAR5_MASK_WRITABLE_27 1'h0


// Name:           BAR5_MASK_27
// Default:        0xffff (CX_BAR5_RESIZABLE_27==1 ? [calc_bar_mask 
//                 CX_BAR5_RESOURCE_AVAIL_27] : MEM5_SPACE_DECODER_27==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 27 && BAR5_ENABLED_27==1 && MEM5_SPACE_DECODER_27==0 && 
//                 CX_BAR5_RESIZABLE_27==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR5 Mask register of function 27. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR5_MASK_27 32'hffff


// Name:           MEM_FUNC27_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 27 && BAR5_ENABLED_27==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_5 of function 27 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR5_TARGET_MAP to 1 maps all incoming requests for BAR5 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC27_BAR5_TARGET_MAP 1'h1


`define FUNC27_BARSIZE_32 128'h0


`define FUNC27_BARSIZE 128'h0


`define FUNC27_BAR0_BARSIZE_TRGT1 128'h0


`define FUNC27_BAR2_BARSIZE_TRGT1 128'h0


`define FUNC27_BAR4_BARSIZE_TRGT1 128'h0


`define FUNC27_BAR0_TRGT1_ADDR_WIDTH 1


`define FUNC27_BAR2_TRGT1_ADDR_WIDTH 1


`define FUNC27_BAR4_TRGT1_ADDR_WIDTH 1


// Name:         CX_NUM_RBARS_27
// Default:      0 ([calc_num_rbars CX_BAR0_RESIZABLE_27 CX_BAR1_RESIZABLE_27 
//               CX_BAR2_RESIZABLE_27 CX_BAR3_RESIZABLE_27 CX_BAR4_RESIZABLE_27 
//               CX_BAR5_RESIZABLE_27])
// Values:       -2147483648, ..., 2147483647
// 
// Number of resizable BARs
`define CX_NUM_RBARS_27 0

//-/ END:   BAR CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SR-IOV CAPABILITIES CONFIGURATION


// Name:           CX_VF_DEPENDENCY_LINK_27
// Default:        0x27
// Values:         0x0, ..., 0xff
// Enabled:        CX_VF_DEPENDENCY_LINK_SUPP && (CX_NFUNC > 27) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Specifies the 8-bit VF dependency link for PF27. Valid only if CX_VF_DEPENDENCY_LINK_SUPP=1.
`define CX_VF_DEPENDENCY_LINK_27 8'h27


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER1_27
// Default:        0x2 ((CX_NFUNC>=17) ? 32 : (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : 
//                 (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF27 in an ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER1_27 16'h2


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER0_27
// Default:        0x100
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF27 
//  in a non-ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER0_27 16'h100


// Name:           VF_STRIDE_ARI_CAP_HIER1_27
// Default:        0x2 (CX_VF_STRIDE_ALWAYS_ONE) ? 1 : ((CX_NFUNC>=17) ? 32 : 
//                 (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF27 in an ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER1_27 16'h2


// Name:           VF_STRIDE_ARI_CAP_HIER0_27
// Default:        0x100 ((CX_VF_STRIDE_ALWAYS_ONE) ? 0x0001 : 0x0100)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF27 in a non-ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER0_27 16'h100


// Name:           CX_VF_DEVICE_ID_27
// Default:        0x0 (CX_DEVICE_ID_27)
// Values:         0x0, ..., 0xffff
// Enabled:        (CX_NFUNC > 27) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 16-bit virtual function Device ID for PF27. 
//  It might be different from the physical function's.
`define CX_VF_DEVICE_ID_27 16'h0


// Name:           CX_VF_SUPP_PAGE_SIZE_27
// Default:        0x553
// Values:         0x553, ..., 0xffff
// Enabled:        (CX_NFUNC > 27) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 32-bit supported page sizes for virtual functions for PF27
`define CX_VF_SUPP_PAGE_SIZE_27 32'h553


// Name:           CX_ARI_CAP_HIER_PRSVD_27
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Specifies if ARI Capable Hierarchy bit is preserved across certain power state transitions 
//  Only present in PF0. Read Only Zero in this PF27.
`define CX_ARI_CAP_HIER_PRSVD_27 1'h0

//-/===========================================
//-/ START: VF BAR CONFIGURATION


// Name:           VF_BAR0_ENABLED_27
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 27)
// Parameter Type: Feature Setting
// 
// Include the VF BAR0 registers in PF27
`define VF_BAR0_ENABLED_27 1'h1


`define VF_DEFAULT_BAR0_ENABLED_27 1'h1


// Name:           VF_MEM0_SPACE_DECODER_27
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR0_ENABLED_27 && CX_SRIOV_ENABLE && (CX_NFUNC > 27)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Space Indicator 
//  ALWAYS set to Memory for Virtual Functions
`define VF_MEM0_SPACE_DECODER_27 1'h0


// Name:           VF_PREFETCHABLE0_27
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_27==1 && VF_MEM0_SPACE_DECODER_27==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 27)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Prefetchable 
//  When set indicates VF BAR0 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE0_27 1'h0


// Name:           VF_BAR0_TYPE_27
// Default:        64-bit ((VF_MEM0_SPACE_DECODER_27==1 || VF_BAR0_ENABLED_27==0) ? 0 
//                 : 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR0_ENABLED_27==1 && VF_MEM0_SPACE_DECODER_27==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 27)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 27; (bits [2:1] for a memory BAR).
`define VF_BAR0_TYPE_27 2'h2


// Name:           VF_BAR0_MASK_WRITABLE_27
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_27==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 27)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR0_MASK_WRITABLE_27 1'h0


// Name:           VF_BAR0_MASK_27
// Default:        0xfffff (VF_MEM0_SPACE_DECODER_27==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR0_ENABLED_27==1 && VF_MEM0_SPACE_DECODER_27==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 27)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Mask 
//  Determines the default of the VF BAR Mask register for PF27. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR0_MASK_27 64'hfffff


// Name:           VF_MEM_FUNC27_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR0_ENABLED_27==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE 
//                 && (CX_NFUNC > 27)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF27 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC27_BAR0_TARGET_MAP 1'h1


// Name:           VF_BAR1_ENABLED_27
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        (VF_BAR0_TYPE_27==0)  && CX_SRIOV_ENABLE && (CX_NFUNC > 27)
// Parameter Type: Feature Setting
// 
// Include the VF BAR1 registers in PF27
`define VF_BAR1_ENABLED_27 1'h0


`define VF_DEFAULT_BAR1_ENABLED_27 1'h0


// Name:           VF_MEM1_SPACE_DECODER_27
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR1_ENABLED_27==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 27)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Space Indicator
`define VF_MEM1_SPACE_DECODER_27 1'h0


// Name:           VF_PREFETCHABLE1_27
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_27==1 && VF_MEM1_SPACE_DECODER_27==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 27)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Prefetchable 
//  When set indicates VF BAR1 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE1_27 1'h0


// Name:           VF_BAR1_TYPE_27
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 27; (bits [2:1] for a memory BAR).
`define VF_BAR1_TYPE_27 2'h0


// Name:           VF_BAR1_MASK_WRITABLE_27
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_27==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 27)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR1_MASK_WRITABLE_27 1'h0


// Name:           VF_BAR1_MASK_27
// Default:        0xffff (VF_MEM1_SPACE_DECODER_27==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR1_ENABLED_27==1 && VF_MEM1_SPACE_DECODER_27==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 27)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Mask 
//  Determines the default of the VF BAR Mask register for PF27. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR1_MASK_27 32'hffff


// Name:           VF_MEM_FUNC27_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR1_ENABLED_27==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE 
//                 && (CX_NFUNC > 27)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF27 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC27_BAR1_TARGET_MAP 1'h1


// Name:           VF_BAR2_ENABLED_27
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 27)
// Parameter Type: Feature Setting
// 
// Include the VF BAR2 registers in PF27
`define VF_BAR2_ENABLED_27 1'h1


`define VF_DEFAULT_BAR2_ENABLED_27 1'h1


// Name:           VF_MEM2_SPACE_DECODER_27
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR2_ENABLED_27==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 27)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Memory Space Indicator
`define VF_MEM2_SPACE_DECODER_27 1'h0


// Name:           VF_PREFETCHABLE2_27
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_27==1 && VF_MEM2_SPACE_DECODER_27==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 27)
// Parameter Type: Register Default Setting
// 
// BAR2 Memory Prefetchable 
//  When set indicates VF BAR2 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE2_27 1'h0


// Name:           VF_BAR2_TYPE_27
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR2_ENABLED_27==1 && VF_MEM2_SPACE_DECODER_27==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 27)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 27; (bits [2:1] for a memory BAR).
`define VF_BAR2_TYPE_27 2'h0


// Name:           VF_BAR2_MASK_WRITABLE_27
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_27==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 27)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR2_MASK_WRITABLE_27 1'h0


// Name:           VF_BAR2_MASK_27
// Default:        0xfffff (VF_MEM2_SPACE_DECODER_27==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR2_ENABLED_27==1 && VF_MEM2_SPACE_DECODER_27==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 27)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Mask 
//  Determines the default of the VF BAR Mask register for PF27. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR2_MASK_27 64'hfffff


// Name:           VF_MEM_FUNC27_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR2_ENABLED_27==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 27)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF27 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC27_BAR2_TARGET_MAP 1'h1


// Name:           VF_BAR3_ENABLED_27
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_TYPE_27==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 27)
// Parameter Type: Feature Setting
// 
// Include the VF BAR3 registers in PF27
`define VF_BAR3_ENABLED_27 1'h0


`define VF_DEFAULT_BAR3_ENABLED_27 1'h0


// Name:           VF_MEM3_SPACE_DECODER_27
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR3_ENABLED_27==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 27)
// Parameter Type: Register Default Setting
// 
// BAR3 Memory Space Indicator
`define VF_MEM3_SPACE_DECODER_27 1'h0


// Name:           VF_PREFETCHABLE3_27
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_27==1 && VF_MEM3_SPACE_DECODER_27==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 27)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Memory Prefetchable 
//  When set indicates VF BAR3 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE3_27 1'h0


// Name:           VF_BAR3_TYPE_27
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 27; (bits [2:1] for a memory BAR).
`define VF_BAR3_TYPE_27 2'h0


// Name:           VF_BAR3_MASK_WRITABLE_27
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_27==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 27)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR3_MASK_WRITABLE_27 1'h0


// Name:           VF_BAR3_MASK_27
// Default:        0xffff (VF_MEM3_SPACE_DECODER_27==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR3_ENABLED_27==1 && VF_MEM3_SPACE_DECODER_27==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 27)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Mask 
//  Determines the default of the VF BAR Mask register for PF27. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR3_MASK_27 32'hffff


// Name:           VF_MEM_FUNC27_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR3_ENABLED_27==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 27)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF27 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC27_BAR3_TARGET_MAP 1'h1


// Name:           VF_BAR4_ENABLED_27
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 27)
// Parameter Type: Feature Setting
// 
// Include the VF BAR4 registers in PF27
`define VF_BAR4_ENABLED_27 1'h1


`define VF_DEFAULT_BAR4_ENABLED_27 1'h1


// Name:           VF_MEM4_SPACE_DECODER_27
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR4_ENABLED_27==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 27)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Space Indicator
`define VF_MEM4_SPACE_DECODER_27 1'h0


// Name:           VF_PREFETCHABLE4_27
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_27==1 && VF_MEM4_SPACE_DECODER_27==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 27)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Prefetchable 
//  When set indicates VF BAR4 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE4_27 1'h0


// Name:           VF_BAR4_TYPE_27
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR4_ENABLED_27==1 && VF_MEM4_SPACE_DECODER_27==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 27)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 27; (bits [2:1] for a memory BAR).
`define VF_BAR4_TYPE_27 2'h0


// Name:           VF_BAR4_MASK_WRITABLE_27
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_27==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 27)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR4_MASK_WRITABLE_27 1'h0


// Name:           VF_BAR4_MASK_27
// Default:        0xfff (VF_MEM4_SPACE_DECODER_27==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR4_ENABLED_27==1 && VF_MEM4_SPACE_DECODER_27==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 27)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Mask 
//  Determines the default of the VF BAR Mask register for PF27. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR4_MASK_27 64'hfff


// Name:           VF_MEM_FUNC27_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR4_ENABLED_27==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 27)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF27 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC27_BAR4_TARGET_MAP 1'h1


// Name:           VF_BAR5_ENABLED_27
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_TYPE_27==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 27)
// Parameter Type: Feature Setting
// 
// Include the VF BAR5 registers in PF27
`define VF_BAR5_ENABLED_27 1'h0


`define VF_DEFAULT_BAR5_ENABLED_27 1'h0


// Name:           VF_MEM5_SPACE_DECODER_27
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR5_ENABLED_27==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 27)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Space Indicator
`define VF_MEM5_SPACE_DECODER_27 1'h0


// Name:           VF_PREFETCHABLE5_27
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_27==1 && VF_MEM5_SPACE_DECODER_27==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 27)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Prefetchable 
//  When set indicates VF BAR5 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE5_27 1'h0


// Name:           VF_BAR5_TYPE_27
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 27; (bits [2:1] for a memory BAR).
`define VF_BAR5_TYPE_27 2'h0


// Name:           VF_BAR5_MASK_WRITABLE_27
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_27==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 27)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR5_MASK_WRITABLE_27 1'h0


// Name:           VF_BAR5_MASK_27
// Default:        0xffff (VF_MEM5_SPACE_DECODER_27==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR5_ENABLED_27==1 && VF_MEM5_SPACE_DECODER_27==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 27)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Mask 
//  Determines the default of the VF BAR Mask register for PF27. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR5_MASK_27 32'hffff


// Name:           VF_MEM_FUNC27_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR5_ENABLED_27==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 27)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF27 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC27_BAR5_TARGET_MAP 1'h1


`define VF_FUNC27_BARSIZE_32 128'h101000


`define VF_FUNC27_BARSIZE 128'h201000

//-/ END:   VF BAR CONFIGURATION
//-/===========================================

//-/ END:   SR-IOV CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: TPH CAPABILITIES CONFIGURATION


// Name:           TPH_IVEC_27
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Interrupt Vector Mode. If set indicates that the function supports the Interrupt Vector 
// Mode of operation. Function 27.
`define TPH_IVEC_27 1'h0


// Name:           TPH_DS_27
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Device Specific Mode. If set indicates that the function supports the Device Specific Mode 
// of operation. Function 27.
`define TPH_DS_27 1'h0


// Name:           TPH_ST_TABLE_LOC_27
// Default:        Not Present
// Values:         Not Present (0), TPH Requester Capability Structure (1), MSI-X 
//                 Table Structure (2)
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_DS_27 || TPH_IVEC_27))
// Parameter Type: Feature Setting
// 
// TLP Processing Hints Steering Tag Table Location. Value indicates if and where the ST Table is located. Function 27.
`define TPH_ST_TABLE_LOC_27 0

//located in the TPH Requester Capability structure. Please reduce the ST Table Size for this mode of operation"

// Name:           TPH_ST_TABLE_SIZE_27
// Default:        1
// Values:         1, ..., 2048
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_ST_TABLE_LOC_27 != 0))
// Parameter Type: Feature Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define TPH_ST_TABLE_SIZE_27 1


`define TPH_ST_TABLE_DEPTH_27 0

//-/ END:   TPH CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: ATS CAPABILITIES CONFIGURATION


// Name:           ATS_INV_Q_DPTH_27
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// The number of Invalidate Requests that the Function can accept before putting backpressure on the upstream connection. A 
// value of 0 indicates the function can accept 32 Invalidate requests. Function 27.
`define ATS_INV_Q_DPTH_27 5'd0


// Name:           ATS_STU_27
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// This value indicates to the Function the minimum number of 4096-byte blocks that is indicated in a Translation 
// Completion or Invalidate Request. This is a power of 2 multiplier and the number of blocks is 2^STU. A value of 0 indicates 1 block 
// and a value of 31 indicates 2^31 blocks (or 8 TB total). Function 27.
`define ATS_STU_27 5'd0

//-/ END:   ATS CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PRS CAPABILITIES CONFIGURATION


// Name:           CX_PRS_OUTSTANDING_CAPACITY_VALUE_27
// Default:        0x1
// Values:         0x0, ..., 0xffffffff
// Enabled:        (CX_PRS_ENABLE==1) && (CX_NFUNC > 27)
// Parameter Type: Register Default Setting
// 
// Register default for PRS Outstanding Capacity in PF27. 
// For more details, see the PRS_OUTSTANDING_CAPACITY field in the PRS_REQ_CAPACITY_REG register.
`define CX_PRS_OUTSTANDING_CAPACITY_VALUE_27 32'h1

//-/ END:   PRS CAPABILITIES CONFIGURATION
//-/===========================================


//-/===========================================
//--- START: RN


// Name:           CX_RN_IMM_VALUE_27
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 27)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for PF27.
`define CX_RN_IMM_VALUE_27 1'h0


// Name:           CX_RN_IMM_D0_VALUE_27
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 27)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for PF27.
`define CX_RN_IMM_D0_VALUE_27 1'h0


// Name:           CX_RN_FRS_VALUE_27
// Default:        0x0 (CX_RN_FRS_SUPPORTED==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_FRS_SUPPORTED==1) && (CX_NFUNC > 27)
// Parameter Type: Feature Setting
// 
// Function Readiness Status messaging supported for function PF27.
`define CX_RN_FRS_VALUE_27 1'h0


// Name:           CX_RN_RTR_VALID_27
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 27)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF27.
`define CX_RN_RTR_VALID_27 1'h0


// Name:           CX_RN_RTR_DL_UP_VALUE_27
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 27)
// Parameter Type: Register Default Setting
// 
// Register default for RTR DL Up Time field in PF27.
`define CX_RN_RTR_DL_UP_VALUE_27 12'h0


// Name:           CX_RN_RTR_RESET_VALUE_27
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 27)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF27.
`define CX_RN_RTR_RESET_VALUE_27 12'h0


// Name:           CX_RN_RTR_D3D0_VALUE_27
// Default:        0x0
// Values:         0x0, ..., 0x80a
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 27)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF27.
`define CX_RN_RTR_D3D0_VALUE_27 12'h0


// Name:           CX_RN_RTR_FLR_VALUE_27
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_FLR_ENABLE==1) && (CX_NFUNC > 27)
// Parameter Type: Register Default Setting
// 
// Register default for RTR FLR Time field in PF27.
`define CX_RN_RTR_FLR_VALUE_27 12'h0


// Name:           VF_RN_IMM_VALUE_27
// Default:        0x0 (CX_RN_IMM_VALUE_27 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 27))
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for VFs in PF27.
`define VF_RN_IMM_VALUE_27 1'h0


// Name:           VF_RN_IMM_D0_VALUE_27
// Default:        0x0 (CX_RN_IMM_D0_VALUE_27 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 27))
// Parameter Type: Register Default Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for VFs in PF27.
`define VF_RN_IMM_D0_VALUE_27 1'h0


// Name:           VF_RN_RTR_VALID_27
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 27) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF27 VFs.
`define VF_RN_RTR_VALID_27 1'h0


// Name:           VF_RN_RTR_RESET_VALUE_27
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_27)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 27) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF27 VFS.
`define VF_RN_RTR_RESET_VALUE_27 12'h0


// Name:           VF_RN_RTR_D3D0_VALUE_27
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_27)
// Values:         0x0, ..., 0x80a
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 27) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF27 VFS.
`define VF_RN_RTR_D3D0_VALUE_27 12'h0


// Name:           VF_RN_RTR_FLR_VALUE_27
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_27)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 27) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF27 VFs.
`define VF_RN_RTR_FLR_VALUE_27 12'h0


// Name:           EXT_VF_RN_RTR_VALID_27
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 27) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF27 VFs.
`define EXT_VF_RN_RTR_VALID_27 1'h0


// Name:           EXT_VF_RN_RTR_RESET_VALUE_27
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_27)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 27) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF27 VFS.
`define EXT_VF_RN_RTR_RESET_VALUE_27 12'h0


// Name:           EXT_VF_RN_RTR_D3D0_VALUE_27
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_27)
// Values:         0x0, ..., 0x80a
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 27) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF27 VFS.
`define EXT_VF_RN_RTR_D3D0_VALUE_27 12'h0


// Name:           EXT_VF_RN_RTR_FLR_VALUE_27
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_27)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 27) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF27 VFs.
`define EXT_VF_RN_RTR_FLR_VALUE_27 12'h0

//-/ END:   RN
//-/===========================================

//-/ START: LN CAPABILITIES CONFIGURATION
//-/===========================================


// Name:           CX_LN_REG_MAX_VALUE_27
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 27))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_64_SUPPORTED field in the LNR_CAP_OFF register for PF27.
`define CX_LN_REG_MAX_VALUE_27 5'h0


// Name:           CX_LN_128_SUPPORTED_VALUE_27
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 27))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_128_SUPPORTED field in the LNR_CAP_OFF register for PF27.
`define CX_LN_128_SUPPORTED_VALUE_27 1'h0


// Name:           CX_LN_64_SUPPORTED_VALUE_27
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 27))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_REGISTRATION_MAX field in the LNR_CAP_OFF register for PF27.
`define CX_LN_64_SUPPORTED_VALUE_27 1'h0

//-/ END:   LN CAPABILITIES CONFIGURATION
//-/===========================================




//-/==========================================
//-/ End FUNC27 Config
//-/==========================================

//-/===========================================
//-/ Function 28 Configuration Registers
//-/ ==========================================


// Name:         FUNC_28
// Default:      0 ((CX_NFUNC > 28) ? 1 : 0)
// Values:       0, 1
// 
// This parameter indicates that Function 28 is present
// `define FUNC_28

//-/===========================================
//-/ START: PCI-E CAPABILITIES CONFIGURATION


// Name:           PCIE_CAP_INT_MSG_NUM_28
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 28
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Message Number field in the PCI Express Capabilities Register. Function 28.
`define PCIE_CAP_INT_MSG_NUM_28 5'h0


// Name:           SLOT_IMPLEMENTED_28
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_NFUNC > 28))
// Parameter Type: Register Default Setting
// 
// Indicates that the PCI Express link associated with this Port is connected to a slot. Function 28.
`define SLOT_IMPLEMENTED_28 1'h0


// Name:           DEFAULT_PHANTOM_FUNC_SUPPORTED_28
// Default:        0x0
// Values:         0x0, ..., 0x3
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_PHANTOM_FUNC_SUPPORTED_28 2'h0


// Name:           DEFAULT_EXT_TAG_FIELD_SUPPORTED_28
// Default:        0x0 (DEFAULT_EXT_TAG_FIELD_SUPPORTED_0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 28
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_EXT_TAG_FIELD_SUPPORTED_28 1'h0



// Name:           DEFAULT_ATT_BUTT_PRE_28
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 28
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Button is present
`define DEFAULT_ATT_BUTT_PRE_28 1'h0


// Name:           DEFAULT_ATT_IND_PRE_28
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 28
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Indicator is present
`define DEFAULT_ATT_IND_PRE_28 1'h0


// Name:           DEFAULT_PWR_IND_PRE_28
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 28
// Parameter Type: Register Default Setting
// 
// When set indicates that a Power Indicator is present
`define DEFAULT_PWR_IND_PRE_28 1'h0


// Name:           DEFAULT_NO_SNOOP_SUPPORTED_28
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 28
// Parameter Type: Register Default Setting
// 
// Default value for the Enable No Snoop bit in the Device Control Register. Function 28.
`define DEFAULT_NO_SNOOP_SUPPORTED_28 1'h0


// Name:           ROOT_RCB_28
// Default:        64-bit
// Values:         64-bit (0x0), 128-bit (0x1)
// Parameter Type: Register Default Setting
// 
// Default value for the Read Completion Boundary (RCB) bit in the Link Control Register.
`define ROOT_RCB_28 1'h0


//-/ END:   PCI-E CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: MSI-X CAPABILITIES CONFIGURATION


// Name:           MSIX_TABLE_SIZE_28
// Default:        0x0
// Values:         0x0, ..., 0x7ff
// Enabled:        CX_NFUNC > 28 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the MSI-X Table Size field in the MSI-X Control Register. Function 28.
`define MSIX_TABLE_SIZE_28 11'h0


// Name:           MSIX_TABLE_BIR_28
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 28 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table BAR Indicator Register (BIR) field in the MSI-X Table Offset and BIR Register. Function 28.
`define MSIX_TABLE_BIR_28 3'h0


// Name:           MSIX_TABLE_OFFSET_28
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 28 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table Offset field in the MSI-X Table Offset and BIR Register. Function 28.
`define MSIX_TABLE_OFFSET_28 29'h0


// Name:           MSIX_PBA_BIR_28
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 28 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Pending Bit Array (PBA) BIR field in the MSI-X PBA Offset and BIR Register. Function 28.
`define MSIX_PBA_BIR_28 7'h0


// Name:           MSIX_PBA_OFFSET_28
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 28 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the PBA Offset field in the MSI-X PBA Offset and BIR Register. Function 28.
`define MSIX_PBA_OFFSET_28 29'h0

//-/ END:   MSI-X CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SATA CAPABILITIES CONFIGURATION


// Name:         SATA_HBA_OFFSET_28
// Default:      0x0
// Values:       0x0, ..., 0xfffff
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA Offset. Base address of the SATA HBA registers, 
//  as an offset from the base address of the BAR indicated 
//  by the SATA BAR field.
`define SATA_HBA_OFFSET_28 20'h0


// Name:         SATA_BAR_28
// Default:      0x0
// Values:       0x0, ..., 0xf
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA BAR. The bar that maps to SATA HBA registers,
`define SATA_BAR_28 4'h0

//-/ END:   SATA CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: AER CAPABILITIES CONFIGURATION


// Name:           DEFAULT_ECRC_CHK_CAP_28
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 28 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Check Capable bit in the Advanced Capabilities and Control Register. Function 28.
`define DEFAULT_ECRC_CHK_CAP_28 1'h1


// Name:           DEFAULT_ECRC_GEN_CAP_28
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 28 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Generation Capability bit in the Advanced Capabilities and Control Register. Function 28.
`define DEFAULT_ECRC_GEN_CAP_28 1'h1


// Name:           AER_INT_MSG_NUM_28
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Parameter Type: Register Default Setting
// 
// Default value for the Advanced Error Interrupt Message Number field of the Root Error Status Register. Function 28.
`define AER_INT_MSG_NUM_28 5'h0



// Name:           CX_HDR_LOG_DEPTH_28
// Default:        0x1
// Values:         0x1, 0x2, 0x4
// Enabled:        CX_NFUNC > 28 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Feature Setting.
// 
// Header Log Depth
`define CX_HDR_LOG_DEPTH_28 3'h1


`define CX_MULTIPLE_HDR_REC_CAP_28 1'h0

//-/ END:   AER CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PM CAPABILITIES CONFIGURATION


// Name:           PME_SUPPORT_28
// Default:        0x1b
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 28
// Parameter Type: Register Default Setting
// 
// Default value for the PME_Support field in the Power Management Capabilities Register. Function 28.
`define PME_SUPPORT_28 5'h1b


// Name:           D1_SUPPORT_28
// Default:        true
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 28
// Parameter Type: Register Default Setting
// 
// Default value for the D1 Support bit in the Power Management Capabilities Register. Function 28.
`define D1_SUPPORT_28 1'h1


// Name:           D2_SUPPORT_28
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 28
// Parameter Type: Register Default Setting
// 
// Default value for the D2 Support bit in the Power Management Capabilities Register. Function 28.
`define D2_SUPPORT_28 1'h0


// Name:           DEV_SPEC_INIT_28
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 28
// Parameter Type: Register Default Setting
// 
// Default value for the Device Specific Initialization (DSI) bit in the Power Management Capabilities Register. Function 
// 28.
`define DEV_SPEC_INIT_28 1'h0


// Name:           AUX_CURRENT_28
// Default:        375mA
// Values:         0mA (0x0), 55mA (0x1), 100mA (0x2), 160mA (0x3), 220mA (0x4), 270mA 
//                 (0x5), 320mA (0x6), 375mA (0x7)
// Enabled:        CX_NFUNC > 28
// Parameter Type: Register Default Setting
// 
// Default value for the Aux Current field in the Power Management Capabilities Register. Function 28.
`define AUX_CURRENT_28 3'h7


// Name:           DEFAULT_NO_SOFT_RESET_28
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 28
// Parameter Type: Register Default Setting
// 
// Default value for the No Soft Reset bit in the Power Management Control and Status Register. When set, you should not 
// reset any controller registers when transitioning from D3hot to D0. Therefore, you should not assert the non_sticky_rst_n 
// and sticky_rst_n inputs. Function 28.
`define DEFAULT_NO_SOFT_RESET_28 1'h0

//-/ END:   PM CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PCI BASIC CONFIGURATION


// Name:           CX_DEVICE_ID_28
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 28
// Parameter Type: Register Default Setting
// 
// Default value for the Device ID field in the Device ID and Vendor ID Register. Function 28.
`define CX_DEVICE_ID_28 16'h0


// Name:           CX_VENDOR_ID_28
// Default:        0x16c3
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 28
// Parameter Type: Register Default Setting
// 
// Default value for the Vendor ID field in the Device ID and Vendor ID Register. Function 28.
`define CX_VENDOR_ID_28 16'h16c3


// Name:           CX_REVISION_ID_28
// Default:        0x1
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 28
// Parameter Type: Register Default Setting
// 
// Default value for the Revision ID field in the Revision ID Register. Function 28.
`define CX_REVISION_ID_28 8'h1


// Name:           SUBSYS_DEV_ID_28
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 28
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 28.
`define SUBSYS_DEV_ID_28 16'h0


// Name:           SUBSYS_VENDOR_ID_28
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 28
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem Vendor ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 28.
`define SUBSYS_VENDOR_ID_28 16'h0


// Name:           BASE_CLASS_CODE_28
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 28
// Parameter Type: Register Default Setting
// 
// Default value for the Base Class Code field in the Class Code Register. Function 28.
`define BASE_CLASS_CODE_28 8'h0


// Name:           SUB_CLASS_CODE_28
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 28
// Parameter Type: Register Default Setting
// 
// Default value for the Subclass Code field in the Class Code Register. Function 28.
`define SUB_CLASS_CODE_28 8'h0


// Name:           IF_CODE_28
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 28
// Parameter Type: Register Default Setting
// 
// Default value for the Programming Interface field in the Class Code Register. Function 28.
`define IF_CODE_28 8'h0


// Name:           CARDBUS_CIS_PTR_28
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 28
// Parameter Type: Register Default Setting
// 
// Default value for the CardBus CIS Pointer Register. Function 28.
`define CARDBUS_CIS_PTR_28 16'h0


// Name:           INT_PIN_MAPPING_28
// Default:        INTA
// Values:         None (0x0), INTA (0x1), INTB (0x2), INTC (0x3), INTD (0x4)
// Enabled:        CX_NFUNC > 28
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Pin Register. Function 28.
`define INT_PIN_MAPPING_28 8'h1


// Name:           IO_DECODE_32_28
// Default:        16-bit
// Values:         16-bit (0x0), 32-bit (0x1)
// Enabled:        CX_NFUNC > 28
// Parameter Type: Register Default Setting
// 
// Default value for the 32-Bit I/O Space bit in the I/O Base and I/O Limit Register. Function 28.
`define IO_DECODE_32_28 1'h0


// Name:           MEM_DECODE_64_28
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x1)
// Enabled:        CX_NFUNC > 28
// Parameter Type: Register Default Setting
// 
// Default value for the 64-Bit Memory Addressing bit in the Prefetchable Memory Base and Limit Register. Function 28.
`define MEM_DECODE_64_28 1'h0


// Name:           ROM_BAR_ENABLED_28
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 28
// Parameter Type: Register Default Setting
// 
// Include the expansion ROM BAR registers. Function 28.
`define ROM_BAR_ENABLED_28 1'h1


`define DEFAULT_ROM_BAR_ENABLED_28 1'h1


// Name:           ROM_MASK_28
// Default:        0xffff
// Values:         0x7ff, ..., 0xffffff
// Enabled:        CX_NFUNC > 28 && ROM_BAR_ENABLED_28==1
// Parameter Type: Register Default Setting
// 
// Determines the default of the Expansion ROM BAR Mask register. Function 28. 
//  - The BAR Mask register specifies which bits of the Expansion ROM BAR are non-writable by host software, which 
//  determines the size of the BAR. 
//  - The maximum value for ROM_MASK_N is 0xFFFFFF because the maximum space that can be claimed by an Expansion ROM BAR 
//  is 16 MB. 
//  - For example: 32'hFFFF =BAR size of 2^16.
`define ROM_MASK_28 32'hffff


// Name:           ROM_MASK_WRITABLE_28
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 28 && ROM_BAR_ENABLED_28==1
// Parameter Type: Feature Setting
// 
// Determines if the Expansion ROM BAR Mask register for function 28 is writable by application software. If writing to a 
// Expansion ROM BAR Mask register is enabled, your application can write to the Expansion ROM BAR Mask register through the 
// DBI by asserting dbi_cs2 in addition to dbi_cs.
`define ROM_MASK_WRITABLE_28 1'h0


// Name:           ROM_FUNC28_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 28 && ROM_BAR_ENABLED_28==1 && TRGT1_POPULATE==1))
// Parameter Type: Register Default Setting
// 
// Direct incoming requests that pass filtering and match the Expansion ROM BAR of function 28 to either RTRGT0 or RTRGT1. 
//  - For example, setting ROM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for the Expansion ROM BAR of function 
//  0 to RTRGT1. 
//  - If TRGT1_POPULATE =0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define ROM_FUNC28_TARGET_MAP 1'h1


// Name:           CX_PCI_HEADER_DEFAULTS_VISIBLE_28
// Default:        0
// Values:         0, 1
// Parameter Type: Register Default Setting
// 
// Select here if you want to configure the defaults for the other PCI Standard Header registers for function 28. 
//  An extra window will appear under this page. To access it, click the plus/minus symbol in the hierarchy view on the 
//  left panel. 
//  This is optional but not usually recommended. 
//  You can also change these register defaults using the DBI before (or after) the link comes up.
`define CX_PCI_HEADER_DEFAULTS_VISIBLE_28 0

//-/ END:   PCI BASIC CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: BAR CONFIGURATION


// Name:           BAR0_ENABLED_28
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 28
// Parameter Type: Feature Setting
// 
// Include the BAR0 registers for function 28.
`define BAR0_ENABLED_28 1'h1


`define DEFAULT_BAR0_ENABLED_28 1'h1


// Name:           MEM0_SPACE_DECODER_28
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 28 && BAR0_ENABLED_28==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 28.
`define MEM0_SPACE_DECODER_28 1'h0


// Name:           PREFETCHABLE0_28
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 28 && BAR0_ENABLED_28==1 && MEM0_SPACE_DECODER_28==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 28.
`define PREFETCHABLE0_28 1'h0


// Name:           BAR0_TYPE_28
// Default:        64-bit ((MEM0_SPACE_DECODER_28==1 || BAR0_ENABLED_28==0) ? 0 : 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 28 && BAR0_ENABLED_28==1 && MEM0_SPACE_DECODER_28==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 28.
`define BAR0_TYPE_28 2'h2


// Name:           BAR0_SIZING_SCHEME_28
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 28 && BAR0_ENABLED_28==1
// Parameter Type: Feature Setting
// 
// BAR0 Function 28 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR0_SIZING_SCHEME_28 2'h0


// Name:           CX_BAR0_RESIZABLE_28
// Default:        0x0 ((BAR0_SIZING_SCHEME_28==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR0_ENABLED_28==1) && (MEM0_SPACE_DECODER_28==0)
// Parameter Type: Feature Setting
// 
// Defines BAR0 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR0 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR0_RESIZABLE_28 1'h0


// Name:           CX_BAR0_RESOURCE_AVAIL_28
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 28 && CX_BAR0_RESIZABLE_28==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR0 of function 28. 
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
// Example: 0x00000030 indicates that BAR0 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR0_RESOURCE_AVAIL_28 64'h10


// Name:           BAR0_MASK_WRITABLE_28
// Default:        0x0 ((BAR0_ENABLED_28==1 && BAR0_SIZING_SCHEME_28 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 28 && BAR0_ENABLED_28==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR0 Mask through DBI
`define BAR0_MASK_WRITABLE_28 1'h0


// Name:           BAR0_MASK_28
// Default:        0xfffff (CX_BAR0_RESIZABLE_28==1 ? [calc_bar_mask 
//                 CX_BAR0_RESOURCE_AVAIL_28] : MEM0_SPACE_DECODER_28==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 28 && BAR0_ENABLED_28==1 && MEM0_SPACE_DECODER_28==0 && 
//                 CX_BAR0_RESIZABLE_28==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR0 Mask register of function 28. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR0_MASK_28 64'hfffff


// Name:           MEM_FUNC28_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 28 && BAR0_ENABLED_28==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_0 of function 28 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming Requests for BAR0 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC28_BAR0_TARGET_MAP 1'h1


// Name:           BAR1_ENABLED_28
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 28 && BAR0_TYPE_28==0
// Parameter Type: Feature Setting
// 
// Include the BAR1 registers for function 28.
`define BAR1_ENABLED_28 1'h0


`define DEFAULT_BAR1_ENABLED_28 1'h0


// Name:           MEM1_SPACE_DECODER_28
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 28 && BAR1_ENABLED_28==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 28.
`define MEM1_SPACE_DECODER_28 1'h0


// Name:           PREFETCHABLE1_28
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 28 && BAR1_ENABLED_28==1 && MEM1_SPACE_DECODER_28==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 28.
`define PREFETCHABLE1_28 1'h0


// Name:           BAR1_TYPE_28
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 28.
`define BAR1_TYPE_28 2'h0


// Name:           BAR1_SIZING_SCHEME_28
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 28 && BAR1_ENABLED_28==1
// Parameter Type: Feature Setting
// 
// BAR1 Function 28 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR1_SIZING_SCHEME_28 2'h0


// Name:           CX_BAR1_RESIZABLE_28
// Default:        0x0 ((BAR1_SIZING_SCHEME_28==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR1_ENABLED_28==1) && (MEM1_SPACE_DECODER_28==0)
// Parameter Type: Feature Setting
// 
// Defines BAR1 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR1 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR1_RESIZABLE_28 1'h0


// Name:           CX_BAR1_RESOURCE_AVAIL_28
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 28 && CX_BAR1_RESIZABLE_28==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR1 of function 28. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR1 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR1_RESOURCE_AVAIL_28 32'h10


// Name:           BAR1_MASK_WRITABLE_28
// Default:        0x0 ((BAR1_ENABLED_28==1 && BAR1_SIZING_SCHEME_28 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 28 && BAR1_ENABLED_28==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR1 Mask through DBI
`define BAR1_MASK_WRITABLE_28 1'h0


// Name:           BAR1_MASK_28
// Default:        0xffff (CX_BAR1_RESIZABLE_28==1 ? [calc_bar_mask 
//                 CX_BAR1_RESOURCE_AVAIL_28] : MEM1_SPACE_DECODER_28==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 28 && BAR1_ENABLED_28==1 && MEM1_SPACE_DECODER_28==0 && 
//                 CX_BAR1_RESIZABLE_28==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR1 Mask register of function 28. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR1_MASK_28 32'hffff


// Name:           MEM_FUNC28_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 28 && BAR1_ENABLED_28==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_1 of function 28 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR1_TARGET_MAP to 1 maps all incoming Requests for BAR1 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC28_BAR1_TARGET_MAP 1'h1


// Name:           BAR2_ENABLED_28
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 28
// Parameter Type: Feature Setting
// 
// Include the BAR2 registers for function 28.
`define BAR2_ENABLED_28 1'h1


`define DEFAULT_BAR2_ENABLED_28 1'h1


// Name:           MEM2_SPACE_DECODER_28
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 28 && BAR2_ENABLED_28==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 28.
`define MEM2_SPACE_DECODER_28 1'h0


// Name:           PREFETCHABLE2_28
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 28 && BAR2_ENABLED_28==1 && MEM2_SPACE_DECODER_28==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 28.
`define PREFETCHABLE2_28 1'h0


// Name:           BAR2_TYPE_28
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 28 && BAR2_ENABLED_28==1 && MEM2_SPACE_DECODER_28==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 28.
`define BAR2_TYPE_28 2'h0


// Name:           BAR2_SIZING_SCHEME_28
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 28 && BAR2_ENABLED_28==1
// Parameter Type: Feature Setting
// 
// BAR2 Function 28 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR2_SIZING_SCHEME_28 2'h0


// Name:           CX_BAR2_RESIZABLE_28
// Default:        0x0 ((BAR2_SIZING_SCHEME_28==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR2_ENABLED_28==1) && (MEM2_SPACE_DECODER_28==0)
// Parameter Type: Feature Setting
// 
// Defines BAR2 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR2 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR2_RESIZABLE_28 1'h0


// Name:           CX_BAR2_RESOURCE_AVAIL_28
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 28 && CX_BAR2_RESIZABLE_28==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR2 of function 28. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR2 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR2_RESOURCE_AVAIL_28 64'h10


// Name:           BAR2_MASK_WRITABLE_28
// Default:        0x0 ((BAR2_ENABLED_28==1 && BAR2_SIZING_SCHEME_28 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 28 && BAR2_ENABLED_28==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR2 Mask through DBI
`define BAR2_MASK_WRITABLE_28 1'h0


// Name:           BAR2_MASK_28
// Default:        0xfffff (CX_BAR2_RESIZABLE_28==1 ? [calc_bar_mask 
//                 CX_BAR2_RESOURCE_AVAIL_28] : MEM2_SPACE_DECODER_28==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 28 && BAR2_ENABLED_28==1 && MEM2_SPACE_DECODER_28==0 && 
//                 CX_BAR2_RESIZABLE_28==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR2 Mask register of function 28. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR2_MASK_28 64'hfffff


// Name:           MEM_FUNC28_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 28 && BAR2_ENABLED_28==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_2 of function 28 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR2_TARGET_MAP to 1 maps all incoming requests for BAR2 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC28_BAR2_TARGET_MAP 1'h1


// Name:           BAR3_ENABLED_28
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 28 && BAR2_TYPE_28==0
// Parameter Type: Feature Setting
// 
// Include the BAR3 registers for function 28.
`define BAR3_ENABLED_28 1'h0



`define DEFAULT_BAR3_ENABLED_28 1'h0


// Name:           MEM3_SPACE_DECODER_28
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 28 && BAR3_ENABLED_28==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 28.
`define MEM3_SPACE_DECODER_28 1'h0


// Name:           PREFETCHABLE3_28
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 28 && BAR3_ENABLED_28==1 && MEM3_SPACE_DECODER_28==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 28.
`define PREFETCHABLE3_28 1'h0


// Name:           BAR3_TYPE_28
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 28.
`define BAR3_TYPE_28 2'h0


// Name:           BAR3_SIZING_SCHEME_28
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 28 && BAR3_ENABLED_28==1
// Parameter Type: Feature Setting
// 
// BAR3 Function 28 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR3_SIZING_SCHEME_28 2'h0


// Name:           CX_BAR3_RESIZABLE_28
// Default:        0x0 ((BAR3_SIZING_SCHEME_28==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR3_ENABLED_28==1) && (MEM3_SPACE_DECODER_28==0)
// Parameter Type: Feature Setting
// 
// Defines BAR3 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR3 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR3_RESIZABLE_28 1'h0


// Name:           CX_BAR3_RESOURCE_AVAIL_28
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 28 && CX_BAR3_RESIZABLE_28==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR3 of function 28. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR3 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR3_RESOURCE_AVAIL_28 32'h10


// Name:           BAR3_MASK_WRITABLE_28
// Default:        0x0 ((BAR3_ENABLED_28==1 && BAR3_SIZING_SCHEME_28 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 28 && BAR3_ENABLED_28==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR3 Mask through DBI
`define BAR3_MASK_WRITABLE_28 1'h0


// Name:           BAR3_MASK_28
// Default:        0xffff (CX_BAR3_RESIZABLE_28==1 ? [calc_bar_mask 
//                 CX_BAR3_RESOURCE_AVAIL_28] : MEM3_SPACE_DECODER_28==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 28 && BAR3_ENABLED_28==1 && MEM3_SPACE_DECODER_28==0 && 
//                 CX_BAR3_RESIZABLE_28==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR3 Mask register of function 28. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR3_MASK_28 32'hffff


// Name:           MEM_FUNC28_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 28 && BAR3_ENABLED_28==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_3 of function 28 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR3_TARGET_MAP to 1 maps all incoming requests for BAR3 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC28_BAR3_TARGET_MAP 1'h1


// Name:           BAR4_ENABLED_28
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 28
// Parameter Type: Feature Setting
// 
// Include the BAR4 registers for function 28.
`define BAR4_ENABLED_28 1'h1


`define DEFAULT_BAR4_ENABLED_28 1'h1



// Name:           MEM4_SPACE_DECODER_28
// Default:        I/O (BAR4_ENABLED_28==1)
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 28 && BAR4_ENABLED_28==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 28.
`define MEM4_SPACE_DECODER_28 1'h1


// Name:           PREFETCHABLE4_28
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 28 && BAR4_ENABLED_28==1 && MEM4_SPACE_DECODER_28==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 28.
`define PREFETCHABLE4_28 1'h0


// Name:           BAR4_TYPE_28
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 28 && BAR4_ENABLED_28==1 && MEM4_SPACE_DECODER_28==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 28.
`define BAR4_TYPE_28 2'h0


// Name:           BAR4_SIZING_SCHEME_28
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 28 && BAR4_ENABLED_28==1
// Parameter Type: Feature Setting
// 
// BAR4  Function 28 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR4_SIZING_SCHEME_28 2'h0


// Name:           CX_BAR4_RESIZABLE_28
// Default:        0x0 ((BAR4_SIZING_SCHEME_28==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR4_ENABLED_28==1) && (MEM4_SPACE_DECODER_28==0)
// Parameter Type: Feature Setting
// 
// Defines BAR4 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR4 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR4_RESIZABLE_28 1'h0


// Name:           CX_BAR4_RESOURCE_AVAIL_28
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 28 &&  CX_BAR4_RESIZABLE_28==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR4 of function 28. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR4 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR4_RESOURCE_AVAIL_28 64'h10


// Name:           BAR4_MASK_WRITABLE_28
// Default:        0x0 ((BAR4_ENABLED_28==1 && BAR4_SIZING_SCHEME_28 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 28 && BAR4_ENABLED_28==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR4 Mask through DBI
`define BAR4_MASK_WRITABLE_28 1'h0


// Name:           BAR4_MASK_28
// Default:        0xff (CX_BAR4_RESIZABLE_28==1 ? [calc_bar_mask 
//                 CX_BAR4_RESOURCE_AVAIL_28] : MEM4_SPACE_DECODER_28==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 28 && BAR4_ENABLED_28==1 && MEM4_SPACE_DECODER_28==0 && 
//                 CX_BAR4_RESIZABLE_28==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR4 Mask register of function 28. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR4_MASK_28 64'hff


// Name:           MEM_FUNC28_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 28 && BAR4_ENABLED_28==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_4 of function 28 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR4_TARGET_MAP to 1 maps all incoming requests for BAR4 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC28_BAR4_TARGET_MAP 1'h1


// Name:           BAR5_ENABLED_28
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 28 && BAR4_TYPE_28==0
// Parameter Type: Feature Setting
// 
// Include the BAR5 registers for function 28.
`define BAR5_ENABLED_28 1'h0


`define DEFAULT_BAR5_ENABLED_28 1'h0


// Name:           MEM5_SPACE_DECODER_28
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 28 && BAR5_ENABLED_28==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 28.
`define MEM5_SPACE_DECODER_28 1'h0


// Name:           PREFETCHABLE5_28
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 28 && BAR5_ENABLED_28==1 && MEM5_SPACE_DECODER_28==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 28.
`define PREFETCHABLE5_28 1'h0


// Name:           BAR5_TYPE_28
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 28.
`define BAR5_TYPE_28 2'h0


// Name:           BAR5_SIZING_SCHEME_28
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 28 && BAR5_ENABLED_28==1
// Parameter Type: Feature Setting
// 
// BAR5  Function 28 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR5_SIZING_SCHEME_28 2'h0


// Name:           CX_BAR5_RESIZABLE_28
// Default:        0x0 ((BAR5_SIZING_SCHEME_28==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR5_ENABLED_28==1) && (MEM5_SPACE_DECODER_28==0)
// Parameter Type: Feature Setting
// 
// Defines BAR5 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR5 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR5_RESIZABLE_28 1'h0


// Name:           CX_BAR5_RESOURCE_AVAIL_28
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 28 && CX_BAR5_RESIZABLE_28==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR5 of function 28. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR5 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR5_RESOURCE_AVAIL_28 32'h10


// Name:           BAR5_MASK_WRITABLE_28
// Default:        0x0 ((BAR5_ENABLED_28==1 && BAR5_SIZING_SCHEME_28 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 28 && BAR5_ENABLED_28==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR5 Mask through DBI
`define BAR5_MASK_WRITABLE_28 1'h0


// Name:           BAR5_MASK_28
// Default:        0xffff (CX_BAR5_RESIZABLE_28==1 ? [calc_bar_mask 
//                 CX_BAR5_RESOURCE_AVAIL_28] : MEM5_SPACE_DECODER_28==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 28 && BAR5_ENABLED_28==1 && MEM5_SPACE_DECODER_28==0 && 
//                 CX_BAR5_RESIZABLE_28==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR5 Mask register of function 28. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR5_MASK_28 32'hffff


// Name:           MEM_FUNC28_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 28 && BAR5_ENABLED_28==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_5 of function 28 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR5_TARGET_MAP to 1 maps all incoming requests for BAR5 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC28_BAR5_TARGET_MAP 1'h1


`define FUNC28_BARSIZE_32 128'h0


`define FUNC28_BARSIZE 128'h0


`define FUNC28_BAR0_BARSIZE_TRGT1 128'h0


`define FUNC28_BAR2_BARSIZE_TRGT1 128'h0


`define FUNC28_BAR4_BARSIZE_TRGT1 128'h0


`define FUNC28_BAR0_TRGT1_ADDR_WIDTH 1


`define FUNC28_BAR2_TRGT1_ADDR_WIDTH 1


`define FUNC28_BAR4_TRGT1_ADDR_WIDTH 1


// Name:         CX_NUM_RBARS_28
// Default:      0 ([calc_num_rbars CX_BAR0_RESIZABLE_28 CX_BAR1_RESIZABLE_28 
//               CX_BAR2_RESIZABLE_28 CX_BAR3_RESIZABLE_28 CX_BAR4_RESIZABLE_28 
//               CX_BAR5_RESIZABLE_28])
// Values:       -2147483648, ..., 2147483647
// 
// Number of resizable BARs
`define CX_NUM_RBARS_28 0

//-/ END:   BAR CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SR-IOV CAPABILITIES CONFIGURATION


// Name:           CX_VF_DEPENDENCY_LINK_28
// Default:        0x28
// Values:         0x0, ..., 0xff
// Enabled:        CX_VF_DEPENDENCY_LINK_SUPP && (CX_NFUNC > 28) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Specifies the 8-bit VF dependency link for PF28. Valid only if CX_VF_DEPENDENCY_LINK_SUPP=1.
`define CX_VF_DEPENDENCY_LINK_28 8'h28


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER1_28
// Default:        0x2 ((CX_NFUNC>=17) ? 32 : (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : 
//                 (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF28 in an ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER1_28 16'h2


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER0_28
// Default:        0x100
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF28 
//  in a non-ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER0_28 16'h100


// Name:           VF_STRIDE_ARI_CAP_HIER1_28
// Default:        0x2 (CX_VF_STRIDE_ALWAYS_ONE) ? 1 : ((CX_NFUNC>=17) ? 32 : 
//                 (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF28 in an ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER1_28 16'h2


// Name:           VF_STRIDE_ARI_CAP_HIER0_28
// Default:        0x100 ((CX_VF_STRIDE_ALWAYS_ONE) ? 0x0001 : 0x0100)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF28 in a non-ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER0_28 16'h100


// Name:           CX_VF_DEVICE_ID_28
// Default:        0x0 (CX_DEVICE_ID_28)
// Values:         0x0, ..., 0xffff
// Enabled:        (CX_NFUNC > 28) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 16-bit virtual function Device ID for PF28. 
//  It might be different from the physical function's.
`define CX_VF_DEVICE_ID_28 16'h0


// Name:           CX_VF_SUPP_PAGE_SIZE_28
// Default:        0x553
// Values:         0x553, ..., 0xffff
// Enabled:        (CX_NFUNC > 28) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 32-bit supported page sizes for virtual functions for PF28
`define CX_VF_SUPP_PAGE_SIZE_28 32'h553


// Name:           CX_ARI_CAP_HIER_PRSVD_28
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Specifies if ARI Capable Hierarchy bit is preserved across certain power state transitions 
//  Only present in PF0. Read Only Zero in this PF28.
`define CX_ARI_CAP_HIER_PRSVD_28 1'h0

//-/===========================================
//-/ START: VF BAR CONFIGURATION


// Name:           VF_BAR0_ENABLED_28
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 28)
// Parameter Type: Feature Setting
// 
// Include the VF BAR0 registers in PF28
`define VF_BAR0_ENABLED_28 1'h1


`define VF_DEFAULT_BAR0_ENABLED_28 1'h1


// Name:           VF_MEM0_SPACE_DECODER_28
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR0_ENABLED_28 && CX_SRIOV_ENABLE && (CX_NFUNC > 28)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Space Indicator 
//  ALWAYS set to Memory for Virtual Functions
`define VF_MEM0_SPACE_DECODER_28 1'h0


// Name:           VF_PREFETCHABLE0_28
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_28==1 && VF_MEM0_SPACE_DECODER_28==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 28)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Prefetchable 
//  When set indicates VF BAR0 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE0_28 1'h0


// Name:           VF_BAR0_TYPE_28
// Default:        64-bit ((VF_MEM0_SPACE_DECODER_28==1 || VF_BAR0_ENABLED_28==0) ? 0 
//                 : 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR0_ENABLED_28==1 && VF_MEM0_SPACE_DECODER_28==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 28)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 28; (bits [2:1] for a memory BAR).
`define VF_BAR0_TYPE_28 2'h2


// Name:           VF_BAR0_MASK_WRITABLE_28
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_28==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 28)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR0_MASK_WRITABLE_28 1'h0


// Name:           VF_BAR0_MASK_28
// Default:        0xfffff (VF_MEM0_SPACE_DECODER_28==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR0_ENABLED_28==1 && VF_MEM0_SPACE_DECODER_28==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 28)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Mask 
//  Determines the default of the VF BAR Mask register for PF28. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR0_MASK_28 64'hfffff


// Name:           VF_MEM_FUNC28_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR0_ENABLED_28==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE 
//                 && (CX_NFUNC > 28)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF28 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC28_BAR0_TARGET_MAP 1'h1


// Name:           VF_BAR1_ENABLED_28
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        (VF_BAR0_TYPE_28==0)  && CX_SRIOV_ENABLE && (CX_NFUNC > 28)
// Parameter Type: Feature Setting
// 
// Include the VF BAR1 registers in PF28
`define VF_BAR1_ENABLED_28 1'h0


`define VF_DEFAULT_BAR1_ENABLED_28 1'h0


// Name:           VF_MEM1_SPACE_DECODER_28
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR1_ENABLED_28==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 28)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Space Indicator
`define VF_MEM1_SPACE_DECODER_28 1'h0


// Name:           VF_PREFETCHABLE1_28
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_28==1 && VF_MEM1_SPACE_DECODER_28==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 28)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Prefetchable 
//  When set indicates VF BAR1 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE1_28 1'h0


// Name:           VF_BAR1_TYPE_28
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 28; (bits [2:1] for a memory BAR).
`define VF_BAR1_TYPE_28 2'h0


// Name:           VF_BAR1_MASK_WRITABLE_28
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_28==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 28)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR1_MASK_WRITABLE_28 1'h0


// Name:           VF_BAR1_MASK_28
// Default:        0xffff (VF_MEM1_SPACE_DECODER_28==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR1_ENABLED_28==1 && VF_MEM1_SPACE_DECODER_28==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 28)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Mask 
//  Determines the default of the VF BAR Mask register for PF28. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR1_MASK_28 32'hffff


// Name:           VF_MEM_FUNC28_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR1_ENABLED_28==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE 
//                 && (CX_NFUNC > 28)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF28 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC28_BAR1_TARGET_MAP 1'h1


// Name:           VF_BAR2_ENABLED_28
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 28)
// Parameter Type: Feature Setting
// 
// Include the VF BAR2 registers in PF28
`define VF_BAR2_ENABLED_28 1'h1


`define VF_DEFAULT_BAR2_ENABLED_28 1'h1


// Name:           VF_MEM2_SPACE_DECODER_28
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR2_ENABLED_28==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 28)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Memory Space Indicator
`define VF_MEM2_SPACE_DECODER_28 1'h0


// Name:           VF_PREFETCHABLE2_28
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_28==1 && VF_MEM2_SPACE_DECODER_28==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 28)
// Parameter Type: Register Default Setting
// 
// BAR2 Memory Prefetchable 
//  When set indicates VF BAR2 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE2_28 1'h0


// Name:           VF_BAR2_TYPE_28
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR2_ENABLED_28==1 && VF_MEM2_SPACE_DECODER_28==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 28)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 28; (bits [2:1] for a memory BAR).
`define VF_BAR2_TYPE_28 2'h0


// Name:           VF_BAR2_MASK_WRITABLE_28
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_28==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 28)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR2_MASK_WRITABLE_28 1'h0


// Name:           VF_BAR2_MASK_28
// Default:        0xfffff (VF_MEM2_SPACE_DECODER_28==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR2_ENABLED_28==1 && VF_MEM2_SPACE_DECODER_28==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 28)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Mask 
//  Determines the default of the VF BAR Mask register for PF28. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR2_MASK_28 64'hfffff


// Name:           VF_MEM_FUNC28_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR2_ENABLED_28==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 28)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF28 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC28_BAR2_TARGET_MAP 1'h1


// Name:           VF_BAR3_ENABLED_28
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_TYPE_28==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 28)
// Parameter Type: Feature Setting
// 
// Include the VF BAR3 registers in PF28
`define VF_BAR3_ENABLED_28 1'h0


`define VF_DEFAULT_BAR3_ENABLED_28 1'h0


// Name:           VF_MEM3_SPACE_DECODER_28
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR3_ENABLED_28==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 28)
// Parameter Type: Register Default Setting
// 
// BAR3 Memory Space Indicator
`define VF_MEM3_SPACE_DECODER_28 1'h0


// Name:           VF_PREFETCHABLE3_28
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_28==1 && VF_MEM3_SPACE_DECODER_28==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 28)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Memory Prefetchable 
//  When set indicates VF BAR3 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE3_28 1'h0


// Name:           VF_BAR3_TYPE_28
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 28; (bits [2:1] for a memory BAR).
`define VF_BAR3_TYPE_28 2'h0


// Name:           VF_BAR3_MASK_WRITABLE_28
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_28==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 28)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR3_MASK_WRITABLE_28 1'h0


// Name:           VF_BAR3_MASK_28
// Default:        0xffff (VF_MEM3_SPACE_DECODER_28==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR3_ENABLED_28==1 && VF_MEM3_SPACE_DECODER_28==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 28)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Mask 
//  Determines the default of the VF BAR Mask register for PF28. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR3_MASK_28 32'hffff


// Name:           VF_MEM_FUNC28_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR3_ENABLED_28==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 28)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF28 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC28_BAR3_TARGET_MAP 1'h1


// Name:           VF_BAR4_ENABLED_28
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 28)
// Parameter Type: Feature Setting
// 
// Include the VF BAR4 registers in PF28
`define VF_BAR4_ENABLED_28 1'h1


`define VF_DEFAULT_BAR4_ENABLED_28 1'h1


// Name:           VF_MEM4_SPACE_DECODER_28
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR4_ENABLED_28==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 28)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Space Indicator
`define VF_MEM4_SPACE_DECODER_28 1'h0


// Name:           VF_PREFETCHABLE4_28
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_28==1 && VF_MEM4_SPACE_DECODER_28==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 28)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Prefetchable 
//  When set indicates VF BAR4 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE4_28 1'h0


// Name:           VF_BAR4_TYPE_28
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR4_ENABLED_28==1 && VF_MEM4_SPACE_DECODER_28==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 28)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 28; (bits [2:1] for a memory BAR).
`define VF_BAR4_TYPE_28 2'h0


// Name:           VF_BAR4_MASK_WRITABLE_28
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_28==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 28)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR4_MASK_WRITABLE_28 1'h0


// Name:           VF_BAR4_MASK_28
// Default:        0xfff (VF_MEM4_SPACE_DECODER_28==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR4_ENABLED_28==1 && VF_MEM4_SPACE_DECODER_28==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 28)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Mask 
//  Determines the default of the VF BAR Mask register for PF28. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR4_MASK_28 64'hfff


// Name:           VF_MEM_FUNC28_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR4_ENABLED_28==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 28)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF28 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC28_BAR4_TARGET_MAP 1'h1


// Name:           VF_BAR5_ENABLED_28
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_TYPE_28==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 28)
// Parameter Type: Feature Setting
// 
// Include the VF BAR5 registers in PF28
`define VF_BAR5_ENABLED_28 1'h0


`define VF_DEFAULT_BAR5_ENABLED_28 1'h0


// Name:           VF_MEM5_SPACE_DECODER_28
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR5_ENABLED_28==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 28)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Space Indicator
`define VF_MEM5_SPACE_DECODER_28 1'h0


// Name:           VF_PREFETCHABLE5_28
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_28==1 && VF_MEM5_SPACE_DECODER_28==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 28)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Prefetchable 
//  When set indicates VF BAR5 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE5_28 1'h0


// Name:           VF_BAR5_TYPE_28
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 28; (bits [2:1] for a memory BAR).
`define VF_BAR5_TYPE_28 2'h0


// Name:           VF_BAR5_MASK_WRITABLE_28
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_28==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 28)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR5_MASK_WRITABLE_28 1'h0


// Name:           VF_BAR5_MASK_28
// Default:        0xffff (VF_MEM5_SPACE_DECODER_28==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR5_ENABLED_28==1 && VF_MEM5_SPACE_DECODER_28==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 28)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Mask 
//  Determines the default of the VF BAR Mask register for PF28. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR5_MASK_28 32'hffff


// Name:           VF_MEM_FUNC28_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR5_ENABLED_28==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 28)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF28 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC28_BAR5_TARGET_MAP 1'h1


`define VF_FUNC28_BARSIZE_32 128'h101000


`define VF_FUNC28_BARSIZE 128'h201000

//-/ END:   VF BAR CONFIGURATION
//-/===========================================

//-/ END:   SR-IOV CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: TPH CAPABILITIES CONFIGURATION


// Name:           TPH_IVEC_28
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Interrupt Vector Mode. If set indicates that the function supports the Interrupt Vector 
// Mode of operation. Function 28.
`define TPH_IVEC_28 1'h0


// Name:           TPH_DS_28
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Device Specific Mode. If set indicates that the function supports the Device Specific Mode 
// of operation. Function 28.
`define TPH_DS_28 1'h0


// Name:           TPH_ST_TABLE_LOC_28
// Default:        Not Present
// Values:         Not Present (0), TPH Requester Capability Structure (1), MSI-X 
//                 Table Structure (2)
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_DS_28 || TPH_IVEC_28))
// Parameter Type: Feature Setting
// 
// TLP Processing Hints Steering Tag Table Location. Value indicates if and where the ST Table is located. Function 28.
`define TPH_ST_TABLE_LOC_28 0

//located in the TPH Requester Capability structure. Please reduce the ST Table Size for this mode of operation"

// Name:           TPH_ST_TABLE_SIZE_28
// Default:        1
// Values:         1, ..., 2048
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_ST_TABLE_LOC_28 != 0))
// Parameter Type: Feature Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define TPH_ST_TABLE_SIZE_28 1


`define TPH_ST_TABLE_DEPTH_28 0

//-/ END:   TPH CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: ATS CAPABILITIES CONFIGURATION


// Name:           ATS_INV_Q_DPTH_28
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// The number of Invalidate Requests that the Function can accept before putting backpressure on the upstream connection. A 
// value of 0 indicates the function can accept 32 Invalidate requests. Function 28.
`define ATS_INV_Q_DPTH_28 5'd0


// Name:           ATS_STU_28
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// This value indicates to the Function the minimum number of 4096-byte blocks that is indicated in a Translation 
// Completion or Invalidate Request. This is a power of 2 multiplier and the number of blocks is 2^STU. A value of 0 indicates 1 block 
// and a value of 31 indicates 2^31 blocks (or 8 TB total). Function 28.
`define ATS_STU_28 5'd0

//-/ END:   ATS CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PRS CAPABILITIES CONFIGURATION


// Name:           CX_PRS_OUTSTANDING_CAPACITY_VALUE_28
// Default:        0x1
// Values:         0x0, ..., 0xffffffff
// Enabled:        (CX_PRS_ENABLE==1) && (CX_NFUNC > 28)
// Parameter Type: Register Default Setting
// 
// Register default for PRS Outstanding Capacity in PF28. 
// For more details, see the PRS_OUTSTANDING_CAPACITY field in the PRS_REQ_CAPACITY_REG register.
`define CX_PRS_OUTSTANDING_CAPACITY_VALUE_28 32'h1

//-/ END:   PRS CAPABILITIES CONFIGURATION
//-/===========================================


//-/===========================================
//--- START: RN


// Name:           CX_RN_IMM_VALUE_28
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 28)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for PF28.
`define CX_RN_IMM_VALUE_28 1'h0


// Name:           CX_RN_IMM_D0_VALUE_28
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 28)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for PF28.
`define CX_RN_IMM_D0_VALUE_28 1'h0


// Name:           CX_RN_FRS_VALUE_28
// Default:        0x0 (CX_RN_FRS_SUPPORTED==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_FRS_SUPPORTED==1) && (CX_NFUNC > 28)
// Parameter Type: Feature Setting
// 
// Function Readiness Status messaging supported for function PF28.
`define CX_RN_FRS_VALUE_28 1'h0


// Name:           CX_RN_RTR_VALID_28
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 28)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF28.
`define CX_RN_RTR_VALID_28 1'h0


// Name:           CX_RN_RTR_DL_UP_VALUE_28
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 28)
// Parameter Type: Register Default Setting
// 
// Register default for RTR DL Up Time field in PF28.
`define CX_RN_RTR_DL_UP_VALUE_28 12'h0


// Name:           CX_RN_RTR_RESET_VALUE_28
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 28)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF28.
`define CX_RN_RTR_RESET_VALUE_28 12'h0


// Name:           CX_RN_RTR_D3D0_VALUE_28
// Default:        0x0
// Values:         0x0, ..., 0x80a
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 28)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF28.
`define CX_RN_RTR_D3D0_VALUE_28 12'h0


// Name:           CX_RN_RTR_FLR_VALUE_28
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_FLR_ENABLE==1) && (CX_NFUNC > 28)
// Parameter Type: Register Default Setting
// 
// Register default for RTR FLR Time field in PF28.
`define CX_RN_RTR_FLR_VALUE_28 12'h0


// Name:           VF_RN_IMM_VALUE_28
// Default:        0x0 (CX_RN_IMM_VALUE_28 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 28))
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for VFs in PF28.
`define VF_RN_IMM_VALUE_28 1'h0


// Name:           VF_RN_IMM_D0_VALUE_28
// Default:        0x0 (CX_RN_IMM_D0_VALUE_28 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 28))
// Parameter Type: Register Default Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for VFs in PF28.
`define VF_RN_IMM_D0_VALUE_28 1'h0


// Name:           VF_RN_RTR_VALID_28
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 28) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF28 VFs.
`define VF_RN_RTR_VALID_28 1'h0


// Name:           VF_RN_RTR_RESET_VALUE_28
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_28)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 28) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF28 VFS.
`define VF_RN_RTR_RESET_VALUE_28 12'h0


// Name:           VF_RN_RTR_D3D0_VALUE_28
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_28)
// Values:         0x0, ..., 0x80a
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 28) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF28 VFS.
`define VF_RN_RTR_D3D0_VALUE_28 12'h0


// Name:           VF_RN_RTR_FLR_VALUE_28
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_28)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 28) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF28 VFs.
`define VF_RN_RTR_FLR_VALUE_28 12'h0


// Name:           EXT_VF_RN_RTR_VALID_28
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 28) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF28 VFs.
`define EXT_VF_RN_RTR_VALID_28 1'h0


// Name:           EXT_VF_RN_RTR_RESET_VALUE_28
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_28)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 28) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF28 VFS.
`define EXT_VF_RN_RTR_RESET_VALUE_28 12'h0


// Name:           EXT_VF_RN_RTR_D3D0_VALUE_28
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_28)
// Values:         0x0, ..., 0x80a
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 28) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF28 VFS.
`define EXT_VF_RN_RTR_D3D0_VALUE_28 12'h0


// Name:           EXT_VF_RN_RTR_FLR_VALUE_28
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_28)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 28) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF28 VFs.
`define EXT_VF_RN_RTR_FLR_VALUE_28 12'h0

//-/ END:   RN
//-/===========================================

//-/ START: LN CAPABILITIES CONFIGURATION
//-/===========================================


// Name:           CX_LN_REG_MAX_VALUE_28
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 28))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_64_SUPPORTED field in the LNR_CAP_OFF register for PF28.
`define CX_LN_REG_MAX_VALUE_28 5'h0


// Name:           CX_LN_128_SUPPORTED_VALUE_28
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 28))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_128_SUPPORTED field in the LNR_CAP_OFF register for PF28.
`define CX_LN_128_SUPPORTED_VALUE_28 1'h0


// Name:           CX_LN_64_SUPPORTED_VALUE_28
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 28))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_REGISTRATION_MAX field in the LNR_CAP_OFF register for PF28.
`define CX_LN_64_SUPPORTED_VALUE_28 1'h0

//-/ END:   LN CAPABILITIES CONFIGURATION
//-/===========================================




//-/==========================================
//-/ End FUNC28 Config
//-/==========================================

//-/===========================================
//-/ Function 29 Configuration Registers
//-/ ==========================================


// Name:         FUNC_29
// Default:      0 ((CX_NFUNC > 29) ? 1 : 0)
// Values:       0, 1
// 
// This parameter indicates that Function 29 is present
// `define FUNC_29

//-/===========================================
//-/ START: PCI-E CAPABILITIES CONFIGURATION


// Name:           PCIE_CAP_INT_MSG_NUM_29
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 29
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Message Number field in the PCI Express Capabilities Register. Function 29.
`define PCIE_CAP_INT_MSG_NUM_29 5'h0


// Name:           SLOT_IMPLEMENTED_29
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_NFUNC > 29))
// Parameter Type: Register Default Setting
// 
// Indicates that the PCI Express link associated with this Port is connected to a slot. Function 29.
`define SLOT_IMPLEMENTED_29 1'h0


// Name:           DEFAULT_PHANTOM_FUNC_SUPPORTED_29
// Default:        0x0
// Values:         0x0, ..., 0x3
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_PHANTOM_FUNC_SUPPORTED_29 2'h0


// Name:           DEFAULT_EXT_TAG_FIELD_SUPPORTED_29
// Default:        0x0 (DEFAULT_EXT_TAG_FIELD_SUPPORTED_0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 29
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_EXT_TAG_FIELD_SUPPORTED_29 1'h0



// Name:           DEFAULT_ATT_BUTT_PRE_29
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 29
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Button is present
`define DEFAULT_ATT_BUTT_PRE_29 1'h0


// Name:           DEFAULT_ATT_IND_PRE_29
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 29
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Indicator is present
`define DEFAULT_ATT_IND_PRE_29 1'h0


// Name:           DEFAULT_PWR_IND_PRE_29
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 29
// Parameter Type: Register Default Setting
// 
// When set indicates that a Power Indicator is present
`define DEFAULT_PWR_IND_PRE_29 1'h0


// Name:           DEFAULT_NO_SNOOP_SUPPORTED_29
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 29
// Parameter Type: Register Default Setting
// 
// Default value for the Enable No Snoop bit in the Device Control Register. Function 29.
`define DEFAULT_NO_SNOOP_SUPPORTED_29 1'h0


// Name:           ROOT_RCB_29
// Default:        64-bit
// Values:         64-bit (0x0), 128-bit (0x1)
// Parameter Type: Register Default Setting
// 
// Default value for the Read Completion Boundary (RCB) bit in the Link Control Register.
`define ROOT_RCB_29 1'h0


//-/ END:   PCI-E CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: MSI-X CAPABILITIES CONFIGURATION


// Name:           MSIX_TABLE_SIZE_29
// Default:        0x0
// Values:         0x0, ..., 0x7ff
// Enabled:        CX_NFUNC > 29 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the MSI-X Table Size field in the MSI-X Control Register. Function 29.
`define MSIX_TABLE_SIZE_29 11'h0


// Name:           MSIX_TABLE_BIR_29
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 29 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table BAR Indicator Register (BIR) field in the MSI-X Table Offset and BIR Register. Function 29.
`define MSIX_TABLE_BIR_29 3'h0


// Name:           MSIX_TABLE_OFFSET_29
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 29 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table Offset field in the MSI-X Table Offset and BIR Register. Function 29.
`define MSIX_TABLE_OFFSET_29 29'h0


// Name:           MSIX_PBA_BIR_29
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 29 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Pending Bit Array (PBA) BIR field in the MSI-X PBA Offset and BIR Register. Function 29.
`define MSIX_PBA_BIR_29 7'h0


// Name:           MSIX_PBA_OFFSET_29
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 29 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the PBA Offset field in the MSI-X PBA Offset and BIR Register. Function 29.
`define MSIX_PBA_OFFSET_29 29'h0

//-/ END:   MSI-X CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SATA CAPABILITIES CONFIGURATION


// Name:         SATA_HBA_OFFSET_29
// Default:      0x0
// Values:       0x0, ..., 0xfffff
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA Offset. Base address of the SATA HBA registers, 
//  as an offset from the base address of the BAR indicated 
//  by the SATA BAR field.
`define SATA_HBA_OFFSET_29 20'h0


// Name:         SATA_BAR_29
// Default:      0x0
// Values:       0x0, ..., 0xf
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA BAR. The bar that maps to SATA HBA registers,
`define SATA_BAR_29 4'h0

//-/ END:   SATA CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: AER CAPABILITIES CONFIGURATION


// Name:           DEFAULT_ECRC_CHK_CAP_29
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 29 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Check Capable bit in the Advanced Capabilities and Control Register. Function 29.
`define DEFAULT_ECRC_CHK_CAP_29 1'h1


// Name:           DEFAULT_ECRC_GEN_CAP_29
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 29 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Generation Capability bit in the Advanced Capabilities and Control Register. Function 29.
`define DEFAULT_ECRC_GEN_CAP_29 1'h1


// Name:           AER_INT_MSG_NUM_29
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Parameter Type: Register Default Setting
// 
// Default value for the Advanced Error Interrupt Message Number field of the Root Error Status Register. Function 29.
`define AER_INT_MSG_NUM_29 5'h0



// Name:           CX_HDR_LOG_DEPTH_29
// Default:        0x1
// Values:         0x1, 0x2, 0x4
// Enabled:        CX_NFUNC > 29 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Feature Setting.
// 
// Header Log Depth
`define CX_HDR_LOG_DEPTH_29 3'h1


`define CX_MULTIPLE_HDR_REC_CAP_29 1'h0

//-/ END:   AER CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PM CAPABILITIES CONFIGURATION


// Name:           PME_SUPPORT_29
// Default:        0x1b
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 29
// Parameter Type: Register Default Setting
// 
// Default value for the PME_Support field in the Power Management Capabilities Register. Function 29.
`define PME_SUPPORT_29 5'h1b


// Name:           D1_SUPPORT_29
// Default:        true
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 29
// Parameter Type: Register Default Setting
// 
// Default value for the D1 Support bit in the Power Management Capabilities Register. Function 29.
`define D1_SUPPORT_29 1'h1


// Name:           D2_SUPPORT_29
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 29
// Parameter Type: Register Default Setting
// 
// Default value for the D2 Support bit in the Power Management Capabilities Register. Function 29.
`define D2_SUPPORT_29 1'h0


// Name:           DEV_SPEC_INIT_29
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 29
// Parameter Type: Register Default Setting
// 
// Default value for the Device Specific Initialization (DSI) bit in the Power Management Capabilities Register. Function 
// 29.
`define DEV_SPEC_INIT_29 1'h0


// Name:           AUX_CURRENT_29
// Default:        375mA
// Values:         0mA (0x0), 55mA (0x1), 100mA (0x2), 160mA (0x3), 220mA (0x4), 270mA 
//                 (0x5), 320mA (0x6), 375mA (0x7)
// Enabled:        CX_NFUNC > 29
// Parameter Type: Register Default Setting
// 
// Default value for the Aux Current field in the Power Management Capabilities Register. Function 29.
`define AUX_CURRENT_29 3'h7


// Name:           DEFAULT_NO_SOFT_RESET_29
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 29
// Parameter Type: Register Default Setting
// 
// Default value for the No Soft Reset bit in the Power Management Control and Status Register. When set, you should not 
// reset any controller registers when transitioning from D3hot to D0. Therefore, you should not assert the non_sticky_rst_n 
// and sticky_rst_n inputs. Function 29.
`define DEFAULT_NO_SOFT_RESET_29 1'h0

//-/ END:   PM CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PCI BASIC CONFIGURATION


// Name:           CX_DEVICE_ID_29
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 29
// Parameter Type: Register Default Setting
// 
// Default value for the Device ID field in the Device ID and Vendor ID Register. Function 29.
`define CX_DEVICE_ID_29 16'h0


// Name:           CX_VENDOR_ID_29
// Default:        0x16c3
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 29
// Parameter Type: Register Default Setting
// 
// Default value for the Vendor ID field in the Device ID and Vendor ID Register. Function 29.
`define CX_VENDOR_ID_29 16'h16c3


// Name:           CX_REVISION_ID_29
// Default:        0x1
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 29
// Parameter Type: Register Default Setting
// 
// Default value for the Revision ID field in the Revision ID Register. Function 29.
`define CX_REVISION_ID_29 8'h1


// Name:           SUBSYS_DEV_ID_29
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 29
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 29.
`define SUBSYS_DEV_ID_29 16'h0


// Name:           SUBSYS_VENDOR_ID_29
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 29
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem Vendor ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 29.
`define SUBSYS_VENDOR_ID_29 16'h0


// Name:           BASE_CLASS_CODE_29
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 29
// Parameter Type: Register Default Setting
// 
// Default value for the Base Class Code field in the Class Code Register. Function 29.
`define BASE_CLASS_CODE_29 8'h0


// Name:           SUB_CLASS_CODE_29
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 29
// Parameter Type: Register Default Setting
// 
// Default value for the Subclass Code field in the Class Code Register. Function 29.
`define SUB_CLASS_CODE_29 8'h0


// Name:           IF_CODE_29
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 29
// Parameter Type: Register Default Setting
// 
// Default value for the Programming Interface field in the Class Code Register. Function 29.
`define IF_CODE_29 8'h0


// Name:           CARDBUS_CIS_PTR_29
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 29
// Parameter Type: Register Default Setting
// 
// Default value for the CardBus CIS Pointer Register. Function 29.
`define CARDBUS_CIS_PTR_29 16'h0


// Name:           INT_PIN_MAPPING_29
// Default:        INTA
// Values:         None (0x0), INTA (0x1), INTB (0x2), INTC (0x3), INTD (0x4)
// Enabled:        CX_NFUNC > 29
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Pin Register. Function 29.
`define INT_PIN_MAPPING_29 8'h1


// Name:           IO_DECODE_32_29
// Default:        16-bit
// Values:         16-bit (0x0), 32-bit (0x1)
// Enabled:        CX_NFUNC > 29
// Parameter Type: Register Default Setting
// 
// Default value for the 32-Bit I/O Space bit in the I/O Base and I/O Limit Register. Function 29.
`define IO_DECODE_32_29 1'h0


// Name:           MEM_DECODE_64_29
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x1)
// Enabled:        CX_NFUNC > 29
// Parameter Type: Register Default Setting
// 
// Default value for the 64-Bit Memory Addressing bit in the Prefetchable Memory Base and Limit Register. Function 29.
`define MEM_DECODE_64_29 1'h0


// Name:           ROM_BAR_ENABLED_29
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 29
// Parameter Type: Register Default Setting
// 
// Include the expansion ROM BAR registers. Function 29.
`define ROM_BAR_ENABLED_29 1'h1


`define DEFAULT_ROM_BAR_ENABLED_29 1'h1


// Name:           ROM_MASK_29
// Default:        0xffff
// Values:         0x7ff, ..., 0xffffff
// Enabled:        CX_NFUNC > 29 && ROM_BAR_ENABLED_29==1
// Parameter Type: Register Default Setting
// 
// Determines the default of the Expansion ROM BAR Mask register. Function 29. 
//  - The BAR Mask register specifies which bits of the Expansion ROM BAR are non-writable by host software, which 
//  determines the size of the BAR. 
//  - The maximum value for ROM_MASK_N is 0xFFFFFF because the maximum space that can be claimed by an Expansion ROM BAR 
//  is 16 MB. 
//  - For example: 32'hFFFF =BAR size of 2^16.
`define ROM_MASK_29 32'hffff


// Name:           ROM_MASK_WRITABLE_29
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 29 && ROM_BAR_ENABLED_29==1
// Parameter Type: Feature Setting
// 
// Determines if the Expansion ROM BAR Mask register for function 29 is writable by application software. If writing to a 
// Expansion ROM BAR Mask register is enabled, your application can write to the Expansion ROM BAR Mask register through the 
// DBI by asserting dbi_cs2 in addition to dbi_cs.
`define ROM_MASK_WRITABLE_29 1'h0


// Name:           ROM_FUNC29_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 29 && ROM_BAR_ENABLED_29==1 && TRGT1_POPULATE==1))
// Parameter Type: Register Default Setting
// 
// Direct incoming requests that pass filtering and match the Expansion ROM BAR of function 29 to either RTRGT0 or RTRGT1. 
//  - For example, setting ROM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for the Expansion ROM BAR of function 
//  0 to RTRGT1. 
//  - If TRGT1_POPULATE =0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define ROM_FUNC29_TARGET_MAP 1'h1


// Name:           CX_PCI_HEADER_DEFAULTS_VISIBLE_29
// Default:        0
// Values:         0, 1
// Parameter Type: Register Default Setting
// 
// Select here if you want to configure the defaults for the other PCI Standard Header registers for function 29. 
//  An extra window will appear under this page. To access it, click the plus/minus symbol in the hierarchy view on the 
//  left panel. 
//  This is optional but not usually recommended. 
//  You can also change these register defaults using the DBI before (or after) the link comes up.
`define CX_PCI_HEADER_DEFAULTS_VISIBLE_29 0

//-/ END:   PCI BASIC CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: BAR CONFIGURATION


// Name:           BAR0_ENABLED_29
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 29
// Parameter Type: Feature Setting
// 
// Include the BAR0 registers for function 29.
`define BAR0_ENABLED_29 1'h1


`define DEFAULT_BAR0_ENABLED_29 1'h1


// Name:           MEM0_SPACE_DECODER_29
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 29 && BAR0_ENABLED_29==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 29.
`define MEM0_SPACE_DECODER_29 1'h0


// Name:           PREFETCHABLE0_29
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 29 && BAR0_ENABLED_29==1 && MEM0_SPACE_DECODER_29==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 29.
`define PREFETCHABLE0_29 1'h0


// Name:           BAR0_TYPE_29
// Default:        64-bit ((MEM0_SPACE_DECODER_29==1 || BAR0_ENABLED_29==0) ? 0 : 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 29 && BAR0_ENABLED_29==1 && MEM0_SPACE_DECODER_29==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 29.
`define BAR0_TYPE_29 2'h2


// Name:           BAR0_SIZING_SCHEME_29
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 29 && BAR0_ENABLED_29==1
// Parameter Type: Feature Setting
// 
// BAR0 Function 29 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR0_SIZING_SCHEME_29 2'h0


// Name:           CX_BAR0_RESIZABLE_29
// Default:        0x0 ((BAR0_SIZING_SCHEME_29==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR0_ENABLED_29==1) && (MEM0_SPACE_DECODER_29==0)
// Parameter Type: Feature Setting
// 
// Defines BAR0 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR0 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR0_RESIZABLE_29 1'h0


// Name:           CX_BAR0_RESOURCE_AVAIL_29
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 29 && CX_BAR0_RESIZABLE_29==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR0 of function 29. 
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
// Example: 0x00000030 indicates that BAR0 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR0_RESOURCE_AVAIL_29 64'h10


// Name:           BAR0_MASK_WRITABLE_29
// Default:        0x0 ((BAR0_ENABLED_29==1 && BAR0_SIZING_SCHEME_29 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 29 && BAR0_ENABLED_29==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR0 Mask through DBI
`define BAR0_MASK_WRITABLE_29 1'h0


// Name:           BAR0_MASK_29
// Default:        0xfffff (CX_BAR0_RESIZABLE_29==1 ? [calc_bar_mask 
//                 CX_BAR0_RESOURCE_AVAIL_29] : MEM0_SPACE_DECODER_29==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 29 && BAR0_ENABLED_29==1 && MEM0_SPACE_DECODER_29==0 && 
//                 CX_BAR0_RESIZABLE_29==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR0 Mask register of function 29. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR0_MASK_29 64'hfffff


// Name:           MEM_FUNC29_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 29 && BAR0_ENABLED_29==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_0 of function 29 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming Requests for BAR0 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC29_BAR0_TARGET_MAP 1'h1


// Name:           BAR1_ENABLED_29
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 29 && BAR0_TYPE_29==0
// Parameter Type: Feature Setting
// 
// Include the BAR1 registers for function 29.
`define BAR1_ENABLED_29 1'h0


`define DEFAULT_BAR1_ENABLED_29 1'h0


// Name:           MEM1_SPACE_DECODER_29
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 29 && BAR1_ENABLED_29==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 29.
`define MEM1_SPACE_DECODER_29 1'h0


// Name:           PREFETCHABLE1_29
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 29 && BAR1_ENABLED_29==1 && MEM1_SPACE_DECODER_29==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 29.
`define PREFETCHABLE1_29 1'h0


// Name:           BAR1_TYPE_29
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 29.
`define BAR1_TYPE_29 2'h0


// Name:           BAR1_SIZING_SCHEME_29
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 29 && BAR1_ENABLED_29==1
// Parameter Type: Feature Setting
// 
// BAR1 Function 29 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR1_SIZING_SCHEME_29 2'h0


// Name:           CX_BAR1_RESIZABLE_29
// Default:        0x0 ((BAR1_SIZING_SCHEME_29==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR1_ENABLED_29==1) && (MEM1_SPACE_DECODER_29==0)
// Parameter Type: Feature Setting
// 
// Defines BAR1 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR1 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR1_RESIZABLE_29 1'h0


// Name:           CX_BAR1_RESOURCE_AVAIL_29
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 29 && CX_BAR1_RESIZABLE_29==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR1 of function 29. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR1 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR1_RESOURCE_AVAIL_29 32'h10


// Name:           BAR1_MASK_WRITABLE_29
// Default:        0x0 ((BAR1_ENABLED_29==1 && BAR1_SIZING_SCHEME_29 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 29 && BAR1_ENABLED_29==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR1 Mask through DBI
`define BAR1_MASK_WRITABLE_29 1'h0


// Name:           BAR1_MASK_29
// Default:        0xffff (CX_BAR1_RESIZABLE_29==1 ? [calc_bar_mask 
//                 CX_BAR1_RESOURCE_AVAIL_29] : MEM1_SPACE_DECODER_29==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 29 && BAR1_ENABLED_29==1 && MEM1_SPACE_DECODER_29==0 && 
//                 CX_BAR1_RESIZABLE_29==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR1 Mask register of function 29. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR1_MASK_29 32'hffff


// Name:           MEM_FUNC29_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 29 && BAR1_ENABLED_29==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_1 of function 29 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR1_TARGET_MAP to 1 maps all incoming Requests for BAR1 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC29_BAR1_TARGET_MAP 1'h1


// Name:           BAR2_ENABLED_29
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 29
// Parameter Type: Feature Setting
// 
// Include the BAR2 registers for function 29.
`define BAR2_ENABLED_29 1'h1


`define DEFAULT_BAR2_ENABLED_29 1'h1


// Name:           MEM2_SPACE_DECODER_29
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 29 && BAR2_ENABLED_29==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 29.
`define MEM2_SPACE_DECODER_29 1'h0


// Name:           PREFETCHABLE2_29
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 29 && BAR2_ENABLED_29==1 && MEM2_SPACE_DECODER_29==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 29.
`define PREFETCHABLE2_29 1'h0


// Name:           BAR2_TYPE_29
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 29 && BAR2_ENABLED_29==1 && MEM2_SPACE_DECODER_29==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 29.
`define BAR2_TYPE_29 2'h0


// Name:           BAR2_SIZING_SCHEME_29
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 29 && BAR2_ENABLED_29==1
// Parameter Type: Feature Setting
// 
// BAR2 Function 29 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR2_SIZING_SCHEME_29 2'h0


// Name:           CX_BAR2_RESIZABLE_29
// Default:        0x0 ((BAR2_SIZING_SCHEME_29==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR2_ENABLED_29==1) && (MEM2_SPACE_DECODER_29==0)
// Parameter Type: Feature Setting
// 
// Defines BAR2 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR2 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR2_RESIZABLE_29 1'h0


// Name:           CX_BAR2_RESOURCE_AVAIL_29
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 29 && CX_BAR2_RESIZABLE_29==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR2 of function 29. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR2 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR2_RESOURCE_AVAIL_29 64'h10


// Name:           BAR2_MASK_WRITABLE_29
// Default:        0x0 ((BAR2_ENABLED_29==1 && BAR2_SIZING_SCHEME_29 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 29 && BAR2_ENABLED_29==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR2 Mask through DBI
`define BAR2_MASK_WRITABLE_29 1'h0


// Name:           BAR2_MASK_29
// Default:        0xfffff (CX_BAR2_RESIZABLE_29==1 ? [calc_bar_mask 
//                 CX_BAR2_RESOURCE_AVAIL_29] : MEM2_SPACE_DECODER_29==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 29 && BAR2_ENABLED_29==1 && MEM2_SPACE_DECODER_29==0 && 
//                 CX_BAR2_RESIZABLE_29==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR2 Mask register of function 29. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR2_MASK_29 64'hfffff


// Name:           MEM_FUNC29_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 29 && BAR2_ENABLED_29==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_2 of function 29 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR2_TARGET_MAP to 1 maps all incoming requests for BAR2 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC29_BAR2_TARGET_MAP 1'h1


// Name:           BAR3_ENABLED_29
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 29 && BAR2_TYPE_29==0
// Parameter Type: Feature Setting
// 
// Include the BAR3 registers for function 29.
`define BAR3_ENABLED_29 1'h0



`define DEFAULT_BAR3_ENABLED_29 1'h0


// Name:           MEM3_SPACE_DECODER_29
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 29 && BAR3_ENABLED_29==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 29.
`define MEM3_SPACE_DECODER_29 1'h0


// Name:           PREFETCHABLE3_29
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 29 && BAR3_ENABLED_29==1 && MEM3_SPACE_DECODER_29==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 29.
`define PREFETCHABLE3_29 1'h0


// Name:           BAR3_TYPE_29
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 29.
`define BAR3_TYPE_29 2'h0


// Name:           BAR3_SIZING_SCHEME_29
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 29 && BAR3_ENABLED_29==1
// Parameter Type: Feature Setting
// 
// BAR3 Function 29 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR3_SIZING_SCHEME_29 2'h0


// Name:           CX_BAR3_RESIZABLE_29
// Default:        0x0 ((BAR3_SIZING_SCHEME_29==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR3_ENABLED_29==1) && (MEM3_SPACE_DECODER_29==0)
// Parameter Type: Feature Setting
// 
// Defines BAR3 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR3 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR3_RESIZABLE_29 1'h0


// Name:           CX_BAR3_RESOURCE_AVAIL_29
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 29 && CX_BAR3_RESIZABLE_29==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR3 of function 29. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR3 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR3_RESOURCE_AVAIL_29 32'h10


// Name:           BAR3_MASK_WRITABLE_29
// Default:        0x0 ((BAR3_ENABLED_29==1 && BAR3_SIZING_SCHEME_29 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 29 && BAR3_ENABLED_29==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR3 Mask through DBI
`define BAR3_MASK_WRITABLE_29 1'h0


// Name:           BAR3_MASK_29
// Default:        0xffff (CX_BAR3_RESIZABLE_29==1 ? [calc_bar_mask 
//                 CX_BAR3_RESOURCE_AVAIL_29] : MEM3_SPACE_DECODER_29==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 29 && BAR3_ENABLED_29==1 && MEM3_SPACE_DECODER_29==0 && 
//                 CX_BAR3_RESIZABLE_29==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR3 Mask register of function 29. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR3_MASK_29 32'hffff


// Name:           MEM_FUNC29_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 29 && BAR3_ENABLED_29==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_3 of function 29 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR3_TARGET_MAP to 1 maps all incoming requests for BAR3 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC29_BAR3_TARGET_MAP 1'h1


// Name:           BAR4_ENABLED_29
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 29
// Parameter Type: Feature Setting
// 
// Include the BAR4 registers for function 29.
`define BAR4_ENABLED_29 1'h1


`define DEFAULT_BAR4_ENABLED_29 1'h1



// Name:           MEM4_SPACE_DECODER_29
// Default:        I/O (BAR4_ENABLED_29==1)
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 29 && BAR4_ENABLED_29==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 29.
`define MEM4_SPACE_DECODER_29 1'h1


// Name:           PREFETCHABLE4_29
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 29 && BAR4_ENABLED_29==1 && MEM4_SPACE_DECODER_29==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 29.
`define PREFETCHABLE4_29 1'h0


// Name:           BAR4_TYPE_29
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 29 && BAR4_ENABLED_29==1 && MEM4_SPACE_DECODER_29==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 29.
`define BAR4_TYPE_29 2'h0


// Name:           BAR4_SIZING_SCHEME_29
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 29 && BAR4_ENABLED_29==1
// Parameter Type: Feature Setting
// 
// BAR4  Function 29 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR4_SIZING_SCHEME_29 2'h0


// Name:           CX_BAR4_RESIZABLE_29
// Default:        0x0 ((BAR4_SIZING_SCHEME_29==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR4_ENABLED_29==1) && (MEM4_SPACE_DECODER_29==0)
// Parameter Type: Feature Setting
// 
// Defines BAR4 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR4 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR4_RESIZABLE_29 1'h0


// Name:           CX_BAR4_RESOURCE_AVAIL_29
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 29 &&  CX_BAR4_RESIZABLE_29==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR4 of function 29. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR4 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR4_RESOURCE_AVAIL_29 64'h10


// Name:           BAR4_MASK_WRITABLE_29
// Default:        0x0 ((BAR4_ENABLED_29==1 && BAR4_SIZING_SCHEME_29 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 29 && BAR4_ENABLED_29==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR4 Mask through DBI
`define BAR4_MASK_WRITABLE_29 1'h0


// Name:           BAR4_MASK_29
// Default:        0xff (CX_BAR4_RESIZABLE_29==1 ? [calc_bar_mask 
//                 CX_BAR4_RESOURCE_AVAIL_29] : MEM4_SPACE_DECODER_29==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 29 && BAR4_ENABLED_29==1 && MEM4_SPACE_DECODER_29==0 && 
//                 CX_BAR4_RESIZABLE_29==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR4 Mask register of function 29. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR4_MASK_29 64'hff


// Name:           MEM_FUNC29_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 29 && BAR4_ENABLED_29==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_4 of function 29 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR4_TARGET_MAP to 1 maps all incoming requests for BAR4 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC29_BAR4_TARGET_MAP 1'h1


// Name:           BAR5_ENABLED_29
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 29 && BAR4_TYPE_29==0
// Parameter Type: Feature Setting
// 
// Include the BAR5 registers for function 29.
`define BAR5_ENABLED_29 1'h0


`define DEFAULT_BAR5_ENABLED_29 1'h0


// Name:           MEM5_SPACE_DECODER_29
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 29 && BAR5_ENABLED_29==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 29.
`define MEM5_SPACE_DECODER_29 1'h0


// Name:           PREFETCHABLE5_29
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 29 && BAR5_ENABLED_29==1 && MEM5_SPACE_DECODER_29==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 29.
`define PREFETCHABLE5_29 1'h0


// Name:           BAR5_TYPE_29
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 29.
`define BAR5_TYPE_29 2'h0


// Name:           BAR5_SIZING_SCHEME_29
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 29 && BAR5_ENABLED_29==1
// Parameter Type: Feature Setting
// 
// BAR5  Function 29 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR5_SIZING_SCHEME_29 2'h0


// Name:           CX_BAR5_RESIZABLE_29
// Default:        0x0 ((BAR5_SIZING_SCHEME_29==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR5_ENABLED_29==1) && (MEM5_SPACE_DECODER_29==0)
// Parameter Type: Feature Setting
// 
// Defines BAR5 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR5 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR5_RESIZABLE_29 1'h0


// Name:           CX_BAR5_RESOURCE_AVAIL_29
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 29 && CX_BAR5_RESIZABLE_29==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR5 of function 29. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR5 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR5_RESOURCE_AVAIL_29 32'h10


// Name:           BAR5_MASK_WRITABLE_29
// Default:        0x0 ((BAR5_ENABLED_29==1 && BAR5_SIZING_SCHEME_29 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 29 && BAR5_ENABLED_29==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR5 Mask through DBI
`define BAR5_MASK_WRITABLE_29 1'h0


// Name:           BAR5_MASK_29
// Default:        0xffff (CX_BAR5_RESIZABLE_29==1 ? [calc_bar_mask 
//                 CX_BAR5_RESOURCE_AVAIL_29] : MEM5_SPACE_DECODER_29==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 29 && BAR5_ENABLED_29==1 && MEM5_SPACE_DECODER_29==0 && 
//                 CX_BAR5_RESIZABLE_29==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR5 Mask register of function 29. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR5_MASK_29 32'hffff


// Name:           MEM_FUNC29_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 29 && BAR5_ENABLED_29==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_5 of function 29 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR5_TARGET_MAP to 1 maps all incoming requests for BAR5 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC29_BAR5_TARGET_MAP 1'h1


`define FUNC29_BARSIZE_32 128'h0


`define FUNC29_BARSIZE 128'h0


`define FUNC29_BAR0_BARSIZE_TRGT1 128'h0


`define FUNC29_BAR2_BARSIZE_TRGT1 128'h0


`define FUNC29_BAR4_BARSIZE_TRGT1 128'h0


`define FUNC29_BAR0_TRGT1_ADDR_WIDTH 1


`define FUNC29_BAR2_TRGT1_ADDR_WIDTH 1


`define FUNC29_BAR4_TRGT1_ADDR_WIDTH 1


// Name:         CX_NUM_RBARS_29
// Default:      0 ([calc_num_rbars CX_BAR0_RESIZABLE_29 CX_BAR1_RESIZABLE_29 
//               CX_BAR2_RESIZABLE_29 CX_BAR3_RESIZABLE_29 CX_BAR4_RESIZABLE_29 
//               CX_BAR5_RESIZABLE_29])
// Values:       -2147483648, ..., 2147483647
// 
// Number of resizable BARs
`define CX_NUM_RBARS_29 0

//-/ END:   BAR CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SR-IOV CAPABILITIES CONFIGURATION


// Name:           CX_VF_DEPENDENCY_LINK_29
// Default:        0x29
// Values:         0x0, ..., 0xff
// Enabled:        CX_VF_DEPENDENCY_LINK_SUPP && (CX_NFUNC > 29) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Specifies the 8-bit VF dependency link for PF29. Valid only if CX_VF_DEPENDENCY_LINK_SUPP=1.
`define CX_VF_DEPENDENCY_LINK_29 8'h29


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER1_29
// Default:        0x2 ((CX_NFUNC>=17) ? 32 : (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : 
//                 (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF29 in an ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER1_29 16'h2


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER0_29
// Default:        0x100
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF29 
//  in a non-ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER0_29 16'h100


// Name:           VF_STRIDE_ARI_CAP_HIER1_29
// Default:        0x2 (CX_VF_STRIDE_ALWAYS_ONE) ? 1 : ((CX_NFUNC>=17) ? 32 : 
//                 (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF29 in an ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER1_29 16'h2


// Name:           VF_STRIDE_ARI_CAP_HIER0_29
// Default:        0x100 ((CX_VF_STRIDE_ALWAYS_ONE) ? 0x0001 : 0x0100)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF29 in a non-ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER0_29 16'h100


// Name:           CX_VF_DEVICE_ID_29
// Default:        0x0 (CX_DEVICE_ID_29)
// Values:         0x0, ..., 0xffff
// Enabled:        (CX_NFUNC > 29) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 16-bit virtual function Device ID for PF29. 
//  It might be different from the physical function's.
`define CX_VF_DEVICE_ID_29 16'h0


// Name:           CX_VF_SUPP_PAGE_SIZE_29
// Default:        0x553
// Values:         0x553, ..., 0xffff
// Enabled:        (CX_NFUNC > 29) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 32-bit supported page sizes for virtual functions for PF29
`define CX_VF_SUPP_PAGE_SIZE_29 32'h553


// Name:           CX_ARI_CAP_HIER_PRSVD_29
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Specifies if ARI Capable Hierarchy bit is preserved across certain power state transitions 
//  Only present in PF0. Read Only Zero in this PF29.
`define CX_ARI_CAP_HIER_PRSVD_29 1'h0

//-/===========================================
//-/ START: VF BAR CONFIGURATION


// Name:           VF_BAR0_ENABLED_29
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 29)
// Parameter Type: Feature Setting
// 
// Include the VF BAR0 registers in PF29
`define VF_BAR0_ENABLED_29 1'h1


`define VF_DEFAULT_BAR0_ENABLED_29 1'h1


// Name:           VF_MEM0_SPACE_DECODER_29
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR0_ENABLED_29 && CX_SRIOV_ENABLE && (CX_NFUNC > 29)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Space Indicator 
//  ALWAYS set to Memory for Virtual Functions
`define VF_MEM0_SPACE_DECODER_29 1'h0


// Name:           VF_PREFETCHABLE0_29
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_29==1 && VF_MEM0_SPACE_DECODER_29==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 29)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Prefetchable 
//  When set indicates VF BAR0 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE0_29 1'h0


// Name:           VF_BAR0_TYPE_29
// Default:        64-bit ((VF_MEM0_SPACE_DECODER_29==1 || VF_BAR0_ENABLED_29==0) ? 0 
//                 : 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR0_ENABLED_29==1 && VF_MEM0_SPACE_DECODER_29==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 29)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 29; (bits [2:1] for a memory BAR).
`define VF_BAR0_TYPE_29 2'h2


// Name:           VF_BAR0_MASK_WRITABLE_29
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_29==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 29)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR0_MASK_WRITABLE_29 1'h0


// Name:           VF_BAR0_MASK_29
// Default:        0xfffff (VF_MEM0_SPACE_DECODER_29==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR0_ENABLED_29==1 && VF_MEM0_SPACE_DECODER_29==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 29)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Mask 
//  Determines the default of the VF BAR Mask register for PF29. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR0_MASK_29 64'hfffff


// Name:           VF_MEM_FUNC29_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR0_ENABLED_29==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE 
//                 && (CX_NFUNC > 29)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF29 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC29_BAR0_TARGET_MAP 1'h1


// Name:           VF_BAR1_ENABLED_29
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        (VF_BAR0_TYPE_29==0)  && CX_SRIOV_ENABLE && (CX_NFUNC > 29)
// Parameter Type: Feature Setting
// 
// Include the VF BAR1 registers in PF29
`define VF_BAR1_ENABLED_29 1'h0


`define VF_DEFAULT_BAR1_ENABLED_29 1'h0


// Name:           VF_MEM1_SPACE_DECODER_29
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR1_ENABLED_29==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 29)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Space Indicator
`define VF_MEM1_SPACE_DECODER_29 1'h0


// Name:           VF_PREFETCHABLE1_29
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_29==1 && VF_MEM1_SPACE_DECODER_29==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 29)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Prefetchable 
//  When set indicates VF BAR1 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE1_29 1'h0


// Name:           VF_BAR1_TYPE_29
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 29; (bits [2:1] for a memory BAR).
`define VF_BAR1_TYPE_29 2'h0


// Name:           VF_BAR1_MASK_WRITABLE_29
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_29==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 29)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR1_MASK_WRITABLE_29 1'h0


// Name:           VF_BAR1_MASK_29
// Default:        0xffff (VF_MEM1_SPACE_DECODER_29==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR1_ENABLED_29==1 && VF_MEM1_SPACE_DECODER_29==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 29)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Mask 
//  Determines the default of the VF BAR Mask register for PF29. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR1_MASK_29 32'hffff


// Name:           VF_MEM_FUNC29_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR1_ENABLED_29==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE 
//                 && (CX_NFUNC > 29)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF29 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC29_BAR1_TARGET_MAP 1'h1


// Name:           VF_BAR2_ENABLED_29
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 29)
// Parameter Type: Feature Setting
// 
// Include the VF BAR2 registers in PF29
`define VF_BAR2_ENABLED_29 1'h1


`define VF_DEFAULT_BAR2_ENABLED_29 1'h1


// Name:           VF_MEM2_SPACE_DECODER_29
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR2_ENABLED_29==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 29)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Memory Space Indicator
`define VF_MEM2_SPACE_DECODER_29 1'h0


// Name:           VF_PREFETCHABLE2_29
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_29==1 && VF_MEM2_SPACE_DECODER_29==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 29)
// Parameter Type: Register Default Setting
// 
// BAR2 Memory Prefetchable 
//  When set indicates VF BAR2 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE2_29 1'h0


// Name:           VF_BAR2_TYPE_29
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR2_ENABLED_29==1 && VF_MEM2_SPACE_DECODER_29==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 29)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 29; (bits [2:1] for a memory BAR).
`define VF_BAR2_TYPE_29 2'h0


// Name:           VF_BAR2_MASK_WRITABLE_29
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_29==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 29)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR2_MASK_WRITABLE_29 1'h0


// Name:           VF_BAR2_MASK_29
// Default:        0xfffff (VF_MEM2_SPACE_DECODER_29==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR2_ENABLED_29==1 && VF_MEM2_SPACE_DECODER_29==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 29)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Mask 
//  Determines the default of the VF BAR Mask register for PF29. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR2_MASK_29 64'hfffff


// Name:           VF_MEM_FUNC29_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR2_ENABLED_29==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 29)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF29 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC29_BAR2_TARGET_MAP 1'h1


// Name:           VF_BAR3_ENABLED_29
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_TYPE_29==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 29)
// Parameter Type: Feature Setting
// 
// Include the VF BAR3 registers in PF29
`define VF_BAR3_ENABLED_29 1'h0


`define VF_DEFAULT_BAR3_ENABLED_29 1'h0


// Name:           VF_MEM3_SPACE_DECODER_29
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR3_ENABLED_29==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 29)
// Parameter Type: Register Default Setting
// 
// BAR3 Memory Space Indicator
`define VF_MEM3_SPACE_DECODER_29 1'h0


// Name:           VF_PREFETCHABLE3_29
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_29==1 && VF_MEM3_SPACE_DECODER_29==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 29)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Memory Prefetchable 
//  When set indicates VF BAR3 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE3_29 1'h0


// Name:           VF_BAR3_TYPE_29
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 29; (bits [2:1] for a memory BAR).
`define VF_BAR3_TYPE_29 2'h0


// Name:           VF_BAR3_MASK_WRITABLE_29
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_29==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 29)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR3_MASK_WRITABLE_29 1'h0


// Name:           VF_BAR3_MASK_29
// Default:        0xffff (VF_MEM3_SPACE_DECODER_29==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR3_ENABLED_29==1 && VF_MEM3_SPACE_DECODER_29==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 29)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Mask 
//  Determines the default of the VF BAR Mask register for PF29. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR3_MASK_29 32'hffff


// Name:           VF_MEM_FUNC29_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR3_ENABLED_29==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 29)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF29 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC29_BAR3_TARGET_MAP 1'h1


// Name:           VF_BAR4_ENABLED_29
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 29)
// Parameter Type: Feature Setting
// 
// Include the VF BAR4 registers in PF29
`define VF_BAR4_ENABLED_29 1'h1


`define VF_DEFAULT_BAR4_ENABLED_29 1'h1


// Name:           VF_MEM4_SPACE_DECODER_29
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR4_ENABLED_29==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 29)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Space Indicator
`define VF_MEM4_SPACE_DECODER_29 1'h0


// Name:           VF_PREFETCHABLE4_29
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_29==1 && VF_MEM4_SPACE_DECODER_29==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 29)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Prefetchable 
//  When set indicates VF BAR4 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE4_29 1'h0


// Name:           VF_BAR4_TYPE_29
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR4_ENABLED_29==1 && VF_MEM4_SPACE_DECODER_29==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 29)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 29; (bits [2:1] for a memory BAR).
`define VF_BAR4_TYPE_29 2'h0


// Name:           VF_BAR4_MASK_WRITABLE_29
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_29==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 29)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR4_MASK_WRITABLE_29 1'h0


// Name:           VF_BAR4_MASK_29
// Default:        0xfff (VF_MEM4_SPACE_DECODER_29==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR4_ENABLED_29==1 && VF_MEM4_SPACE_DECODER_29==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 29)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Mask 
//  Determines the default of the VF BAR Mask register for PF29. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR4_MASK_29 64'hfff


// Name:           VF_MEM_FUNC29_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR4_ENABLED_29==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 29)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF29 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC29_BAR4_TARGET_MAP 1'h1


// Name:           VF_BAR5_ENABLED_29
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_TYPE_29==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 29)
// Parameter Type: Feature Setting
// 
// Include the VF BAR5 registers in PF29
`define VF_BAR5_ENABLED_29 1'h0


`define VF_DEFAULT_BAR5_ENABLED_29 1'h0


// Name:           VF_MEM5_SPACE_DECODER_29
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR5_ENABLED_29==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 29)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Space Indicator
`define VF_MEM5_SPACE_DECODER_29 1'h0


// Name:           VF_PREFETCHABLE5_29
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_29==1 && VF_MEM5_SPACE_DECODER_29==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 29)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Prefetchable 
//  When set indicates VF BAR5 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE5_29 1'h0


// Name:           VF_BAR5_TYPE_29
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 29; (bits [2:1] for a memory BAR).
`define VF_BAR5_TYPE_29 2'h0


// Name:           VF_BAR5_MASK_WRITABLE_29
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_29==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 29)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR5_MASK_WRITABLE_29 1'h0


// Name:           VF_BAR5_MASK_29
// Default:        0xffff (VF_MEM5_SPACE_DECODER_29==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR5_ENABLED_29==1 && VF_MEM5_SPACE_DECODER_29==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 29)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Mask 
//  Determines the default of the VF BAR Mask register for PF29. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR5_MASK_29 32'hffff


// Name:           VF_MEM_FUNC29_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR5_ENABLED_29==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 29)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF29 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC29_BAR5_TARGET_MAP 1'h1


`define VF_FUNC29_BARSIZE_32 128'h101000


`define VF_FUNC29_BARSIZE 128'h201000

//-/ END:   VF BAR CONFIGURATION
//-/===========================================

//-/ END:   SR-IOV CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: TPH CAPABILITIES CONFIGURATION


// Name:           TPH_IVEC_29
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Interrupt Vector Mode. If set indicates that the function supports the Interrupt Vector 
// Mode of operation. Function 29.
`define TPH_IVEC_29 1'h0


// Name:           TPH_DS_29
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Device Specific Mode. If set indicates that the function supports the Device Specific Mode 
// of operation. Function 29.
`define TPH_DS_29 1'h0


// Name:           TPH_ST_TABLE_LOC_29
// Default:        Not Present
// Values:         Not Present (0), TPH Requester Capability Structure (1), MSI-X 
//                 Table Structure (2)
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_DS_29 || TPH_IVEC_29))
// Parameter Type: Feature Setting
// 
// TLP Processing Hints Steering Tag Table Location. Value indicates if and where the ST Table is located. Function 29.
`define TPH_ST_TABLE_LOC_29 0

//located in the TPH Requester Capability structure. Please reduce the ST Table Size for this mode of operation"

// Name:           TPH_ST_TABLE_SIZE_29
// Default:        1
// Values:         1, ..., 2048
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_ST_TABLE_LOC_29 != 0))
// Parameter Type: Feature Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define TPH_ST_TABLE_SIZE_29 1


`define TPH_ST_TABLE_DEPTH_29 0

//-/ END:   TPH CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: ATS CAPABILITIES CONFIGURATION


// Name:           ATS_INV_Q_DPTH_29
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// The number of Invalidate Requests that the Function can accept before putting backpressure on the upstream connection. A 
// value of 0 indicates the function can accept 32 Invalidate requests. Function 29.
`define ATS_INV_Q_DPTH_29 5'd0


// Name:           ATS_STU_29
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// This value indicates to the Function the minimum number of 4096-byte blocks that is indicated in a Translation 
// Completion or Invalidate Request. This is a power of 2 multiplier and the number of blocks is 2^STU. A value of 0 indicates 1 block 
// and a value of 31 indicates 2^31 blocks (or 8 TB total). Function 29.
`define ATS_STU_29 5'd0

//-/ END:   ATS CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PRS CAPABILITIES CONFIGURATION


// Name:           CX_PRS_OUTSTANDING_CAPACITY_VALUE_29
// Default:        0x1
// Values:         0x0, ..., 0xffffffff
// Enabled:        (CX_PRS_ENABLE==1) && (CX_NFUNC > 29)
// Parameter Type: Register Default Setting
// 
// Register default for PRS Outstanding Capacity in PF29. 
// For more details, see the PRS_OUTSTANDING_CAPACITY field in the PRS_REQ_CAPACITY_REG register.
`define CX_PRS_OUTSTANDING_CAPACITY_VALUE_29 32'h1

//-/ END:   PRS CAPABILITIES CONFIGURATION
//-/===========================================


//-/===========================================
//--- START: RN


// Name:           CX_RN_IMM_VALUE_29
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 29)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for PF29.
`define CX_RN_IMM_VALUE_29 1'h0


// Name:           CX_RN_IMM_D0_VALUE_29
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 29)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for PF29.
`define CX_RN_IMM_D0_VALUE_29 1'h0


// Name:           CX_RN_FRS_VALUE_29
// Default:        0x0 (CX_RN_FRS_SUPPORTED==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_FRS_SUPPORTED==1) && (CX_NFUNC > 29)
// Parameter Type: Feature Setting
// 
// Function Readiness Status messaging supported for function PF29.
`define CX_RN_FRS_VALUE_29 1'h0


// Name:           CX_RN_RTR_VALID_29
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 29)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF29.
`define CX_RN_RTR_VALID_29 1'h0


// Name:           CX_RN_RTR_DL_UP_VALUE_29
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 29)
// Parameter Type: Register Default Setting
// 
// Register default for RTR DL Up Time field in PF29.
`define CX_RN_RTR_DL_UP_VALUE_29 12'h0


// Name:           CX_RN_RTR_RESET_VALUE_29
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 29)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF29.
`define CX_RN_RTR_RESET_VALUE_29 12'h0


// Name:           CX_RN_RTR_D3D0_VALUE_29
// Default:        0x0
// Values:         0x0, ..., 0x80a
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 29)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF29.
`define CX_RN_RTR_D3D0_VALUE_29 12'h0


// Name:           CX_RN_RTR_FLR_VALUE_29
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_FLR_ENABLE==1) && (CX_NFUNC > 29)
// Parameter Type: Register Default Setting
// 
// Register default for RTR FLR Time field in PF29.
`define CX_RN_RTR_FLR_VALUE_29 12'h0


// Name:           VF_RN_IMM_VALUE_29
// Default:        0x0 (CX_RN_IMM_VALUE_29 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 29))
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for VFs in PF29.
`define VF_RN_IMM_VALUE_29 1'h0


// Name:           VF_RN_IMM_D0_VALUE_29
// Default:        0x0 (CX_RN_IMM_D0_VALUE_29 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 29))
// Parameter Type: Register Default Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for VFs in PF29.
`define VF_RN_IMM_D0_VALUE_29 1'h0


// Name:           VF_RN_RTR_VALID_29
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 29) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF29 VFs.
`define VF_RN_RTR_VALID_29 1'h0


// Name:           VF_RN_RTR_RESET_VALUE_29
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_29)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 29) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF29 VFS.
`define VF_RN_RTR_RESET_VALUE_29 12'h0


// Name:           VF_RN_RTR_D3D0_VALUE_29
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_29)
// Values:         0x0, ..., 0x80a
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 29) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF29 VFS.
`define VF_RN_RTR_D3D0_VALUE_29 12'h0


// Name:           VF_RN_RTR_FLR_VALUE_29
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_29)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 29) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF29 VFs.
`define VF_RN_RTR_FLR_VALUE_29 12'h0


// Name:           EXT_VF_RN_RTR_VALID_29
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 29) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF29 VFs.
`define EXT_VF_RN_RTR_VALID_29 1'h0


// Name:           EXT_VF_RN_RTR_RESET_VALUE_29
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_29)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 29) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF29 VFS.
`define EXT_VF_RN_RTR_RESET_VALUE_29 12'h0


// Name:           EXT_VF_RN_RTR_D3D0_VALUE_29
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_29)
// Values:         0x0, ..., 0x80a
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 29) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF29 VFS.
`define EXT_VF_RN_RTR_D3D0_VALUE_29 12'h0


// Name:           EXT_VF_RN_RTR_FLR_VALUE_29
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_29)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 29) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF29 VFs.
`define EXT_VF_RN_RTR_FLR_VALUE_29 12'h0

//-/ END:   RN
//-/===========================================

//-/ START: LN CAPABILITIES CONFIGURATION
//-/===========================================


// Name:           CX_LN_REG_MAX_VALUE_29
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 29))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_64_SUPPORTED field in the LNR_CAP_OFF register for PF29.
`define CX_LN_REG_MAX_VALUE_29 5'h0


// Name:           CX_LN_128_SUPPORTED_VALUE_29
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 29))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_128_SUPPORTED field in the LNR_CAP_OFF register for PF29.
`define CX_LN_128_SUPPORTED_VALUE_29 1'h0


// Name:           CX_LN_64_SUPPORTED_VALUE_29
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 29))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_REGISTRATION_MAX field in the LNR_CAP_OFF register for PF29.
`define CX_LN_64_SUPPORTED_VALUE_29 1'h0

//-/ END:   LN CAPABILITIES CONFIGURATION
//-/===========================================




//-/==========================================
//-/ End FUNC29 Config
//-/==========================================

//-/===========================================
//-/ Function 30 Configuration Registers
//-/ ==========================================


// Name:         FUNC_30
// Default:      0 ((CX_NFUNC > 30) ? 1 : 0)
// Values:       0, 1
// 
// This parameter indicates that Function 30 is present
// `define FUNC_30

//-/===========================================
//-/ START: PCI-E CAPABILITIES CONFIGURATION


// Name:           PCIE_CAP_INT_MSG_NUM_30
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 30
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Message Number field in the PCI Express Capabilities Register. Function 30.
`define PCIE_CAP_INT_MSG_NUM_30 5'h0


// Name:           SLOT_IMPLEMENTED_30
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_NFUNC > 30))
// Parameter Type: Register Default Setting
// 
// Indicates that the PCI Express link associated with this Port is connected to a slot. Function 30.
`define SLOT_IMPLEMENTED_30 1'h0


// Name:           DEFAULT_PHANTOM_FUNC_SUPPORTED_30
// Default:        0x0
// Values:         0x0, ..., 0x3
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_PHANTOM_FUNC_SUPPORTED_30 2'h0


// Name:           DEFAULT_EXT_TAG_FIELD_SUPPORTED_30
// Default:        0x0 (DEFAULT_EXT_TAG_FIELD_SUPPORTED_0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 30
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_EXT_TAG_FIELD_SUPPORTED_30 1'h0



// Name:           DEFAULT_ATT_BUTT_PRE_30
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 30
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Button is present
`define DEFAULT_ATT_BUTT_PRE_30 1'h0


// Name:           DEFAULT_ATT_IND_PRE_30
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 30
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Indicator is present
`define DEFAULT_ATT_IND_PRE_30 1'h0


// Name:           DEFAULT_PWR_IND_PRE_30
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 30
// Parameter Type: Register Default Setting
// 
// When set indicates that a Power Indicator is present
`define DEFAULT_PWR_IND_PRE_30 1'h0


// Name:           DEFAULT_NO_SNOOP_SUPPORTED_30
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 30
// Parameter Type: Register Default Setting
// 
// Default value for the Enable No Snoop bit in the Device Control Register. Function 30.
`define DEFAULT_NO_SNOOP_SUPPORTED_30 1'h0


// Name:           ROOT_RCB_30
// Default:        64-bit
// Values:         64-bit (0x0), 128-bit (0x1)
// Parameter Type: Register Default Setting
// 
// Default value for the Read Completion Boundary (RCB) bit in the Link Control Register.
`define ROOT_RCB_30 1'h0


//-/ END:   PCI-E CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: MSI-X CAPABILITIES CONFIGURATION


// Name:           MSIX_TABLE_SIZE_30
// Default:        0x0
// Values:         0x0, ..., 0x7ff
// Enabled:        CX_NFUNC > 30 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the MSI-X Table Size field in the MSI-X Control Register. Function 30.
`define MSIX_TABLE_SIZE_30 11'h0


// Name:           MSIX_TABLE_BIR_30
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 30 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table BAR Indicator Register (BIR) field in the MSI-X Table Offset and BIR Register. Function 30.
`define MSIX_TABLE_BIR_30 3'h0


// Name:           MSIX_TABLE_OFFSET_30
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 30 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table Offset field in the MSI-X Table Offset and BIR Register. Function 30.
`define MSIX_TABLE_OFFSET_30 29'h0


// Name:           MSIX_PBA_BIR_30
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 30 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Pending Bit Array (PBA) BIR field in the MSI-X PBA Offset and BIR Register. Function 30.
`define MSIX_PBA_BIR_30 7'h0


// Name:           MSIX_PBA_OFFSET_30
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 30 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the PBA Offset field in the MSI-X PBA Offset and BIR Register. Function 30.
`define MSIX_PBA_OFFSET_30 29'h0

//-/ END:   MSI-X CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SATA CAPABILITIES CONFIGURATION


// Name:         SATA_HBA_OFFSET_30
// Default:      0x0
// Values:       0x0, ..., 0xfffff
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA Offset. Base address of the SATA HBA registers, 
//  as an offset from the base address of the BAR indicated 
//  by the SATA BAR field.
`define SATA_HBA_OFFSET_30 20'h0


// Name:         SATA_BAR_30
// Default:      0x0
// Values:       0x0, ..., 0xf
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA BAR. The bar that maps to SATA HBA registers,
`define SATA_BAR_30 4'h0

//-/ END:   SATA CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: AER CAPABILITIES CONFIGURATION


// Name:           DEFAULT_ECRC_CHK_CAP_30
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 30 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Check Capable bit in the Advanced Capabilities and Control Register. Function 30.
`define DEFAULT_ECRC_CHK_CAP_30 1'h1


// Name:           DEFAULT_ECRC_GEN_CAP_30
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 30 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Generation Capability bit in the Advanced Capabilities and Control Register. Function 30.
`define DEFAULT_ECRC_GEN_CAP_30 1'h1


// Name:           AER_INT_MSG_NUM_30
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Parameter Type: Register Default Setting
// 
// Default value for the Advanced Error Interrupt Message Number field of the Root Error Status Register. Function 30.
`define AER_INT_MSG_NUM_30 5'h0



// Name:           CX_HDR_LOG_DEPTH_30
// Default:        0x1
// Values:         0x1, 0x2, 0x4
// Enabled:        CX_NFUNC > 30 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Feature Setting.
// 
// Header Log Depth
`define CX_HDR_LOG_DEPTH_30 3'h1


`define CX_MULTIPLE_HDR_REC_CAP_30 1'h0

//-/ END:   AER CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PM CAPABILITIES CONFIGURATION


// Name:           PME_SUPPORT_30
// Default:        0x1b
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 30
// Parameter Type: Register Default Setting
// 
// Default value for the PME_Support field in the Power Management Capabilities Register. Function 30.
`define PME_SUPPORT_30 5'h1b


// Name:           D1_SUPPORT_30
// Default:        true
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 30
// Parameter Type: Register Default Setting
// 
// Default value for the D1 Support bit in the Power Management Capabilities Register. Function 30.
`define D1_SUPPORT_30 1'h1


// Name:           D2_SUPPORT_30
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 30
// Parameter Type: Register Default Setting
// 
// Default value for the D2 Support bit in the Power Management Capabilities Register. Function 30.
`define D2_SUPPORT_30 1'h0


// Name:           DEV_SPEC_INIT_30
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 30
// Parameter Type: Register Default Setting
// 
// Default value for the Device Specific Initialization (DSI) bit in the Power Management Capabilities Register. Function 
// 30.
`define DEV_SPEC_INIT_30 1'h0


// Name:           AUX_CURRENT_30
// Default:        375mA
// Values:         0mA (0x0), 55mA (0x1), 100mA (0x2), 160mA (0x3), 220mA (0x4), 270mA 
//                 (0x5), 320mA (0x6), 375mA (0x7)
// Enabled:        CX_NFUNC > 30
// Parameter Type: Register Default Setting
// 
// Default value for the Aux Current field in the Power Management Capabilities Register. Function 30.
`define AUX_CURRENT_30 3'h7


// Name:           DEFAULT_NO_SOFT_RESET_30
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 30
// Parameter Type: Register Default Setting
// 
// Default value for the No Soft Reset bit in the Power Management Control and Status Register. When set, you should not 
// reset any controller registers when transitioning from D3hot to D0. Therefore, you should not assert the non_sticky_rst_n 
// and sticky_rst_n inputs. Function 30.
`define DEFAULT_NO_SOFT_RESET_30 1'h0

//-/ END:   PM CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PCI BASIC CONFIGURATION


// Name:           CX_DEVICE_ID_30
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 30
// Parameter Type: Register Default Setting
// 
// Default value for the Device ID field in the Device ID and Vendor ID Register. Function 30.
`define CX_DEVICE_ID_30 16'h0


// Name:           CX_VENDOR_ID_30
// Default:        0x16c3
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 30
// Parameter Type: Register Default Setting
// 
// Default value for the Vendor ID field in the Device ID and Vendor ID Register. Function 30.
`define CX_VENDOR_ID_30 16'h16c3


// Name:           CX_REVISION_ID_30
// Default:        0x1
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 30
// Parameter Type: Register Default Setting
// 
// Default value for the Revision ID field in the Revision ID Register. Function 30.
`define CX_REVISION_ID_30 8'h1


// Name:           SUBSYS_DEV_ID_30
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 30
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 30.
`define SUBSYS_DEV_ID_30 16'h0


// Name:           SUBSYS_VENDOR_ID_30
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 30
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem Vendor ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 30.
`define SUBSYS_VENDOR_ID_30 16'h0


// Name:           BASE_CLASS_CODE_30
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 30
// Parameter Type: Register Default Setting
// 
// Default value for the Base Class Code field in the Class Code Register. Function 30.
`define BASE_CLASS_CODE_30 8'h0


// Name:           SUB_CLASS_CODE_30
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 30
// Parameter Type: Register Default Setting
// 
// Default value for the Subclass Code field in the Class Code Register. Function 30.
`define SUB_CLASS_CODE_30 8'h0


// Name:           IF_CODE_30
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 30
// Parameter Type: Register Default Setting
// 
// Default value for the Programming Interface field in the Class Code Register. Function 30.
`define IF_CODE_30 8'h0


// Name:           CARDBUS_CIS_PTR_30
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 30
// Parameter Type: Register Default Setting
// 
// Default value for the CardBus CIS Pointer Register. Function 30.
`define CARDBUS_CIS_PTR_30 16'h0


// Name:           INT_PIN_MAPPING_30
// Default:        INTA
// Values:         None (0x0), INTA (0x1), INTB (0x2), INTC (0x3), INTD (0x4)
// Enabled:        CX_NFUNC > 30
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Pin Register. Function 30.
`define INT_PIN_MAPPING_30 8'h1


// Name:           IO_DECODE_32_30
// Default:        16-bit
// Values:         16-bit (0x0), 32-bit (0x1)
// Enabled:        CX_NFUNC > 30
// Parameter Type: Register Default Setting
// 
// Default value for the 32-Bit I/O Space bit in the I/O Base and I/O Limit Register. Function 30.
`define IO_DECODE_32_30 1'h0


// Name:           MEM_DECODE_64_30
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x1)
// Enabled:        CX_NFUNC > 30
// Parameter Type: Register Default Setting
// 
// Default value for the 64-Bit Memory Addressing bit in the Prefetchable Memory Base and Limit Register. Function 30.
`define MEM_DECODE_64_30 1'h0


// Name:           ROM_BAR_ENABLED_30
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 30
// Parameter Type: Register Default Setting
// 
// Include the expansion ROM BAR registers. Function 30.
`define ROM_BAR_ENABLED_30 1'h1


`define DEFAULT_ROM_BAR_ENABLED_30 1'h1


// Name:           ROM_MASK_30
// Default:        0xffff
// Values:         0x7ff, ..., 0xffffff
// Enabled:        CX_NFUNC > 30 && ROM_BAR_ENABLED_30==1
// Parameter Type: Register Default Setting
// 
// Determines the default of the Expansion ROM BAR Mask register. Function 30. 
//  - The BAR Mask register specifies which bits of the Expansion ROM BAR are non-writable by host software, which 
//  determines the size of the BAR. 
//  - The maximum value for ROM_MASK_N is 0xFFFFFF because the maximum space that can be claimed by an Expansion ROM BAR 
//  is 16 MB. 
//  - For example: 32'hFFFF =BAR size of 2^16.
`define ROM_MASK_30 32'hffff


// Name:           ROM_MASK_WRITABLE_30
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 30 && ROM_BAR_ENABLED_30==1
// Parameter Type: Feature Setting
// 
// Determines if the Expansion ROM BAR Mask register for function 30 is writable by application software. If writing to a 
// Expansion ROM BAR Mask register is enabled, your application can write to the Expansion ROM BAR Mask register through the 
// DBI by asserting dbi_cs2 in addition to dbi_cs.
`define ROM_MASK_WRITABLE_30 1'h0


// Name:           ROM_FUNC30_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 30 && ROM_BAR_ENABLED_30==1 && TRGT1_POPULATE==1))
// Parameter Type: Register Default Setting
// 
// Direct incoming requests that pass filtering and match the Expansion ROM BAR of function 30 to either RTRGT0 or RTRGT1. 
//  - For example, setting ROM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for the Expansion ROM BAR of function 
//  0 to RTRGT1. 
//  - If TRGT1_POPULATE =0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define ROM_FUNC30_TARGET_MAP 1'h1


// Name:           CX_PCI_HEADER_DEFAULTS_VISIBLE_30
// Default:        0
// Values:         0, 1
// Parameter Type: Register Default Setting
// 
// Select here if you want to configure the defaults for the other PCI Standard Header registers for function 30. 
//  An extra window will appear under this page. To access it, click the plus/minus symbol in the hierarchy view on the 
//  left panel. 
//  This is optional but not usually recommended. 
//  You can also change these register defaults using the DBI before (or after) the link comes up.
`define CX_PCI_HEADER_DEFAULTS_VISIBLE_30 0

//-/ END:   PCI BASIC CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: BAR CONFIGURATION


// Name:           BAR0_ENABLED_30
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 30
// Parameter Type: Feature Setting
// 
// Include the BAR0 registers for function 30.
`define BAR0_ENABLED_30 1'h1


`define DEFAULT_BAR0_ENABLED_30 1'h1


// Name:           MEM0_SPACE_DECODER_30
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 30 && BAR0_ENABLED_30==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 30.
`define MEM0_SPACE_DECODER_30 1'h0


// Name:           PREFETCHABLE0_30
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 30 && BAR0_ENABLED_30==1 && MEM0_SPACE_DECODER_30==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 30.
`define PREFETCHABLE0_30 1'h0


// Name:           BAR0_TYPE_30
// Default:        64-bit ((MEM0_SPACE_DECODER_30==1 || BAR0_ENABLED_30==0) ? 0 : 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 30 && BAR0_ENABLED_30==1 && MEM0_SPACE_DECODER_30==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 30.
`define BAR0_TYPE_30 2'h2


// Name:           BAR0_SIZING_SCHEME_30
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 30 && BAR0_ENABLED_30==1
// Parameter Type: Feature Setting
// 
// BAR0 Function 30 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR0_SIZING_SCHEME_30 2'h0


// Name:           CX_BAR0_RESIZABLE_30
// Default:        0x0 ((BAR0_SIZING_SCHEME_30==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR0_ENABLED_30==1) && (MEM0_SPACE_DECODER_30==0)
// Parameter Type: Feature Setting
// 
// Defines BAR0 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR0 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR0_RESIZABLE_30 1'h0


// Name:           CX_BAR0_RESOURCE_AVAIL_30
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 30 && CX_BAR0_RESIZABLE_30==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR0 of function 30. 
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
// Example: 0x00000030 indicates that BAR0 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR0_RESOURCE_AVAIL_30 64'h10


// Name:           BAR0_MASK_WRITABLE_30
// Default:        0x0 ((BAR0_ENABLED_30==1 && BAR0_SIZING_SCHEME_30 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 30 && BAR0_ENABLED_30==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR0 Mask through DBI
`define BAR0_MASK_WRITABLE_30 1'h0


// Name:           BAR0_MASK_30
// Default:        0xfffff (CX_BAR0_RESIZABLE_30==1 ? [calc_bar_mask 
//                 CX_BAR0_RESOURCE_AVAIL_30] : MEM0_SPACE_DECODER_30==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 30 && BAR0_ENABLED_30==1 && MEM0_SPACE_DECODER_30==0 && 
//                 CX_BAR0_RESIZABLE_30==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR0 Mask register of function 30. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR0_MASK_30 64'hfffff


// Name:           MEM_FUNC30_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 30 && BAR0_ENABLED_30==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_0 of function 30 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming Requests for BAR0 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC30_BAR0_TARGET_MAP 1'h1


// Name:           BAR1_ENABLED_30
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 30 && BAR0_TYPE_30==0
// Parameter Type: Feature Setting
// 
// Include the BAR1 registers for function 30.
`define BAR1_ENABLED_30 1'h0


`define DEFAULT_BAR1_ENABLED_30 1'h0


// Name:           MEM1_SPACE_DECODER_30
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 30 && BAR1_ENABLED_30==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 30.
`define MEM1_SPACE_DECODER_30 1'h0


// Name:           PREFETCHABLE1_30
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 30 && BAR1_ENABLED_30==1 && MEM1_SPACE_DECODER_30==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 30.
`define PREFETCHABLE1_30 1'h0


// Name:           BAR1_TYPE_30
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 30.
`define BAR1_TYPE_30 2'h0


// Name:           BAR1_SIZING_SCHEME_30
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 30 && BAR1_ENABLED_30==1
// Parameter Type: Feature Setting
// 
// BAR1 Function 30 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR1_SIZING_SCHEME_30 2'h0


// Name:           CX_BAR1_RESIZABLE_30
// Default:        0x0 ((BAR1_SIZING_SCHEME_30==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR1_ENABLED_30==1) && (MEM1_SPACE_DECODER_30==0)
// Parameter Type: Feature Setting
// 
// Defines BAR1 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR1 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR1_RESIZABLE_30 1'h0


// Name:           CX_BAR1_RESOURCE_AVAIL_30
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 30 && CX_BAR1_RESIZABLE_30==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR1 of function 30. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR1 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR1_RESOURCE_AVAIL_30 32'h10


// Name:           BAR1_MASK_WRITABLE_30
// Default:        0x0 ((BAR1_ENABLED_30==1 && BAR1_SIZING_SCHEME_30 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 30 && BAR1_ENABLED_30==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR1 Mask through DBI
`define BAR1_MASK_WRITABLE_30 1'h0


// Name:           BAR1_MASK_30
// Default:        0xffff (CX_BAR1_RESIZABLE_30==1 ? [calc_bar_mask 
//                 CX_BAR1_RESOURCE_AVAIL_30] : MEM1_SPACE_DECODER_30==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 30 && BAR1_ENABLED_30==1 && MEM1_SPACE_DECODER_30==0 && 
//                 CX_BAR1_RESIZABLE_30==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR1 Mask register of function 30. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR1_MASK_30 32'hffff


// Name:           MEM_FUNC30_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 30 && BAR1_ENABLED_30==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_1 of function 30 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR1_TARGET_MAP to 1 maps all incoming Requests for BAR1 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC30_BAR1_TARGET_MAP 1'h1


// Name:           BAR2_ENABLED_30
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 30
// Parameter Type: Feature Setting
// 
// Include the BAR2 registers for function 30.
`define BAR2_ENABLED_30 1'h1


`define DEFAULT_BAR2_ENABLED_30 1'h1


// Name:           MEM2_SPACE_DECODER_30
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 30 && BAR2_ENABLED_30==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 30.
`define MEM2_SPACE_DECODER_30 1'h0


// Name:           PREFETCHABLE2_30
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 30 && BAR2_ENABLED_30==1 && MEM2_SPACE_DECODER_30==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 30.
`define PREFETCHABLE2_30 1'h0


// Name:           BAR2_TYPE_30
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 30 && BAR2_ENABLED_30==1 && MEM2_SPACE_DECODER_30==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 30.
`define BAR2_TYPE_30 2'h0


// Name:           BAR2_SIZING_SCHEME_30
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 30 && BAR2_ENABLED_30==1
// Parameter Type: Feature Setting
// 
// BAR2 Function 30 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR2_SIZING_SCHEME_30 2'h0


// Name:           CX_BAR2_RESIZABLE_30
// Default:        0x0 ((BAR2_SIZING_SCHEME_30==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR2_ENABLED_30==1) && (MEM2_SPACE_DECODER_30==0)
// Parameter Type: Feature Setting
// 
// Defines BAR2 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR2 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR2_RESIZABLE_30 1'h0


// Name:           CX_BAR2_RESOURCE_AVAIL_30
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 30 && CX_BAR2_RESIZABLE_30==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR2 of function 30. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR2 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR2_RESOURCE_AVAIL_30 64'h10


// Name:           BAR2_MASK_WRITABLE_30
// Default:        0x0 ((BAR2_ENABLED_30==1 && BAR2_SIZING_SCHEME_30 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 30 && BAR2_ENABLED_30==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR2 Mask through DBI
`define BAR2_MASK_WRITABLE_30 1'h0


// Name:           BAR2_MASK_30
// Default:        0xfffff (CX_BAR2_RESIZABLE_30==1 ? [calc_bar_mask 
//                 CX_BAR2_RESOURCE_AVAIL_30] : MEM2_SPACE_DECODER_30==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 30 && BAR2_ENABLED_30==1 && MEM2_SPACE_DECODER_30==0 && 
//                 CX_BAR2_RESIZABLE_30==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR2 Mask register of function 30. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR2_MASK_30 64'hfffff


// Name:           MEM_FUNC30_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 30 && BAR2_ENABLED_30==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_2 of function 30 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR2_TARGET_MAP to 1 maps all incoming requests for BAR2 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC30_BAR2_TARGET_MAP 1'h1


// Name:           BAR3_ENABLED_30
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 30 && BAR2_TYPE_30==0
// Parameter Type: Feature Setting
// 
// Include the BAR3 registers for function 30.
`define BAR3_ENABLED_30 1'h0



`define DEFAULT_BAR3_ENABLED_30 1'h0


// Name:           MEM3_SPACE_DECODER_30
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 30 && BAR3_ENABLED_30==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 30.
`define MEM3_SPACE_DECODER_30 1'h0


// Name:           PREFETCHABLE3_30
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 30 && BAR3_ENABLED_30==1 && MEM3_SPACE_DECODER_30==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 30.
`define PREFETCHABLE3_30 1'h0


// Name:           BAR3_TYPE_30
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 30.
`define BAR3_TYPE_30 2'h0


// Name:           BAR3_SIZING_SCHEME_30
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 30 && BAR3_ENABLED_30==1
// Parameter Type: Feature Setting
// 
// BAR3 Function 30 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR3_SIZING_SCHEME_30 2'h0


// Name:           CX_BAR3_RESIZABLE_30
// Default:        0x0 ((BAR3_SIZING_SCHEME_30==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR3_ENABLED_30==1) && (MEM3_SPACE_DECODER_30==0)
// Parameter Type: Feature Setting
// 
// Defines BAR3 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR3 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR3_RESIZABLE_30 1'h0


// Name:           CX_BAR3_RESOURCE_AVAIL_30
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 30 && CX_BAR3_RESIZABLE_30==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR3 of function 30. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR3 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR3_RESOURCE_AVAIL_30 32'h10


// Name:           BAR3_MASK_WRITABLE_30
// Default:        0x0 ((BAR3_ENABLED_30==1 && BAR3_SIZING_SCHEME_30 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 30 && BAR3_ENABLED_30==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR3 Mask through DBI
`define BAR3_MASK_WRITABLE_30 1'h0


// Name:           BAR3_MASK_30
// Default:        0xffff (CX_BAR3_RESIZABLE_30==1 ? [calc_bar_mask 
//                 CX_BAR3_RESOURCE_AVAIL_30] : MEM3_SPACE_DECODER_30==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 30 && BAR3_ENABLED_30==1 && MEM3_SPACE_DECODER_30==0 && 
//                 CX_BAR3_RESIZABLE_30==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR3 Mask register of function 30. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR3_MASK_30 32'hffff


// Name:           MEM_FUNC30_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 30 && BAR3_ENABLED_30==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_3 of function 30 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR3_TARGET_MAP to 1 maps all incoming requests for BAR3 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC30_BAR3_TARGET_MAP 1'h1


// Name:           BAR4_ENABLED_30
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 30
// Parameter Type: Feature Setting
// 
// Include the BAR4 registers for function 30.
`define BAR4_ENABLED_30 1'h1


`define DEFAULT_BAR4_ENABLED_30 1'h1



// Name:           MEM4_SPACE_DECODER_30
// Default:        I/O (BAR4_ENABLED_30==1)
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 30 && BAR4_ENABLED_30==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 30.
`define MEM4_SPACE_DECODER_30 1'h1


// Name:           PREFETCHABLE4_30
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 30 && BAR4_ENABLED_30==1 && MEM4_SPACE_DECODER_30==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 30.
`define PREFETCHABLE4_30 1'h0


// Name:           BAR4_TYPE_30
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 30 && BAR4_ENABLED_30==1 && MEM4_SPACE_DECODER_30==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 30.
`define BAR4_TYPE_30 2'h0


// Name:           BAR4_SIZING_SCHEME_30
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 30 && BAR4_ENABLED_30==1
// Parameter Type: Feature Setting
// 
// BAR4  Function 30 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR4_SIZING_SCHEME_30 2'h0


// Name:           CX_BAR4_RESIZABLE_30
// Default:        0x0 ((BAR4_SIZING_SCHEME_30==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR4_ENABLED_30==1) && (MEM4_SPACE_DECODER_30==0)
// Parameter Type: Feature Setting
// 
// Defines BAR4 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR4 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR4_RESIZABLE_30 1'h0


// Name:           CX_BAR4_RESOURCE_AVAIL_30
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 30 &&  CX_BAR4_RESIZABLE_30==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR4 of function 30. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR4 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR4_RESOURCE_AVAIL_30 64'h10


// Name:           BAR4_MASK_WRITABLE_30
// Default:        0x0 ((BAR4_ENABLED_30==1 && BAR4_SIZING_SCHEME_30 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 30 && BAR4_ENABLED_30==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR4 Mask through DBI
`define BAR4_MASK_WRITABLE_30 1'h0


// Name:           BAR4_MASK_30
// Default:        0xff (CX_BAR4_RESIZABLE_30==1 ? [calc_bar_mask 
//                 CX_BAR4_RESOURCE_AVAIL_30] : MEM4_SPACE_DECODER_30==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 30 && BAR4_ENABLED_30==1 && MEM4_SPACE_DECODER_30==0 && 
//                 CX_BAR4_RESIZABLE_30==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR4 Mask register of function 30. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR4_MASK_30 64'hff


// Name:           MEM_FUNC30_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 30 && BAR4_ENABLED_30==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_4 of function 30 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR4_TARGET_MAP to 1 maps all incoming requests for BAR4 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC30_BAR4_TARGET_MAP 1'h1


// Name:           BAR5_ENABLED_30
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 30 && BAR4_TYPE_30==0
// Parameter Type: Feature Setting
// 
// Include the BAR5 registers for function 30.
`define BAR5_ENABLED_30 1'h0


`define DEFAULT_BAR5_ENABLED_30 1'h0


// Name:           MEM5_SPACE_DECODER_30
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 30 && BAR5_ENABLED_30==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 30.
`define MEM5_SPACE_DECODER_30 1'h0


// Name:           PREFETCHABLE5_30
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 30 && BAR5_ENABLED_30==1 && MEM5_SPACE_DECODER_30==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 30.
`define PREFETCHABLE5_30 1'h0


// Name:           BAR5_TYPE_30
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 30.
`define BAR5_TYPE_30 2'h0


// Name:           BAR5_SIZING_SCHEME_30
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 30 && BAR5_ENABLED_30==1
// Parameter Type: Feature Setting
// 
// BAR5  Function 30 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR5_SIZING_SCHEME_30 2'h0


// Name:           CX_BAR5_RESIZABLE_30
// Default:        0x0 ((BAR5_SIZING_SCHEME_30==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR5_ENABLED_30==1) && (MEM5_SPACE_DECODER_30==0)
// Parameter Type: Feature Setting
// 
// Defines BAR5 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR5 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR5_RESIZABLE_30 1'h0


// Name:           CX_BAR5_RESOURCE_AVAIL_30
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 30 && CX_BAR5_RESIZABLE_30==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR5 of function 30. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR5 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR5_RESOURCE_AVAIL_30 32'h10


// Name:           BAR5_MASK_WRITABLE_30
// Default:        0x0 ((BAR5_ENABLED_30==1 && BAR5_SIZING_SCHEME_30 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 30 && BAR5_ENABLED_30==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR5 Mask through DBI
`define BAR5_MASK_WRITABLE_30 1'h0


// Name:           BAR5_MASK_30
// Default:        0xffff (CX_BAR5_RESIZABLE_30==1 ? [calc_bar_mask 
//                 CX_BAR5_RESOURCE_AVAIL_30] : MEM5_SPACE_DECODER_30==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 30 && BAR5_ENABLED_30==1 && MEM5_SPACE_DECODER_30==0 && 
//                 CX_BAR5_RESIZABLE_30==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR5 Mask register of function 30. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR5_MASK_30 32'hffff


// Name:           MEM_FUNC30_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 30 && BAR5_ENABLED_30==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_5 of function 30 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR5_TARGET_MAP to 1 maps all incoming requests for BAR5 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC30_BAR5_TARGET_MAP 1'h1


`define FUNC30_BARSIZE_32 128'h0


`define FUNC30_BARSIZE 128'h0


`define FUNC30_BAR0_BARSIZE_TRGT1 128'h0


`define FUNC30_BAR2_BARSIZE_TRGT1 128'h0


`define FUNC30_BAR4_BARSIZE_TRGT1 128'h0


`define FUNC30_BAR0_TRGT1_ADDR_WIDTH 1


`define FUNC30_BAR2_TRGT1_ADDR_WIDTH 1


`define FUNC30_BAR4_TRGT1_ADDR_WIDTH 1


// Name:         CX_NUM_RBARS_30
// Default:      0 ([calc_num_rbars CX_BAR0_RESIZABLE_30 CX_BAR1_RESIZABLE_30 
//               CX_BAR2_RESIZABLE_30 CX_BAR3_RESIZABLE_30 CX_BAR4_RESIZABLE_30 
//               CX_BAR5_RESIZABLE_30])
// Values:       -2147483648, ..., 2147483647
// 
// Number of resizable BARs
`define CX_NUM_RBARS_30 0

//-/ END:   BAR CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SR-IOV CAPABILITIES CONFIGURATION


// Name:           CX_VF_DEPENDENCY_LINK_30
// Default:        0x30
// Values:         0x0, ..., 0xff
// Enabled:        CX_VF_DEPENDENCY_LINK_SUPP && (CX_NFUNC > 30) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Specifies the 8-bit VF dependency link for PF30. Valid only if CX_VF_DEPENDENCY_LINK_SUPP=1.
`define CX_VF_DEPENDENCY_LINK_30 8'h30


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER1_30
// Default:        0x2 ((CX_NFUNC>=17) ? 32 : (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : 
//                 (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF30 in an ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER1_30 16'h2


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER0_30
// Default:        0x100
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF30 
//  in a non-ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER0_30 16'h100


// Name:           VF_STRIDE_ARI_CAP_HIER1_30
// Default:        0x2 (CX_VF_STRIDE_ALWAYS_ONE) ? 1 : ((CX_NFUNC>=17) ? 32 : 
//                 (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF30 in an ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER1_30 16'h2


// Name:           VF_STRIDE_ARI_CAP_HIER0_30
// Default:        0x100 ((CX_VF_STRIDE_ALWAYS_ONE) ? 0x0001 : 0x0100)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF30 in a non-ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER0_30 16'h100


// Name:           CX_VF_DEVICE_ID_30
// Default:        0x0 (CX_DEVICE_ID_30)
// Values:         0x0, ..., 0xffff
// Enabled:        (CX_NFUNC > 30) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 16-bit virtual function Device ID for PF30. 
//  It might be different from the physical function's.
`define CX_VF_DEVICE_ID_30 16'h0


// Name:           CX_VF_SUPP_PAGE_SIZE_30
// Default:        0x553
// Values:         0x553, ..., 0xffff
// Enabled:        (CX_NFUNC > 30) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 32-bit supported page sizes for virtual functions for PF30
`define CX_VF_SUPP_PAGE_SIZE_30 32'h553


// Name:           CX_ARI_CAP_HIER_PRSVD_30
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Specifies if ARI Capable Hierarchy bit is preserved across certain power state transitions 
//  Only present in PF0. Read Only Zero in this PF30.
`define CX_ARI_CAP_HIER_PRSVD_30 1'h0

//-/===========================================
//-/ START: VF BAR CONFIGURATION


// Name:           VF_BAR0_ENABLED_30
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 30)
// Parameter Type: Feature Setting
// 
// Include the VF BAR0 registers in PF30
`define VF_BAR0_ENABLED_30 1'h1


`define VF_DEFAULT_BAR0_ENABLED_30 1'h1


// Name:           VF_MEM0_SPACE_DECODER_30
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR0_ENABLED_30 && CX_SRIOV_ENABLE && (CX_NFUNC > 30)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Space Indicator 
//  ALWAYS set to Memory for Virtual Functions
`define VF_MEM0_SPACE_DECODER_30 1'h0


// Name:           VF_PREFETCHABLE0_30
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_30==1 && VF_MEM0_SPACE_DECODER_30==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 30)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Prefetchable 
//  When set indicates VF BAR0 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE0_30 1'h0


// Name:           VF_BAR0_TYPE_30
// Default:        64-bit ((VF_MEM0_SPACE_DECODER_30==1 || VF_BAR0_ENABLED_30==0) ? 0 
//                 : 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR0_ENABLED_30==1 && VF_MEM0_SPACE_DECODER_30==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 30)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 30; (bits [2:1] for a memory BAR).
`define VF_BAR0_TYPE_30 2'h2


// Name:           VF_BAR0_MASK_WRITABLE_30
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_30==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 30)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR0_MASK_WRITABLE_30 1'h0


// Name:           VF_BAR0_MASK_30
// Default:        0xfffff (VF_MEM0_SPACE_DECODER_30==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR0_ENABLED_30==1 && VF_MEM0_SPACE_DECODER_30==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 30)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Mask 
//  Determines the default of the VF BAR Mask register for PF30. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR0_MASK_30 64'hfffff


// Name:           VF_MEM_FUNC30_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR0_ENABLED_30==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE 
//                 && (CX_NFUNC > 30)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF30 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC30_BAR0_TARGET_MAP 1'h1


// Name:           VF_BAR1_ENABLED_30
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        (VF_BAR0_TYPE_30==0)  && CX_SRIOV_ENABLE && (CX_NFUNC > 30)
// Parameter Type: Feature Setting
// 
// Include the VF BAR1 registers in PF30
`define VF_BAR1_ENABLED_30 1'h0


`define VF_DEFAULT_BAR1_ENABLED_30 1'h0


// Name:           VF_MEM1_SPACE_DECODER_30
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR1_ENABLED_30==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 30)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Space Indicator
`define VF_MEM1_SPACE_DECODER_30 1'h0


// Name:           VF_PREFETCHABLE1_30
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_30==1 && VF_MEM1_SPACE_DECODER_30==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 30)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Prefetchable 
//  When set indicates VF BAR1 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE1_30 1'h0


// Name:           VF_BAR1_TYPE_30
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 30; (bits [2:1] for a memory BAR).
`define VF_BAR1_TYPE_30 2'h0


// Name:           VF_BAR1_MASK_WRITABLE_30
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_30==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 30)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR1_MASK_WRITABLE_30 1'h0


// Name:           VF_BAR1_MASK_30
// Default:        0xffff (VF_MEM1_SPACE_DECODER_30==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR1_ENABLED_30==1 && VF_MEM1_SPACE_DECODER_30==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 30)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Mask 
//  Determines the default of the VF BAR Mask register for PF30. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR1_MASK_30 32'hffff


// Name:           VF_MEM_FUNC30_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR1_ENABLED_30==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE 
//                 && (CX_NFUNC > 30)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF30 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC30_BAR1_TARGET_MAP 1'h1


// Name:           VF_BAR2_ENABLED_30
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 30)
// Parameter Type: Feature Setting
// 
// Include the VF BAR2 registers in PF30
`define VF_BAR2_ENABLED_30 1'h1


`define VF_DEFAULT_BAR2_ENABLED_30 1'h1


// Name:           VF_MEM2_SPACE_DECODER_30
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR2_ENABLED_30==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 30)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Memory Space Indicator
`define VF_MEM2_SPACE_DECODER_30 1'h0


// Name:           VF_PREFETCHABLE2_30
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_30==1 && VF_MEM2_SPACE_DECODER_30==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 30)
// Parameter Type: Register Default Setting
// 
// BAR2 Memory Prefetchable 
//  When set indicates VF BAR2 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE2_30 1'h0


// Name:           VF_BAR2_TYPE_30
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR2_ENABLED_30==1 && VF_MEM2_SPACE_DECODER_30==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 30)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 30; (bits [2:1] for a memory BAR).
`define VF_BAR2_TYPE_30 2'h0


// Name:           VF_BAR2_MASK_WRITABLE_30
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_30==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 30)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR2_MASK_WRITABLE_30 1'h0


// Name:           VF_BAR2_MASK_30
// Default:        0xfffff (VF_MEM2_SPACE_DECODER_30==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR2_ENABLED_30==1 && VF_MEM2_SPACE_DECODER_30==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 30)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Mask 
//  Determines the default of the VF BAR Mask register for PF30. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR2_MASK_30 64'hfffff


// Name:           VF_MEM_FUNC30_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR2_ENABLED_30==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 30)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF30 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC30_BAR2_TARGET_MAP 1'h1


// Name:           VF_BAR3_ENABLED_30
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_TYPE_30==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 30)
// Parameter Type: Feature Setting
// 
// Include the VF BAR3 registers in PF30
`define VF_BAR3_ENABLED_30 1'h0


`define VF_DEFAULT_BAR3_ENABLED_30 1'h0


// Name:           VF_MEM3_SPACE_DECODER_30
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR3_ENABLED_30==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 30)
// Parameter Type: Register Default Setting
// 
// BAR3 Memory Space Indicator
`define VF_MEM3_SPACE_DECODER_30 1'h0


// Name:           VF_PREFETCHABLE3_30
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_30==1 && VF_MEM3_SPACE_DECODER_30==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 30)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Memory Prefetchable 
//  When set indicates VF BAR3 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE3_30 1'h0


// Name:           VF_BAR3_TYPE_30
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 30; (bits [2:1] for a memory BAR).
`define VF_BAR3_TYPE_30 2'h0


// Name:           VF_BAR3_MASK_WRITABLE_30
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_30==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 30)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR3_MASK_WRITABLE_30 1'h0


// Name:           VF_BAR3_MASK_30
// Default:        0xffff (VF_MEM3_SPACE_DECODER_30==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR3_ENABLED_30==1 && VF_MEM3_SPACE_DECODER_30==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 30)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Mask 
//  Determines the default of the VF BAR Mask register for PF30. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR3_MASK_30 32'hffff


// Name:           VF_MEM_FUNC30_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR3_ENABLED_30==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 30)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF30 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC30_BAR3_TARGET_MAP 1'h1


// Name:           VF_BAR4_ENABLED_30
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 30)
// Parameter Type: Feature Setting
// 
// Include the VF BAR4 registers in PF30
`define VF_BAR4_ENABLED_30 1'h1


`define VF_DEFAULT_BAR4_ENABLED_30 1'h1


// Name:           VF_MEM4_SPACE_DECODER_30
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR4_ENABLED_30==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 30)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Space Indicator
`define VF_MEM4_SPACE_DECODER_30 1'h0


// Name:           VF_PREFETCHABLE4_30
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_30==1 && VF_MEM4_SPACE_DECODER_30==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 30)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Prefetchable 
//  When set indicates VF BAR4 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE4_30 1'h0


// Name:           VF_BAR4_TYPE_30
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR4_ENABLED_30==1 && VF_MEM4_SPACE_DECODER_30==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 30)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 30; (bits [2:1] for a memory BAR).
`define VF_BAR4_TYPE_30 2'h0


// Name:           VF_BAR4_MASK_WRITABLE_30
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_30==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 30)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR4_MASK_WRITABLE_30 1'h0


// Name:           VF_BAR4_MASK_30
// Default:        0xfff (VF_MEM4_SPACE_DECODER_30==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR4_ENABLED_30==1 && VF_MEM4_SPACE_DECODER_30==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 30)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Mask 
//  Determines the default of the VF BAR Mask register for PF30. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR4_MASK_30 64'hfff


// Name:           VF_MEM_FUNC30_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR4_ENABLED_30==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 30)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF30 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC30_BAR4_TARGET_MAP 1'h1


// Name:           VF_BAR5_ENABLED_30
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_TYPE_30==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 30)
// Parameter Type: Feature Setting
// 
// Include the VF BAR5 registers in PF30
`define VF_BAR5_ENABLED_30 1'h0


`define VF_DEFAULT_BAR5_ENABLED_30 1'h0


// Name:           VF_MEM5_SPACE_DECODER_30
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR5_ENABLED_30==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 30)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Space Indicator
`define VF_MEM5_SPACE_DECODER_30 1'h0


// Name:           VF_PREFETCHABLE5_30
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_30==1 && VF_MEM5_SPACE_DECODER_30==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 30)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Prefetchable 
//  When set indicates VF BAR5 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE5_30 1'h0


// Name:           VF_BAR5_TYPE_30
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 30; (bits [2:1] for a memory BAR).
`define VF_BAR5_TYPE_30 2'h0


// Name:           VF_BAR5_MASK_WRITABLE_30
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_30==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 30)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR5_MASK_WRITABLE_30 1'h0


// Name:           VF_BAR5_MASK_30
// Default:        0xffff (VF_MEM5_SPACE_DECODER_30==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR5_ENABLED_30==1 && VF_MEM5_SPACE_DECODER_30==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 30)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Mask 
//  Determines the default of the VF BAR Mask register for PF30. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR5_MASK_30 32'hffff


// Name:           VF_MEM_FUNC30_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR5_ENABLED_30==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 30)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF30 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC30_BAR5_TARGET_MAP 1'h1


`define VF_FUNC30_BARSIZE_32 128'h101000


`define VF_FUNC30_BARSIZE 128'h201000

//-/ END:   VF BAR CONFIGURATION
//-/===========================================

//-/ END:   SR-IOV CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: TPH CAPABILITIES CONFIGURATION


// Name:           TPH_IVEC_30
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Interrupt Vector Mode. If set indicates that the function supports the Interrupt Vector 
// Mode of operation. Function 30.
`define TPH_IVEC_30 1'h0


// Name:           TPH_DS_30
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Device Specific Mode. If set indicates that the function supports the Device Specific Mode 
// of operation. Function 30.
`define TPH_DS_30 1'h0


// Name:           TPH_ST_TABLE_LOC_30
// Default:        Not Present
// Values:         Not Present (0), TPH Requester Capability Structure (1), MSI-X 
//                 Table Structure (2)
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_DS_30 || TPH_IVEC_30))
// Parameter Type: Feature Setting
// 
// TLP Processing Hints Steering Tag Table Location. Value indicates if and where the ST Table is located. Function 30.
`define TPH_ST_TABLE_LOC_30 0

//located in the TPH Requester Capability structure. Please reduce the ST Table Size for this mode of operation"

// Name:           TPH_ST_TABLE_SIZE_30
// Default:        1
// Values:         1, ..., 2048
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_ST_TABLE_LOC_30 != 0))
// Parameter Type: Feature Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define TPH_ST_TABLE_SIZE_30 1


`define TPH_ST_TABLE_DEPTH_30 0

//-/ END:   TPH CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: ATS CAPABILITIES CONFIGURATION


// Name:           ATS_INV_Q_DPTH_30
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// The number of Invalidate Requests that the Function can accept before putting backpressure on the upstream connection. A 
// value of 0 indicates the function can accept 32 Invalidate requests. Function 30.
`define ATS_INV_Q_DPTH_30 5'd0


// Name:           ATS_STU_30
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// This value indicates to the Function the minimum number of 4096-byte blocks that is indicated in a Translation 
// Completion or Invalidate Request. This is a power of 2 multiplier and the number of blocks is 2^STU. A value of 0 indicates 1 block 
// and a value of 31 indicates 2^31 blocks (or 8 TB total). Function 30.
`define ATS_STU_30 5'd0

//-/ END:   ATS CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PRS CAPABILITIES CONFIGURATION


// Name:           CX_PRS_OUTSTANDING_CAPACITY_VALUE_30
// Default:        0x1
// Values:         0x0, ..., 0xffffffff
// Enabled:        (CX_PRS_ENABLE==1) && (CX_NFUNC > 30)
// Parameter Type: Register Default Setting
// 
// Register default for PRS Outstanding Capacity in PF30. 
// For more details, see the PRS_OUTSTANDING_CAPACITY field in the PRS_REQ_CAPACITY_REG register.
`define CX_PRS_OUTSTANDING_CAPACITY_VALUE_30 32'h1

//-/ END:   PRS CAPABILITIES CONFIGURATION
//-/===========================================


//-/===========================================
//--- START: RN


// Name:           CX_RN_IMM_VALUE_30
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 30)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for PF30.
`define CX_RN_IMM_VALUE_30 1'h0


// Name:           CX_RN_IMM_D0_VALUE_30
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 30)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for PF30.
`define CX_RN_IMM_D0_VALUE_30 1'h0


// Name:           CX_RN_FRS_VALUE_30
// Default:        0x0 (CX_RN_FRS_SUPPORTED==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_FRS_SUPPORTED==1) && (CX_NFUNC > 30)
// Parameter Type: Feature Setting
// 
// Function Readiness Status messaging supported for function PF30.
`define CX_RN_FRS_VALUE_30 1'h0


// Name:           CX_RN_RTR_VALID_30
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 30)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF30.
`define CX_RN_RTR_VALID_30 1'h0


// Name:           CX_RN_RTR_DL_UP_VALUE_30
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 30)
// Parameter Type: Register Default Setting
// 
// Register default for RTR DL Up Time field in PF30.
`define CX_RN_RTR_DL_UP_VALUE_30 12'h0


// Name:           CX_RN_RTR_RESET_VALUE_30
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 30)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF30.
`define CX_RN_RTR_RESET_VALUE_30 12'h0


// Name:           CX_RN_RTR_D3D0_VALUE_30
// Default:        0x0
// Values:         0x0, ..., 0x80a
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 30)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF30.
`define CX_RN_RTR_D3D0_VALUE_30 12'h0


// Name:           CX_RN_RTR_FLR_VALUE_30
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_FLR_ENABLE==1) && (CX_NFUNC > 30)
// Parameter Type: Register Default Setting
// 
// Register default for RTR FLR Time field in PF30.
`define CX_RN_RTR_FLR_VALUE_30 12'h0


// Name:           VF_RN_IMM_VALUE_30
// Default:        0x0 (CX_RN_IMM_VALUE_30 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 30))
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for VFs in PF30.
`define VF_RN_IMM_VALUE_30 1'h0


// Name:           VF_RN_IMM_D0_VALUE_30
// Default:        0x0 (CX_RN_IMM_D0_VALUE_30 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 30))
// Parameter Type: Register Default Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for VFs in PF30.
`define VF_RN_IMM_D0_VALUE_30 1'h0


// Name:           VF_RN_RTR_VALID_30
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 30) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF30 VFs.
`define VF_RN_RTR_VALID_30 1'h0


// Name:           VF_RN_RTR_RESET_VALUE_30
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_30)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 30) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF30 VFS.
`define VF_RN_RTR_RESET_VALUE_30 12'h0


// Name:           VF_RN_RTR_D3D0_VALUE_30
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_30)
// Values:         0x0, ..., 0x80a
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 30) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF30 VFS.
`define VF_RN_RTR_D3D0_VALUE_30 12'h0


// Name:           VF_RN_RTR_FLR_VALUE_30
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_30)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 30) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF30 VFs.
`define VF_RN_RTR_FLR_VALUE_30 12'h0


// Name:           EXT_VF_RN_RTR_VALID_30
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 30) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF30 VFs.
`define EXT_VF_RN_RTR_VALID_30 1'h0


// Name:           EXT_VF_RN_RTR_RESET_VALUE_30
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_30)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 30) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF30 VFS.
`define EXT_VF_RN_RTR_RESET_VALUE_30 12'h0


// Name:           EXT_VF_RN_RTR_D3D0_VALUE_30
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_30)
// Values:         0x0, ..., 0x80a
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 30) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF30 VFS.
`define EXT_VF_RN_RTR_D3D0_VALUE_30 12'h0


// Name:           EXT_VF_RN_RTR_FLR_VALUE_30
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_30)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 30) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF30 VFs.
`define EXT_VF_RN_RTR_FLR_VALUE_30 12'h0

//-/ END:   RN
//-/===========================================

//-/ START: LN CAPABILITIES CONFIGURATION
//-/===========================================


// Name:           CX_LN_REG_MAX_VALUE_30
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 30))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_64_SUPPORTED field in the LNR_CAP_OFF register for PF30.
`define CX_LN_REG_MAX_VALUE_30 5'h0


// Name:           CX_LN_128_SUPPORTED_VALUE_30
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 30))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_128_SUPPORTED field in the LNR_CAP_OFF register for PF30.
`define CX_LN_128_SUPPORTED_VALUE_30 1'h0


// Name:           CX_LN_64_SUPPORTED_VALUE_30
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 30))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_REGISTRATION_MAX field in the LNR_CAP_OFF register for PF30.
`define CX_LN_64_SUPPORTED_VALUE_30 1'h0

//-/ END:   LN CAPABILITIES CONFIGURATION
//-/===========================================




//-/==========================================
//-/ End FUNC30 Config
//-/==========================================

//-/===========================================
//-/ Function 31 Configuration Registers
//-/ ==========================================


// Name:         FUNC_31
// Default:      0 ((CX_NFUNC > 31) ? 1 : 0)
// Values:       0, 1
// 
// This parameter indicates that Function 31 is present
// `define FUNC_31

//-/===========================================
//-/ START: PCI-E CAPABILITIES CONFIGURATION


// Name:           PCIE_CAP_INT_MSG_NUM_31
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 31
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Message Number field in the PCI Express Capabilities Register. Function 31.
`define PCIE_CAP_INT_MSG_NUM_31 5'h0


// Name:           SLOT_IMPLEMENTED_31
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_NFUNC > 31))
// Parameter Type: Register Default Setting
// 
// Indicates that the PCI Express link associated with this Port is connected to a slot. Function 31.
`define SLOT_IMPLEMENTED_31 1'h0


// Name:           DEFAULT_PHANTOM_FUNC_SUPPORTED_31
// Default:        0x0
// Values:         0x0, ..., 0x3
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_PHANTOM_FUNC_SUPPORTED_31 2'h0


// Name:           DEFAULT_EXT_TAG_FIELD_SUPPORTED_31
// Default:        0x0 (DEFAULT_EXT_TAG_FIELD_SUPPORTED_0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 31
// Parameter Type: Register Default Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define DEFAULT_EXT_TAG_FIELD_SUPPORTED_31 1'h0



// Name:           DEFAULT_ATT_BUTT_PRE_31
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 31
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Button is present
`define DEFAULT_ATT_BUTT_PRE_31 1'h0


// Name:           DEFAULT_ATT_IND_PRE_31
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 31
// Parameter Type: Register Default Setting
// 
// When set indicates that an Attention Indicator is present
`define DEFAULT_ATT_IND_PRE_31 1'h0


// Name:           DEFAULT_PWR_IND_PRE_31
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 31
// Parameter Type: Register Default Setting
// 
// When set indicates that a Power Indicator is present
`define DEFAULT_PWR_IND_PRE_31 1'h0


// Name:           DEFAULT_NO_SNOOP_SUPPORTED_31
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 31
// Parameter Type: Register Default Setting
// 
// Default value for the Enable No Snoop bit in the Device Control Register. Function 31.
`define DEFAULT_NO_SNOOP_SUPPORTED_31 1'h0


// Name:           ROOT_RCB_31
// Default:        64-bit
// Values:         64-bit (0x0), 128-bit (0x1)
// Parameter Type: Register Default Setting
// 
// Default value for the Read Completion Boundary (RCB) bit in the Link Control Register.
`define ROOT_RCB_31 1'h0


//-/ END:   PCI-E CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: MSI-X CAPABILITIES CONFIGURATION


// Name:           MSIX_TABLE_SIZE_31
// Default:        0x0
// Values:         0x0, ..., 0x7ff
// Enabled:        CX_NFUNC > 31 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the MSI-X Table Size field in the MSI-X Control Register. Function 31.
`define MSIX_TABLE_SIZE_31 11'h0


// Name:           MSIX_TABLE_BIR_31
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 31 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table BAR Indicator Register (BIR) field in the MSI-X Table Offset and BIR Register. Function 31.
`define MSIX_TABLE_BIR_31 3'h0


// Name:           MSIX_TABLE_OFFSET_31
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 31 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Table Offset field in the MSI-X Table Offset and BIR Register. Function 31.
`define MSIX_TABLE_OFFSET_31 29'h0


// Name:           MSIX_PBA_BIR_31
// Default:        BAR0
// Values:         BAR0 (0x0), BAR1 (0x1), BAR2 (0x2), BAR3 (0x3), BAR4 (0x4), BAR5 
//                 (0x5)
// Enabled:        CX_NFUNC > 31 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the Pending Bit Array (PBA) BIR field in the MSI-X PBA Offset and BIR Register. Function 31.
`define MSIX_PBA_BIR_31 7'h0


// Name:           MSIX_PBA_OFFSET_31
// Default:        0x0
// Values:         0x0, ..., 0x1fffffff
// Enabled:        CX_NFUNC > 31 && MSIX_CAP_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the PBA Offset field in the MSI-X PBA Offset and BIR Register. Function 31.
`define MSIX_PBA_OFFSET_31 29'h0

//-/ END:   MSI-X CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SATA CAPABILITIES CONFIGURATION


// Name:         SATA_HBA_OFFSET_31
// Default:      0x0
// Values:       0x0, ..., 0xfffff
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA Offset. Base address of the SATA HBA registers, 
//  as an offset from the base address of the BAR indicated 
//  by the SATA BAR field.
`define SATA_HBA_OFFSET_31 20'h0


// Name:         SATA_BAR_31
// Default:      0x0
// Values:       0x0, ..., 0xf
// Enabled:      ((SATA_CAP_ENABLE==1))
// 
// HBA BAR. The bar that maps to SATA HBA registers,
`define SATA_BAR_31 4'h0

//-/ END:   SATA CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: AER CAPABILITIES CONFIGURATION


// Name:           DEFAULT_ECRC_CHK_CAP_31
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 31 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Check Capable bit in the Advanced Capabilities and Control Register. Function 31.
`define DEFAULT_ECRC_CHK_CAP_31 1'h1


// Name:           DEFAULT_ECRC_GEN_CAP_31
// Default:        0x1 ((CX_ECRC_ENABLE==1) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 31 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Register Default Setting
// 
// Default value for the ECRC Generation Capability bit in the Advanced Capabilities and Control Register. Function 31.
`define DEFAULT_ECRC_GEN_CAP_31 1'h1


// Name:           AER_INT_MSG_NUM_31
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Parameter Type: Register Default Setting
// 
// Default value for the Advanced Error Interrupt Message Number field of the Root Error Status Register. Function 31.
`define AER_INT_MSG_NUM_31 5'h0



// Name:           CX_HDR_LOG_DEPTH_31
// Default:        0x1
// Values:         0x1, 0x2, 0x4
// Enabled:        CX_NFUNC > 31 && CX_ECRC_ENABLE==1 && AER_ENABLE==1
// Parameter Type: Feature Setting.
// 
// Header Log Depth
`define CX_HDR_LOG_DEPTH_31 3'h1


`define CX_MULTIPLE_HDR_REC_CAP_31 1'h0

//-/ END:   AER CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PM CAPABILITIES CONFIGURATION


// Name:           PME_SUPPORT_31
// Default:        0x1b
// Values:         0x0, ..., 0x1f
// Enabled:        CX_NFUNC > 31
// Parameter Type: Register Default Setting
// 
// Default value for the PME_Support field in the Power Management Capabilities Register. Function 31.
`define PME_SUPPORT_31 5'h1b


// Name:           D1_SUPPORT_31
// Default:        true
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 31
// Parameter Type: Register Default Setting
// 
// Default value for the D1 Support bit in the Power Management Capabilities Register. Function 31.
`define D1_SUPPORT_31 1'h1


// Name:           D2_SUPPORT_31
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 31
// Parameter Type: Register Default Setting
// 
// Default value for the D2 Support bit in the Power Management Capabilities Register. Function 31.
`define D2_SUPPORT_31 1'h0


// Name:           DEV_SPEC_INIT_31
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 31
// Parameter Type: Register Default Setting
// 
// Default value for the Device Specific Initialization (DSI) bit in the Power Management Capabilities Register. Function 
// 31.
`define DEV_SPEC_INIT_31 1'h0


// Name:           AUX_CURRENT_31
// Default:        375mA
// Values:         0mA (0x0), 55mA (0x1), 100mA (0x2), 160mA (0x3), 220mA (0x4), 270mA 
//                 (0x5), 320mA (0x6), 375mA (0x7)
// Enabled:        CX_NFUNC > 31
// Parameter Type: Register Default Setting
// 
// Default value for the Aux Current field in the Power Management Capabilities Register. Function 31.
`define AUX_CURRENT_31 3'h7


// Name:           DEFAULT_NO_SOFT_RESET_31
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_NFUNC > 31
// Parameter Type: Register Default Setting
// 
// Default value for the No Soft Reset bit in the Power Management Control and Status Register. When set, you should not 
// reset any controller registers when transitioning from D3hot to D0. Therefore, you should not assert the non_sticky_rst_n 
// and sticky_rst_n inputs. Function 31.
`define DEFAULT_NO_SOFT_RESET_31 1'h0

//-/ END:   PM CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PCI BASIC CONFIGURATION


// Name:           CX_DEVICE_ID_31
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 31
// Parameter Type: Register Default Setting
// 
// Default value for the Device ID field in the Device ID and Vendor ID Register. Function 31.
`define CX_DEVICE_ID_31 16'h0


// Name:           CX_VENDOR_ID_31
// Default:        0x16c3
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 31
// Parameter Type: Register Default Setting
// 
// Default value for the Vendor ID field in the Device ID and Vendor ID Register. Function 31.
`define CX_VENDOR_ID_31 16'h16c3


// Name:           CX_REVISION_ID_31
// Default:        0x1
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 31
// Parameter Type: Register Default Setting
// 
// Default value for the Revision ID field in the Revision ID Register. Function 31.
`define CX_REVISION_ID_31 8'h1


// Name:           SUBSYS_DEV_ID_31
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 31
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 31.
`define SUBSYS_DEV_ID_31 16'h0


// Name:           SUBSYS_VENDOR_ID_31
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 31
// Parameter Type: Register Default Setting
// 
// Default value for the Subsystem Vendor ID field in the Subsystem ID and Subsystem Vendor ID Register. Function 31.
`define SUBSYS_VENDOR_ID_31 16'h0


// Name:           BASE_CLASS_CODE_31
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 31
// Parameter Type: Register Default Setting
// 
// Default value for the Base Class Code field in the Class Code Register. Function 31.
`define BASE_CLASS_CODE_31 8'h0


// Name:           SUB_CLASS_CODE_31
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 31
// Parameter Type: Register Default Setting
// 
// Default value for the Subclass Code field in the Class Code Register. Function 31.
`define SUB_CLASS_CODE_31 8'h0


// Name:           IF_CODE_31
// Default:        0x0
// Values:         0x0, ..., 0xff
// Enabled:        CX_NFUNC > 31
// Parameter Type: Register Default Setting
// 
// Default value for the Programming Interface field in the Class Code Register. Function 31.
`define IF_CODE_31 8'h0


// Name:           CARDBUS_CIS_PTR_31
// Default:        0x0
// Values:         0x0, ..., 0xffff
// Enabled:        CX_NFUNC > 31
// Parameter Type: Register Default Setting
// 
// Default value for the CardBus CIS Pointer Register. Function 31.
`define CARDBUS_CIS_PTR_31 16'h0


// Name:           INT_PIN_MAPPING_31
// Default:        INTA
// Values:         None (0x0), INTA (0x1), INTB (0x2), INTC (0x3), INTD (0x4)
// Enabled:        CX_NFUNC > 31
// Parameter Type: Register Default Setting
// 
// Default value for the Interrupt Pin Register. Function 31.
`define INT_PIN_MAPPING_31 8'h1


// Name:           IO_DECODE_32_31
// Default:        16-bit
// Values:         16-bit (0x0), 32-bit (0x1)
// Enabled:        CX_NFUNC > 31
// Parameter Type: Register Default Setting
// 
// Default value for the 32-Bit I/O Space bit in the I/O Base and I/O Limit Register. Function 31.
`define IO_DECODE_32_31 1'h0


// Name:           MEM_DECODE_64_31
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x1)
// Enabled:        CX_NFUNC > 31
// Parameter Type: Register Default Setting
// 
// Default value for the 64-Bit Memory Addressing bit in the Prefetchable Memory Base and Limit Register. Function 31.
`define MEM_DECODE_64_31 1'h0


// Name:           ROM_BAR_ENABLED_31
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 31
// Parameter Type: Register Default Setting
// 
// Include the expansion ROM BAR registers. Function 31.
`define ROM_BAR_ENABLED_31 1'h1


`define DEFAULT_ROM_BAR_ENABLED_31 1'h1


// Name:           ROM_MASK_31
// Default:        0xffff
// Values:         0x7ff, ..., 0xffffff
// Enabled:        CX_NFUNC > 31 && ROM_BAR_ENABLED_31==1
// Parameter Type: Register Default Setting
// 
// Determines the default of the Expansion ROM BAR Mask register. Function 31. 
//  - The BAR Mask register specifies which bits of the Expansion ROM BAR are non-writable by host software, which 
//  determines the size of the BAR. 
//  - The maximum value for ROM_MASK_N is 0xFFFFFF because the maximum space that can be claimed by an Expansion ROM BAR 
//  is 16 MB. 
//  - For example: 32'hFFFF =BAR size of 2^16.
`define ROM_MASK_31 32'hffff


// Name:           ROM_MASK_WRITABLE_31
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 31 && ROM_BAR_ENABLED_31==1
// Parameter Type: Feature Setting
// 
// Determines if the Expansion ROM BAR Mask register for function 31 is writable by application software. If writing to a 
// Expansion ROM BAR Mask register is enabled, your application can write to the Expansion ROM BAR Mask register through the 
// DBI by asserting dbi_cs2 in addition to dbi_cs.
`define ROM_MASK_WRITABLE_31 1'h0


// Name:           ROM_FUNC31_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 31 && ROM_BAR_ENABLED_31==1 && TRGT1_POPULATE==1))
// Parameter Type: Register Default Setting
// 
// Direct incoming requests that pass filtering and match the Expansion ROM BAR of function 31 to either RTRGT0 or RTRGT1. 
//  - For example, setting ROM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for the Expansion ROM BAR of function 
//  0 to RTRGT1. 
//  - If TRGT1_POPULATE =0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define ROM_FUNC31_TARGET_MAP 1'h1


// Name:           CX_PCI_HEADER_DEFAULTS_VISIBLE_31
// Default:        0
// Values:         0, 1
// Parameter Type: Register Default Setting
// 
// Select here if you want to configure the defaults for the other PCI Standard Header registers for function 31. 
//  An extra window will appear under this page. To access it, click the plus/minus symbol in the hierarchy view on the 
//  left panel. 
//  This is optional but not usually recommended. 
//  You can also change these register defaults using the DBI before (or after) the link comes up.
`define CX_PCI_HEADER_DEFAULTS_VISIBLE_31 0

//-/ END:   PCI BASIC CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: BAR CONFIGURATION


// Name:           BAR0_ENABLED_31
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 31
// Parameter Type: Feature Setting
// 
// Include the BAR0 registers for function 31.
`define BAR0_ENABLED_31 1'h1


`define DEFAULT_BAR0_ENABLED_31 1'h1


// Name:           MEM0_SPACE_DECODER_31
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 31 && BAR0_ENABLED_31==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 31.
`define MEM0_SPACE_DECODER_31 1'h0


// Name:           PREFETCHABLE0_31
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 31 && BAR0_ENABLED_31==1 && MEM0_SPACE_DECODER_31==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 31.
`define PREFETCHABLE0_31 1'h0


// Name:           BAR0_TYPE_31
// Default:        64-bit ((MEM0_SPACE_DECODER_31==1 || BAR0_ENABLED_31==0) ? 0 : 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 31 && BAR0_ENABLED_31==1 && MEM0_SPACE_DECODER_31==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 31.
`define BAR0_TYPE_31 2'h2


// Name:           BAR0_SIZING_SCHEME_31
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 31 && BAR0_ENABLED_31==1
// Parameter Type: Feature Setting
// 
// BAR0 Function 31 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR0_SIZING_SCHEME_31 2'h0


// Name:           CX_BAR0_RESIZABLE_31
// Default:        0x0 ((BAR0_SIZING_SCHEME_31==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR0_ENABLED_31==1) && (MEM0_SPACE_DECODER_31==0)
// Parameter Type: Feature Setting
// 
// Defines BAR0 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR0 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR0_RESIZABLE_31 1'h0


// Name:           CX_BAR0_RESOURCE_AVAIL_31
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 31 && CX_BAR0_RESIZABLE_31==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR0 of function 31. 
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
// Example: 0x00000030 indicates that BAR0 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR0_RESOURCE_AVAIL_31 64'h10


// Name:           BAR0_MASK_WRITABLE_31
// Default:        0x0 ((BAR0_ENABLED_31==1 && BAR0_SIZING_SCHEME_31 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 31 && BAR0_ENABLED_31==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR0 Mask through DBI
`define BAR0_MASK_WRITABLE_31 1'h0


// Name:           BAR0_MASK_31
// Default:        0xfffff (CX_BAR0_RESIZABLE_31==1 ? [calc_bar_mask 
//                 CX_BAR0_RESOURCE_AVAIL_31] : MEM0_SPACE_DECODER_31==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 31 && BAR0_ENABLED_31==1 && MEM0_SPACE_DECODER_31==0 && 
//                 CX_BAR0_RESIZABLE_31==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR0 Mask register of function 31. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR0_MASK_31 64'hfffff


// Name:           MEM_FUNC31_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 31 && BAR0_ENABLED_31==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_0 of function 31 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming Requests for BAR0 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC31_BAR0_TARGET_MAP 1'h1


// Name:           BAR1_ENABLED_31
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 31 && BAR0_TYPE_31==0
// Parameter Type: Feature Setting
// 
// Include the BAR1 registers for function 31.
`define BAR1_ENABLED_31 1'h0


`define DEFAULT_BAR1_ENABLED_31 1'h0


// Name:           MEM1_SPACE_DECODER_31
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 31 && BAR1_ENABLED_31==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 31.
`define MEM1_SPACE_DECODER_31 1'h0


// Name:           PREFETCHABLE1_31
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 31 && BAR1_ENABLED_31==1 && MEM1_SPACE_DECODER_31==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 31.
`define PREFETCHABLE1_31 1'h0


// Name:           BAR1_TYPE_31
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 31.
`define BAR1_TYPE_31 2'h0


// Name:           BAR1_SIZING_SCHEME_31
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 31 && BAR1_ENABLED_31==1
// Parameter Type: Feature Setting
// 
// BAR1 Function 31 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR1_SIZING_SCHEME_31 2'h0


// Name:           CX_BAR1_RESIZABLE_31
// Default:        0x0 ((BAR1_SIZING_SCHEME_31==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR1_ENABLED_31==1) && (MEM1_SPACE_DECODER_31==0)
// Parameter Type: Feature Setting
// 
// Defines BAR1 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR1 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR1_RESIZABLE_31 1'h0


// Name:           CX_BAR1_RESOURCE_AVAIL_31
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 31 && CX_BAR1_RESIZABLE_31==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR1 of function 31. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR1 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR1_RESOURCE_AVAIL_31 32'h10


// Name:           BAR1_MASK_WRITABLE_31
// Default:        0x0 ((BAR1_ENABLED_31==1 && BAR1_SIZING_SCHEME_31 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 31 && BAR1_ENABLED_31==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR1 Mask through DBI
`define BAR1_MASK_WRITABLE_31 1'h0


// Name:           BAR1_MASK_31
// Default:        0xffff (CX_BAR1_RESIZABLE_31==1 ? [calc_bar_mask 
//                 CX_BAR1_RESOURCE_AVAIL_31] : MEM1_SPACE_DECODER_31==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 31 && BAR1_ENABLED_31==1 && MEM1_SPACE_DECODER_31==0 && 
//                 CX_BAR1_RESIZABLE_31==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR1 Mask register of function 31. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR1_MASK_31 32'hffff


// Name:           MEM_FUNC31_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((CX_NFUNC > 31 && BAR1_ENABLED_31==1 && TRGT1_POPULATE==1))
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_1 of function 31 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR1_TARGET_MAP to 1 maps all incoming Requests for BAR1 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC31_BAR1_TARGET_MAP 1'h1


// Name:           BAR2_ENABLED_31
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 31
// Parameter Type: Feature Setting
// 
// Include the BAR2 registers for function 31.
`define BAR2_ENABLED_31 1'h1


`define DEFAULT_BAR2_ENABLED_31 1'h1


// Name:           MEM2_SPACE_DECODER_31
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 31 && BAR2_ENABLED_31==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 31.
`define MEM2_SPACE_DECODER_31 1'h0


// Name:           PREFETCHABLE2_31
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 31 && BAR2_ENABLED_31==1 && MEM2_SPACE_DECODER_31==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 31.
`define PREFETCHABLE2_31 1'h0


// Name:           BAR2_TYPE_31
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 31 && BAR2_ENABLED_31==1 && MEM2_SPACE_DECODER_31==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 31.
`define BAR2_TYPE_31 2'h0


// Name:           BAR2_SIZING_SCHEME_31
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 31 && BAR2_ENABLED_31==1
// Parameter Type: Feature Setting
// 
// BAR2 Function 31 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR2_SIZING_SCHEME_31 2'h0


// Name:           CX_BAR2_RESIZABLE_31
// Default:        0x0 ((BAR2_SIZING_SCHEME_31==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR2_ENABLED_31==1) && (MEM2_SPACE_DECODER_31==0)
// Parameter Type: Feature Setting
// 
// Defines BAR2 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR2 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR2_RESIZABLE_31 1'h0


// Name:           CX_BAR2_RESOURCE_AVAIL_31
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 31 && CX_BAR2_RESIZABLE_31==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR2 of function 31. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR2 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR2_RESOURCE_AVAIL_31 64'h10


// Name:           BAR2_MASK_WRITABLE_31
// Default:        0x0 ((BAR2_ENABLED_31==1 && BAR2_SIZING_SCHEME_31 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 31 && BAR2_ENABLED_31==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR2 Mask through DBI
`define BAR2_MASK_WRITABLE_31 1'h0


// Name:           BAR2_MASK_31
// Default:        0xfffff (CX_BAR2_RESIZABLE_31==1 ? [calc_bar_mask 
//                 CX_BAR2_RESOURCE_AVAIL_31] : MEM2_SPACE_DECODER_31==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 31 && BAR2_ENABLED_31==1 && MEM2_SPACE_DECODER_31==0 && 
//                 CX_BAR2_RESIZABLE_31==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR2 Mask register of function 31. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR2_MASK_31 64'hfffff


// Name:           MEM_FUNC31_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 31 && BAR2_ENABLED_31==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_2 of function 31 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR2_TARGET_MAP to 1 maps all incoming requests for BAR2 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC31_BAR2_TARGET_MAP 1'h1


// Name:           BAR3_ENABLED_31
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 31 && BAR2_TYPE_31==0
// Parameter Type: Feature Setting
// 
// Include the BAR3 registers for function 31.
`define BAR3_ENABLED_31 1'h0



`define DEFAULT_BAR3_ENABLED_31 1'h0


// Name:           MEM3_SPACE_DECODER_31
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 31 && BAR3_ENABLED_31==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 31.
`define MEM3_SPACE_DECODER_31 1'h0


// Name:           PREFETCHABLE3_31
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 31 && BAR3_ENABLED_31==1 && MEM3_SPACE_DECODER_31==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 31.
`define PREFETCHABLE3_31 1'h0


// Name:           BAR3_TYPE_31
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 31.
`define BAR3_TYPE_31 2'h0


// Name:           BAR3_SIZING_SCHEME_31
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 31 && BAR3_ENABLED_31==1
// Parameter Type: Feature Setting
// 
// BAR3 Function 31 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR3_SIZING_SCHEME_31 2'h0


// Name:           CX_BAR3_RESIZABLE_31
// Default:        0x0 ((BAR3_SIZING_SCHEME_31==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR3_ENABLED_31==1) && (MEM3_SPACE_DECODER_31==0)
// Parameter Type: Feature Setting
// 
// Defines BAR3 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR3 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR3_RESIZABLE_31 1'h0


// Name:           CX_BAR3_RESOURCE_AVAIL_31
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 31 && CX_BAR3_RESIZABLE_31==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR3 of function 31. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR3 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR3_RESOURCE_AVAIL_31 32'h10


// Name:           BAR3_MASK_WRITABLE_31
// Default:        0x0 ((BAR3_ENABLED_31==1 && BAR3_SIZING_SCHEME_31 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 31 && BAR3_ENABLED_31==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR3 Mask through DBI
`define BAR3_MASK_WRITABLE_31 1'h0


// Name:           BAR3_MASK_31
// Default:        0xffff (CX_BAR3_RESIZABLE_31==1 ? [calc_bar_mask 
//                 CX_BAR3_RESOURCE_AVAIL_31] : MEM3_SPACE_DECODER_31==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 31 && BAR3_ENABLED_31==1 && MEM3_SPACE_DECODER_31==0 && 
//                 CX_BAR3_RESIZABLE_31==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR3 Mask register of function 31. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR3_MASK_31 32'hffff


// Name:           MEM_FUNC31_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 31 && BAR3_ENABLED_31==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_3 of function 31 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR3_TARGET_MAP to 1 maps all incoming requests for BAR3 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC31_BAR3_TARGET_MAP 1'h1


// Name:           BAR4_ENABLED_31
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 31
// Parameter Type: Feature Setting
// 
// Include the BAR4 registers for function 31.
`define BAR4_ENABLED_31 1'h1


`define DEFAULT_BAR4_ENABLED_31 1'h1



// Name:           MEM4_SPACE_DECODER_31
// Default:        I/O (BAR4_ENABLED_31==1)
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 31 && BAR4_ENABLED_31==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 31.
`define MEM4_SPACE_DECODER_31 1'h1


// Name:           PREFETCHABLE4_31
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 31 && BAR4_ENABLED_31==1 && MEM4_SPACE_DECODER_31==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 31.
`define PREFETCHABLE4_31 1'h0


// Name:           BAR4_TYPE_31
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        CX_NFUNC > 31 && BAR4_ENABLED_31==1 && MEM4_SPACE_DECODER_31==0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 31.
`define BAR4_TYPE_31 2'h0


// Name:           BAR4_SIZING_SCHEME_31
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 31 && BAR4_ENABLED_31==1
// Parameter Type: Feature Setting
// 
// BAR4  Function 31 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR4_SIZING_SCHEME_31 2'h0


// Name:           CX_BAR4_RESIZABLE_31
// Default:        0x0 ((BAR4_SIZING_SCHEME_31==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR4_ENABLED_31==1) && (MEM4_SPACE_DECODER_31==0)
// Parameter Type: Feature Setting
// 
// Defines BAR4 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR4 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR4_RESIZABLE_31 1'h0


// Name:           CX_BAR4_RESOURCE_AVAIL_31
// Default:        0x10
// Values:         0x10, ..., 0xfffffffffff0
// Enabled:        CX_NFUNC > 31 &&  CX_BAR4_RESIZABLE_31==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR4 of function 31. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR4 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR4_RESOURCE_AVAIL_31 64'h10


// Name:           BAR4_MASK_WRITABLE_31
// Default:        0x0 ((BAR4_ENABLED_31==1 && BAR4_SIZING_SCHEME_31 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 31 && BAR4_ENABLED_31==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR4 Mask through DBI
`define BAR4_MASK_WRITABLE_31 1'h0


// Name:           BAR4_MASK_31
// Default:        0xff (CX_BAR4_RESIZABLE_31==1 ? [calc_bar_mask 
//                 CX_BAR4_RESOURCE_AVAIL_31] : MEM4_SPACE_DECODER_31==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        CX_NFUNC > 31 && BAR4_ENABLED_31==1 && MEM4_SPACE_DECODER_31==0 && 
//                 CX_BAR4_RESIZABLE_31==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR4 Mask register of function 31. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR4_MASK_31 64'hff


// Name:           MEM_FUNC31_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 31 && BAR4_ENABLED_31==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_4 of function 31 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR4_TARGET_MAP to 1 maps all incoming requests for BAR4 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC31_BAR4_TARGET_MAP 1'h1


// Name:           BAR5_ENABLED_31
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 31 && BAR4_TYPE_31==0
// Parameter Type: Feature Setting
// 
// Include the BAR5 registers for function 31.
`define BAR5_ENABLED_31 1'h0


`define DEFAULT_BAR5_ENABLED_31 1'h0


// Name:           MEM5_SPACE_DECODER_31
// Default:        Memory
// Values:         Memory (0x0), I/O (0x1)
// Enabled:        CX_NFUNC > 31 && BAR5_ENABLED_31==1
// Parameter Type: Register Default Setting
// 
// Determines whether the BAR is for memory or I/O (bit 0 of the BAR). Function 31.
`define MEM5_SPACE_DECODER_31 1'h0


// Name:           PREFETCHABLE5_31
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 31 && BAR5_ENABLED_31==1 && MEM5_SPACE_DECODER_31==0
// Parameter Type: Register Default Setting
// 
// Determines if a memory BAR is for prefetchable memory (bit 3 of a memory BAR). Function 31.
`define PREFETCHABLE5_31 1'h0


// Name:           BAR5_TYPE_31
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the type as 32-bit or 64-bit; (bits [2:1] for a memory BAR). Function 31.
`define BAR5_TYPE_31 2'h0


// Name:           BAR5_SIZING_SCHEME_31
// Default:        Fixed Mask
// Values:         Fixed Mask (0x0), Programmable Mask (0x1), Resizable BAR (0x2)
// Enabled:        CX_NFUNC > 31 && BAR5_ENABLED_31==1
// Parameter Type: Feature Setting
// 
// BAR5  Function 31 Sizing Scheme. 
//  - Fixed Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You cannot change it in 
//  hardware. 
//  - Programmable Mask: You set the BAR mask value using the BARn_MASK_N configuration parameter. You can change it in 
//  hardware by writing to the Mask Register through the local DBI (only). Increases the register count. 
//  - Resizable BAR: Resizable BAR feature as defined in the PCIe Specification. You can change the 'Supported Resource 
//  Sizes' field in the Control Register through the local DBI (only).
`define BAR5_SIZING_SCHEME_31 2'h0


// Name:           CX_BAR5_RESIZABLE_31
// Default:        0x0 ((BAR5_SIZING_SCHEME_31==2) ? 1 : 0)
// Values:         0x0, 0x1
// Enabled:        (BAR5_ENABLED_31==1) && (MEM5_SPACE_DECODER_31==0)
// Parameter Type: Feature Setting
// 
// Defines BAR5 as a resizable BAR. Setting this bit will provide 
//  capability and control register in the resizable BAR capabilty 
//  structure. 
//  This will enable BAR5 to advertise usable resource sizes and for the BAR size 
//  to be reprogrammed by the Root Complex.
`define CX_BAR5_RESIZABLE_31 1'h0


// Name:           CX_BAR5_RESOURCE_AVAIL_31
// Default:        0x10
// Values:         0x10, ..., 0xfff0
// Enabled:        CX_NFUNC > 31 && CX_BAR5_RESIZABLE_31==1
// Parameter Type: Register Default Setting
// 
// Indicates usable resource sizes for BAR5 of function 31. 
//  
//  - 3-0: RsvdP 
//  - 4: 1MB 
//  - 5: 2MB 
//  - . 
//  - . 
//  - . 
//  - 22: 256GB 
//  - 23: 512GB 
//  - 31-24: RsvdP 
//  
//  Example: 0x00000030 indicates that BAR5 will operate correctly with the 
//  BAR sized to either 1MB or 2MB.
`define CX_BAR5_RESOURCE_AVAIL_31 32'h10


// Name:           BAR5_MASK_WRITABLE_31
// Default:        0x0 ((BAR5_ENABLED_31==1 && BAR5_SIZING_SCHEME_31 ==1) ? 1: 0)
// Values:         0x0, 0x1
// Enabled:        CX_NFUNC > 31 && BAR5_ENABLED_31==1
// Parameter Type: Feature Setting
// 
// When set enables dynamic changing of BAR5 Mask through DBI
`define BAR5_MASK_WRITABLE_31 1'h0


// Name:           BAR5_MASK_31
// Default:        0xffff (CX_BAR5_RESIZABLE_31==1 ? [calc_bar_mask 
//                 CX_BAR5_RESOURCE_AVAIL_31] : MEM5_SPACE_DECODER_31==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        CX_NFUNC > 31 && BAR5_ENABLED_31==1 && MEM5_SPACE_DECODER_31==0 && 
//                 CX_BAR5_RESIZABLE_31==0
// Parameter Type: Register Default Setting
// 
// Determines the default value of the BAR5 Mask register of function 31. The BAR Mask register specifies which bits of the 
// BAR are non-writable by host software, which determines the size of the BAR 
//   
// Note: When the BAR is Resizable (BARn_SIZING_SCHEME_N =2), then the default value of this mask is determined from the 
// CX_BARn_RESOURCE_AVAIL_N parameter.
`define BAR5_MASK_31 32'hffff


// Name:           MEM_FUNC31_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        CX_NFUNC > 31 && BAR5_ENABLED_31==1 && TRGT1_POPULATE==1
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match BAR_5 of function 31 to either RTRGT0 or RTRGT1. 
//  For example, setting MEM_FUNC0_BAR5_TARGET_MAP to 1 maps all incoming requests for BAR5 of function 0 to RTRGT1. 
//  If TRGT1_POPULATE = 0 (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass 
//  filtering are routed to RTRGT0.
`define MEM_FUNC31_BAR5_TARGET_MAP 1'h1


`define FUNC31_BARSIZE_32 128'h0


`define FUNC31_BARSIZE 128'h0


`define FUNC31_BAR0_BARSIZE_TRGT1 128'h0


`define FUNC31_BAR2_BARSIZE_TRGT1 128'h0


`define FUNC31_BAR4_BARSIZE_TRGT1 128'h0


`define FUNC31_BAR0_TRGT1_ADDR_WIDTH 1


`define FUNC31_BAR2_TRGT1_ADDR_WIDTH 1


`define FUNC31_BAR4_TRGT1_ADDR_WIDTH 1


// Name:         CX_NUM_RBARS_31
// Default:      0 ([calc_num_rbars CX_BAR0_RESIZABLE_31 CX_BAR1_RESIZABLE_31 
//               CX_BAR2_RESIZABLE_31 CX_BAR3_RESIZABLE_31 CX_BAR4_RESIZABLE_31 
//               CX_BAR5_RESIZABLE_31])
// Values:       -2147483648, ..., 2147483647
// 
// Number of resizable BARs
`define CX_NUM_RBARS_31 0

//-/ END:   BAR CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SR-IOV CAPABILITIES CONFIGURATION


// Name:           CX_VF_DEPENDENCY_LINK_31
// Default:        0x31
// Values:         0x0, ..., 0xff
// Enabled:        CX_VF_DEPENDENCY_LINK_SUPP && (CX_NFUNC > 31) && CX_SRIOV_ENABLE
// Parameter Type: Feature Setting
// 
// Specifies the 8-bit VF dependency link for PF31. Valid only if CX_VF_DEPENDENCY_LINK_SUPP=1.
`define CX_VF_DEPENDENCY_LINK_31 8'h31


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER1_31
// Default:        0x2 ((CX_NFUNC>=17) ? 32 : (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : 
//                 (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF31 in an ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER1_31 16'h2


// Name:           FIRST_VF_OFFSET_ARI_CAP_HIER0_31
// Default:        0x100
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset of the first VF in PF31 
//  in a non-ARI capable hierarchy 
//  When CX_VF_STRIDE_ALWAYS_ONE=1 this parameter is disabled because it is not used.
`define FIRST_VF_OFFSET_ARI_CAP_HIER0_31 16'h100


// Name:           VF_STRIDE_ARI_CAP_HIER1_31
// Default:        0x2 (CX_VF_STRIDE_ALWAYS_ONE) ? 1 : ((CX_NFUNC>=17) ? 32 : 
//                 (CX_NFUNC>=9) ? 16 : (CX_NFUNC>=5) ? 8 : (CX_NFUNC>=3) ? 4 : CX_NFUNC)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF31 in an ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER1_31 16'h2


// Name:           VF_STRIDE_ARI_CAP_HIER0_31
// Default:        0x100 ((CX_VF_STRIDE_ALWAYS_ONE) ? 0x0001 : 0x0100)
// Values:         0x0, ..., 0xffff
// Enabled:        CX_SRIOV_ENABLE && !CX_VF_STRIDE_ALWAYS_ONE
// Parameter Type: Register Default Setting
// 
// Specifies the Routing ID offset from one VF to the next one 
//  in PF31 in a non-ARI capable hierarchy
`define VF_STRIDE_ARI_CAP_HIER0_31 16'h100


// Name:           CX_VF_DEVICE_ID_31
// Default:        0x0 (CX_DEVICE_ID_31)
// Values:         0x0, ..., 0xffff
// Enabled:        (CX_NFUNC > 31) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 16-bit virtual function Device ID for PF31. 
//  It might be different from the physical function's.
`define CX_VF_DEVICE_ID_31 16'h0


// Name:           CX_VF_SUPP_PAGE_SIZE_31
// Default:        0x553
// Values:         0x553, ..., 0xffff
// Enabled:        (CX_NFUNC > 31) && CX_SRIOV_ENABLE
// Parameter Type: Register Default Setting
// 
// Specifies the 32-bit supported page sizes for virtual functions for PF31
`define CX_VF_SUPP_PAGE_SIZE_31 32'h553


// Name:           CX_ARI_CAP_HIER_PRSVD_31
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Specifies if ARI Capable Hierarchy bit is preserved across certain power state transitions 
//  Only present in PF0. Read Only Zero in this PF31.
`define CX_ARI_CAP_HIER_PRSVD_31 1'h0

//-/===========================================
//-/ START: VF BAR CONFIGURATION


// Name:           VF_BAR0_ENABLED_31
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 31)
// Parameter Type: Feature Setting
// 
// Include the VF BAR0 registers in PF31
`define VF_BAR0_ENABLED_31 1'h1


`define VF_DEFAULT_BAR0_ENABLED_31 1'h1


// Name:           VF_MEM0_SPACE_DECODER_31
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR0_ENABLED_31 && CX_SRIOV_ENABLE && (CX_NFUNC > 31)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Space Indicator 
//  ALWAYS set to Memory for Virtual Functions
`define VF_MEM0_SPACE_DECODER_31 1'h0


// Name:           VF_PREFETCHABLE0_31
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_31==1 && VF_MEM0_SPACE_DECODER_31==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 31)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Memory Prefetchable 
//  When set indicates VF BAR0 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE0_31 1'h0


// Name:           VF_BAR0_TYPE_31
// Default:        64-bit ((VF_MEM0_SPACE_DECODER_31==1 || VF_BAR0_ENABLED_31==0) ? 0 
//                 : 2)
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR0_ENABLED_31==1 && VF_MEM0_SPACE_DECODER_31==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 31)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 31; (bits [2:1] for a memory BAR).
`define VF_BAR0_TYPE_31 2'h2


// Name:           VF_BAR0_MASK_WRITABLE_31
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR0_ENABLED_31==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 31)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR0_MASK_WRITABLE_31 1'h0


// Name:           VF_BAR0_MASK_31
// Default:        0xfffff (VF_MEM0_SPACE_DECODER_31==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR0_ENABLED_31==1 && VF_MEM0_SPACE_DECODER_31==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 31)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR0 Mask 
//  Determines the default of the VF BAR Mask register for PF31. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR0_MASK_31 64'hfffff


// Name:           VF_MEM_FUNC31_BAR0_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR0_ENABLED_31==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE 
//                 && (CX_NFUNC > 31)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF31 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC31_BAR0_TARGET_MAP 1'h1


// Name:           VF_BAR1_ENABLED_31
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        (VF_BAR0_TYPE_31==0)  && CX_SRIOV_ENABLE && (CX_NFUNC > 31)
// Parameter Type: Feature Setting
// 
// Include the VF BAR1 registers in PF31
`define VF_BAR1_ENABLED_31 1'h0


`define VF_DEFAULT_BAR1_ENABLED_31 1'h0


// Name:           VF_MEM1_SPACE_DECODER_31
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR1_ENABLED_31==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 31)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Space Indicator
`define VF_MEM1_SPACE_DECODER_31 1'h0


// Name:           VF_PREFETCHABLE1_31
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_31==1 && VF_MEM1_SPACE_DECODER_31==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 31)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Memory Prefetchable 
//  When set indicates VF BAR1 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE1_31 1'h0


// Name:           VF_BAR1_TYPE_31
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 31; (bits [2:1] for a memory BAR).
`define VF_BAR1_TYPE_31 2'h0


// Name:           VF_BAR1_MASK_WRITABLE_31
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR1_ENABLED_31==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 31)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR1_MASK_WRITABLE_31 1'h0


// Name:           VF_BAR1_MASK_31
// Default:        0xffff (VF_MEM1_SPACE_DECODER_31==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR1_ENABLED_31==1 && VF_MEM1_SPACE_DECODER_31==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 31)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR1 Mask 
//  Determines the default of the VF BAR Mask register for PF31. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR1_MASK_31 32'hffff


// Name:           VF_MEM_FUNC31_BAR1_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        ((VF_BAR1_ENABLED_31==1 && TRGT1_POPULATE==1)) && CX_SRIOV_ENABLE 
//                 && (CX_NFUNC > 31)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF31 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC31_BAR1_TARGET_MAP 1'h1


// Name:           VF_BAR2_ENABLED_31
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 31)
// Parameter Type: Feature Setting
// 
// Include the VF BAR2 registers in PF31
`define VF_BAR2_ENABLED_31 1'h1


`define VF_DEFAULT_BAR2_ENABLED_31 1'h1


// Name:           VF_MEM2_SPACE_DECODER_31
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR2_ENABLED_31==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 31)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Memory Space Indicator
`define VF_MEM2_SPACE_DECODER_31 1'h0


// Name:           VF_PREFETCHABLE2_31
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_31==1 && VF_MEM2_SPACE_DECODER_31==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 31)
// Parameter Type: Register Default Setting
// 
// BAR2 Memory Prefetchable 
//  When set indicates VF BAR2 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE2_31 1'h0


// Name:           VF_BAR2_TYPE_31
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR2_ENABLED_31==1 && VF_MEM2_SPACE_DECODER_31==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 31)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 31; (bits [2:1] for a memory BAR).
`define VF_BAR2_TYPE_31 2'h0


// Name:           VF_BAR2_MASK_WRITABLE_31
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_ENABLED_31==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 31)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR2_MASK_WRITABLE_31 1'h0


// Name:           VF_BAR2_MASK_31
// Default:        0xfffff (VF_MEM2_SPACE_DECODER_31==1 ? 0xFF : 0xFFFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR2_ENABLED_31==1 && VF_MEM2_SPACE_DECODER_31==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 31)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR2 Mask 
//  Determines the default of the VF BAR Mask register for PF31. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR2_MASK_31 64'hfffff


// Name:           VF_MEM_FUNC31_BAR2_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR2_ENABLED_31==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 31)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF31 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC31_BAR2_TARGET_MAP 1'h1


// Name:           VF_BAR3_ENABLED_31
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR2_TYPE_31==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 31)
// Parameter Type: Feature Setting
// 
// Include the VF BAR3 registers in PF31
`define VF_BAR3_ENABLED_31 1'h0


`define VF_DEFAULT_BAR3_ENABLED_31 1'h0


// Name:           VF_MEM3_SPACE_DECODER_31
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR3_ENABLED_31==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 31)
// Parameter Type: Register Default Setting
// 
// BAR3 Memory Space Indicator
`define VF_MEM3_SPACE_DECODER_31 1'h0


// Name:           VF_PREFETCHABLE3_31
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_31==1 && VF_MEM3_SPACE_DECODER_31==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 31)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Memory Prefetchable 
//  When set indicates VF BAR3 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE3_31 1'h0


// Name:           VF_BAR3_TYPE_31
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 31; (bits [2:1] for a memory BAR).
`define VF_BAR3_TYPE_31 2'h0


// Name:           VF_BAR3_MASK_WRITABLE_31
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR3_ENABLED_31==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 31)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR3_MASK_WRITABLE_31 1'h0


// Name:           VF_BAR3_MASK_31
// Default:        0xffff (VF_MEM3_SPACE_DECODER_31==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR3_ENABLED_31==1 && VF_MEM3_SPACE_DECODER_31==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 31)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR3 Mask 
//  Determines the default of the VF BAR Mask register for PF31. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR3_MASK_31 32'hffff


// Name:           VF_MEM_FUNC31_BAR3_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR3_ENABLED_31==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 31)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF31 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC31_BAR3_TARGET_MAP 1'h1


// Name:           VF_BAR4_ENABLED_31
// Default:        0x1
// Values:         0x0, 0x1
// Enabled:        CX_SRIOV_ENABLE && (CX_NFUNC > 31)
// Parameter Type: Feature Setting
// 
// Include the VF BAR4 registers in PF31
`define VF_BAR4_ENABLED_31 1'h1


`define VF_DEFAULT_BAR4_ENABLED_31 1'h1


// Name:           VF_MEM4_SPACE_DECODER_31
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR4_ENABLED_31==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 31)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Space Indicator
`define VF_MEM4_SPACE_DECODER_31 1'h0


// Name:           VF_PREFETCHABLE4_31
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_31==1 && VF_MEM4_SPACE_DECODER_31==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 31)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Memory Prefetchable 
//  When set indicates VF BAR4 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE4_31 1'h0


// Name:           VF_BAR4_TYPE_31
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        VF_BAR4_ENABLED_31==1 && VF_MEM4_SPACE_DECODER_31==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 31)
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 31; (bits [2:1] for a memory BAR).
`define VF_BAR4_TYPE_31 2'h0


// Name:           VF_BAR4_MASK_WRITABLE_31
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_ENABLED_31==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 31)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR4_MASK_WRITABLE_31 1'h0


// Name:           VF_BAR4_MASK_31
// Default:        0xfff (VF_MEM4_SPACE_DECODER_31==1 ? 0xFF : 0xFFF)
// Values:         0xff, ..., 0xffffffffffffffff
// Enabled:        VF_BAR4_ENABLED_31==1 && VF_MEM4_SPACE_DECODER_31==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 31)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR4 Mask 
//  Determines the default of the VF BAR Mask register for PF31. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR4_MASK_31 64'hfff


// Name:           VF_MEM_FUNC31_BAR4_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR4_ENABLED_31==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 31)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF31 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC31_BAR4_TARGET_MAP 1'h1


// Name:           VF_BAR5_ENABLED_31
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR4_TYPE_31==0 && CX_SRIOV_ENABLE && (CX_NFUNC > 31)
// Parameter Type: Feature Setting
// 
// Include the VF BAR5 registers in PF31
`define VF_BAR5_ENABLED_31 1'h0


`define VF_DEFAULT_BAR5_ENABLED_31 1'h0


// Name:           VF_MEM5_SPACE_DECODER_31
// Default:        Memory
// Values:         Memory (0x0)
// Enabled:        VF_BAR5_ENABLED_31==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 31)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Space Indicator
`define VF_MEM5_SPACE_DECODER_31 1'h0


// Name:           VF_PREFETCHABLE5_31
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_31==1 && VF_MEM5_SPACE_DECODER_31==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 31)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Memory Prefetchable 
//  When set indicates VF BAR5 Memory BAR is a prefetchable BAR
`define VF_PREFETCHABLE5_31 1'h0


// Name:           VF_BAR5_TYPE_31
// Default:        32-bit
// Values:         32-bit (0x0), 64-bit (0x2)
// Enabled:        0
// Parameter Type: Register Default Setting
// 
// Determines the BAR type as 32-bit or 64-bit in function 31; (bits [2:1] for a memory BAR).
`define VF_BAR5_TYPE_31 2'h0


// Name:           VF_BAR5_MASK_WRITABLE_31
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        VF_BAR5_ENABLED_31==1 && CX_SRIOV_ENABLE && (CX_NFUNC > 31)
// Parameter Type: Feature Setting
// 
// Determines if the VF BAR Mask register is writable by application software. 
//  This allows your application to write the BAR Mask register through the DBI using the VF BAR's address and asserting 
//  dbi_cs2 in addition to dbi_cs.
`define VF_BAR5_MASK_WRITABLE_31 1'h0


// Name:           VF_BAR5_MASK_31
// Default:        0xffff (VF_MEM5_SPACE_DECODER_31==1 ? 0xFF : 0xFFFF)
// Values:         0xff, ..., 0xffffffff
// Enabled:        VF_BAR5_ENABLED_31==1 && VF_MEM5_SPACE_DECODER_31==0 && 
//                 CX_SRIOV_ENABLE && (CX_NFUNC > 31)
// Parameter Type: Register Default Setting
// 
// Virtual Function BAR5 Mask 
//  Determines the default of the VF BAR Mask register for PF31. The VF BAR Mask register specifies which bits of the VF 
//  BAR are non-writable by host software, which determines the size of the BAR.
`define VF_BAR5_MASK_31 32'hffff


// Name:           VF_MEM_FUNC31_BAR5_TARGET_MAP
// Default:        Target_1 ((TRGT1_POPULATE==1) ? 1 : 0)
// Values:         Target_0 (0x0), Target_1 (0x1)
// Enabled:        VF_BAR5_ENABLED_31==1 && TRGT1_POPULATE==1 && CX_SRIOV_ENABLE && 
//                 (CX_NFUNC > 31)
// Parameter Type: Feature Setting
// 
// Direct incoming requests that pass filtering and match this PF31 VF BAR to either RTRGT0 or RTRGT1. For example, setting 
// VF_MEM_FUNC0_BAR0_TARGET_MAP to 1 maps all incoming requests for VF BAR0 of function 0 to RTRGT1. If TRGT1_POPULATE =0 
// (no RTRGT1 interface), then the map-by-BAR parameters have no effect; all requests that pass filtering are routed to RTRGT0.
`define VF_MEM_FUNC31_BAR5_TARGET_MAP 1'h1


`define VF_FUNC31_BARSIZE_32 128'h101000


`define VF_FUNC31_BARSIZE 128'h201000

//-/ END:   VF BAR CONFIGURATION
//-/===========================================

//-/ END:   SR-IOV CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: TPH CAPABILITIES CONFIGURATION


// Name:           TPH_IVEC_31
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Interrupt Vector Mode. If set indicates that the function supports the Interrupt Vector 
// Mode of operation. Function 31.
`define TPH_IVEC_31 1'h0


// Name:           TPH_DS_31
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_TPH_ENABLE==1
// Parameter Type: Feature Setting
// 
// TLP Processing Hints supports Device Specific Mode. If set indicates that the function supports the Device Specific Mode 
// of operation. Function 31.
`define TPH_DS_31 1'h0


// Name:           TPH_ST_TABLE_LOC_31
// Default:        Not Present
// Values:         Not Present (0), TPH Requester Capability Structure (1), MSI-X 
//                 Table Structure (2)
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_DS_31 || TPH_IVEC_31))
// Parameter Type: Feature Setting
// 
// TLP Processing Hints Steering Tag Table Location. Value indicates if and where the ST Table is located. Function 31.
`define TPH_ST_TABLE_LOC_31 0

//located in the TPH Requester Capability structure. Please reduce the ST Table Size for this mode of operation"

// Name:           TPH_ST_TABLE_SIZE_31
// Default:        1
// Values:         1, ..., 2048
// Enabled:        (CX_TPH_ENABLE==1 && (TPH_ST_TABLE_LOC_31 != 0))
// Parameter Type: Feature Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
`define TPH_ST_TABLE_SIZE_31 1


`define TPH_ST_TABLE_DEPTH_31 0

//-/ END:   TPH CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: ATS CAPABILITIES CONFIGURATION


// Name:           ATS_INV_Q_DPTH_31
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// The number of Invalidate Requests that the Function can accept before putting backpressure on the upstream connection. A 
// value of 0 indicates the function can accept 32 Invalidate requests. Function 31.
`define ATS_INV_Q_DPTH_31 5'd0


// Name:           ATS_STU_31
// Default:        0
// Values:         0, ..., 31
// Enabled:        CX_ATS_ENABLE==1
// Parameter Type: Feature Setting
// 
// This value indicates to the Function the minimum number of 4096-byte blocks that is indicated in a Translation 
// Completion or Invalidate Request. This is a power of 2 multiplier and the number of blocks is 2^STU. A value of 0 indicates 1 block 
// and a value of 31 indicates 2^31 blocks (or 8 TB total). Function 31.
`define ATS_STU_31 5'd0

//-/ END:   ATS CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PRS CAPABILITIES CONFIGURATION


// Name:           CX_PRS_OUTSTANDING_CAPACITY_VALUE_31
// Default:        0x1
// Values:         0x0, ..., 0xffffffff
// Enabled:        (CX_PRS_ENABLE==1) && (CX_NFUNC > 31)
// Parameter Type: Register Default Setting
// 
// Register default for PRS Outstanding Capacity in PF31. 
// For more details, see the PRS_OUTSTANDING_CAPACITY field in the PRS_REQ_CAPACITY_REG register.
`define CX_PRS_OUTSTANDING_CAPACITY_VALUE_31 32'h1

//-/ END:   PRS CAPABILITIES CONFIGURATION
//-/===========================================


//-/===========================================
//--- START: RN


// Name:           CX_RN_IMM_VALUE_31
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 31)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for PF31.
`define CX_RN_IMM_VALUE_31 1'h0


// Name:           CX_RN_IMM_D0_VALUE_31
// Default:        0x0 (CX_RN_IMM_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_IMM_EN==1) && (CX_NFUNC > 31)
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for PF31.
`define CX_RN_IMM_D0_VALUE_31 1'h0


// Name:           CX_RN_FRS_VALUE_31
// Default:        0x0 (CX_RN_FRS_SUPPORTED==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_FRS_SUPPORTED==1) && (CX_NFUNC > 31)
// Parameter Type: Feature Setting
// 
// Function Readiness Status messaging supported for function PF31.
`define CX_RN_FRS_VALUE_31 1'h0


// Name:           CX_RN_RTR_VALID_31
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 31)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF31.
`define CX_RN_RTR_VALID_31 1'h0


// Name:           CX_RN_RTR_DL_UP_VALUE_31
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 31)
// Parameter Type: Register Default Setting
// 
// Register default for RTR DL Up Time field in PF31.
`define CX_RN_RTR_DL_UP_VALUE_31 12'h0


// Name:           CX_RN_RTR_RESET_VALUE_31
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 31)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF31.
`define CX_RN_RTR_RESET_VALUE_31 12'h0


// Name:           CX_RN_RTR_D3D0_VALUE_31
// Default:        0x0
// Values:         0x0, ..., 0x80a
// Enabled:        (CX_RN_RTR_EN==1) && (CX_NFUNC > 31)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF31.
`define CX_RN_RTR_D3D0_VALUE_31 12'h0


// Name:           CX_RN_RTR_FLR_VALUE_31
// Default:        0x0
// Values:         0x0, ..., 0xa1e
// Enabled:        (CX_RN_RTR_EN==1) && (CX_FLR_ENABLE==1) && (CX_NFUNC > 31)
// Parameter Type: Register Default Setting
// 
// Register default for RTR FLR Time field in PF31.
`define CX_RN_RTR_FLR_VALUE_31 12'h0


// Name:           VF_RN_IMM_VALUE_31
// Default:        0x0 (CX_RN_IMM_VALUE_31 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 31))
// Parameter Type: Feature Setting
// 
// Enable Immediate Readiness support in the controller for VFs in PF31.
`define VF_RN_IMM_VALUE_31 1'h0


// Name:           VF_RN_IMM_D0_VALUE_31
// Default:        0x0 (CX_RN_IMM_D0_VALUE_31 && VF_IMM_ENABLE)
// Values:         0x0, 0x1
// Enabled:        ((VF_IMM_ENABLE==1) && (CX_NFUNC > 31))
// Parameter Type: Register Default Setting
// 
// Enable Immediate Readiness on Return to D0 support in the controller for VFs in PF31.
`define VF_RN_IMM_D0_VALUE_31 1'h0


// Name:           VF_RN_RTR_VALID_31
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 31) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF31 VFs.
`define VF_RN_RTR_VALID_31 1'h0


// Name:           VF_RN_RTR_RESET_VALUE_31
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_31)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 31) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF31 VFS.
`define VF_RN_RTR_RESET_VALUE_31 12'h0


// Name:           VF_RN_RTR_D3D0_VALUE_31
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_31)
// Values:         0x0, ..., 0x80a
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 31) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF31 VFS.
`define VF_RN_RTR_D3D0_VALUE_31 12'h0


// Name:           VF_RN_RTR_FLR_VALUE_31
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_31)
// Values:         0x0, ..., 0xa1e
// Enabled:        (VF_RTR_ENABLE==1) && (CX_NFUNC > 31) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF31 VFs.
`define VF_RN_RTR_FLR_VALUE_31 12'h0


// Name:           EXT_VF_RN_RTR_VALID_31
// Default:        0x0 (CX_RN_RTR_EN==1)
// Values:         0x0, 0x1
// Enabled:        (VF_RTR_ENABLE==1)  && (CX_NFUNC > 31) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Valid field in PF31 VFs.
`define EXT_VF_RN_RTR_VALID_31 1'h0


// Name:           EXT_VF_RN_RTR_RESET_VALUE_31
// Default:        0x0 (CX_RN_RTR_RESET_VALUE_31)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 31) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR Reset Time field in PF31 VFS.
`define EXT_VF_RN_RTR_RESET_VALUE_31 12'h0


// Name:           EXT_VF_RN_RTR_D3D0_VALUE_31
// Default:        0x0 (CX_RN_RTR_D3D0_VALUE_31)
// Values:         0x0, ..., 0x80a
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 31) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for RTR D3hot to D0 Time field in PF31 VFS.
`define EXT_VF_RN_RTR_D3D0_VALUE_31 12'h0


// Name:           EXT_VF_RN_RTR_FLR_VALUE_31
// Default:        0x0 (CX_RN_RTR_FLR_VALUE_31)
// Values:         0x0, ..., 0xa1e
// Enabled:        (EXT_VF_RTR_ENABLE==1) && (CX_NFUNC > 31) && (CX_SRIOV_ENABLE ==1)
// Parameter Type: Register Default Setting
// 
// Register default for FLR Time field in PF31 VFs.
`define EXT_VF_RN_RTR_FLR_VALUE_31 12'h0

//-/ END:   RN
//-/===========================================

//-/ START: LN CAPABILITIES CONFIGURATION
//-/===========================================


// Name:           CX_LN_REG_MAX_VALUE_31
// Default:        0x0
// Values:         0x0, ..., 0x1f
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 31))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_64_SUPPORTED field in the LNR_CAP_OFF register for PF31.
`define CX_LN_REG_MAX_VALUE_31 5'h0


// Name:           CX_LN_128_SUPPORTED_VALUE_31
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 31))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_128_SUPPORTED field in the LNR_CAP_OFF register for PF31.
`define CX_LN_128_SUPPORTED_VALUE_31 1'h0


// Name:           CX_LN_64_SUPPORTED_VALUE_31
// Default:        0x0
// Values:         0x0, 0x1
// Enabled:        ((CX_LN_ENABLE==1) && (CX_NFUNC > 31))
// Parameter Type: Register Default Setting
// 
// This parameter sets the default of the LNR_REGISTRATION_MAX field in the LNR_CAP_OFF register for PF31.
`define CX_LN_64_SUPPORTED_VALUE_31 1'h0

//-/ END:   LN CAPABILITIES CONFIGURATION
//-/===========================================




//-/==========================================
//-/ End FUNC31 Config
//-/==========================================


//-/ START: External VF settings
//-/===========================================


// Name:           EXT_VF_MSI_CAP_ENABLE
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_SRIOV_ENABLE && CX_EXTENSIBLE_VFUNC
// Parameter Type: Feature Setting
// 
// MSI Capability for external virtual functions.
`define EXT_VF_MSI_CAP_ENABLE 1'h0


// `define EXT_VF_MSI_EN



// Name:           EXT_VF_MSIX_CAP_ENABLE
// Default:        false (CX_SRIOV_ENABLE && CX_EXTENSIBLE_VFUNC)
// Values:         false (0x0), true (0x1)
// Enabled:        CX_SRIOV_ENABLE && CX_EXTENSIBLE_VFUNC
// Parameter Type: Feature Setting
// 
// MSIX Capability for external virtual functions.
`define EXT_VF_MSIX_CAP_ENABLE 1'h0



// Name:           EXT_VF_PM_CAP_ENABLE
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        0
// Parameter Type: Feature Setting
// 
// PM Capability for external virtual functions.
`define EXT_VF_PM_CAP_ENABLE 1'h0


// `define EXT_VF_PM_EN



// Name:           EXT_VF_AER_ENABLE
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_SRIOV_ENABLE && CX_EXTENSIBLE_VFUNC && AER_ENABLE
// Parameter Type: Feature Setting
// 
// AER Capability for external virtual functions.
`define EXT_VF_AER_ENABLE 1'h0


// `define EXT_VF_AER_EN



// Name:           EXT_VF_TPH_ENABLE_VALUE
// Default:        false
// Values:         false (0x0), true (0x1)
// Enabled:        CX_SRIOV_ENABLE && CX_EXTENSIBLE_VFUNC && CX_TPH_ENABLE
// Parameter Type: Feature Setting
// 
// TPH Capability for external virtual functions.
`define EXT_VF_TPH_ENABLE_VALUE 1'h0


// `define EXT_VF_TPH_ENABLE


// Name:           EXT_VF_ATS_ENABLE
// Default:        false
// Values:         false (0), true (1)
// Enabled:        CX_SRIOV_ENABLE && CX_EXTENSIBLE_VFUNC && CX_ATS_ENABLE
// Parameter Type: Feature Setting
// 
// ATS Capability for external virtual functions.
// `define EXT_VF_ATS_ENABLE


`define EXT_VF_ATS_ENABLE_VALUE 1'h0



// Name:           EXT_VF_PASID_ENABLE
// Default:        false
// Values:         false (0), true (1)
// Enabled:        CX_SRIOV_ENABLE && CX_EXTENSIBLE_VFUNC && CX_PASID_ENABLE
// Parameter Type: Feature Setting
// 
// PASID Capability for external virtual functions.
// `define EXT_VF_PASID_ENABLE


`define EXT_VF_PASID_ENABLE_VALUE 1'h0

//-/ END:   External VF settings
//-/===========================================


//-/===========================================
//-/ START: BAR CHECKING

`define BARSIZE_32 128'h200200


`define BARSIZE 128'h400200


// `define BAR_CHECK_FAIL

//-/ END:   BAR CHECKING
//-/===========================================

//-/===========================================
//-/ START: VF RAM

//-/ SR-IOV VF RAM settings \-


// Name:         VF_FLOP_NF_ERR_DET_WIDTH
// Default:      1
// Values:       1, ..., 1
// 
// number of bits for VF FLOP NF_ERR_DET field
`define VF_FLOP_NF_ERR_DET_WIDTH 1


// Name:         VF_FLOP_F_ERR_DET_WIDTH
// Default:      0 (VF_AER_ENABLE ? 1 : 0)
// Values:       0, 1
// 
// number of bits for VF FLOP F_ERR_DET field
`define VF_FLOP_F_ERR_DET_WIDTH 0


// Name:         VF_FLOP_COR_ERR_DET_WIDTH
// Default:      0 (VF_AER_ENABLE ? 1 : 0)
// Values:       0, 1
// 
// number of bits for VF FLOP COR_ERR_DET field
`define VF_FLOP_COR_ERR_DET_WIDTH 0


// Name:         VF_FLOP_BME_WIDTH
// Default:      1
// Values:       1, ..., 1
// 
// number of bits for VF FLOP BME field
`define VF_FLOP_BME_WIDTH 1


// Name:         VF_FLOP_MSIX_EN_WIDTH
// Default:      1
// Values:       1, ..., 1
// 
// number of bits for VF FLOP MSIX_EN field
`define VF_FLOP_MSIX_EN_WIDTH 1


// Name:         VF_FLOP_MSIX_FUNC_MASK_WIDTH
// Default:      1
// Values:       1, ..., 1
// 
// number of bits for VF FLOP MSIX_FUNC_MASK field
`define VF_FLOP_MSIX_FUNC_MASK_WIDTH 1


// Name:         VF_FLOP_UNSUPT_REQ_DET_WIDTH
// Default:      1
// Values:       1, ..., 1
// 
// number of bits for VF FLOP UNSUPT_REQ_DET field
`define VF_FLOP_UNSUPT_REQ_DET_WIDTH 1


// Name:         VF_FLOP_SIGNALED_TARGET_ABT_WIDTH
// Default:      1
// Values:       1, ..., 1
// 
// number of bits for VF FLOP SIGNALED_TARGET_ABT field
`define VF_FLOP_SIGNALED_TARGET_ABT_WIDTH 1


// Name:         VF_FLOP_MASTER_DATA_PERR_WIDTH
// Default:      1
// Values:       1, ..., 1
// 
// number of bits for VF FLOP MASTER_DATA_PERR field
`define VF_FLOP_MASTER_DATA_PERR_WIDTH 1


// Name:         VF_FLOP_SSERR_WIDTH
// Default:      1
// Values:       1, ..., 1
// 
// number of bits for VF FLOP SSERR field
`define VF_FLOP_SSERR_WIDTH 1


`define VF_FLOP_DATABITS 8


// Name:         VF_RAM_DEPTH
// Default:      2 (CX_NVFUNC)
// Values:       -2147483648, ..., 2147483647
// Enabled:      0
// 
// Number of locations in Virtual Functions RAM
`define VF_RAM_DEPTH 2


`define VF_RAM_ADDRBITS 1


`define VF_RAM_CTRLBITS 1


// Name:         VF_RAM_PAR_EN
// Default:      false (CX_RAM_PROTECTION_MODE==1)
// Values:       false (0), true (1)
// 
// Enable parity for Retry Buffer
// `define VF_RAM_PAR_EN


// Name:         VF_RAM_PAR_CALC_WIDTH
// Default:      32 ((VF_RAM_PAR_EN==1) ? CX_PAR_MODE : 32)
// Values:       -2147483648, ..., 2147483647
// 
// Bit width for Parity Calculation
`define VF_RAM_PAR_CALC_WIDTH 32


// Name:         VF_RAM_RTA_WIDTH
// Default:      1
// Values:       1, ..., 1
// 
// number of bits for VF RAM RTA field
`define VF_RAM_RTA_WIDTH 1


// Name:         VF_RAM_RMA_WIDTH
// Default:      1
// Values:       1, ..., 1
// 
// number of bits for VF RAM RMA field
`define VF_RAM_RMA_WIDTH 1


// Name:         VF_RAM_DPE_WIDTH
// Default:      1
// Values:       1, ..., 1
// 
// number of bits for VF RAM DPE field
`define VF_RAM_DPE_WIDTH 1


`define VF_RAM_DATABITS 3


// Name:         VF_RAM_NPAR_BITS
// Default:      1 ([calc_npar_bits VF_RAM_DATABITS VF_RAM_PAR_CALC_WIDTH])
// Values:       -2147483648, ..., 2147483647
// 
// Number of Parity Bits
`define VF_RAM_NPAR_BITS 1


// Name:         VF_RAM_NECC_BITS
// Default:      6 ([calc_necc_bits VF_RAM_DATABITS])
// Values:       -2147483648, ..., 2147483647
// 
// Number of ECC Bits
`define VF_RAM_NECC_BITS 6


`define CX_VF_RAM_WIDTH 3

//-/ END:   VF RAM
//-/===========================================




//--- START: MUXING OF VALUES --- \\
`define CX_NON_SV_PARAMS
//-/===========================================
//-/ START: PCI-E CAPABILITIES CONFIGURATION

`define PCIE_CAP_INT_MSG_NUM        ((FUNC_NUM == 0) ? `PCIE_CAP_INT_MSG_NUM_0 :(FUNC_NUM == 1) ? `PCIE_CAP_INT_MSG_NUM_1 : (FUNC_NUM == 2) ? `PCIE_CAP_INT_MSG_NUM_2 : (FUNC_NUM == 3) ? `PCIE_CAP_INT_MSG_NUM_3 : (FUNC_NUM == 4) ? `PCIE_CAP_INT_MSG_NUM_4 : (FUNC_NUM == 5) ? `PCIE_CAP_INT_MSG_NUM_5 : (FUNC_NUM == 6) ? `PCIE_CAP_INT_MSG_NUM_6 : `PCIE_CAP_INT_MSG_NUM_7)
`define SLOT_IMPLEMENTED            ((FUNC_NUM == 0) ? `SLOT_IMPLEMENTED_0 : (FUNC_NUM == 1) ? `SLOT_IMPLEMENTED_1 : (FUNC_NUM == 2) ? `SLOT_IMPLEMENTED_2 : (FUNC_NUM == 3) ? `SLOT_IMPLEMENTED_3 : (FUNC_NUM == 4) ? `SLOT_IMPLEMENTED_4 : (FUNC_NUM == 5) ? `SLOT_IMPLEMENTED_5 : (FUNC_NUM == 6) ? `SLOT_IMPLEMENTED_6 : `SLOT_IMPLEMENTED_7)
`define DEFAULT_PHANTOM_FUNC_SUPPORTED ((FUNC_NUM == 0) ? `DEFAULT_PHANTOM_FUNC_SUPPORTED_0 : (FUNC_NUM == 1) ? `DEFAULT_PHANTOM_FUNC_SUPPORTED_1 : (FUNC_NUM == 2) ? `DEFAULT_PHANTOM_FUNC_SUPPORTED_2 : (FUNC_NUM == 3) ? `DEFAULT_PHANTOM_FUNC_SUPPORTED_3 : (FUNC_NUM == 4) ? `DEFAULT_PHANTOM_FUNC_SUPPORTED_4 : (FUNC_NUM == 5) ? `DEFAULT_PHANTOM_FUNC_SUPPORTED_5 : (FUNC_NUM == 6) ? `DEFAULT_PHANTOM_FUNC_SUPPORTED_6 : `DEFAULT_PHANTOM_FUNC_SUPPORTED_7)
`define DEFAULT_EXT_TAG_FIELD_SUPPORTED ((FUNC_NUM == 0) ? `DEFAULT_EXT_TAG_FIELD_SUPPORTED_0 : (FUNC_NUM == 1) ? `DEFAULT_EXT_TAG_FIELD_SUPPORTED_1 : (FUNC_NUM == 2) ? `DEFAULT_EXT_TAG_FIELD_SUPPORTED_2 : (FUNC_NUM == 3) ? `DEFAULT_EXT_TAG_FIELD_SUPPORTED_3 : (FUNC_NUM == 4) ? `DEFAULT_EXT_TAG_FIELD_SUPPORTED_4 : (FUNC_NUM == 5) ? `DEFAULT_EXT_TAG_FIELD_SUPPORTED_5 : (FUNC_NUM == 6) ? `DEFAULT_EXT_TAG_FIELD_SUPPORTED_6 : `DEFAULT_EXT_TAG_FIELD_SUPPORTED_7)
`define DEFAULT_ATT_BUTT_PRE        ((FUNC_NUM == 0) ? `DEFAULT_ATT_BUTT_PRE_0 : (FUNC_NUM == 1) ? `DEFAULT_ATT_BUTT_PRE_1 : (FUNC_NUM == 2) ? `DEFAULT_ATT_BUTT_PRE_2 : (FUNC_NUM == 3) ? `DEFAULT_ATT_BUTT_PRE_3 : (FUNC_NUM == 4) ? `DEFAULT_ATT_BUTT_PRE_4 : (FUNC_NUM == 5) ? `DEFAULT_ATT_BUTT_PRE_5 : (FUNC_NUM == 6) ? `DEFAULT_ATT_BUTT_PRE_6 : `DEFAULT_ATT_BUTT_PRE_7)
`define DEFAULT_ATT_IND_PRE         ((FUNC_NUM == 0) ? `DEFAULT_ATT_IND_PRE_0 : (FUNC_NUM == 1) ? `DEFAULT_ATT_IND_PRE_1 : (FUNC_NUM == 2) ? `DEFAULT_ATT_IND_PRE_2 : (FUNC_NUM == 3) ? `DEFAULT_ATT_IND_PRE_3 : (FUNC_NUM == 4) ? `DEFAULT_ATT_IND_PRE_4 : (FUNC_NUM == 5) ? `DEFAULT_ATT_IND_PRE_5 : (FUNC_NUM == 6) ? `DEFAULT_ATT_IND_PRE_6 : `DEFAULT_ATT_IND_PRE_7)
`define DEFAULT_PWR_IND_PRE         ((FUNC_NUM == 0) ? `DEFAULT_PWR_IND_PRE_0 : (FUNC_NUM == 1) ? `DEFAULT_PWR_IND_PRE_1 : (FUNC_NUM == 2) ? `DEFAULT_PWR_IND_PRE_2 : (FUNC_NUM == 3) ? `DEFAULT_PWR_IND_PRE_3 : (FUNC_NUM == 4) ? `DEFAULT_PWR_IND_PRE_4 : (FUNC_NUM == 5) ? `DEFAULT_PWR_IND_PRE_5 : (FUNC_NUM == 6) ? `DEFAULT_PWR_IND_PRE_6 : `DEFAULT_PWR_IND_PRE_7)
`define DEFAULT_NO_SNOOP_SUPPORTED  ((FUNC_NUM == 0) ? `DEFAULT_NO_SNOOP_SUPPORTED_0 : (FUNC_NUM == 1) ? `DEFAULT_NO_SNOOP_SUPPORTED_1 : (FUNC_NUM == 2) ? `DEFAULT_NO_SNOOP_SUPPORTED_2 : (FUNC_NUM == 3) ? `DEFAULT_NO_SNOOP_SUPPORTED_3 : (FUNC_NUM == 4) ? `DEFAULT_NO_SNOOP_SUPPORTED_4 : (FUNC_NUM == 5) ? `DEFAULT_NO_SNOOP_SUPPORTED_5 : (FUNC_NUM == 6) ? `DEFAULT_NO_SNOOP_SUPPORTED_6 : `DEFAULT_NO_SNOOP_SUPPORTED_7)
`define ROOT_RCB                    ((FUNC_NUM == 0) ? `ROOT_RCB_0 : (FUNC_NUM == 1) ? `ROOT_RCB_1 : (FUNC_NUM == 2) ? `ROOT_RCB_2 : (FUNC_NUM == 3) ? `ROOT_RCB_3 : (FUNC_NUM == 4) ? `ROOT_RCB_4 : (FUNC_NUM == 5) ? `ROOT_RCB_5 : (FUNC_NUM == 6) ? `ROOT_RCB_6 : `ROOT_RCB_7)
`define CX_RESIZE_BAR_ENABLE 0


//-/ END:   PCI-E CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: MSI-X CAPABILITIES CONFIGURATION

`define MSIX_TABLE_SIZE         ((FUNC_NUM == 0) ? `MSIX_TABLE_SIZE_0 : (FUNC_NUM == 1) ? `MSIX_TABLE_SIZE_1 : (FUNC_NUM == 2) ? `MSIX_TABLE_SIZE_2 : (FUNC_NUM == 3) ? `MSIX_TABLE_SIZE_3 : (FUNC_NUM == 4) ? `MSIX_TABLE_SIZE_4 : (FUNC_NUM == 5) ? `MSIX_TABLE_SIZE_5 : (FUNC_NUM == 6) ? `MSIX_TABLE_SIZE_6 : `MSIX_TABLE_SIZE_7)
`define MSIX_TABLE_BIR          ((FUNC_NUM == 0) ? `MSIX_TABLE_BIR_0 : (FUNC_NUM == 1) ? `MSIX_TABLE_BIR_1 : (FUNC_NUM == 2) ? `MSIX_TABLE_BIR_2 : (FUNC_NUM == 3) ? `MSIX_TABLE_BIR_3 : (FUNC_NUM == 4) ? `MSIX_TABLE_BIR_4 : (FUNC_NUM == 5) ? `MSIX_TABLE_BIR_5 : (FUNC_NUM == 6) ? `MSIX_TABLE_BIR_6 : `MSIX_TABLE_BIR_7)
`define MSIX_TABLE_OFFSET       ((FUNC_NUM == 0) ? `MSIX_TABLE_OFFSET_0 : (FUNC_NUM == 1) ? `MSIX_TABLE_OFFSET_1 : (FUNC_NUM == 2) ? `MSIX_TABLE_OFFSET_2 : (FUNC_NUM == 3) ? `MSIX_TABLE_OFFSET_3 : (FUNC_NUM == 4) ? `MSIX_TABLE_OFFSET_4 : (FUNC_NUM == 5) ? `MSIX_TABLE_OFFSET_5 : (FUNC_NUM == 6) ? `MSIX_TABLE_OFFSET_6 : `MSIX_TABLE_OFFSET_7)
`define MSIX_PBA_BIR            ((FUNC_NUM == 0) ? `MSIX_PBA_BIR_0 : (FUNC_NUM == 1) ? `MSIX_PBA_BIR_1 : (FUNC_NUM == 2) ? `MSIX_PBA_BIR_2 : (FUNC_NUM == 3) ? `MSIX_PBA_BIR_3 : (FUNC_NUM == 4) ? `MSIX_PBA_BIR_4 : (FUNC_NUM == 5) ? `MSIX_PBA_BIR_5 : (FUNC_NUM == 6) ? `MSIX_PBA_BIR_6 : `MSIX_PBA_BIR_7)
`define MSIX_PBA_OFFSET         ((FUNC_NUM == 0) ? `MSIX_PBA_OFFSET_0 : (FUNC_NUM == 1) ? `MSIX_PBA_OFFSET_1 : (FUNC_NUM == 2) ? `MSIX_PBA_OFFSET_2 : (FUNC_NUM == 3) ? `MSIX_PBA_OFFSET_3 : (FUNC_NUM == 4) ? `MSIX_PBA_OFFSET_4 : (FUNC_NUM == 5) ? `MSIX_PBA_OFFSET_5 : (FUNC_NUM == 6) ? `MSIX_PBA_OFFSET_6 : `MSIX_PBA_OFFSET_7)

//-/ END:   MSI-X CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SATA CAPABILITIES CONFIGURATION

`define SATA_HBA_OFFSET         ((FUNC_NUM == 0) ? `SATA_HBA_OFFSET_0 : (FUNC_NUM == 1) ? `SATA_HBA_OFFSET_1 : (FUNC_NUM == 2) ? `SATA_HBA_OFFSET_2 : (FUNC_NUM == 3) ? `SATA_HBA_OFFSET_3 : (FUNC_NUM == 4) ? `SATA_HBA_OFFSET_4 : (FUNC_NUM == 5) ? `SATA_HBA_OFFSET_5 : (FUNC_NUM == 6) ? `SATA_HBA_OFFSET_6 : `SATA_HBA_OFFSET_7)
`define SATA_BAR         ((FUNC_NUM == 0) ? `SATA_BAR_0 : (FUNC_NUM == 1) ? `SATA_BAR_1 : (FUNC_NUM == 2) ? `SATA_BAR_2 : (FUNC_NUM == 3) ? `SATA_BAR_3 : (FUNC_NUM == 4) ? `SATA_BAR_4 : (FUNC_NUM == 5) ? `SATA_BAR_5 : (FUNC_NUM == 6) ? `SATA_BAR_6 : `SATA_BAR_7)

//-/ END:   SATA CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: AER CAPABILITIES CONFIGURATION

`define DEFAULT_ECRC_CHK_CAP    ((FUNC_NUM == 0) ? `DEFAULT_ECRC_CHK_CAP_0 : (FUNC_NUM == 1) ? `DEFAULT_ECRC_CHK_CAP_1 : (FUNC_NUM == 2) ? `DEFAULT_ECRC_CHK_CAP_2 : (FUNC_NUM == 3) ? `DEFAULT_ECRC_CHK_CAP_3 : (FUNC_NUM == 4) ? `DEFAULT_ECRC_CHK_CAP_4 : (FUNC_NUM == 5) ? `DEFAULT_ECRC_CHK_CAP_5 : (FUNC_NUM == 6) ? `DEFAULT_ECRC_CHK_CAP_6 : `DEFAULT_ECRC_CHK_CAP_7)
`define DEFAULT_ECRC_GEN_CAP    ((FUNC_NUM == 0) ? `DEFAULT_ECRC_GEN_CAP_0 : (FUNC_NUM == 1) ? `DEFAULT_ECRC_GEN_CAP_1 : (FUNC_NUM == 2) ? `DEFAULT_ECRC_GEN_CAP_2 : (FUNC_NUM == 3) ? `DEFAULT_ECRC_GEN_CAP_3 : (FUNC_NUM == 4) ? `DEFAULT_ECRC_GEN_CAP_4 : (FUNC_NUM == 5) ? `DEFAULT_ECRC_GEN_CAP_5 : (FUNC_NUM == 6) ? `DEFAULT_ECRC_GEN_CAP_6 : `DEFAULT_ECRC_GEN_CAP_7)
`define AER_INT_MSG_NUM         ((FUNC_NUM == 0) ? `AER_INT_MSG_NUM_0 : (FUNC_NUM == 1) ? `AER_INT_MSG_NUM_1 : (FUNC_NUM == 2) ? `AER_INT_MSG_NUM_2 : (FUNC_NUM == 3) ? `AER_INT_MSG_NUM_3 : (FUNC_NUM == 4) ? `AER_INT_MSG_NUM_4 : (FUNC_NUM == 5) ? `AER_INT_MSG_NUM_5 : (FUNC_NUM == 6) ? `AER_INT_MSG_NUM_6 : `AER_INT_MSG_NUM_7)
`define CX_HDR_LOG_DEPTH        ((FUNC_NUM == 0) ? `CX_HDR_LOG_DEPTH_0 : (FUNC_NUM == 1) ? `CX_HDR_LOG_DEPTH_1 : (FUNC_NUM == 2) ? `CX_HDR_LOG_DEPTH_2 : (FUNC_NUM == 3) ? `CX_HDR_LOG_DEPTH_3 : (FUNC_NUM == 4) ? `CX_HDR_LOG_DEPTH_4 : (FUNC_NUM == 5) ? `CX_HDR_LOG_DEPTH_5 : (FUNC_NUM == 6) ? `CX_HDR_LOG_DEPTH_6 : `CX_HDR_LOG_DEPTH_7)
`define CX_MULTIPLE_HDR_REC_CAP        ((FUNC_NUM == 0) ? `CX_MULTIPLE_HDR_REC_CAP_0 : (FUNC_NUM == 1) ? `CX_MULTIPLE_HDR_REC_CAP_1 : (FUNC_NUM == 2) ? `CX_MULTIPLE_HDR_REC_CAP_2 : (FUNC_NUM == 3) ? `CX_MULTIPLE_HDR_REC_CAP_3 : (FUNC_NUM == 4) ? `CX_MULTIPLE_HDR_REC_CAP_4 : (FUNC_NUM == 5) ? `CX_MULTIPLE_HDR_REC_CAP_5 : (FUNC_NUM == 6) ? `CX_MULTIPLE_HDR_REC_CAP_6 : `CX_MULTIPLE_HDR_REC_CAP_7)
//-/ END:   AER CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: PM CAPABILITIES CONFIGURATION

`define PME_SUPPORT             ((FUNC_NUM == 0) ? `PME_SUPPORT_0 : (FUNC_NUM == 1) ? `PME_SUPPORT_1 : (FUNC_NUM == 2) ? `PME_SUPPORT_2 : (FUNC_NUM == 3) ? `PME_SUPPORT_3 : (FUNC_NUM == 4) ? `PME_SUPPORT_4 : (FUNC_NUM == 5) ? `PME_SUPPORT_5 : (FUNC_NUM == 6) ? `PME_SUPPORT_6 : `PME_SUPPORT_7)
`define D1_SUPPORT              ((FUNC_NUM == 0) ? `D1_SUPPORT_0 : (FUNC_NUM == 1) ? `D1_SUPPORT_1 : (FUNC_NUM == 2) ? `D1_SUPPORT_2 : (FUNC_NUM == 3) ? `D1_SUPPORT_3 : (FUNC_NUM == 4) ? `D1_SUPPORT_4 : (FUNC_NUM == 5) ? `D1_SUPPORT_5 : (FUNC_NUM == 6) ? `D1_SUPPORT_6 : `D1_SUPPORT_7)
`define D2_SUPPORT              ((FUNC_NUM == 0) ? `D2_SUPPORT_0 : (FUNC_NUM == 1) ? `D2_SUPPORT_1 : (FUNC_NUM == 2) ? `D2_SUPPORT_2 : (FUNC_NUM == 3) ? `D2_SUPPORT_3 : (FUNC_NUM == 4) ? `D2_SUPPORT_4 : (FUNC_NUM == 5) ? `D2_SUPPORT_5 : (FUNC_NUM == 6) ? `D2_SUPPORT_6 : `D2_SUPPORT_7)
`define DEV_SPEC_INIT           ((FUNC_NUM == 0) ? `DEV_SPEC_INIT_0 : (FUNC_NUM == 1) ? `DEV_SPEC_INIT_1 : (FUNC_NUM == 2) ? `DEV_SPEC_INIT_2 : (FUNC_NUM == 3) ? `DEV_SPEC_INIT_3 : (FUNC_NUM == 4) ? `DEV_SPEC_INIT_4 : (FUNC_NUM == 5) ? `DEV_SPEC_INIT_5 : (FUNC_NUM == 6) ? `DEV_SPEC_INIT_6 : `DEV_SPEC_INIT_7)
`define AUX_CURRENT             ((FUNC_NUM == 0) ? `AUX_CURRENT_0 : (FUNC_NUM == 1) ? `AUX_CURRENT_1 : (FUNC_NUM == 2) ? `AUX_CURRENT_2 : (FUNC_NUM == 3) ? `AUX_CURRENT_3 : (FUNC_NUM == 4) ? `AUX_CURRENT_4 : (FUNC_NUM == 5) ? `AUX_CURRENT_5 : (FUNC_NUM == 6) ? `AUX_CURRENT_6 : `AUX_CURRENT_7)
`define DEFAULT_NO_SOFT_RESET   ((FUNC_NUM == 0) ? `DEFAULT_NO_SOFT_RESET_0 : (FUNC_NUM == 1) ? `DEFAULT_NO_SOFT_RESET_1 : (FUNC_NUM == 2) ? `DEFAULT_NO_SOFT_RESET_2 : (FUNC_NUM == 3) ? `DEFAULT_NO_SOFT_RESET_3 : (FUNC_NUM == 4) ? `DEFAULT_NO_SOFT_RESET_4 : (FUNC_NUM == 5) ? `DEFAULT_NO_SOFT_RESET_5 : (FUNC_NUM == 6) ? `DEFAULT_NO_SOFT_RESET_6 : `DEFAULT_NO_SOFT_RESET_7)

//-/ END:   PM CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: TPH CAPABILITIES CONFIGURATION

`define TPH_IVEC  ((FUNC_NUM == 0) ? `TPH_IVEC_0 : (FUNC_NUM == 1) ? `TPH_IVEC_1 : (FUNC_NUM == 2) ? `TPH_IVEC_2 : (FUNC_NUM == 3) ? `TPH_IVEC_3 : (FUNC_NUM == 4) ? `TPH_IVEC_4 : (FUNC_NUM == 5) ? `TPH_IVEC_5 : (FUNC_NUM == 6) ? `TPH_IVEC_6 : `TPH_IVEC_7)

`define TPH_DS    ((FUNC_NUM == 0) ? `TPH_DS_0 : (FUNC_NUM == 1) ? `TPH_DS_1 : (FUNC_NUM == 2) ? `TPH_DS_2 : (FUNC_NUM == 3) ? `TPH_DS_3 : (FUNC_NUM == 4) ? `TPH_DS_4 : (FUNC_NUM == 5) ? `TPH_DS_5 : (FUNC_NUM == 6) ? `TPH_DS_6 : `TPH_DS_7)

`define TPH_ST_TABLE_LOC  ((FUNC_NUM == 0) ? `TPH_ST_TABLE_LOC_0 : (FUNC_NUM == 1) ? `TPH_ST_TABLE_LOC_1 : (FUNC_NUM == 2) ? `TPH_ST_TABLE_LOC_2 : (FUNC_NUM == 3) ? `TPH_ST_TABLE_LOC_3 : (FUNC_NUM == 4) ? `TPH_ST_TABLE_LOC_4 : (FUNC_NUM == 5) ? `TPH_ST_TABLE_LOC_5 : (FUNC_NUM == 6) ? `TPH_ST_TABLE_LOC_6 : `TPH_ST_TABLE_LOC_7)

`define TPH_ST_TABLE_SIZE  ((FUNC_NUM == 0) ? `TPH_ST_TABLE_SIZE_0 : (FUNC_NUM == 1) ? `TPH_ST_TABLE_SIZE_1 : (FUNC_NUM == 2) ? `TPH_ST_TABLE_SIZE_2 : (FUNC_NUM == 3) ? `TPH_ST_TABLE_SIZE_3 : (FUNC_NUM == 4) ? `TPH_ST_TABLE_SIZE_4 : (FUNC_NUM == 5) ? `TPH_ST_TABLE_SIZE_5 : (FUNC_NUM == 6) ? `TPH_ST_TABLE_SIZE_6 : `TPH_ST_TABLE_SIZE_7)

`define TPH_ST_TABLE_DEPTH  ((FUNC_NUM == 0) ? `TPH_ST_TABLE_DEPTH_0 : (FUNC_NUM == 1) ? `TPH_ST_TABLE_DEPTH_1 : (FUNC_NUM == 2) ? `TPH_ST_TABLE_DEPTH_2 : (FUNC_NUM == 3) ? `TPH_ST_TABLE_DEPTH_3 : (FUNC_NUM == 4) ? `TPH_ST_TABLE_DEPTH_4 : (FUNC_NUM == 5) ? `TPH_ST_TABLE_DEPTH_5 : (FUNC_NUM == 6) ? `TPH_ST_TABLE_DEPTH_6 : `TPH_ST_TABLE_DEPTH_7)

//-/ END:   TPH CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: ATS CAPABILITIES CONFIGURATION

`define ATS_INV_Q_DPTH  ((FUNC_NUM == 0) ? `ATS_INV_Q_DPTH_0 : (FUNC_NUM == 1) ? `ATS_INV_Q_DPTH_1 : (FUNC_NUM == 2) ? `ATS_INV_Q_DPTH_2 : (FUNC_NUM == 3) ? `ATS_INV_Q_DPTH_3 : (FUNC_NUM == 4) ? `ATS_INV_Q_DPTH_4 : (FUNC_NUM == 5) ? `ATS_INV_Q_DPTH_5 : (FUNC_NUM == 6) ? `ATS_INV_Q_DPTH_6 : `ATS_INV_Q_DPTH_7)

`define ATS_STU    ((FUNC_NUM == 0) ? `ATS_STU_0 : (FUNC_NUM == 1) ? `ATS_STU_1 : (FUNC_NUM == 2) ? `ATS_STU_2 : (FUNC_NUM == 3) ? `ATS_STU_3 : (FUNC_NUM == 4) ? `ATS_STU_4 : (FUNC_NUM == 5) ? `ATS_STU_5 : (FUNC_NUM == 6) ? `ATS_STU_6 : `ATS_STU_7)

//-/ END:   ATS CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START:  LN CAPABILITIES CONFIGURATION

`define CX_LN_REG_MAX_VALUE  ((FUNC_NUM == 0) ? `CX_LN_REG_MAX_VALUE_0 : (FUNC_NUM == 1) ? `CX_LN_REG_MAX_VALUE_1 : (FUNC_NUM == 2) ? `CX_LN_REG_MAX_VALUE_2 : (FUNC_NUM == 3) ? `CX_LN_REG_MAX_VALUE_3 : (FUNC_NUM == 4) ? `CX_LN_REG_MAX_VALUE_4 : (FUNC_NUM == 5) ? `CX_LN_REG_MAX_VALUE_5 : (FUNC_NUM == 6) ? `CX_LN_REG_MAX_VALUE_6 : `CX_LN_REG_MAX_VALUE_7)

`define CX_LN_128_SUPPORTED_VALUE    ((FUNC_NUM == 0) ? `CX_LN_128_SUPPORTED_VALUE_0 : (FUNC_NUM == 1) ? `CX_LN_128_SUPPORTED_VALUE_1 : (FUNC_NUM == 2) ? `CX_LN_128_SUPPORTED_VALUE_2 : (FUNC_NUM == 3) ? `CX_LN_128_SUPPORTED_VALUE_3 : (FUNC_NUM == 4) ? `CX_LN_128_SUPPORTED_VALUE_4 : (FUNC_NUM == 5) ? `CX_LN_128_SUPPORTED_VALUE_5 : (FUNC_NUM == 6) ? `CX_LN_128_SUPPORTED_VALUE_6 : `CX_LN_128_SUPPORTED_VALUE_7)

`define CX_LN_64_SUPPORTED_VALUE    ((FUNC_NUM == 0) ? `CX_LN_64_SUPPORTED_VALUE_0 : (FUNC_NUM == 1) ? `CX_LN_64_SUPPORTED_VALUE_1 : (FUNC_NUM == 2) ? `CX_LN_64_SUPPORTED_VALUE_2 : (FUNC_NUM == 3) ? `CX_LN_64_SUPPORTED_VALUE_3 : (FUNC_NUM == 4) ? `CX_LN_64_SUPPORTED_VALUE_4 : (FUNC_NUM == 5) ? `CX_LN_64_SUPPORTED_VALUE_5 : (FUNC_NUM == 6) ? `CX_LN_64_SUPPORTED_VALUE_6 : `CX_LN_64_SUPPORTED_VALUE_7)


//-/ END:   LN CAPABILITIES CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: SR-IOV CAPABILITIES CONFIGURATION
`define CX_MAX_VF               ((FUNC_NUM == 0) ? `CX_MAX_VF_0 : (FUNC_NUM == 1) ? `CX_MAX_VF_1 : (FUNC_NUM == 2) ? `CX_MAX_VF_2 : (FUNC_NUM == 3) ? `CX_MAX_VF_3 : (FUNC_NUM == 4) ? `CX_MAX_VF_4 : (FUNC_NUM == 5) ? `CX_MAX_VF_5 : (FUNC_NUM == 6) ? `CX_MAX_VF_6 : `CX_MAX_VF_7)
`define CX_VF_DEPENDENCY_LINK   ((FUNC_NUM == 0) ? `CX_VF_DEPENDENCY_LINK_0 : (FUNC_NUM == 1) ? `CX_VF_DEPENDENCY_LINK_1 : (FUNC_NUM == 2) ? `CX_VF_DEPENDENCY_LINK_2 : (FUNC_NUM == 3) ? `CX_VF_DEPENDENCY_LINK_3 : (FUNC_NUM == 4) ? `CX_VF_DEPENDENCY_LINK_4 : (FUNC_NUM == 5) ? `CX_VF_DEPENDENCY_LINK_5 : (FUNC_NUM == 6) ? `CX_VF_DEPENDENCY_LINK_6 : `CX_VF_DEPENDENCY_LINK_7)
`define CX_VF_DEVICE_ID         ((FUNC_NUM == 0) ? `CX_VF_DEVICE_ID_0 : (FUNC_NUM == 1) ? `CX_VF_DEVICE_ID_1 : (FUNC_NUM == 2) ? `CX_VF_DEVICE_ID_2 : (FUNC_NUM == 3) ? `CX_VF_DEVICE_ID_3 : (FUNC_NUM == 4) ? `CX_VF_DEVICE_ID_4 : (FUNC_NUM == 5) ? `CX_VF_DEVICE_ID_5 : (FUNC_NUM == 6) ? `CX_VF_DEVICE_ID_6 : `CX_VF_DEVICE_ID_7)
`define CX_VF_SUPP_PAGE_SIZE    ((FUNC_NUM == 0) ? `CX_VF_SUPP_PAGE_SIZE_0 : (FUNC_NUM == 1) ? `CX_VF_SUPP_PAGE_SIZE_1 : (FUNC_NUM == 2) ? `CX_VF_SUPP_PAGE_SIZE_2 : (FUNC_NUM == 3) ? `CX_VF_SUPP_PAGE_SIZE_3 : (FUNC_NUM == 4) ? `CX_VF_SUPP_PAGE_SIZE_4 : (FUNC_NUM == 5) ? `CX_VF_SUPP_PAGE_SIZE_5 : (FUNC_NUM == 6) ? `CX_VF_SUPP_PAGE_SIZE_6 : `CX_VF_SUPP_PAGE_SIZE_7)
`define FIRST_VF_OFFSET_ARI_CAP_HIER1    ((FUNC_NUM == 0) ? `FIRST_VF_OFFSET_ARI_CAP_HIER1_0 : (FUNC_NUM == 1) ? `FIRST_VF_OFFSET_ARI_CAP_HIER1_1 : (FUNC_NUM == 2) ? `FIRST_VF_OFFSET_ARI_CAP_HIER1_2 : (FUNC_NUM == 3) ? `FIRST_VF_OFFSET_ARI_CAP_HIER1_3 : (FUNC_NUM == 4) ? `FIRST_VF_OFFSET_ARI_CAP_HIER1_4 : (FUNC_NUM == 5) ? `FIRST_VF_OFFSET_ARI_CAP_HIER1_5 : (FUNC_NUM == 6) ? `FIRST_VF_OFFSET_ARI_CAP_HIER1_6 : `FIRST_VF_OFFSET_ARI_CAP_HIER1_7)
`define FIRST_VF_OFFSET_ARI_CAP_HIER0    ((FUNC_NUM == 0) ? `FIRST_VF_OFFSET_ARI_CAP_HIER0_0 : (FUNC_NUM == 1) ? `FIRST_VF_OFFSET_ARI_CAP_HIER0_1 : (FUNC_NUM == 2) ? `FIRST_VF_OFFSET_ARI_CAP_HIER0_2 : (FUNC_NUM == 3) ? `FIRST_VF_OFFSET_ARI_CAP_HIER0_3 : (FUNC_NUM == 4) ? `FIRST_VF_OFFSET_ARI_CAP_HIER0_4 : (FUNC_NUM == 5) ? `FIRST_VF_OFFSET_ARI_CAP_HIER0_5 : (FUNC_NUM == 6) ? `FIRST_VF_OFFSET_ARI_CAP_HIER0_6 : `FIRST_VF_OFFSET_ARI_CAP_HIER0_7)
`define VF_STRIDE_ARI_CAP_HIER1    ((FUNC_NUM == 0) ? `VF_STRIDE_ARI_CAP_HIER1_0 : (FUNC_NUM == 1) ? `VF_STRIDE_ARI_CAP_HIER1_1 : (FUNC_NUM == 2) ? `VF_STRIDE_ARI_CAP_HIER1_2 : (FUNC_NUM == 3) ? `VF_STRIDE_ARI_CAP_HIER1_3 : (FUNC_NUM == 4) ? `VF_STRIDE_ARI_CAP_HIER1_4 : (FUNC_NUM == 5) ? `VF_STRIDE_ARI_CAP_HIER1_5 : (FUNC_NUM == 6) ? `VF_STRIDE_ARI_CAP_HIER1_6 : `VF_STRIDE_ARI_CAP_HIER1_7)
`define VF_STRIDE_ARI_CAP_HIER0    ((FUNC_NUM == 0) ? `VF_STRIDE_ARI_CAP_HIER0_0 : (FUNC_NUM == 1) ? `VF_STRIDE_ARI_CAP_HIER0_1 : (FUNC_NUM == 2) ? `VF_STRIDE_ARI_CAP_HIER0_2 : (FUNC_NUM == 3) ? `VF_STRIDE_ARI_CAP_HIER0_3 : (FUNC_NUM == 4) ? `VF_STRIDE_ARI_CAP_HIER0_4 : (FUNC_NUM == 5) ? `VF_STRIDE_ARI_CAP_HIER0_5 : (FUNC_NUM == 6) ? `VF_STRIDE_ARI_CAP_HIER0_6 : `VF_STRIDE_ARI_CAP_HIER0_7)
`define CX_ARI_CAP_HIER_PRSVD    ((FUNC_NUM == 0) ? `CX_ARI_CAP_HIER_PRSVD_0 : (FUNC_NUM == 1) ? `CX_ARI_CAP_HIER_PRSVD_1 : (FUNC_NUM == 2) ? `CX_ARI_CAP_HIER_PRSVD_2 : (FUNC_NUM == 3) ? `CX_ARI_CAP_HIER_PRSVD_3 : (FUNC_NUM == 4) ? `CX_ARI_CAP_HIER_PRSVD_4 : (FUNC_NUM == 5) ? `CX_ARI_CAP_HIER_PRSVD_5 : (FUNC_NUM == 6) ? `CX_ARI_CAP_HIER_PRSVD_6 : `CX_ARI_CAP_HIER_PRSVD_7)


//-/===========================================
//-/ START: VF BAR CONFIGURATION

`define VF_BAR0_ENABLED         ((FUNC_NUM == 0) ? `VF_BAR0_ENABLED_0 : (FUNC_NUM == 1) ? `VF_BAR0_ENABLED_1 : (FUNC_NUM == 2) ? `VF_BAR0_ENABLED_2 : (FUNC_NUM == 3) ? `VF_BAR0_ENABLED_3 : (FUNC_NUM == 4) ? `VF_BAR0_ENABLED_4 : (FUNC_NUM == 5) ? `VF_BAR0_ENABLED_5 : (FUNC_NUM == 6) ? `VF_BAR0_ENABLED_6 : `VF_BAR0_ENABLED_7)
`define VF_DEFAULT_BAR0_ENABLED ((FUNC_NUM == 0) ? `VF_DEFAULT_BAR0_ENABLED_0 : (FUNC_NUM == 1) ? `VF_DEFAULT_BAR0_ENABLED_1 : (FUNC_NUM == 2) ? `VF_DEFAULT_BAR0_ENABLED_2 : (FUNC_NUM == 3) ? `VF_DEFAULT_BAR0_ENABLED_3 : (FUNC_NUM == 4) ? `VF_DEFAULT_BAR0_ENABLED_4 : (FUNC_NUM == 5) ? `VF_DEFAULT_BAR0_ENABLED_5 : (FUNC_NUM == 6) ? `VF_DEFAULT_BAR0_ENABLED_6 : `VF_DEFAULT_BAR0_ENABLED_7)
`define VF_PREFETCHABLE0        ((FUNC_NUM == 0) ? `VF_PREFETCHABLE0_0 : (FUNC_NUM == 1) ? `VF_PREFETCHABLE0_1 : (FUNC_NUM == 2) ? `VF_PREFETCHABLE0_2 : (FUNC_NUM == 3) ? `VF_PREFETCHABLE0_3 : (FUNC_NUM == 4) ? `VF_PREFETCHABLE0_4 : (FUNC_NUM == 5) ? `VF_PREFETCHABLE0_5 : (FUNC_NUM == 6) ? `VF_PREFETCHABLE0_6 : `VF_PREFETCHABLE0_7)
`define VF_BAR0_TYPE            ((FUNC_NUM == 0) ? `VF_BAR0_TYPE_0 : (FUNC_NUM == 1) ? `VF_BAR0_TYPE_1 : (FUNC_NUM == 2) ? `VF_BAR0_TYPE_2 : (FUNC_NUM == 3) ? `VF_BAR0_TYPE_3 : (FUNC_NUM == 4) ? `VF_BAR0_TYPE_4 : (FUNC_NUM == 5) ? `VF_BAR0_TYPE_5 : (FUNC_NUM == 6) ? `VF_BAR0_TYPE_6 : `VF_BAR0_TYPE_7)
`define VF_BAR0_MASK_WRITABLE   ((FUNC_NUM == 0) ? `VF_BAR0_MASK_WRITABLE_0 : (FUNC_NUM == 1) ? `VF_BAR0_MASK_WRITABLE_1 : (FUNC_NUM == 2) ? `VF_BAR0_MASK_WRITABLE_2 : (FUNC_NUM == 3) ? `VF_BAR0_MASK_WRITABLE_3 : (FUNC_NUM == 4) ? `VF_BAR0_MASK_WRITABLE_4 : (FUNC_NUM == 5) ? `VF_BAR0_MASK_WRITABLE_5 : (FUNC_NUM == 6) ? `VF_BAR0_MASK_WRITABLE_6 : `VF_BAR0_MASK_WRITABLE_7)
`define VF_BAR0_MASK            ((FUNC_NUM == 0) ? `VF_BAR0_MASK_0 : (FUNC_NUM == 1) ? `VF_BAR0_MASK_1 : (FUNC_NUM == 2) ? `VF_BAR0_MASK_2 : (FUNC_NUM == 3) ? `VF_BAR0_MASK_3 : (FUNC_NUM == 4) ? `VF_BAR0_MASK_4 : (FUNC_NUM == 5) ? `VF_BAR0_MASK_5 : (FUNC_NUM == 6) ? `VF_BAR0_MASK_6 : `VF_BAR0_MASK_7)

`define VF_BAR1_ENABLED         ((FUNC_NUM == 0) ? `VF_BAR1_ENABLED_0 : (FUNC_NUM == 1) ? `VF_BAR1_ENABLED_1 : (FUNC_NUM == 2) ? `VF_BAR1_ENABLED_2 : (FUNC_NUM == 3) ? `VF_BAR1_ENABLED_3 : (FUNC_NUM == 4) ? `VF_BAR1_ENABLED_4 : (FUNC_NUM == 5) ? `VF_BAR1_ENABLED_5 : (FUNC_NUM == 6) ? `VF_BAR1_ENABLED_6 : `VF_BAR1_ENABLED_7)
`define VF_DEFAULT_BAR1_ENABLED ((FUNC_NUM == 0) ? `VF_DEFAULT_BAR1_ENABLED_0 : (FUNC_NUM == 1) ? `VF_DEFAULT_BAR1_ENABLED_1 : (FUNC_NUM == 2) ? `VF_DEFAULT_BAR1_ENABLED_2 : (FUNC_NUM == 3) ? `VF_DEFAULT_BAR1_ENABLED_3 : (FUNC_NUM == 4) ? `VF_DEFAULT_BAR1_ENABLED_4 : (FUNC_NUM == 5) ? `VF_DEFAULT_BAR1_ENABLED_5 : (FUNC_NUM == 6) ? `VF_DEFAULT_BAR1_ENABLED_6 : `VF_DEFAULT_BAR1_ENABLED_7)
`define VF_PREFETCHABLE1        ((FUNC_NUM == 0) ? `VF_PREFETCHABLE1_0 : (FUNC_NUM == 1) ? `VF_PREFETCHABLE1_1 : (FUNC_NUM == 2) ? `VF_PREFETCHABLE1_2 : (FUNC_NUM == 3) ? `VF_PREFETCHABLE1_3 : (FUNC_NUM == 4) ? `VF_PREFETCHABLE1_4 : (FUNC_NUM == 5) ? `VF_PREFETCHABLE1_5 : (FUNC_NUM == 6) ? `VF_PREFETCHABLE1_6 : `VF_PREFETCHABLE1_7)
`define VF_BAR1_TYPE            ((FUNC_NUM == 0) ? `VF_BAR1_TYPE_0 : (FUNC_NUM == 1) ? `VF_BAR1_TYPE_1 : (FUNC_NUM == 2) ? `VF_BAR1_TYPE_2 : (FUNC_NUM == 3) ? `VF_BAR1_TYPE_3 : (FUNC_NUM == 4) ? `VF_BAR1_TYPE_4 : (FUNC_NUM == 5) ? `VF_BAR1_TYPE_5 : (FUNC_NUM == 6) ? `VF_BAR1_TYPE_6 : `VF_BAR1_TYPE_7)
`define VF_BAR1_MASK_WRITABLE   ((FUNC_NUM == 0) ? `VF_BAR1_MASK_WRITABLE_0 : (FUNC_NUM == 1) ? `VF_BAR1_MASK_WRITABLE_1 : (FUNC_NUM == 2) ? `VF_BAR1_MASK_WRITABLE_2 : (FUNC_NUM == 3) ? `VF_BAR1_MASK_WRITABLE_3 : (FUNC_NUM == 4) ? `VF_BAR1_MASK_WRITABLE_4 : (FUNC_NUM == 5) ? `VF_BAR1_MASK_WRITABLE_5 : (FUNC_NUM == 6) ? `VF_BAR1_MASK_WRITABLE_6 : `VF_BAR1_MASK_WRITABLE_7)
`define VF_BAR1_MASK            ((FUNC_NUM == 0) ? `VF_BAR1_MASK_0 : (FUNC_NUM == 1) ? `VF_BAR1_MASK_1 : (FUNC_NUM == 2) ? `VF_BAR1_MASK_2 : (FUNC_NUM == 3) ? `VF_BAR1_MASK_3 : (FUNC_NUM == 4) ? `VF_BAR1_MASK_4 : (FUNC_NUM == 5) ? `VF_BAR1_MASK_5 : (FUNC_NUM == 6) ? `VF_BAR1_MASK_6 : `VF_BAR1_MASK_7)

`define VF_BAR2_ENABLED         ((FUNC_NUM == 0) ? `VF_BAR2_ENABLED_0 : (FUNC_NUM == 1) ? `VF_BAR2_ENABLED_1 : (FUNC_NUM == 2) ? `VF_BAR2_ENABLED_2 : (FUNC_NUM == 3) ? `VF_BAR2_ENABLED_3 : (FUNC_NUM == 4) ? `VF_BAR2_ENABLED_4 : (FUNC_NUM == 5) ? `VF_BAR2_ENABLED_5 : (FUNC_NUM == 6) ? `VF_BAR2_ENABLED_6 : `VF_BAR2_ENABLED_7)
`define VF_DEFAULT_BAR2_ENABLED ((FUNC_NUM == 0) ? `VF_DEFAULT_BAR2_ENABLED_0 : (FUNC_NUM == 1) ? `VF_DEFAULT_BAR2_ENABLED_1 : (FUNC_NUM == 2) ? `VF_DEFAULT_BAR2_ENABLED_2 : (FUNC_NUM == 3) ? `VF_DEFAULT_BAR2_ENABLED_3 : (FUNC_NUM == 4) ? `VF_DEFAULT_BAR2_ENABLED_4 : (FUNC_NUM == 5) ? `VF_DEFAULT_BAR2_ENABLED_5 : (FUNC_NUM == 6) ? `VF_DEFAULT_BAR2_ENABLED_6 : `VF_DEFAULT_BAR2_ENABLED_7)
`define VF_PREFETCHABLE2        ((FUNC_NUM == 0) ? `VF_PREFETCHABLE2_0 : (FUNC_NUM == 1) ? `VF_PREFETCHABLE2_1 : (FUNC_NUM == 2) ? `VF_PREFETCHABLE2_2 : (FUNC_NUM == 3) ? `VF_PREFETCHABLE2_3 : (FUNC_NUM == 4) ? `VF_PREFETCHABLE2_4 : (FUNC_NUM == 5) ? `VF_PREFETCHABLE2_5 : (FUNC_NUM == 6) ? `VF_PREFETCHABLE2_6 : `VF_PREFETCHABLE2_7)
`define VF_BAR2_TYPE            ((FUNC_NUM == 0) ? `VF_BAR2_TYPE_0 : (FUNC_NUM == 1) ? `VF_BAR2_TYPE_1 : (FUNC_NUM == 2) ? `VF_BAR2_TYPE_2 : (FUNC_NUM == 3) ? `VF_BAR2_TYPE_3 : (FUNC_NUM == 4) ? `VF_BAR2_TYPE_4 : (FUNC_NUM == 5) ? `VF_BAR2_TYPE_5 : (FUNC_NUM == 6) ? `VF_BAR2_TYPE_6 : `VF_BAR2_TYPE_7)
`define VF_BAR2_MASK_WRITABLE   ((FUNC_NUM == 0) ? `VF_BAR2_MASK_WRITABLE_0 : (FUNC_NUM == 1) ? `VF_BAR2_MASK_WRITABLE_1 : (FUNC_NUM == 2) ? `VF_BAR2_MASK_WRITABLE_2 : (FUNC_NUM == 3) ? `VF_BAR2_MASK_WRITABLE_3 : (FUNC_NUM == 4) ? `VF_BAR2_MASK_WRITABLE_4 : (FUNC_NUM == 5) ? `VF_BAR2_MASK_WRITABLE_5 : (FUNC_NUM == 6) ? `VF_BAR2_MASK_WRITABLE_6 : `VF_BAR2_MASK_WRITABLE_7)
`define VF_BAR2_MASK            ((FUNC_NUM == 0) ? `VF_BAR2_MASK_0 : (FUNC_NUM == 1) ? `VF_BAR2_MASK_1 : (FUNC_NUM == 2) ? `VF_BAR2_MASK_2 : (FUNC_NUM == 3) ? `VF_BAR2_MASK_3 : (FUNC_NUM == 4) ? `VF_BAR2_MASK_4 : (FUNC_NUM == 5) ? `VF_BAR2_MASK_5 : (FUNC_NUM == 6) ? `VF_BAR2_MASK_6 : `VF_BAR2_MASK_7)

`define VF_BAR3_ENABLED         ((FUNC_NUM == 0) ? `VF_BAR3_ENABLED_0 : (FUNC_NUM == 1) ? `VF_BAR3_ENABLED_1 : (FUNC_NUM == 2) ? `VF_BAR3_ENABLED_2 : (FUNC_NUM == 3) ? `VF_BAR3_ENABLED_3 : (FUNC_NUM == 4) ? `VF_BAR3_ENABLED_4 : (FUNC_NUM == 5) ? `VF_BAR3_ENABLED_5 : (FUNC_NUM == 6) ? `VF_BAR3_ENABLED_6 : `VF_BAR3_ENABLED_7)
`define VF_DEFAULT_BAR3_ENABLED ((FUNC_NUM == 0) ? `VF_DEFAULT_BAR3_ENABLED_0 : (FUNC_NUM == 1) ? `VF_DEFAULT_BAR3_ENABLED_1 : (FUNC_NUM == 2) ? `VF_DEFAULT_BAR3_ENABLED_2 : (FUNC_NUM == 3) ? `VF_DEFAULT_BAR3_ENABLED_3 : (FUNC_NUM == 4) ? `VF_DEFAULT_BAR3_ENABLED_4 : (FUNC_NUM == 5) ? `VF_DEFAULT_BAR3_ENABLED_5 : (FUNC_NUM == 6) ? `VF_DEFAULT_BAR3_ENABLED_6 : `VF_DEFAULT_BAR3_ENABLED_7)
`define VF_PREFETCHABLE3        ((FUNC_NUM == 0) ? `VF_PREFETCHABLE3_0 : (FUNC_NUM == 1) ? `VF_PREFETCHABLE3_1 : (FUNC_NUM == 2) ? `VF_PREFETCHABLE3_2 : (FUNC_NUM == 3) ? `VF_PREFETCHABLE3_3 : (FUNC_NUM == 4) ? `VF_PREFETCHABLE3_4 : (FUNC_NUM == 5) ? `VF_PREFETCHABLE3_5 : (FUNC_NUM == 6) ? `VF_PREFETCHABLE3_6 : `VF_PREFETCHABLE3_7)
`define VF_BAR3_TYPE            ((FUNC_NUM == 0) ? `VF_BAR3_TYPE_0 : (FUNC_NUM == 1) ? `VF_BAR3_TYPE_1 : (FUNC_NUM == 2) ? `VF_BAR3_TYPE_2 : (FUNC_NUM == 3) ? `VF_BAR3_TYPE_3 : (FUNC_NUM == 4) ? `VF_BAR3_TYPE_4 : (FUNC_NUM == 5) ? `VF_BAR3_TYPE_5 : (FUNC_NUM == 6) ? `VF_BAR3_TYPE_6 : `VF_BAR3_TYPE_7)
`define VF_BAR3_MASK_WRITABLE   ((FUNC_NUM == 0) ? `VF_BAR3_MASK_WRITABLE_0 : (FUNC_NUM == 1) ? `VF_BAR3_MASK_WRITABLE_1 : (FUNC_NUM == 2) ? `VF_BAR3_MASK_WRITABLE_2 : (FUNC_NUM == 3) ? `VF_BAR3_MASK_WRITABLE_3 : (FUNC_NUM == 4) ? `VF_BAR3_MASK_WRITABLE_4 : (FUNC_NUM == 5) ? `VF_BAR3_MASK_WRITABLE_5 : (FUNC_NUM == 6) ? `VF_BAR3_MASK_WRITABLE_6 : `VF_BAR3_MASK_WRITABLE_7)
`define VF_BAR3_MASK            ((FUNC_NUM == 0) ? `VF_BAR3_MASK_0 : (FUNC_NUM == 1) ? `VF_BAR3_MASK_1 : (FUNC_NUM == 2) ? `VF_BAR3_MASK_2 : (FUNC_NUM == 3) ? `VF_BAR3_MASK_3 : (FUNC_NUM == 4) ? `VF_BAR3_MASK_4 : (FUNC_NUM == 5) ? `VF_BAR3_MASK_5 : (FUNC_NUM == 6) ? `VF_BAR3_MASK_6 : `VF_BAR3_MASK_7)

`define VF_BAR4_ENABLED         ((FUNC_NUM == 0) ? `VF_BAR4_ENABLED_0 : (FUNC_NUM == 1) ? `VF_BAR4_ENABLED_1 : (FUNC_NUM == 2) ? `VF_BAR4_ENABLED_2 : (FUNC_NUM == 3) ? `VF_BAR4_ENABLED_3 : (FUNC_NUM == 4) ? `VF_BAR4_ENABLED_4 : (FUNC_NUM == 5) ? `VF_BAR4_ENABLED_5 : (FUNC_NUM == 6) ? `VF_BAR4_ENABLED_6 : `VF_BAR4_ENABLED_7)
`define VF_DEFAULT_BAR4_ENABLED ((FUNC_NUM == 0) ? `VF_DEFAULT_BAR4_ENABLED_0 : (FUNC_NUM == 1) ? `VF_DEFAULT_BAR4_ENABLED_1 : (FUNC_NUM == 2) ? `VF_DEFAULT_BAR4_ENABLED_2 : (FUNC_NUM == 3) ? `VF_DEFAULT_BAR4_ENABLED_3 : (FUNC_NUM == 4) ? `VF_DEFAULT_BAR4_ENABLED_4 : (FUNC_NUM == 5) ? `VF_DEFAULT_BAR4_ENABLED_5 : (FUNC_NUM == 6) ? `VF_DEFAULT_BAR4_ENABLED_6 : `VF_DEFAULT_BAR4_ENABLED_7)
`define VF_PREFETCHABLE4        ((FUNC_NUM == 0) ? `VF_PREFETCHABLE4_0 : (FUNC_NUM == 1) ? `VF_PREFETCHABLE4_1 : (FUNC_NUM == 2) ? `VF_PREFETCHABLE4_2 : (FUNC_NUM == 3) ? `VF_PREFETCHABLE4_3 : (FUNC_NUM == 4) ? `VF_PREFETCHABLE4_4 : (FUNC_NUM == 5) ? `VF_PREFETCHABLE4_5 : (FUNC_NUM == 6) ? `VF_PREFETCHABLE4_6 : `VF_PREFETCHABLE4_7)
`define VF_BAR4_TYPE            ((FUNC_NUM == 0) ? `VF_BAR4_TYPE_0 : (FUNC_NUM == 1) ? `VF_BAR4_TYPE_1 : (FUNC_NUM == 2) ? `VF_BAR4_TYPE_2 : (FUNC_NUM == 3) ? `VF_BAR4_TYPE_3 : (FUNC_NUM == 4) ? `VF_BAR4_TYPE_4 : (FUNC_NUM == 5) ? `VF_BAR4_TYPE_5 : (FUNC_NUM == 6) ? `VF_BAR4_TYPE_6 : `VF_BAR4_TYPE_7)
`define VF_BAR4_MASK_WRITABLE   ((FUNC_NUM == 0) ? `VF_BAR4_MASK_WRITABLE_0 : (FUNC_NUM == 1) ? `VF_BAR4_MASK_WRITABLE_1 : (FUNC_NUM == 2) ? `VF_BAR4_MASK_WRITABLE_2 : (FUNC_NUM == 3) ? `VF_BAR4_MASK_WRITABLE_3 : (FUNC_NUM == 4) ? `VF_BAR4_MASK_WRITABLE_4 : (FUNC_NUM == 5) ? `VF_BAR4_MASK_WRITABLE_5 : (FUNC_NUM == 6) ? `VF_BAR4_MASK_WRITABLE_6 : `VF_BAR4_MASK_WRITABLE_7)
`define VF_BAR4_MASK            ((FUNC_NUM == 0) ? `VF_BAR4_MASK_0 : (FUNC_NUM == 1) ? `VF_BAR4_MASK_1 : (FUNC_NUM == 2) ? `VF_BAR4_MASK_2 : (FUNC_NUM == 3) ? `VF_BAR4_MASK_3 : (FUNC_NUM == 4) ? `VF_BAR4_MASK_4 : (FUNC_NUM == 5) ? `VF_BAR4_MASK_5 : (FUNC_NUM == 6) ? `VF_BAR4_MASK_6 : `VF_BAR4_MASK_7)

`define VF_BAR5_ENABLED         ((FUNC_NUM == 0) ? `VF_BAR5_ENABLED_0 : (FUNC_NUM == 1) ? `VF_BAR5_ENABLED_1 : (FUNC_NUM == 2) ? `VF_BAR5_ENABLED_2 : (FUNC_NUM == 3) ? `VF_BAR5_ENABLED_3 : (FUNC_NUM == 4) ? `VF_BAR5_ENABLED_4 : (FUNC_NUM == 5) ? `VF_BAR5_ENABLED_5 : (FUNC_NUM == 6) ? `VF_BAR5_ENABLED_6 : `VF_BAR5_ENABLED_7)
`define VF_DEFAULT_BAR5_ENABLED ((FUNC_NUM == 0) ? `VF_DEFAULT_BAR5_ENABLED_0 : (FUNC_NUM == 1) ? `VF_DEFAULT_BAR5_ENABLED_1 : (FUNC_NUM == 2) ? `VF_DEFAULT_BAR5_ENABLED_2 : (FUNC_NUM == 3) ? `VF_DEFAULT_BAR5_ENABLED_3 : (FUNC_NUM == 4) ? `VF_DEFAULT_BAR5_ENABLED_4 : (FUNC_NUM == 5) ? `VF_DEFAULT_BAR5_ENABLED_5 : (FUNC_NUM == 6) ? `VF_DEFAULT_BAR5_ENABLED_6 : `VF_DEFAULT_BAR5_ENABLED_7)
`define VF_PREFETCHABLE5        ((FUNC_NUM == 0) ? `VF_PREFETCHABLE5_0 : (FUNC_NUM == 1) ? `VF_PREFETCHABLE5_1 : (FUNC_NUM == 2) ? `VF_PREFETCHABLE5_2 : (FUNC_NUM == 3) ? `VF_PREFETCHABLE5_3 : (FUNC_NUM == 4) ? `VF_PREFETCHABLE5_4 : (FUNC_NUM == 5) ? `VF_PREFETCHABLE5_5 : (FUNC_NUM == 6) ? `VF_PREFETCHABLE5_6 : `VF_PREFETCHABLE5_7)
`define VF_BAR5_TYPE            ((FUNC_NUM == 0) ? `VF_BAR5_TYPE_0 : (FUNC_NUM == 1) ? `VF_BAR5_TYPE_1 : (FUNC_NUM == 2) ? `VF_BAR5_TYPE_2 : (FUNC_NUM == 3) ? `VF_BAR5_TYPE_3 : (FUNC_NUM == 4) ? `VF_BAR5_TYPE_4 : (FUNC_NUM == 5) ? `VF_BAR5_TYPE_5 : (FUNC_NUM == 6) ? `VF_BAR5_TYPE_6 : `VF_BAR5_TYPE_7)
`define VF_BAR5_MASK_WRITABLE   ((FUNC_NUM == 0) ? `VF_BAR5_MASK_WRITABLE_0 : (FUNC_NUM == 1) ? `VF_BAR5_MASK_WRITABLE_1 : (FUNC_NUM == 2) ? `VF_BAR5_MASK_WRITABLE_2 : (FUNC_NUM == 3) ? `VF_BAR5_MASK_WRITABLE_3 : (FUNC_NUM == 4) ? `VF_BAR5_MASK_WRITABLE_4 : (FUNC_NUM == 5) ? `VF_BAR5_MASK_WRITABLE_5 : (FUNC_NUM == 6) ? `VF_BAR5_MASK_WRITABLE_6 : `VF_BAR5_MASK_WRITABLE_7)
`define VF_BAR5_MASK            ((FUNC_NUM == 0) ? `VF_BAR5_MASK_0 : (FUNC_NUM == 1) ? `VF_BAR5_MASK_1 : (FUNC_NUM == 2) ? `VF_BAR5_MASK_2 : (FUNC_NUM == 3) ? `VF_BAR5_MASK_3 : (FUNC_NUM == 4) ? `VF_BAR5_MASK_4 : (FUNC_NUM == 5) ? `VF_BAR5_MASK_5 : (FUNC_NUM == 6) ? `VF_BAR5_MASK_6 : `VF_BAR5_MASK_7)

`define VF_MEM_FUNC_BAR0_TARGET_MAP ((FUNC_NUM == 0) ? `VF_MEM_FUNC0_BAR0_TARGET_MAP : (FUNC_NUM == 1) ? `VF_MEM_FUNC1_BAR0_TARGET_MAP : (FUNC_NUM == 2) ? `VF_MEM_FUNC2_BAR0_TARGET_MAP : (FUNC_NUM == 3) ? `VF_MEM_FUNC3_BAR0_TARGET_MAP : (FUNC_NUM == 4) ? `VF_MEM_FUNC4_BAR0_TARGET_MAP : (FUNC_NUM == 5) ? `VF_MEM_FUNC5_BAR0_TARGET_MAP : (FUNC_NUM == 6) ? `VF_MEM_FUNC6_BAR0_TARGET_MAP : `VF_MEM_FUNC7_BAR0_TARGET_MAP)

`define VF_MEM_FUNC_BAR1_TARGET_MAP ((FUNC_NUM == 0) ? `VF_MEM_FUNC0_BAR1_TARGET_MAP : (FUNC_NUM == 1) ? `VF_MEM_FUNC1_BAR1_TARGET_MAP : (FUNC_NUM == 2) ? `VF_MEM_FUNC2_BAR1_TARGET_MAP : (FUNC_NUM == 3) ? `VF_MEM_FUNC3_BAR1_TARGET_MAP : (FUNC_NUM == 4) ? `VF_MEM_FUNC4_BAR1_TARGET_MAP : (FUNC_NUM == 5) ? `VF_MEM_FUNC5_BAR1_TARGET_MAP : (FUNC_NUM == 6) ? `VF_MEM_FUNC6_BAR1_TARGET_MAP : `VF_MEM_FUNC7_BAR1_TARGET_MAP)

`define VF_MEM_FUNC_BAR2_TARGET_MAP ((FUNC_NUM == 0) ? `VF_MEM_FUNC0_BAR2_TARGET_MAP : (FUNC_NUM == 1) ? `VF_MEM_FUNC1_BAR2_TARGET_MAP : (FUNC_NUM == 2) ? `VF_MEM_FUNC2_BAR2_TARGET_MAP : (FUNC_NUM == 3) ? `VF_MEM_FUNC3_BAR2_TARGET_MAP : (FUNC_NUM == 4) ? `VF_MEM_FUNC4_BAR2_TARGET_MAP : (FUNC_NUM == 5) ? `VF_MEM_FUNC5_BAR2_TARGET_MAP : (FUNC_NUM == 6) ? `VF_MEM_FUNC6_BAR2_TARGET_MAP : `VF_MEM_FUNC7_BAR2_TARGET_MAP)

`define VF_MEM_FUNC_BAR3_TARGET_MAP ((FUNC_NUM == 0) ? `VF_MEM_FUNC0_BAR3_TARGET_MAP : (FUNC_NUM == 1) ? `VF_MEM_FUNC1_BAR3_TARGET_MAP : (FUNC_NUM == 2) ? `VF_MEM_FUNC2_BAR3_TARGET_MAP : (FUNC_NUM == 3) ? `VF_MEM_FUNC3_BAR3_TARGET_MAP : (FUNC_NUM == 4) ? `VF_MEM_FUNC4_BAR3_TARGET_MAP : (FUNC_NUM == 5) ? `VF_MEM_FUNC5_BAR3_TARGET_MAP : (FUNC_NUM == 6) ? `VF_MEM_FUNC6_BAR3_TARGET_MAP : `VF_MEM_FUNC7_BAR3_TARGET_MAP)

`define VF_MEM_FUNC_BAR4_TARGET_MAP ((FUNC_NUM == 0) ? `VF_MEM_FUNC0_BAR4_TARGET_MAP : (FUNC_NUM == 1) ? `VF_MEM_FUNC1_BAR4_TARGET_MAP : (FUNC_NUM == 2) ? `VF_MEM_FUNC2_BAR4_TARGET_MAP : (FUNC_NUM == 3) ? `VF_MEM_FUNC3_BAR4_TARGET_MAP : (FUNC_NUM == 4) ? `VF_MEM_FUNC4_BAR4_TARGET_MAP : (FUNC_NUM == 5) ? `VF_MEM_FUNC5_BAR4_TARGET_MAP : (FUNC_NUM == 6) ? `VF_MEM_FUNC6_BAR4_TARGET_MAP : `VF_MEM_FUNC7_BAR4_TARGET_MAP)

`define VF_MEM_FUNC_BAR5_TARGET_MAP ((FUNC_NUM == 0) ? `VF_MEM_FUNC0_BAR5_TARGET_MAP : (FUNC_NUM == 1) ? `VF_MEM_FUNC1_BAR5_TARGET_MAP : (FUNC_NUM == 2) ? `VF_MEM_FUNC2_BAR5_TARGET_MAP : (FUNC_NUM == 3) ? `VF_MEM_FUNC3_BAR5_TARGET_MAP : (FUNC_NUM == 4) ? `VF_MEM_FUNC4_BAR5_TARGET_MAP : (FUNC_NUM == 5) ? `VF_MEM_FUNC5_BAR5_TARGET_MAP : (FUNC_NUM == 6) ? `VF_MEM_FUNC6_BAR5_TARGET_MAP : `VF_MEM_FUNC7_BAR5_TARGET_MAP)

//-/ END:   VF BAR CONFIGURATION
//-/===========================================


//-/ END:   SR-IOV CAPABILITIES CONFIGURATION
//-/===========================================


//-/===========================================
//-/ START: PCI BASIC CONFIGURATION

`define CX_DEVICE_ID            ((FUNC_NUM == 0) ? `CX_DEVICE_ID_0 : (FUNC_NUM == 1) ? `CX_DEVICE_ID_1 : (FUNC_NUM == 2) ? `CX_DEVICE_ID_2 : (FUNC_NUM == 3) ? `CX_DEVICE_ID_3 : (FUNC_NUM == 4) ? `CX_DEVICE_ID_4 : (FUNC_NUM == 5) ? `CX_DEVICE_ID_5 : (FUNC_NUM == 6) ? `CX_DEVICE_ID_6 : `CX_DEVICE_ID_7)
`define CX_VENDOR_ID            ((FUNC_NUM == 0) ? `CX_VENDOR_ID_0 : (FUNC_NUM == 1) ? `CX_VENDOR_ID_1 : (FUNC_NUM == 2) ? `CX_VENDOR_ID_2 : (FUNC_NUM == 3) ? `CX_VENDOR_ID_3 : (FUNC_NUM == 4) ? `CX_VENDOR_ID_4 : (FUNC_NUM == 5) ? `CX_VENDOR_ID_5 : (FUNC_NUM == 6) ? `CX_VENDOR_ID_6 : `CX_VENDOR_ID_7)
`define CX_REVISION_ID          ((FUNC_NUM == 0) ? `CX_REVISION_ID_0 : (FUNC_NUM == 1) ? `CX_REVISION_ID_1 : (FUNC_NUM == 2) ? `CX_REVISION_ID_2 : (FUNC_NUM == 3) ? `CX_REVISION_ID_3 : (FUNC_NUM == 4) ? `CX_REVISION_ID_4 : (FUNC_NUM == 5) ? `CX_REVISION_ID_5 : (FUNC_NUM == 6) ? `CX_REVISION_ID_6 : `CX_REVISION_ID_7)
`define SUBSYS_DEV_ID           ((FUNC_NUM == 0) ? `SUBSYS_DEV_ID_0 : (FUNC_NUM == 1) ? `SUBSYS_DEV_ID_1 : (FUNC_NUM == 2) ? `SUBSYS_DEV_ID_2 : (FUNC_NUM == 3) ? `SUBSYS_DEV_ID_3 : (FUNC_NUM == 4) ? `SUBSYS_DEV_ID_4 : (FUNC_NUM == 5) ? `SUBSYS_DEV_ID_5 : (FUNC_NUM == 6) ? `SUBSYS_DEV_ID_6 : `SUBSYS_DEV_ID_7)
`define SUBSYS_VENDOR_ID        ((FUNC_NUM == 0) ? `SUBSYS_VENDOR_ID_0 : (FUNC_NUM == 1) ? `SUBSYS_VENDOR_ID_1 : (FUNC_NUM == 2) ? `SUBSYS_VENDOR_ID_2 : (FUNC_NUM == 3) ? `SUBSYS_VENDOR_ID_3 : (FUNC_NUM == 4) ? `SUBSYS_VENDOR_ID_4 : (FUNC_NUM == 5) ? `SUBSYS_VENDOR_ID_5 : (FUNC_NUM == 6) ? `SUBSYS_VENDOR_ID_6 : `SUBSYS_VENDOR_ID_7)
`define BASE_CLASS_CODE         ((FUNC_NUM == 0) ? `BASE_CLASS_CODE_0 : (FUNC_NUM == 1) ? `BASE_CLASS_CODE_1 : (FUNC_NUM == 2) ? `BASE_CLASS_CODE_2 : (FUNC_NUM == 3) ? `BASE_CLASS_CODE_3 : (FUNC_NUM == 4) ? `BASE_CLASS_CODE_4 : (FUNC_NUM == 5) ? `BASE_CLASS_CODE_5 : (FUNC_NUM == 6) ? `BASE_CLASS_CODE_6 : `BASE_CLASS_CODE_7)
`define SUB_CLASS_CODE          ((FUNC_NUM == 0) ? `SUB_CLASS_CODE_0 : (FUNC_NUM == 1) ? `SUB_CLASS_CODE_1 : (FUNC_NUM == 2) ? `SUB_CLASS_CODE_2 : (FUNC_NUM == 3) ? `SUB_CLASS_CODE_3 : (FUNC_NUM == 4) ? `SUB_CLASS_CODE_4 : (FUNC_NUM == 5) ? `SUB_CLASS_CODE_5 : (FUNC_NUM == 6) ? `SUB_CLASS_CODE_6 : `SUB_CLASS_CODE_7)
`define IF_CODE                 ((FUNC_NUM == 0) ? `IF_CODE_0 : (FUNC_NUM == 1) ? `IF_CODE_1 : (FUNC_NUM == 2) ? `IF_CODE_2 : (FUNC_NUM == 3) ? `IF_CODE_3 : (FUNC_NUM == 4) ? `IF_CODE_4 : (FUNC_NUM == 5) ? `IF_CODE_5 : (FUNC_NUM == 6) ? `IF_CODE_6 : `IF_CODE_7)
`define CARDBUS_CIS_PTR         ((FUNC_NUM == 0) ? `CARDBUS_CIS_PTR_0 : (FUNC_NUM == 1) ? `CARDBUS_CIS_PTR_1 : (FUNC_NUM == 2) ? `CARDBUS_CIS_PTR_2 : (FUNC_NUM == 3) ? `CARDBUS_CIS_PTR_3 : (FUNC_NUM == 4) ? `CARDBUS_CIS_PTR_4 : (FUNC_NUM == 5) ? `CARDBUS_CIS_PTR_5 : (FUNC_NUM == 6) ? `CARDBUS_CIS_PTR_6 : `CARDBUS_CIS_PTR_7)
`define INT_PIN_MAPPING         ((FUNC_NUM == 0) ? `INT_PIN_MAPPING_0 : (FUNC_NUM == 1) ? `INT_PIN_MAPPING_1 : (FUNC_NUM == 2) ? `INT_PIN_MAPPING_2 : (FUNC_NUM == 3) ? `INT_PIN_MAPPING_3 : (FUNC_NUM == 4) ? `INT_PIN_MAPPING_4 : (FUNC_NUM == 5) ? `INT_PIN_MAPPING_5 : (FUNC_NUM == 6) ? `INT_PIN_MAPPING_6 : `INT_PIN_MAPPING_7)
`define IO_DECODE_32            ((FUNC_NUM == 0) ? `IO_DECODE_32_0 : (FUNC_NUM == 1) ? `IO_DECODE_32_1 : (FUNC_NUM == 2) ? `IO_DECODE_32_2 : (FUNC_NUM == 3) ? `IO_DECODE_32_3 : (FUNC_NUM == 4) ? `IO_DECODE_32_4 : (FUNC_NUM == 5) ? `IO_DECODE_32_5 : (FUNC_NUM == 6) ? `IO_DECODE_32_6 : `IO_DECODE_32_7)
`define MEM_DECODE_64           ((FUNC_NUM == 0) ? `MEM_DECODE_64_0 : (FUNC_NUM == 1) ? `MEM_DECODE_64_1 : (FUNC_NUM == 2) ? `MEM_DECODE_64_2 : (FUNC_NUM == 3) ? `MEM_DECODE_64_3 : (FUNC_NUM == 4) ? `MEM_DECODE_64_4 : (FUNC_NUM == 5) ? `MEM_DECODE_64_5 : (FUNC_NUM == 6) ? `MEM_DECODE_64_6 : `MEM_DECODE_64_7)
`define ROM_BAR_ENABLED         ((FUNC_NUM == 0) ? `ROM_BAR_ENABLED_0 : (FUNC_NUM == 1) ? `ROM_BAR_ENABLED_1 : (FUNC_NUM == 2) ? `ROM_BAR_ENABLED_2 : (FUNC_NUM == 3) ? `ROM_BAR_ENABLED_3 : (FUNC_NUM == 4) ? `ROM_BAR_ENABLED_4 : (FUNC_NUM == 5) ? `ROM_BAR_ENABLED_5 : (FUNC_NUM == 6) ? `ROM_BAR_ENABLED_6 : `ROM_BAR_ENABLED_7)
`define DEFAULT_ROM_BAR_ENABLED ((FUNC_NUM == 0) ? `DEFAULT_ROM_BAR_ENABLED_0 : (FUNC_NUM == 1) ? `DEFAULT_ROM_BAR_ENABLED_1 : (FUNC_NUM == 2) ? `DEFAULT_ROM_BAR_ENABLED_2 : (FUNC_NUM == 3) ? `DEFAULT_ROM_BAR_ENABLED_3 : (FUNC_NUM == 4) ? `DEFAULT_ROM_BAR_ENABLED_4 : (FUNC_NUM == 5) ? `DEFAULT_ROM_BAR_ENABLED_5 : (FUNC_NUM == 6) ? `DEFAULT_ROM_BAR_ENABLED_6 : `DEFAULT_ROM_BAR_ENABLED_7)
`define ROM_MASK                ((FUNC_NUM == 0) ? `ROM_MASK_0 : (FUNC_NUM == 1) ? `ROM_MASK_1 : (FUNC_NUM == 2) ? `ROM_MASK_2 : (FUNC_NUM == 3) ? `ROM_MASK_3 : (FUNC_NUM == 4) ? `ROM_MASK_4 : (FUNC_NUM == 5) ? `ROM_MASK_5 : (FUNC_NUM == 6) ? `ROM_MASK_6 : `ROM_MASK_7)
`define ROM_MASK_WRITABLE       ((FUNC_NUM == 0) ? `ROM_MASK_WRITABLE_0 : (FUNC_NUM == 1) ? `ROM_MASK_WRITABLE_1 : (FUNC_NUM == 2) ? `ROM_MASK_WRITABLE_2 : (FUNC_NUM == 3) ? `ROM_MASK_WRITABLE_3 : (FUNC_NUM == 4) ? `ROM_MASK_WRITABLE_4 : (FUNC_NUM == 5) ? `ROM_MASK_WRITABLE_5 : (FUNC_NUM == 6) ? `ROM_MASK_WRITABLE_6 : `ROM_MASK_WRITABLE_7)

//-/ END:   PCI BASIC CONFIGURATION
//-/===========================================

//-/===========================================
//-/ START: BAR CONFIGURATION
`define CX_NUM_RBARS               ((FUNC_NUM == 0) ? `CX_NUM_RBARS_0 : (FUNC_NUM == 1) ? `CX_NUM_RBARS_1 : (FUNC_NUM == 2) ? `CX_NUM_RBARS_2 : (FUNC_NUM == 3) ? `CX_NUM_RBARS_3 : (FUNC_NUM == 4) ? `CX_NUM_RBARS_4 : (FUNC_NUM == 5) ? `CX_NUM_RBARS_5 : (FUNC_NUM == 6) ? `CX_NUM_RBARS_6 : `CX_NUM_RBARS_7)

`define BAR0_ENABLED            ((FUNC_NUM == 0) ? `BAR0_ENABLED_0 : (FUNC_NUM == 1) ? `BAR0_ENABLED_1 : (FUNC_NUM == 2) ? `BAR0_ENABLED_2 : (FUNC_NUM == 3) ? `BAR0_ENABLED_3 : (FUNC_NUM == 4) ? `BAR0_ENABLED_4 : (FUNC_NUM == 5) ? `BAR0_ENABLED_5 : (FUNC_NUM == 6) ? `BAR0_ENABLED_6 : `BAR0_ENABLED_7)
`define DEFAULT_BAR0_ENABLED    ((FUNC_NUM == 0) ? `DEFAULT_BAR0_ENABLED_0 : (FUNC_NUM == 1) ? `DEFAULT_BAR0_ENABLED_1 : (FUNC_NUM == 2) ? `DEFAULT_BAR0_ENABLED_2 : (FUNC_NUM == 3) ? `DEFAULT_BAR0_ENABLED_3 : (FUNC_NUM == 4) ? `DEFAULT_BAR0_ENABLED_4 : (FUNC_NUM == 5) ? `DEFAULT_BAR0_ENABLED_5 : (FUNC_NUM == 6) ? `DEFAULT_BAR0_ENABLED_6 : `DEFAULT_BAR0_ENABLED_7)
`define MEM0_SPACE_DECODER      ((FUNC_NUM == 0) ? `MEM0_SPACE_DECODER_0 : (FUNC_NUM == 1) ? `MEM0_SPACE_DECODER_1 : (FUNC_NUM == 2) ? `MEM0_SPACE_DECODER_2 : (FUNC_NUM == 3) ? `MEM0_SPACE_DECODER_3 : (FUNC_NUM == 4) ? `MEM0_SPACE_DECODER_4 : (FUNC_NUM == 5) ? `MEM0_SPACE_DECODER_5 : (FUNC_NUM == 6) ? `MEM0_SPACE_DECODER_6 : `MEM0_SPACE_DECODER_7)
`define PREFETCHABLE0           ((FUNC_NUM == 0) ? `PREFETCHABLE0_0 : (FUNC_NUM == 1) ? `PREFETCHABLE0_1 : (FUNC_NUM == 2) ? `PREFETCHABLE0_2 : (FUNC_NUM == 3) ? `PREFETCHABLE0_3 : (FUNC_NUM == 4) ? `PREFETCHABLE0_4 : (FUNC_NUM == 5) ? `PREFETCHABLE0_5 : (FUNC_NUM == 6) ? `PREFETCHABLE0_6 : `PREFETCHABLE0_7)
`define BAR0_TYPE               ((FUNC_NUM == 0) ? `BAR0_TYPE_0 : (FUNC_NUM == 1) ? `BAR0_TYPE_1 : (FUNC_NUM == 2) ? `BAR0_TYPE_2 : (FUNC_NUM == 3) ? `BAR0_TYPE_3 : (FUNC_NUM == 4) ? `BAR0_TYPE_4 : (FUNC_NUM == 5) ? `BAR0_TYPE_5 : (FUNC_NUM == 6) ? `BAR0_TYPE_6 : `BAR0_TYPE_7)
`define CX_BAR0_RESIZABLE               ((FUNC_NUM == 0) ? `CX_BAR0_RESIZABLE_0 : (FUNC_NUM == 1) ? `CX_BAR0_RESIZABLE_1 : (FUNC_NUM == 2) ? `CX_BAR0_RESIZABLE_2 : (FUNC_NUM == 3) ? `CX_BAR0_RESIZABLE_3 : (FUNC_NUM == 4) ? `CX_BAR0_RESIZABLE_4 : (FUNC_NUM == 5) ? `CX_BAR0_RESIZABLE_5 : (FUNC_NUM == 6) ? `CX_BAR0_RESIZABLE_6 : `CX_BAR0_RESIZABLE_7)
`define CX_BAR0_RESOURCE_AVAIL               ((FUNC_NUM == 0) ? `CX_BAR0_RESOURCE_AVAIL_0 : (FUNC_NUM == 1) ? `CX_BAR0_RESOURCE_AVAIL_1 : (FUNC_NUM == 2) ? `CX_BAR0_RESOURCE_AVAIL_2 : (FUNC_NUM == 3) ? `CX_BAR0_RESOURCE_AVAIL_3 : (FUNC_NUM == 4) ? `CX_BAR0_RESOURCE_AVAIL_4 : (FUNC_NUM == 5) ? `CX_BAR0_RESOURCE_AVAIL_5 : (FUNC_NUM == 6) ? `CX_BAR0_RESOURCE_AVAIL_6 : `CX_BAR0_RESOURCE_AVAIL_7)
`define BAR0_MASK_WRITABLE      ((FUNC_NUM == 0) ? `BAR0_MASK_WRITABLE_0 : (FUNC_NUM == 1) ? `BAR0_MASK_WRITABLE_1 : (FUNC_NUM == 2) ? `BAR0_MASK_WRITABLE_2 : (FUNC_NUM == 3) ? `BAR0_MASK_WRITABLE_3 : (FUNC_NUM == 4) ? `BAR0_MASK_WRITABLE_4 : (FUNC_NUM == 5) ? `BAR0_MASK_WRITABLE_5 : (FUNC_NUM == 6) ? `BAR0_MASK_WRITABLE_6 : `BAR0_MASK_WRITABLE_7)
`define BAR0_MASK               ((FUNC_NUM == 0) ? `BAR0_MASK_0 : (FUNC_NUM == 1) ? `BAR0_MASK_1 : (FUNC_NUM == 2) ? `BAR0_MASK_2 : (FUNC_NUM == 3) ? `BAR0_MASK_3 : (FUNC_NUM == 4) ? `BAR0_MASK_4 : (FUNC_NUM == 5) ? `BAR0_MASK_5 : (FUNC_NUM == 6) ? `BAR0_MASK_6 : `BAR0_MASK_7)

`define BAR1_ENABLED            ((FUNC_NUM == 0) ? `BAR1_ENABLED_0 : (FUNC_NUM == 1) ? `BAR1_ENABLED_1 : (FUNC_NUM == 2) ? `BAR1_ENABLED_2 : (FUNC_NUM == 3) ? `BAR1_ENABLED_3 : (FUNC_NUM == 4) ? `BAR1_ENABLED_4 : (FUNC_NUM == 5) ? `BAR1_ENABLED_5 : (FUNC_NUM == 6) ? `BAR1_ENABLED_6 : `BAR1_ENABLED_7)
`define DEFAULT_BAR1_ENABLED    ((FUNC_NUM == 0) ? `DEFAULT_BAR1_ENABLED_0 : (FUNC_NUM == 1) ? `DEFAULT_BAR1_ENABLED_1 : (FUNC_NUM == 2) ? `DEFAULT_BAR1_ENABLED_2 : (FUNC_NUM == 3) ? `DEFAULT_BAR1_ENABLED_3 : (FUNC_NUM == 4) ? `DEFAULT_BAR1_ENABLED_4 : (FUNC_NUM == 5) ? `DEFAULT_BAR1_ENABLED_5 : (FUNC_NUM == 6) ? `DEFAULT_BAR1_ENABLED_6 : `DEFAULT_BAR1_ENABLED_7)
`define MEM1_SPACE_DECODER      ((FUNC_NUM == 0) ? `MEM1_SPACE_DECODER_0 : (FUNC_NUM == 1) ? `MEM1_SPACE_DECODER_1 : (FUNC_NUM == 2) ? `MEM1_SPACE_DECODER_2 : (FUNC_NUM == 3) ? `MEM1_SPACE_DECODER_3 : (FUNC_NUM == 4) ? `MEM1_SPACE_DECODER_4 : (FUNC_NUM == 5) ? `MEM1_SPACE_DECODER_5 : (FUNC_NUM == 6) ? `MEM1_SPACE_DECODER_6 : `MEM1_SPACE_DECODER_7)
`define PREFETCHABLE1           ((FUNC_NUM == 0) ? `PREFETCHABLE1_0 : (FUNC_NUM == 1) ? `PREFETCHABLE1_1 : (FUNC_NUM == 2) ? `PREFETCHABLE1_2 : (FUNC_NUM == 3) ? `PREFETCHABLE1_3 : (FUNC_NUM == 4) ? `PREFETCHABLE1_4 : (FUNC_NUM == 5) ? `PREFETCHABLE1_5 : (FUNC_NUM == 6) ? `PREFETCHABLE1_6 : `PREFETCHABLE1_7)
`define BAR1_TYPE               ((FUNC_NUM == 0) ? `BAR1_TYPE_0 : (FUNC_NUM == 1) ? `BAR1_TYPE_1 : (FUNC_NUM == 2) ? `BAR1_TYPE_2 : (FUNC_NUM == 3) ? `BAR1_TYPE_3 : (FUNC_NUM == 4) ? `BAR1_TYPE_4 : (FUNC_NUM == 5) ? `BAR1_TYPE_5 : (FUNC_NUM == 6) ? `BAR1_TYPE_6 : `BAR1_TYPE_7)
`define CX_BAR1_RESIZABLE               ((FUNC_NUM == 0) ? `CX_BAR1_RESIZABLE_0 : (FUNC_NUM == 1) ? `CX_BAR1_RESIZABLE_1 : (FUNC_NUM == 2) ? `CX_BAR1_RESIZABLE_2 : (FUNC_NUM == 3) ? `CX_BAR1_RESIZABLE_3 : (FUNC_NUM == 4) ? `CX_BAR1_RESIZABLE_4 : (FUNC_NUM == 5) ? `CX_BAR1_RESIZABLE_5 : (FUNC_NUM == 6) ? `CX_BAR1_RESIZABLE_6 : `CX_BAR1_RESIZABLE_7)
`define CX_BAR1_RESOURCE_AVAIL               ((FUNC_NUM == 0) ? `CX_BAR1_RESOURCE_AVAIL_0 : (FUNC_NUM == 1) ? `CX_BAR1_RESOURCE_AVAIL_1 : (FUNC_NUM == 2) ? `CX_BAR1_RESOURCE_AVAIL_2 : (FUNC_NUM == 3) ? `CX_BAR1_RESOURCE_AVAIL_3 : (FUNC_NUM == 4) ? `CX_BAR1_RESOURCE_AVAIL_4 : (FUNC_NUM == 5) ? `CX_BAR1_RESOURCE_AVAIL_5 : (FUNC_NUM == 6) ? `CX_BAR1_RESOURCE_AVAIL_6 : `CX_BAR1_RESOURCE_AVAIL_7)
`define BAR1_MASK_WRITABLE      ((FUNC_NUM == 0) ? `BAR1_MASK_WRITABLE_0 : (FUNC_NUM == 1) ? `BAR1_MASK_WRITABLE_1 : (FUNC_NUM == 2) ? `BAR1_MASK_WRITABLE_2 : (FUNC_NUM == 3) ? `BAR1_MASK_WRITABLE_3 : (FUNC_NUM == 4) ? `BAR1_MASK_WRITABLE_4 : (FUNC_NUM == 5) ? `BAR1_MASK_WRITABLE_5 : (FUNC_NUM == 6) ? `BAR1_MASK_WRITABLE_6 : `BAR1_MASK_WRITABLE_7)
`define BAR1_MASK               ((FUNC_NUM == 0) ? `BAR1_MASK_0 : (FUNC_NUM == 1) ? `BAR1_MASK_1 : (FUNC_NUM == 2) ? `BAR1_MASK_2 : (FUNC_NUM == 3) ? `BAR1_MASK_3 : (FUNC_NUM == 4) ? `BAR1_MASK_4 : (FUNC_NUM == 5) ? `BAR1_MASK_5 : (FUNC_NUM == 6) ? `BAR1_MASK_6 : `BAR1_MASK_7)

`define BAR2_ENABLED            ((FUNC_NUM == 0) ? `BAR2_ENABLED_0 : (FUNC_NUM == 1) ? `BAR2_ENABLED_1 : (FUNC_NUM == 2) ? `BAR2_ENABLED_2 : (FUNC_NUM == 3) ? `BAR2_ENABLED_3 : (FUNC_NUM == 4) ? `BAR2_ENABLED_4 : (FUNC_NUM == 5) ? `BAR2_ENABLED_5 : (FUNC_NUM == 6) ? `BAR2_ENABLED_6 : `BAR2_ENABLED_7)
`define DEFAULT_BAR2_ENABLED    ((FUNC_NUM == 0) ? `DEFAULT_BAR2_ENABLED_0 : (FUNC_NUM == 1) ? `DEFAULT_BAR2_ENABLED_1 : (FUNC_NUM == 2) ? `DEFAULT_BAR2_ENABLED_2 : (FUNC_NUM == 3) ? `DEFAULT_BAR2_ENABLED_3 : (FUNC_NUM == 4) ? `DEFAULT_BAR2_ENABLED_4 : (FUNC_NUM == 5) ? `DEFAULT_BAR2_ENABLED_5 : (FUNC_NUM == 6) ? `DEFAULT_BAR2_ENABLED_6 : `DEFAULT_BAR2_ENABLED_7)
`define MEM2_SPACE_DECODER      ((FUNC_NUM == 0) ? `MEM2_SPACE_DECODER_0 : (FUNC_NUM == 1) ? `MEM2_SPACE_DECODER_1 : (FUNC_NUM == 2) ? `MEM2_SPACE_DECODER_2 : (FUNC_NUM == 3) ? `MEM2_SPACE_DECODER_3 : (FUNC_NUM == 4) ? `MEM2_SPACE_DECODER_4 : (FUNC_NUM == 5) ? `MEM2_SPACE_DECODER_5 : (FUNC_NUM == 6) ? `MEM2_SPACE_DECODER_6 : `MEM2_SPACE_DECODER_7)
`define PREFETCHABLE2           ((FUNC_NUM == 0) ? `PREFETCHABLE2_0 : (FUNC_NUM == 1) ? `PREFETCHABLE2_1 : (FUNC_NUM == 2) ? `PREFETCHABLE2_2 : (FUNC_NUM == 3) ? `PREFETCHABLE2_3 : (FUNC_NUM == 4) ? `PREFETCHABLE2_4 : (FUNC_NUM == 5) ? `PREFETCHABLE2_5 : (FUNC_NUM == 6) ? `PREFETCHABLE2_6 : `PREFETCHABLE2_7)
`define BAR2_TYPE               ((FUNC_NUM == 0) ? `BAR2_TYPE_0 : (FUNC_NUM == 1) ? `BAR2_TYPE_1 : (FUNC_NUM == 2) ? `BAR2_TYPE_2 : (FUNC_NUM == 3) ? `BAR2_TYPE_3 : (FUNC_NUM == 4) ? `BAR2_TYPE_4 : (FUNC_NUM == 5) ? `BAR2_TYPE_5 : (FUNC_NUM == 6) ? `BAR2_TYPE_6 : `BAR2_TYPE_7)
`define CX_BAR2_RESIZABLE               ((FUNC_NUM == 0) ? `CX_BAR2_RESIZABLE_0 : (FUNC_NUM == 1) ? `CX_BAR2_RESIZABLE_1 : (FUNC_NUM == 2) ? `CX_BAR2_RESIZABLE_2 : (FUNC_NUM == 3) ? `CX_BAR2_RESIZABLE_3 : (FUNC_NUM == 4) ? `CX_BAR2_RESIZABLE_4 : (FUNC_NUM == 5) ? `CX_BAR2_RESIZABLE_5 : (FUNC_NUM == 6) ? `CX_BAR2_RESIZABLE_6 : `CX_BAR2_RESIZABLE_7)
`define CX_BAR2_RESOURCE_AVAIL               ((FUNC_NUM == 0) ? `CX_BAR2_RESOURCE_AVAIL_0 : (FUNC_NUM == 1) ? `CX_BAR2_RESOURCE_AVAIL_1 : (FUNC_NUM == 2) ? `CX_BAR2_RESOURCE_AVAIL_2 : (FUNC_NUM == 3) ? `CX_BAR2_RESOURCE_AVAIL_3 : (FUNC_NUM == 4) ? `CX_BAR2_RESOURCE_AVAIL_4 : (FUNC_NUM == 5) ? `CX_BAR2_RESOURCE_AVAIL_5 : (FUNC_NUM == 6) ? `CX_BAR2_RESOURCE_AVAIL_6 : `CX_BAR2_RESOURCE_AVAIL_7)
`define BAR2_MASK_WRITABLE      ((FUNC_NUM == 0) ? `BAR2_MASK_WRITABLE_0 : (FUNC_NUM == 1) ? `BAR2_MASK_WRITABLE_1 : (FUNC_NUM == 2) ? `BAR2_MASK_WRITABLE_2 : (FUNC_NUM == 3) ? `BAR2_MASK_WRITABLE_3 : (FUNC_NUM == 4) ? `BAR2_MASK_WRITABLE_4 : (FUNC_NUM == 5) ? `BAR2_MASK_WRITABLE_5 : (FUNC_NUM == 6) ? `BAR2_MASK_WRITABLE_6 : `BAR2_MASK_WRITABLE_7)
`define BAR2_MASK               ((FUNC_NUM == 0) ? `BAR2_MASK_0 : (FUNC_NUM == 1) ? `BAR2_MASK_1 : (FUNC_NUM == 2) ? `BAR2_MASK_2 : (FUNC_NUM == 3) ? `BAR2_MASK_3 : (FUNC_NUM == 4) ? `BAR2_MASK_4 : (FUNC_NUM == 5) ? `BAR2_MASK_5 : (FUNC_NUM == 6) ? `BAR2_MASK_6 : `BAR2_MASK_7)

`define BAR3_ENABLED            ((FUNC_NUM == 0) ? `BAR3_ENABLED_0 : (FUNC_NUM == 1) ? `BAR3_ENABLED_1 : (FUNC_NUM == 2) ? `BAR3_ENABLED_2 : (FUNC_NUM == 3) ? `BAR3_ENABLED_3 : (FUNC_NUM == 4) ? `BAR3_ENABLED_4 : (FUNC_NUM == 5) ? `BAR3_ENABLED_5 : (FUNC_NUM == 6) ? `BAR3_ENABLED_6 : `BAR3_ENABLED_7)
`define DEFAULT_BAR3_ENABLED    ((FUNC_NUM == 0) ? `DEFAULT_BAR3_ENABLED_0 : (FUNC_NUM == 1) ? `DEFAULT_BAR3_ENABLED_1 : (FUNC_NUM == 2) ? `DEFAULT_BAR3_ENABLED_2 : (FUNC_NUM == 3) ? `DEFAULT_BAR3_ENABLED_3 : (FUNC_NUM == 4) ? `DEFAULT_BAR3_ENABLED_4 : (FUNC_NUM == 5) ? `DEFAULT_BAR3_ENABLED_5 : (FUNC_NUM == 6) ? `DEFAULT_BAR3_ENABLED_6 : `DEFAULT_BAR3_ENABLED_7)
`define MEM3_SPACE_DECODER      ((FUNC_NUM == 0) ? `MEM3_SPACE_DECODER_0 : (FUNC_NUM == 1) ? `MEM3_SPACE_DECODER_1 : (FUNC_NUM == 2) ? `MEM3_SPACE_DECODER_2 : (FUNC_NUM == 3) ? `MEM3_SPACE_DECODER_3 : (FUNC_NUM == 4) ? `MEM3_SPACE_DECODER_4 : (FUNC_NUM == 5) ? `MEM3_SPACE_DECODER_5 : (FUNC_NUM == 6) ? `MEM3_SPACE_DECODER_6 : `MEM3_SPACE_DECODER_7)
`define PREFETCHABLE3           ((FUNC_NUM == 0) ? `PREFETCHABLE3_0 : (FUNC_NUM == 1) ? `PREFETCHABLE3_1 : (FUNC_NUM == 2) ? `PREFETCHABLE3_2 : (FUNC_NUM == 3) ? `PREFETCHABLE3_3 : (FUNC_NUM == 4) ? `PREFETCHABLE3_4 : (FUNC_NUM == 5) ? `PREFETCHABLE3_5 : (FUNC_NUM == 6) ? `PREFETCHABLE3_6 : `PREFETCHABLE3_7)
`define BAR3_TYPE               ((FUNC_NUM == 0) ? `BAR3_TYPE_0 : (FUNC_NUM == 1) ? `BAR3_TYPE_1 : (FUNC_NUM == 2) ? `BAR3_TYPE_2 : (FUNC_NUM == 3) ? `BAR3_TYPE_3 : (FUNC_NUM == 4) ? `BAR3_TYPE_4 : (FUNC_NUM == 5) ? `BAR3_TYPE_5 : (FUNC_NUM == 6) ? `BAR3_TYPE_6 : `BAR3_TYPE_7)
`define CX_BAR3_RESIZABLE               ((FUNC_NUM == 0) ? `CX_BAR3_RESIZABLE_0 : (FUNC_NUM == 1) ? `CX_BAR3_RESIZABLE_1 : (FUNC_NUM == 2) ? `CX_BAR3_RESIZABLE_2 : (FUNC_NUM == 3) ? `CX_BAR3_RESIZABLE_3 : (FUNC_NUM == 4) ? `CX_BAR3_RESIZABLE_4 : (FUNC_NUM == 5) ? `CX_BAR3_RESIZABLE_5 : (FUNC_NUM == 6) ? `CX_BAR3_RESIZABLE_6 : `CX_BAR3_RESIZABLE_7)
`define CX_BAR3_RESOURCE_AVAIL               ((FUNC_NUM == 0) ? `CX_BAR3_RESOURCE_AVAIL_0 : (FUNC_NUM == 1) ? `CX_BAR3_RESOURCE_AVAIL_1 : (FUNC_NUM == 2) ? `CX_BAR3_RESOURCE_AVAIL_2 : (FUNC_NUM == 3) ? `CX_BAR3_RESOURCE_AVAIL_3 : (FUNC_NUM == 4) ? `CX_BAR3_RESOURCE_AVAIL_4 : (FUNC_NUM == 5) ? `CX_BAR3_RESOURCE_AVAIL_5 : (FUNC_NUM == 6) ? `CX_BAR3_RESOURCE_AVAIL_6 : `CX_BAR3_RESOURCE_AVAIL_7)
`define BAR3_MASK_WRITABLE      ((FUNC_NUM == 0) ? `BAR3_MASK_WRITABLE_0 : (FUNC_NUM == 1) ? `BAR3_MASK_WRITABLE_1 : (FUNC_NUM == 2) ? `BAR3_MASK_WRITABLE_2 : (FUNC_NUM == 3) ? `BAR3_MASK_WRITABLE_3 : (FUNC_NUM == 4) ? `BAR3_MASK_WRITABLE_4 : (FUNC_NUM == 5) ? `BAR3_MASK_WRITABLE_5 : (FUNC_NUM == 6) ? `BAR3_MASK_WRITABLE_6 : `BAR3_MASK_WRITABLE_7)
`define BAR3_MASK               ((FUNC_NUM == 0) ? `BAR3_MASK_0 : (FUNC_NUM == 1) ? `BAR3_MASK_1 : (FUNC_NUM == 2) ? `BAR3_MASK_2 : (FUNC_NUM == 3) ? `BAR3_MASK_3 : (FUNC_NUM == 4) ? `BAR3_MASK_4 : (FUNC_NUM == 5) ? `BAR3_MASK_5 : (FUNC_NUM == 6) ? `BAR3_MASK_6 : `BAR3_MASK_7)

`define BAR4_ENABLED            ((FUNC_NUM == 0) ? `BAR4_ENABLED_0 : (FUNC_NUM == 1) ? `BAR4_ENABLED_1 : (FUNC_NUM == 2) ? `BAR4_ENABLED_2 : (FUNC_NUM == 3) ? `BAR4_ENABLED_3 : (FUNC_NUM == 4) ? `BAR4_ENABLED_4 : (FUNC_NUM == 5) ? `BAR4_ENABLED_5 : (FUNC_NUM == 6) ? `BAR4_ENABLED_6 : `BAR4_ENABLED_7)
`define DEFAULT_BAR4_ENABLED    ((FUNC_NUM == 0) ? `DEFAULT_BAR4_ENABLED_0 : (FUNC_NUM == 1) ? `DEFAULT_BAR4_ENABLED_1 : (FUNC_NUM == 2) ? `DEFAULT_BAR4_ENABLED_2 : (FUNC_NUM == 3) ? `DEFAULT_BAR4_ENABLED_3 : (FUNC_NUM == 4) ? `DEFAULT_BAR4_ENABLED_4 : (FUNC_NUM == 5) ? `DEFAULT_BAR4_ENABLED_5 : (FUNC_NUM == 6) ? `DEFAULT_BAR4_ENABLED_6 : `DEFAULT_BAR4_ENABLED_7)
`define MEM4_SPACE_DECODER      ((FUNC_NUM == 0) ? `MEM4_SPACE_DECODER_0 : (FUNC_NUM == 1) ? `MEM4_SPACE_DECODER_1 : (FUNC_NUM == 2) ? `MEM4_SPACE_DECODER_2 : (FUNC_NUM == 3) ? `MEM4_SPACE_DECODER_3 : (FUNC_NUM == 4) ? `MEM4_SPACE_DECODER_4 : (FUNC_NUM == 5) ? `MEM4_SPACE_DECODER_5 : (FUNC_NUM == 6) ? `MEM4_SPACE_DECODER_6 : `MEM4_SPACE_DECODER_7)
`define PREFETCHABLE4           ((FUNC_NUM == 0) ? `PREFETCHABLE4_0 : (FUNC_NUM == 1) ? `PREFETCHABLE4_1 : (FUNC_NUM == 2) ? `PREFETCHABLE4_2 : (FUNC_NUM == 3) ? `PREFETCHABLE4_3 : (FUNC_NUM == 4) ? `PREFETCHABLE4_4 : (FUNC_NUM == 5) ? `PREFETCHABLE4_5 : (FUNC_NUM == 6) ? `PREFETCHABLE4_6 : `PREFETCHABLE4_7)
`define BAR4_TYPE               ((FUNC_NUM == 0) ? `BAR4_TYPE_0 : (FUNC_NUM == 1) ? `BAR4_TYPE_1 : (FUNC_NUM == 2) ? `BAR4_TYPE_2 : (FUNC_NUM == 3) ? `BAR4_TYPE_3 : (FUNC_NUM == 4) ? `BAR4_TYPE_4 : (FUNC_NUM == 5) ? `BAR4_TYPE_5 : (FUNC_NUM == 6) ? `BAR4_TYPE_6 : `BAR4_TYPE_7)
`define CX_BAR4_RESIZABLE               ((FUNC_NUM == 0) ? `CX_BAR4_RESIZABLE_0 : (FUNC_NUM == 1) ? `CX_BAR4_RESIZABLE_1 : (FUNC_NUM == 2) ? `CX_BAR4_RESIZABLE_2 : (FUNC_NUM == 3) ? `CX_BAR4_RESIZABLE_3 : (FUNC_NUM == 4) ? `CX_BAR4_RESIZABLE_4 : (FUNC_NUM == 5) ? `CX_BAR4_RESIZABLE_5 : (FUNC_NUM == 6) ? `CX_BAR4_RESIZABLE_6 : `CX_BAR4_RESIZABLE_7)
`define CX_BAR4_RESOURCE_AVAIL               ((FUNC_NUM == 0) ? `CX_BAR4_RESOURCE_AVAIL_0 : (FUNC_NUM == 1) ? `CX_BAR4_RESOURCE_AVAIL_1 : (FUNC_NUM == 2) ? `CX_BAR4_RESOURCE_AVAIL_2 : (FUNC_NUM == 3) ? `CX_BAR4_RESOURCE_AVAIL_3 : (FUNC_NUM == 4) ? `CX_BAR4_RESOURCE_AVAIL_4 : (FUNC_NUM == 5) ? `CX_BAR4_RESOURCE_AVAIL_5 : (FUNC_NUM == 6) ? `CX_BAR4_RESOURCE_AVAIL_6 : `CX_BAR4_RESOURCE_AVAIL_7)
`define BAR4_MASK_WRITABLE      ((FUNC_NUM == 0) ? `BAR4_MASK_WRITABLE_0 : (FUNC_NUM == 1) ? `BAR4_MASK_WRITABLE_1 : (FUNC_NUM == 2) ? `BAR4_MASK_WRITABLE_2 : (FUNC_NUM == 3) ? `BAR4_MASK_WRITABLE_3 : (FUNC_NUM == 4) ? `BAR4_MASK_WRITABLE_4 : (FUNC_NUM == 5) ? `BAR4_MASK_WRITABLE_5 : (FUNC_NUM == 6) ? `BAR4_MASK_WRITABLE_6 : `BAR4_MASK_WRITABLE_7)
`define BAR4_MASK               ((FUNC_NUM == 0) ? `BAR4_MASK_0 : (FUNC_NUM == 1) ? `BAR4_MASK_1 : (FUNC_NUM == 2) ? `BAR4_MASK_2 : (FUNC_NUM == 3) ? `BAR4_MASK_3 : (FUNC_NUM == 4) ? `BAR4_MASK_4 : (FUNC_NUM == 5) ? `BAR4_MASK_5 : (FUNC_NUM == 6) ? `BAR4_MASK_6 : `BAR4_MASK_7)

`define BAR5_ENABLED            ((FUNC_NUM == 0) ? `BAR5_ENABLED_0 : (FUNC_NUM == 1) ? `BAR5_ENABLED_1 : (FUNC_NUM == 2) ? `BAR5_ENABLED_2 : (FUNC_NUM == 3) ? `BAR5_ENABLED_3 : (FUNC_NUM == 4) ? `BAR5_ENABLED_4 : (FUNC_NUM == 5) ? `BAR5_ENABLED_5 : (FUNC_NUM == 6) ? `BAR5_ENABLED_6 : `BAR5_ENABLED_7)
`define DEFAULT_BAR5_ENABLED    ((FUNC_NUM == 0) ? `DEFAULT_BAR5_ENABLED_0 : (FUNC_NUM == 1) ? `DEFAULT_BAR5_ENABLED_1 : (FUNC_NUM == 2) ? `DEFAULT_BAR5_ENABLED_2 : (FUNC_NUM == 3) ? `DEFAULT_BAR5_ENABLED_3 : (FUNC_NUM == 4) ? `DEFAULT_BAR5_ENABLED_4 : (FUNC_NUM == 5) ? `DEFAULT_BAR5_ENABLED_5 : (FUNC_NUM == 6) ? `DEFAULT_BAR5_ENABLED_6 : `DEFAULT_BAR5_ENABLED_7)
`define MEM5_SPACE_DECODER      ((FUNC_NUM == 0) ? `MEM5_SPACE_DECODER_0 : (FUNC_NUM == 1) ? `MEM5_SPACE_DECODER_1 : (FUNC_NUM == 2) ? `MEM5_SPACE_DECODER_2 : (FUNC_NUM == 3) ? `MEM5_SPACE_DECODER_3 : (FUNC_NUM == 4) ? `MEM5_SPACE_DECODER_4 : (FUNC_NUM == 5) ? `MEM5_SPACE_DECODER_5 : (FUNC_NUM == 6) ? `MEM5_SPACE_DECODER_6 : `MEM5_SPACE_DECODER_7)
`define PREFETCHABLE5           ((FUNC_NUM == 0) ? `PREFETCHABLE5_0 : (FUNC_NUM == 1) ? `PREFETCHABLE5_1 : (FUNC_NUM == 2) ? `PREFETCHABLE5_2 : (FUNC_NUM == 3) ? `PREFETCHABLE5_3 : (FUNC_NUM == 4) ? `PREFETCHABLE5_4 : (FUNC_NUM == 5) ? `PREFETCHABLE5_5 : (FUNC_NUM == 6) ? `PREFETCHABLE5_6 : `PREFETCHABLE5_7)
`define BAR5_TYPE               ((FUNC_NUM == 0) ? `BAR5_TYPE_0 : (FUNC_NUM == 1) ? `BAR5_TYPE_1 : (FUNC_NUM == 2) ? `BAR5_TYPE_2 : (FUNC_NUM == 3) ? `BAR5_TYPE_3 : (FUNC_NUM == 4) ? `BAR5_TYPE_4 : (FUNC_NUM == 5) ? `BAR5_TYPE_5 : (FUNC_NUM == 6) ? `BAR5_TYPE_6 : `BAR5_TYPE_7)
`define CX_BAR5_RESIZABLE               ((FUNC_NUM == 0) ? `CX_BAR5_RESIZABLE_0 : (FUNC_NUM == 1) ? `CX_BAR5_RESIZABLE_1 : (FUNC_NUM == 2) ? `CX_BAR5_RESIZABLE_2 : (FUNC_NUM == 3) ? `CX_BAR5_RESIZABLE_3 : (FUNC_NUM == 4) ? `CX_BAR5_RESIZABLE_4 : (FUNC_NUM == 5) ? `CX_BAR5_RESIZABLE_5 : (FUNC_NUM == 6) ? `CX_BAR5_RESIZABLE_6 : `CX_BAR5_RESIZABLE_7)
`define CX_BAR5_RESOURCE_AVAIL               ((FUNC_NUM == 0) ? `CX_BAR5_RESOURCE_AVAIL_0 : (FUNC_NUM == 1) ? `CX_BAR5_RESOURCE_AVAIL_1 : (FUNC_NUM == 2) ? `CX_BAR5_RESOURCE_AVAIL_2 : (FUNC_NUM == 3) ? `CX_BAR5_RESOURCE_AVAIL_3 : (FUNC_NUM == 4) ? `CX_BAR5_RESOURCE_AVAIL_4 : (FUNC_NUM == 5) ? `CX_BAR5_RESOURCE_AVAIL_5 : (FUNC_NUM == 6) ? `CX_BAR5_RESOURCE_AVAIL_6 : `CX_BAR5_RESOURCE_AVAIL_7)
`define BAR5_MASK_WRITABLE      ((FUNC_NUM == 0) ? `BAR5_MASK_WRITABLE_0 : (FUNC_NUM == 1) ? `BAR5_MASK_WRITABLE_1 : (FUNC_NUM == 2) ? `BAR5_MASK_WRITABLE_2 : (FUNC_NUM == 3) ? `BAR5_MASK_WRITABLE_3 : (FUNC_NUM == 4) ? `BAR5_MASK_WRITABLE_4 : (FUNC_NUM == 5) ? `BAR5_MASK_WRITABLE_5 : (FUNC_NUM == 6) ? `BAR5_MASK_WRITABLE_6 : `BAR5_MASK_WRITABLE_7)
`define BAR5_MASK               ((FUNC_NUM == 0) ? `BAR5_MASK_0 : (FUNC_NUM == 1) ? `BAR5_MASK_1 : (FUNC_NUM == 2) ? `BAR5_MASK_2 : (FUNC_NUM == 3) ? `BAR5_MASK_3 : (FUNC_NUM == 4) ? `BAR5_MASK_4 : (FUNC_NUM == 5) ? `BAR5_MASK_5 : (FUNC_NUM == 6) ? `BAR5_MASK_6 : `BAR5_MASK_7)

`define MEM_FUNC_BAR0_TARGET_MAP ((FUNC_NUM == 0) ? `MEM_FUNC0_BAR0_TARGET_MAP : (FUNC_NUM == 1) ? `MEM_FUNC1_BAR0_TARGET_MAP : (FUNC_NUM == 2) ? `MEM_FUNC2_BAR0_TARGET_MAP : (FUNC_NUM == 3) ? `MEM_FUNC3_BAR0_TARGET_MAP : (FUNC_NUM == 4) ? `MEM_FUNC4_BAR0_TARGET_MAP : (FUNC_NUM == 5) ? `MEM_FUNC5_BAR0_TARGET_MAP : (FUNC_NUM == 6) ? `MEM_FUNC6_BAR0_TARGET_MAP : `MEM_FUNC7_BAR0_TARGET_MAP)

`define MEM_FUNC_BAR1_TARGET_MAP ((FUNC_NUM == 0) ? `MEM_FUNC0_BAR1_TARGET_MAP : (FUNC_NUM == 1) ? `MEM_FUNC1_BAR1_TARGET_MAP : (FUNC_NUM == 2) ? `MEM_FUNC2_BAR1_TARGET_MAP : (FUNC_NUM == 3) ? `MEM_FUNC3_BAR1_TARGET_MAP : (FUNC_NUM == 4) ? `MEM_FUNC4_BAR1_TARGET_MAP : (FUNC_NUM == 5) ? `MEM_FUNC5_BAR1_TARGET_MAP : (FUNC_NUM == 6) ? `MEM_FUNC6_BAR1_TARGET_MAP : `MEM_FUNC7_BAR1_TARGET_MAP)

`define MEM_FUNC_BAR2_TARGET_MAP ((FUNC_NUM == 0) ? `MEM_FUNC0_BAR2_TARGET_MAP : (FUNC_NUM == 1) ? `MEM_FUNC1_BAR2_TARGET_MAP : (FUNC_NUM == 2) ? `MEM_FUNC2_BAR2_TARGET_MAP : (FUNC_NUM == 3) ? `MEM_FUNC3_BAR2_TARGET_MAP : (FUNC_NUM == 4) ? `MEM_FUNC4_BAR2_TARGET_MAP : (FUNC_NUM == 5) ? `MEM_FUNC5_BAR2_TARGET_MAP : (FUNC_NUM == 6) ? `MEM_FUNC6_BAR2_TARGET_MAP : `MEM_FUNC7_BAR2_TARGET_MAP)

`define MEM_FUNC_BAR3_TARGET_MAP ((FUNC_NUM == 0) ? `MEM_FUNC0_BAR3_TARGET_MAP : (FUNC_NUM == 1) ? `MEM_FUNC1_BAR3_TARGET_MAP : (FUNC_NUM == 2) ? `MEM_FUNC2_BAR3_TARGET_MAP : (FUNC_NUM == 3) ? `MEM_FUNC3_BAR3_TARGET_MAP : (FUNC_NUM == 4) ? `MEM_FUNC4_BAR3_TARGET_MAP : (FUNC_NUM == 5) ? `MEM_FUNC5_BAR3_TARGET_MAP : (FUNC_NUM == 6) ? `MEM_FUNC6_BAR3_TARGET_MAP : `MEM_FUNC7_BAR3_TARGET_MAP)

`define MEM_FUNC_BAR4_TARGET_MAP ((FUNC_NUM == 0) ? `MEM_FUNC0_BAR4_TARGET_MAP : (FUNC_NUM == 1) ? `MEM_FUNC1_BAR4_TARGET_MAP : (FUNC_NUM == 2) ? `MEM_FUNC2_BAR4_TARGET_MAP : (FUNC_NUM == 3) ? `MEM_FUNC3_BAR4_TARGET_MAP : (FUNC_NUM == 4) ? `MEM_FUNC4_BAR4_TARGET_MAP : (FUNC_NUM == 5) ? `MEM_FUNC5_BAR4_TARGET_MAP : (FUNC_NUM == 6) ? `MEM_FUNC6_BAR4_TARGET_MAP : `MEM_FUNC7_BAR4_TARGET_MAP)

`define MEM_FUNC_BAR5_TARGET_MAP ((FUNC_NUM == 0) ? `MEM_FUNC0_BAR5_TARGET_MAP : (FUNC_NUM == 1) ? `MEM_FUNC1_BAR5_TARGET_MAP : (FUNC_NUM == 2) ? `MEM_FUNC2_BAR5_TARGET_MAP : (FUNC_NUM == 3) ? `MEM_FUNC3_BAR5_TARGET_MAP : (FUNC_NUM == 4) ? `MEM_FUNC4_BAR5_TARGET_MAP : (FUNC_NUM == 5) ? `MEM_FUNC5_BAR5_TARGET_MAP : (FUNC_NUM == 6) ? `MEM_FUNC6_BAR5_TARGET_MAP : `MEM_FUNC7_BAR5_TARGET_MAP)

`define ROM_FUNC_TARGET_MAP     ((FUNC_NUM == 0) ? `ROM_FUNC0_TARGET_MAP : (FUNC_NUM == 1) ? `ROM_FUNC1_TARGET_MAP : (FUNC_NUM == 2) ? `ROM_FUNC2_TARGET_MAP : (FUNC_NUM == 3) ? `ROM_FUNC3_TARGET_MAP : (FUNC_NUM == 4) ? `ROM_FUNC4_TARGET_MAP : (FUNC_NUM == 5) ? `ROM_FUNC5_TARGET_MAP : (FUNC_NUM == 6) ? `ROM_FUNC6_TARGET_MAP : `ROM_FUNC7_TARGET_MAP)


`define CX_RN_IMM_VALUE       ((FUNC_NUM == 0) ? `CX_RN_IMM_VALUE_0 : (FUNC_NUM == 1) ? `CX_RN_IMM_VALUE_1 : (FUNC_NUM == 2) ? `CX_RN_IMM_VALUE_2 : (FUNC_NUM == 3) ? `CX_RN_IMM_VALUE_3 : (FUNC_NUM == 4) ? `CX_RN_IMM_VALUE_4 : (FUNC_NUM == 5) ? `CX_RN_IMM_VALUE_5 : (FUNC_NUM == 6) ? `CX_RN_IMM_VALUE_6 : `CX_RN_IMM_VALUE_7)


`define CX_RN_IMM_D0_VALUE       ((FUNC_NUM == 0) ? `CX_RN_IMM_D0_VALUE_0 : (FUNC_NUM == 1) ? `CX_RN_IMM_D0_VALUE_1 : (FUNC_NUM == 2) ? `CX_RN_IMM_D0_VALUE_2 : (FUNC_NUM == 3) ? `CX_RN_IMM_D0_VALUE_3 : (FUNC_NUM == 4) ? `CX_RN_IMM_D0_VALUE_4 : (FUNC_NUM == 5) ? `CX_RN_IMM_D0_VALUE_5 : (FUNC_NUM == 6) ? `CX_RN_IMM_D0_VALUE_6 : `CX_RN_IMM_D0_VALUE_7)

`define CX_RN_FRS_VALUE       ((FUNC_NUM == 0) ? `CX_RN_FRS_VALUE_0 : (FUNC_NUM == 1) ? `CX_RN_FRS_VALUE_1 : (FUNC_NUM == 2) ? `CX_RN_FRS_VALUE_2 : (FUNC_NUM == 3) ? `CX_RN_FRS_VALUE_3 : (FUNC_NUM == 4) ? `CX_RN_FRS_VALUE_4 : (FUNC_NUM == 5) ? `CX_RN_FRS_VALUE_5 : (FUNC_NUM == 6) ? `CX_RN_FRS_VALUE_6 : `CX_RN_FRS_VALUE_7)

`define CX_RN_RTR_VALID      ((FUNC_NUM == 0) ? `CX_RN_RTR_VALID_0 : (FUNC_NUM == 1) ? `CX_RN_RTR_VALID_1 : (FUNC_NUM == 2) ? `CX_RN_RTR_VALID_2 : (FUNC_NUM == 3) ? `CX_RN_RTR_VALID_3 : (FUNC_NUM == 4) ? `CX_RN_RTR_VALID_4 : (FUNC_NUM == 5) ? `CX_RN_RTR_VALID_5 : (FUNC_NUM == 6) ? `CX_RN_RTR_VALID_6 : `CX_RN_RTR_VALID_7)

`define CX_RN_RTR_DL_UP_VALUE       ((FUNC_NUM == 0) ? `CX_RN_RTR_DL_UP_VALUE_0 : (FUNC_NUM == 1) ? `CX_RN_RTR_DL_UP_VALUE_1 : (FUNC_NUM == 2) ? `CX_RN_RTR_DL_UP_VALUE_2 : (FUNC_NUM == 3) ? `CX_RN_RTR_DL_UP_VALUE_3 : (FUNC_NUM == 4) ? `CX_RN_RTR_DL_UP_VALUE_4 : (FUNC_NUM == 5) ? `CX_RN_RTR_DL_UP_VALUE_5 : (FUNC_NUM == 6) ? `CX_RN_RTR_DL_UP_VALUE_6 : `CX_RN_RTR_DL_UP_VALUE_7)

`define CX_RN_RTR_RESET_VALUE       ((FUNC_NUM == 0) ? `CX_RN_RTR_RESET_VALUE_0 : (FUNC_NUM == 1) ? `CX_RN_RTR_RESET_VALUE_1 : (FUNC_NUM == 2) ? `CX_RN_RTR_RESET_VALUE_2 : (FUNC_NUM == 3) ? `CX_RN_RTR_RESET_VALUE_3 : (FUNC_NUM == 4) ? `CX_RN_RTR_RESET_VALUE_4 : (FUNC_NUM == 5) ? `CX_RN_RTR_RESET_VALUE_5 : (FUNC_NUM == 6) ? `CX_RN_RTR_RESET_VALUE_6 : `CX_RN_RTR_RESET_VALUE_7)

`define CX_RN_RTR_D3D0_VALUE       ((FUNC_NUM == 0) ? `CX_RN_RTR_D3D0_VALUE_0 : (FUNC_NUM == 1) ? `CX_RN_RTR_D3D0_VALUE_1 : (FUNC_NUM == 2) ? `CX_RN_RTR_D3D0_VALUE_2 : (FUNC_NUM == 3) ? `CX_RN_RTR_D3D0_VALUE_3 : (FUNC_NUM == 4) ? `CX_RN_RTR_D3D0_VALUE_4 : (FUNC_NUM == 5) ? `CX_RN_RTR_D3D0_VALUE_5 : (FUNC_NUM == 6) ? `CX_RN_RTR_D3D0_VALUE_6 : `CX_RN_RTR_D3D0_VALUE_7)

`define CX_RN_RTR_FLR_VALUE       ((FUNC_NUM == 0) ? `CX_RN_RTR_FLR_VALUE_0 : (FUNC_NUM == 1) ? `CX_RN_RTR_FLR_VALUE_1 : (FUNC_NUM == 2) ? `CX_RN_RTR_FLR_VALUE_2 : (FUNC_NUM == 3) ? `CX_RN_RTR_FLR_VALUE_3 : (FUNC_NUM == 4) ? `CX_RN_RTR_FLR_VALUE_4 : (FUNC_NUM == 5) ? `CX_RN_RTR_FLR_VALUE_5 : (FUNC_NUM == 6) ? `CX_RN_RTR_FLR_VALUE_6 : `CX_RN_RTR_FLR_VALUE_7)

`define VF_RN_IMM_VALUE       ((FUNC_NUM == 0) ? `VF_RN_IMM_VALUE_0 : (FUNC_NUM == 1) ? `VF_RN_IMM_VALUE_1 : (FUNC_NUM == 2) ? `VF_RN_IMM_VALUE_2 : (FUNC_NUM == 3) ? `VX_RN_IMM_VALUE_3 : (FUNC_NUM == 4) ? `VF_RN_IMM_VALUE_4 : (FUNC_NUM == 5) ? `VF_RN_IMM_VALUE_5 : (FUNC_NUM == 6) ? `VF_RN_IMM_VALUE_6 : `VF_RN_IMM_VALUE_7)


`define VF_RN_IMM_D0_VALUE       ((FUNC_NUM == 0) ? `VF_RN_IMM_D0_VALUE_0 : (FUNC_NUM == 1) ? `VF_RN_IMM_D0_VALUE_1 : (FUNC_NUM == 2) ? `VF_RN_IMM_D0_VALUE_2 : (FUNC_NUM == 3) ? `VF_RN_IMM_D0_VALUE_3 : (FUNC_NUM == 4) ? `VF_RN_IMM_D0_VALUE_4 : (FUNC_NUM == 5) ? `VF_RN_IMM_D0_VALUE_5 : (FUNC_NUM == 6) ? `VF_RN_IMM_D0_VALUE_6 : `VF_RN_IMM_D0_VALUE_7)

`define VF_RN_RTR_VALID      ((FUNC_NUM == 0) ? `VF_RN_RTR_VALID_0 : (FUNC_NUM == 1) ? `VF_RN_RTR_VALID_1 : (FUNC_NUM == 2) ? `VF_RN_RTR_VALID_2 : (FUNC_NUM == 3) ? `VF_RN_RTR_VALID_3 : (FUNC_NUM == 4) ? `VF_RN_RTR_VALID_4 : (FUNC_NUM == 5) ? `VF_RN_RTR_VALID_5 : (FUNC_NUM == 6) ? `VF_RN_RTR_VALID_6 : `VF_RN_RTR_VALID_7)

`define VF_RN_RTR_RESET_VALUE       ((FUNC_NUM == 0) ? `VF_RN_RTR_RESET_VALUE_0 : (FUNC_NUM == 1) ? `VF_RN_RTR_RESET_VALUE_1 : (FUNC_NUM == 2) ? `VF_RN_RTR_RESET_VALUE_2 : (FUNC_NUM == 3) ? `VF_RN_RTR_RESET_VALUE_3 : (FUNC_NUM == 4) ? `VF_RN_RTR_RESET_VALUE_4 : (FUNC_NUM == 5) ? `VF_RN_RTR_RESET_VALUE_5 : (FUNC_NUM == 6) ? `VF_RN_RTR_RESET_VALUE_6 : `VF_RN_RTR_RESET_VALUE_7)

`define VF_RN_RTR_D3D0_VALUE       ((FUNC_NUM == 0) ? `VF_RN_RTR_D3D0_VALUE_0 : (FUNC_NUM == 1) ? `VF_RN_RTR_D3D0_VALUE_1 : (FUNC_NUM == 2) ? `VF_RN_RTR_D3D0_VALUE_2 : (FUNC_NUM == 3) ? `VF_RN_RTR_D3D0_VALUE_3 : (FUNC_NUM == 4) ? `VF_RN_RTR_D3D0_VALUE_4 : (FUNC_NUM == 5) ? `VF_RN_RTR_D3D0_VALUE_5 : (FUNC_NUM == 6) ? `VF_RN_RTR_D3D0_VALUE_6 : `VF_RN_RTR_D3D0_VALUE_7)

`define VF_RN_RTR_FLR_VALUE       ((FUNC_NUM == 0) ? `VF_RN_RTR_FLR_VALUE_0 : (FUNC_NUM == 1) ? `VF_RN_RTR_FLR_VALUE_1 : (FUNC_NUM == 2) ? `VF_RN_RTR_FLR_VALUE_2 : (FUNC_NUM == 3) ? `VF_RN_RTR_FLR_VALUE_3 : (FUNC_NUM == 4) ? `VF_RN_RTR_FLR_VALUE_4 : (FUNC_NUM == 5) ? `VF_RN_RTR_FLR_VALUE_5 : (FUNC_NUM == 6) ? `VF_RN_RTR_FLR_VALUE_6 : `VF_RN_RTR_FLR_VALUE_7)

`define EXT_VF_RN_RTR_VALID         ((FUNC_NUM == 0) ? `EXT_VF_RN_RTR_VALID_0 : (FUNC_NUM == 1) ? `EXT_VF_RN_RTR_VALID_1 : (FUNC_NUM == 2) ? `EXT_VF_RN_RTR_VALID_2 : (FUNC_NUM == 3) ? `EXT_VF_RN_RTR_VALID_3 : (FUNC_NUM == 4) ? `EXT_VF_RN_RTR_VALID_4 : (FUNC_NUM == 5) ? `EXT_VF_RN_RTR_VALID_5 : (FUNC_NUM == 6) ? `EXT_VF_RN_RTR_VALID_6 : `EXT_VF_RN_RTR_VALID_7)

`define EXT_VF_RN_RTR_RESET_VALUE   ((FUNC_NUM == 0) ? `EXT_VF_RN_RTR_RESET_VALUE_0 : (FUNC_NUM == 1) ? `EXT_VF_RN_RTR_RESET_VALUE_1 : (FUNC_NUM == 2) ? `EXT_VF_RN_RTR_RESET_VALUE_2 : (FUNC_NUM == 3) ? `EXT_VF_RN_RTR_RESET_VALUE_3 : (FUNC_NUM == 4) ? `EXT_VF_RN_RTR_RESET_VALUE_4 : (FUNC_NUM == 5) ? `EXT_VF_RN_RTR_RESET_VALUE_5 : (FUNC_NUM == 6) ? `EXT_VF_RN_RTR_RESET_VALUE_6 : `EXT_VF_RN_RTR_RESET_VALUE_7)

`define EXT_VF_RN_RTR_D3D0_VALUE    ((FUNC_NUM == 0) ? `EXT_VF_RN_RTR_D3D0_VALUE_0 : (FUNC_NUM == 1) ? `EXT_VF_RN_RTR_D3D0_VALUE_1 : (FUNC_NUM == 2) ? `EXT_VF_RN_RTR_D3D0_VALUE_2 : (FUNC_NUM == 3) ? `EXT_VF_RN_RTR_D3D0_VALUE_3 : (FUNC_NUM == 4) ? `EXT_VF_RN_RTR_D3D0_VALUE_4 : (FUNC_NUM == 5) ? `EXT_VF_RN_RTR_D3D0_VALUE_5 : (FUNC_NUM == 6) ? `EXT_VF_RN_RTR_D3D0_VALUE_6 : `EXT_VF_RN_RTR_D3D0_VALUE_7)

`define CX_PRS_OUTSTANDING_CAPACITY_VALUE       ((FUNC_NUM == 0) ? `CX_PRS_OUTSTANDING_CAPACITY_VALUE_0 : (FUNC_NUM == 1) ? `CX_PRS_OUTSTANDING_CAPACITY_VALUE_1 : (FUNC_NUM == 2) ? `CX_PRS_OUTSTANDING_CAPACITY_VALUE_2 : (FUNC_NUM == 3) ? `CX_PRS_OUTSTANDING_CAPACITY_VALUE_3 : (FUNC_NUM == 4) ? `CX_PRS_OUTSTANDING_CAPACITY_VALUE_4 : (FUNC_NUM == 5) ? `CX_PRS_OUTSTANDING_CAPACITY_VALUE_5 : (FUNC_NUM == 6) ? `CX_PRS_OUTSTANDING_CAPACITY_VALUE_6 : `CX_PRS_OUTSTANDING_CAPACITY_VALUE_7)


`define EXT_VF_RN_RTR_FLR_VALUE     ((FUNC_NUM == 0) ? `EXT_VF_RN_RTR_FLR_VALUE_0 : (FUNC_NUM == 1) ? `EXT_VF_RN_RTR_FLR_VALUE_1 : (FUNC_NUM == 2) ? `EXT_VF_RN_RTR_FLR_VALUE_2 : (FUNC_NUM == 3) ? `EXT_VF_RN_RTR_FLR_VALUE_3 : (FUNC_NUM == 4) ? `EXT_VF_RN_RTR_FLR_VALUE_4 : (FUNC_NUM == 5) ? `EXT_VF_RN_RTR_FLR_VALUE_5 : (FUNC_NUM == 6) ? `EXT_VF_RN_RTR_FLR_VALUE_6 : `EXT_VF_RN_RTR_FLR_VALUE_7)

//-/ END:   BAR CONFIGURATION
//-/===========================================
//--- END: MUXING OF VALUES --- \\


// `define EXT_TAG_SUPPORTED

//-/===========================================
//-/ START: Radm Formation Queue parameters for RAM sizes
//
//   Note: parameters are defined here because they have a dependency on parity/ECC width parameters (which are defined here)
//         These parameters should all be relocated in some other place, probably common_cc_constants


// Name:         CX_RADM_FORMQ_DEBUG_W_ALIGNED_RAM_WD
// Default:      0
// Values:       0, 1
// Enabled:      CX_NW==16
// 
// When defined aligns the RAM width to a 16b boundary. Used for debug to improve readability of ram content and ram data 
// buses.
// `define CX_RADM_FORMQ_DEBUG_W_ALIGNED_RAM_WD


// Name:         CX_RADM_FORMQ_DEBUG_W_LOCAL_RAM
// Default:      0
// Values:       0, 1
// Enabled:      CX_NW==16
// 
// When defined the formation queue RAMs are instantiated locally inside radm_formation. Used to facilitate debug.
// `define CX_RADM_FORMQ_DEBUG_W_LOCAL_RAM


// Name:         CX_RADM_FORMQ_NQW
// Default:      2 ((CX_NW == 16) ? 6 : (CX_NW == 8) ? 3 : 2)
// Values:       -2147483648, ..., 2147483647
// 
// Number of qdwords that can be written in the formation queue each cycle, corresponds to the number of RAMs that 
// implement the formation queue.
`define CX_RADM_FORMQ_NQW 2


// Name:         CX_RADM_FORMQ_HDR_DS
// Default:      128 (128 + ((CX_RASDP_EN==1)? [<functionof> CX_RAS_PROT_RANGE 
//               RAS_BASE_PROT_WD ]: 0))
// Values:       -2147483648, ..., 2147483647
// 
// RADM formation queue header-bus data size, including parity bits
`define CX_RADM_FORMQ_HDR_DS 128


// Name:         CX_RADM_FORMQ_DATA_DS
// Default:      128 ((CX_DW + TRGT_DATA_PROT_WD)/(CX_NW < 4 ? 1 : CX_NW/4))
// Values:       -2147483648, ..., 2147483647
// 
// RADM formation queue data-bus data size for one qdword of datapath, including parity bits
`define CX_RADM_FORMQ_DATA_DS 128


// Name:         CX_RADM_FORMQ_QDW_DS
// Default:      128 ((CX_RADM_FORMQ_HDR_DS > CX_RADM_FORMQ_DATA_DS) ? 
//               CX_RADM_FORMQ_HDR_DS : CX_RADM_FORMQ_DATA_DS)
// Values:       -2147483648, ..., 2147483647
// 
// RADM formation queue greater number between header and 128b data datasizes
`define CX_RADM_FORMQ_QDW_DS 128


// Name:         CX_RADM_FORMQ_RAM_QDW_DS
// Default:      128 ((CX_RAS_PROT_TYPE)? ((CX_RADM_FORMQ_HDR_DS > 
//               CX_RADM_FORMQ_DATA_DS) ? CX_RADM_FORMQ_QDW_DS-CX_RAS_PCIE_HDR_PROT_WD : 
//               CX_RADM_FORMQ_QDW_DS-(TRGT_DATA_PROT_WD/(CX_NW/4))): CX_RADM_FORMQ_QDW_DS)
// Values:       -2147483648, ..., 2147483647
// 
// RADM formation queue greater number between header and 128b data datasizes - remove the data path parity when parity is 
// stripped
`define CX_RADM_FORMQ_RAM_QDW_DS 128


// Name:         CX_RADM_FORMQ_QDW_FF_WD
// Default:      3
// Values:       -2147483648, ..., 2147483647
// 
// RADM formation queue qdword FF bit width: 3 Ctl bits {eot, dv, hv} are stored in FFs.
`define CX_RADM_FORMQ_QDW_FF_WD 3


// Name:         CX_RADM_FORMQ_RASDES_DS
// Default:      0 ((CX_RAS_DES_ENABLE) ? 8 : 0)
// Values:       -2147483648, ..., 2147483647
// 
// RADM formation queue data-width for RASDES feature
`define CX_RADM_FORMQ_RASDES_DS 0


// Name:         CX_RADM_FORMQ_QDW_WD
// Default:      135 (CX_RADM_FORMQ_QDW_DS + 1 + 1 + 1 + 3 + 4 + 
//               6*(CX_RADM_FORMQ_DEBUG_W_ALIGNED_RAM_WD) - CX_RADM_FORMQ_QDW_FF_WD + 
//               CX_RADM_FORMQ_RASDES_DS)
// Values:       -2147483648, ..., 2147483647
// 
// RADM formation queue qdword RAM bit width, calculated from the data size plus 1-bit dv + hv + eot + 3-bits errors + 
// 4-bits dwen minus the nr. of bits in FFs + RASDES specific bits
`define CX_RADM_FORMQ_QDW_WD 135


// Name:         CX_RASDP_FORMQRAM_ECC_WD
// Default:      0 (CX_RAS_EN ? ((CX_RASDP >2 && CX_RASDP_EN==1)? 6 : 22) : 0)
// Values:       -2147483648, ..., 2147483647
// Enabled:      (((CX_RASDP==0)&&(CX_RASDP_RAM_PROT==0))? 0: 1==1)
// 
// Determines the width of the ECC code generated at the input of the RAM. If RAS is not used the width is set to 0
`define CX_RASDP_FORMQRAM_ECC_WD 0


// Name:         CX_RASDP_FORMQ_ERR_SYND_WD
// Default:      0 ((CX_RAS_EN && CX_NW==16)? ((CX_RASDP==3)? 
//               CX_RASDP_FORMQRAM_ECC_WD + TRGT_DATA_PROT_WD/(CX_NW/4): CX_RASDP_FORMQRAM_ECC_WD) : 0)
// Values:       -2147483648, ..., 2147483647
// Enabled:      (((CX_RASDP==0)&&(CX_RASDP_RAM_PROT==0))? 0: 1==1)
// 
// Determines the width of the RADM FORMATION QUEUE error synd. bus. If RAS is not used the width is set to 0
`define CX_RASDP_FORMQ_ERR_SYND_WD 0


// Name:         CX_RADM_FORMQ_QDW_RAM_WD
// Default:      135 (CX_RADM_FORMQ_QDW_DS + 1 + 1 + 1 + 3 + 4 + 
//               6*(CX_RADM_FORMQ_DEBUG_W_ALIGNED_RAM_WD) - CX_RADM_FORMQ_QDW_FF_WD + 
//               CX_RASDP_FORMQRAM_ECC_WD + CX_RADM_FORMQ_RASDES_DS - (((CX_RASDP>0) && (CX_RASDP<3))? 
//               16: 0))
// Values:       -2147483648, ..., 2147483647
// 
// RADM formation queue qdword RAM bit width, calculated from the data size plus 1-bit dv + hv + eot + 3-bits errors + 
// 4-bits dwen minus the nr. of bits in FFs + RASDES specific bits
`define CX_RADM_FORMQ_QDW_RAM_WD 135


// Name:         CX_RADM_FORMQ_FULL_SIZED_QDW_RAM_DP
// Default:      115 (CX_NW < 2) ? 0 : (CX_RADM_HDRQ_DEPTH < CX_RADM_FORMQ_NQW) ? 1 
//               : (((CX_RADM_HDRQ_DEPTH + 
//               (CX_RADM_DATAQ_DEPTH*CX_NW/4))/CX_RADM_FORMQ_NQW) + 1)
// Values:       -2147483648, ..., 2147483647
// 
// RADM formation queue full-sized RAM depth: corresponds to the total amount of headers and data that can be stored in 
// RADM queue, divided by the number of RAMs
`define CX_RADM_FORMQ_FULL_SIZED_QDW_RAM_DP 115


// Name:           RX_SERIALIZATION_Q_CTRL
// Default:        false ((CX_NW == 16) ? 1 : 0)
// Values:         false (0), true (1)
// Enabled:        CX_NW==16
// Parameter Type: Feature Setting
// 
// The Receive Serialization Queue Size Configuration feature applies to 512-bit data width configurations and allows the 
// size of the serialization queue to be reduced while maintaining throughput at the application interface.
`define RX_SERIALIZATION_Q_CTRL 0


// Name:         CX_RADM_FORMQ_QDW_QUEUE_MARGIN
// Default:      60 ([<functionof> CX_MAX_MTU])
// Values:       -2147483648, ..., 2147483647
// Enabled:      RX_SERIALIZATION_OVFLW_PRVNTN==1
// 
// RADM formation queue margin. Margin to accomodate packets already received/pipelined when the Overflow Prevention 
// Mechanism is enabled plus one MAX_MTU packet.
`define CX_RADM_FORMQ_QDW_QUEUE_MARGIN 60


// Name:         CX_RADM_FORMQ_QDW_OPTIMAL_THRESHOLD
// Default:      540 ([<functionof> CX_PHY_TX_DELAY_PHY CX_PHY_RX_DELAY_PHY])
// Values:       -2147483648, ..., 2147483647
// Enabled:      RX_SERIALIZATION_OVFLW_PRVNTN==1
// 
// RADM formation optimal threshold. Minimum value able to sustain the maximum output rate during the NACK to TLP 
// RoundTripTime.
`define CX_RADM_FORMQ_QDW_OPTIMAL_THRESHOLD 540


// Name:           RX_SERIALIZATION_OVFLW_PRVNTN
// Default:        false (RX_SERIALIZATION_Q_CTRL==1 && 
//                 
//                 ((CX_RADM_FORMQ_QDW_QUEUE_MARGIN+CX_RADM_FORMQ_QDW_OPTIMAL_THRESHOLD)/CX_RADM_FORMQ_NQW+3<CX_RADM_FORMQ_FULL_SIZED_QDW_RAM_DP))
// Values:         false (0), true (1)
// Enabled:        (RX_SERIALIZATION_Q_CTRL==1 && 
//                 
//                 ((CX_RADM_FORMQ_QDW_QUEUE_MARGIN+CX_RADM_FORMQ_QDW_OPTIMAL_THRESHOLD)/CX_RADM_FORMQ_NQW+3<CX_RADM_FORMQ_FULL_SIZED_QDW_RAM_DP))
// Parameter Type: Feature Setting
// 
// The Receive Serialization Queue Overflow Prevention feature automatically prevents the reduced serialization queue from 
// overflowing. The feature automatically adjusts the TLP rate on the wire to match the maximum TLP rate possible at the 
// application interface. Depending on the TLP length the wire TLP rate can be up to 2.7 times the application TLP rate. If TLPs 
// accumulate in the serialization queue and its almost full threshold is reached the Core automatically stops processing new 
// TLPs enabling the application to drain the queue. When the serialization queue is no longer almost full the Core starts 
// accepting new TLPs again. The TLPs previously discarded by the Core are replayed by the Remote Link Partner. The optimal 
// queue size depends on the NACK to replayed TLP round trip latency. If the queue is too small then sustaining maximum 
// throughput at the application interface may not be possible. An oversized queue results in redundant memory. If the feature is 
// disabled the queue size is set to its maximum size and overflow is avoided by the credit based flow control mechanism.
`define RX_SERIALIZATION_OVFLW_PRVNTN 0


// `define CX_RADM_FORMQ_OVFLW_PRVNTN_EN


// Name:           RX_SERIALIZATION_Q_SIZE_RATIO
// Default:        100 ((RX_SERIALIZATION_OVFLW_PRVNTN==1)? 
//                 ((((CX_RADM_FORMQ_QDW_QUEUE_MARGIN + CX_RADM_FORMQ_QDW_OPTIMAL_THRESHOLD + 
//                 
//                 CX_RADM_FORMQ_NQW-1)/CX_RADM_FORMQ_NQW)*100)+CX_RADM_FORMQ_FULL_SIZED_QDW_RAM_DP-1)/CX_RADM_FORMQ_FULL_SIZED_QDW_RAM_DP : 100)
// Values:         0, ..., 100
// Enabled:        RX_SERIALIZATION_OVFLW_PRVNTN==1
// Parameter Type: Feature Setting
// 
// Specifies the current queue size as a percentage of the maximum queue size. If the Receive Serialization Queue Size 
// Configuration feature is disabled the maximum queue size is determined by the advertised flow control credits. If you enable 
// the Receive Serialization Queue Size Configuration feature the queue size defaults to the minimize size required to 
// maintain throughput at the application interface.
`define RX_SERIALIZATION_Q_SIZE_RATIO 100


// Name:         CX_RADM_FORMQ_QDW_RAM_DP
// Default:      115 ((RX_SERIALIZATION_OVFLW_PRVNTN==1)? 
//               (((CX_RADM_FORMQ_FULL_SIZED_QDW_RAM_DP * RX_SERIALIZATION_Q_SIZE_RATIO)+99)/100) : 
//               CX_RADM_FORMQ_FULL_SIZED_QDW_RAM_DP)
// Values:       -2147483648, ..., 2147483647
// 
// RADM formation queue RAM depth
`define CX_RADM_FORMQ_QDW_RAM_DP 115


// Name:         CX_RADM_FORMQ_QDW_RAM_PW
// Default:      7 ([calc_log2 CX_RADM_FORMQ_QDW_RAM_DP])
// Values:       -2147483648, ..., 2147483647
// 
// RADM formation queue RAM pointer width
`define CX_RADM_FORMQ_QDW_RAM_PW 7


// Name:         CX_RADM_FORMQ_PIPE_DP
// Default:      No pipeline
// Values:       No pipeline (0), Single pipeline stage on both read and write 
//               datapath (1)
// Enabled:      (3)==3
// 
// RADM formation queue pipeline depth on the datapath to/from external RAMs.
`define CX_RADM_FORMQ_PIPE_DP 0


// Name:         DEFAULT_RX_SERIALIZATION_Q_ALMOST_FULL_THRESHOLD
// Default:      0 ((RX_SERIALIZATION_OVFLW_PRVNTN==1)? (CX_RADM_FORMQ_QDW_RAM_DP * 
//               CX_RADM_FORMQ_NQW - CX_RADM_FORMQ_QDW_QUEUE_MARGIN) : 0)
// Values:       -2147483648, ..., 2147483647
// Enabled:      RX_SERIALIZATION_OVFLW_PRVNTN==1
// 
// Default Receive Serialization Queue Almost Full Threshold
`define DEFAULT_RX_SERIALIZATION_Q_ALMOST_FULL_THRESHOLD 0


// Name:         RX_SERIALIZATION_Q_SIZE_BYTES
// Default:      3680 (CX_RADM_FORMQ_QDW_RAM_DP * CX_RADM_FORMQ_NQW * 16)
// Values:       -2147483648, ..., 2147483647
// Enabled:      0
// 
// This field displays the Receive Serialization Queue size in bytes (additional control bits, parity bits, etc. are not 
// considered)
`define RX_SERIALIZATION_Q_SIZE_BYTES 3680


//-/ END:   Radm Formation Queue parameters for RAM sizes 
//-/===========================================


//  ------------------------------------------------------------------------
//
//                    (C) COPYRIGHT 2002 - 2016 SYNOPSYS, INC.
//                            ALL RIGHTS RESERVED
//
//  This software and the associated documentation are confidential and
//  proprietary to Synopsys, Inc.  Your use or disclosure of this
//  software is subject to the terms and conditions of a written
//  license agreement between you, or your company, and Synopsys, Inc.
//
// The entire notice above must be reproduced on all authorized copies.
//
//  ------------------------------------------------------------------------

//-------------------------------------------------------------------------
//---  RCS information:
//---    $DateTime: 2016/06/30 09:50:44 $
//---    $Revision: #21 $
//---    $Id: //dwh/pcie_iip/main/DWC_pcie/DWC_pcie_common/src/DWC_pcie_edma_cc_constants.v#21 $
//-------------------------------------------------------------------------



`define CC_PHASE_II_REG_SET 1'b1


// Name:           CC_NUM_DMA_WR_CHAN
// Default:        1
// Values:         1 2 3 4 5 6 7 8
// Enabled:        CC_DMA_ENABLE
// Parameter Type: Feature Setting
// 
// Number of write channels implemented in the DMA logic. A DMA write copies data from your local application to the remote 
// link partner. For more information, see the 'DMA' chapter of the Databook.
`define CC_NUM_DMA_WR_CHAN 1


`define CC_NUM_DMA_WR_CHAN_WIDTH 1


// Name:           CC_NUM_DMA_RD_CHAN
// Default:        1
// Values:         1 2 3 4 5 6 7 8
// Enabled:        CC_DMA_ENABLE
// Parameter Type: Feature Setting
// 
// Number of read channels implemented in the DMA logic. A DMA read copies data from the remote link partner to your local 
// application. For more information, see the 'DMA' chapter of the Databook.
`define CC_NUM_DMA_RD_CHAN 1


`define CC_NUM_DMA_RD_CHAN_WIDTH 1


// `define CC_NUM_DMA_RD_CHAN_GTR_WR


// Name:         CC_LINKED_LIST_DMA
// Default:      1
// Values:       0, 1
// 
// Includes linked list to support multi-DMA write/read block transfers.
`define CC_LINKED_LIST_DMA


// Name:           CC_NUM_DMA_RD_TAG
// Default:        16 ((CX_MAX_TAG==3)   ? 2   : 
//                 (CX_MAX_TAG==7)   ? 4   : 
//                 (CX_MAX_TAG==15)  ? 8   : 
//                 (CX_MAX_TAG==31)  ? 16  : 
//                 (CX_MAX_TAG==63)  ? 32  : 
//                 (CX_MAX_TAG==127) ? 64  : 
//                 (CX_MAX_TAG>=255) ? 128 : 2)
// Values:         2 4 8 16 32 64 128
// Enabled:        CC_DMA_ENABLE
// Parameter Type: Performance Setting
// 
// Specifies how many of the CX_MAX_TAG+1 PCIe tags are reserved for DMA MRd generation. 
//  - CC_NUM_DMA_RD_TAG of the CX_MAX_TAG+1 tags are reserved for use by the DMA controller (and are no longer available 
//  to your application) for generation of non-posted DMA traffic. These are in the number range CX_MAX_TAG +1 
//  -CC_NUM_DMA_RD_TAG to CX_MAX_TAG. 
//  - The remaining CX_MAX_TAG +1 - CC_NUM_DMA_RD_TAG tags are assigned to non-DMA transfers. These are in the number 
//  range 0 to CX_MAX_TAG -CC_NUM_DMA_RD_TAG. 
// This parameter is also used to size the DMA Read buffer. The minimum value for CX_MAX_TAG is "3" when DMA is enabled.
`define CC_NUM_DMA_RD_TAG 16


`define CC_NUM_DMA_RD_TAG_WIDTH 4


// Name:         CC_DMA_RD_TAG_LOW
// Default:      16 ((CX_MAX_TAG > 255) ? (256 - CC_NUM_DMA_RD_TAG) : (CX_MAX_TAG + 
//               1 - CC_NUM_DMA_RD_TAG))
// Values:       0, ..., 255
// 
// Specifies the DMA read minimum PCIe tag number
`define CC_DMA_RD_TAG_LOW 16


// Name:         CC_DMA_RD_TAG_HIGH
// Default:      31 ((CX_MAX_TAG > 255) ? 255 : CX_MAX_TAG)
// Values:       0, ..., 255
// 
// Specifies the DMA read maximum PCIe tag number
`define CC_DMA_RD_TAG_HIGH 31


`define CC_DMA_RD_TAG_HIGH_WIDTH 5


// Name:         CC_MAX_NON_DMA_TAG_HIGH
// Default:      15 ((CC_DMA_ENABLE) ? ((CX_MAX_TAG > 255) ? (255 - 
//               CC_NUM_DMA_RD_TAG) : (CX_MAX_TAG - CC_NUM_DMA_RD_TAG)) : 2)
// Values:       0, ..., 255
// 
// Specifies the number of PCIe tags supported to manage non DMA transactions. 
//   
// Note: the number of non DMA tags supported is equal to (CC_MAX_NON_DMA_TAG_HIGH + 1) to 
//  align with the bridge xadm tag manager implementation which sets the high tag to 
//  (CC_SLV_DECOMP_TAG_HIGH + 1).
`define CC_MAX_NON_DMA_TAG_HIGH 15


`define CC_MAX_NON_DMA_TAG_HIGH_WIDTH 4


// Name:         DC_DMA_CTX_RAM_DATA_WIDTH
// Default:      256 (((CX_SRIOV_ENABLE==1) || (CX_TPH_ENABLE==1)) ?  288 : 256)
// Values:       -2147483648, ..., 2147483647
// 
// Specifies the eDMA Context and Remote Interrupt Message Information memory data width.
`define DC_DMA_CTX_RAM_DATA_WIDTH 256


// Name:         DC_DMA_CTX_RAM_DATA_WECC_WIDTH
// Default:      256 (CX_RAS_EN==1 ? [<functionof> DC_DMA_CTX_RAM_DATA_WIDTH 
//               CX_RAS_RAM_PROT_RANGE] + DC_DMA_CTX_RAM_DATA_WIDTH : 
//               DC_DMA_CTX_RAM_DATA_WIDTH)
// Values:       -2147483648, ..., 2147483647
// 
// Specifies the eDMA Context data width including ECC bits.
`define DC_DMA_CTX_RAM_DATA_WECC_WIDTH 256


// Name:         CC_DMA_CTX_RAM_DEPTH
// Default:      4 (2 + CC_NUM_DMA_RD_CHAN + CC_NUM_DMA_WR_CHAN)
// Values:       -2147483648, ..., 2147483647
// 
// Specifies the number of entries in the eDMA Context and Remote Interrupt Message Information memory. 
//  The context DMA RAM stores the per channel DMA read and write 
//  context information and interrupt message information. 
//  The maximum per channel context size is 8/9 data words or one entry. 
//  For phase 2 the SAR and DAR address widths (32/64) will be considered in the context DMA RAM depth calculation. 
//  The interupt message info size is 16 data words or two entries.
`define CC_DMA_CTX_RAM_DEPTH 4


// Name:         CC_DMA_CTX_RAM_ADDR_WIDTH
// Default:      2 ([calc_log2  (2 + CC_NUM_DMA_RD_CHAN + CC_NUM_DMA_WR_CHAN)])
// Values:       -2147483648, ..., 2147483647
// 
// Specifies the 256-bit aligned eDMA Context and Remote Interrupt Message Information memory address width.
`define CC_DMA_CTX_RAM_ADDR_WIDTH 2


`define CC_DMA_CTX_RAM_ADDRP_WIDTH 1


// Name:         CC_DMA_SEG_BUF_DATA_WIDTH
// Default:      128 (CX_NW*32)
// Values:       -2147483648, ..., 2147483647
// 
// Specifies the segment buffer data width. 
//  Note: Parity disabled when DMA enabled.
`define CC_DMA_SEG_BUF_DATA_WIDTH 128


// Name:         CC_DMA_SEG_BUF_DATA_WPAR_WIDTH
// Default:      128 ((CX_RAS_EN==1)? [<functionof> CC_DMA_SEG_BUF_DATA_WIDTH 
//               CX_RAS_PROT_RANGE RAS_BASE_PROT_WD ] + CC_DMA_SEG_BUF_DATA_WIDTH : 
//               CC_DMA_SEG_BUF_DATA_WIDTH)
// Values:       -2147483648, ..., 2147483647
// 
// Specifies the segment buffer data width including Parity bits.
`define CC_DMA_SEG_BUF_DATA_WPAR_WIDTH 128


// Name:         CC_DMA_SEG_BUF_DATA_WECC_WIDTH
// Default:      128 (CX_RAS_EN==1 ? [<functionof> CC_DMA_SEG_BUF_DATA_WIDTH 
//               CX_RAS_RAM_PROT_RANGE] + CC_DMA_SEG_BUF_DATA_WIDTH : 
//               CC_DMA_SEG_BUF_DATA_WIDTH)
// Values:       -2147483648, ..., 2147483647
// 
// Specifies the segment buffer data width including ECC bits.
`define CC_DMA_SEG_BUF_DATA_WECC_WIDTH 128


// Name:         CC_DMA_SEG_DEPTH
// Default:      18 (CX_NW_GTR_1 ? ((CX_MAX_MTU / (CX_NW*4)) + 2) : (CX_MAX_MTU / 
//               (CX_NW*4)))
// Values:       -2147483648, ..., 2147483647
// 
// Specifes the number of 32/64/128-bit entries per segment. 
//  The width of each entry is equal to the width of the controller data bus. 
//  The segment buffer size is equal to the maximum packet payload size supported by the core. 
//  In 64/128-bit configurations and extra 2 entries per segment is required to account for 
//  data word holes in the first and last TLP's when the completer splits completions on the 
//  root complex boundary (RCB).
`define CC_DMA_SEG_DEPTH 18


// Name:         CC_DMA_SEG_ADDR_WIDTH
// Default:      5 ([calc_log2 (CX_NW_GTR_1 ? ((CX_MAX_MTU / (CX_NW*4)) + 2) : 
//               (CX_MAX_MTU / (CX_NW*4)))])
// Values:       -2147483648, ..., 2147483647
// 
// Specifies the 32/64/128-bit aligned segment entry address width.
`define CC_DMA_SEG_ADDR_WIDTH 5


// Name:         CC_DMA_SEG_BUF_DEPTH
// Default:      288 (CC_NUM_DMA_RD_TAG * CC_DMA_SEG_DEPTH)
// Values:       -2147483648, ..., 2147483647
// 
// Specifes the number of 32/64/128-bit entries in the segment buffer. 
//  The number of segments equals the number of PCIe tags allocated to the DMA read function.
`define CC_DMA_SEG_BUF_DEPTH 288


// Name:         CC_DMA_SEG_BUF_NW_ADDR_WIDTH
// Default:      9 ([calc_log2  (CC_NUM_DMA_RD_TAG * CC_DMA_SEG_DEPTH)])
// Values:       -2147483648, ..., 2147483647
// 
// Specifies the 32/64/128-bit aligned segment buffer entry address width. 
//  The segment buffer address is aligned to the segment buffer data width.
`define CC_DMA_SEG_BUF_NW_ADDR_WIDTH 9


`define CC_DMA_SEG_BUF_NW_ADDRP_WIDTH 1


// Name:         CC_EDMA_INCLUDE_RTRGT
// Default:      false ((RADM_SEG_BUF && ((RADM_CPL_QMODE_VC0==1) || 
//               (RADM_CPL_QMODE_VC0==2)) && AMBA_INTERFACE) || !AMBA_INTERFACE)
// Values:       false (0), true (1)
// 
// Includes EDMA handling of receive target interface 
//  Derived define, to check if completions are expected in RTRGT interface 
//  If using AMBA interface this is only possible if using Segmented buffer and Store and forward
// `define CC_EDMA_INCLUDE_RTRGT


// Name:         CC_EDMA_INCLUDE_RBYP
// Default:      true ((AMBA_INTERFACE) ? !CC_EDMA_INCLUDE_RTRGT : 
//               CC_EDMA_INCLUDE_RTRGT)
// Values:       false (0), true (1)
// 
// Includes EDMA handling of receive bypass interface 
//  If the bridge is enabled, only RTRGT or RBYP is possible at a time 
//  If the bridge is disabled, the controller may be SW programmed to use any of 
//  these two interfaces
`define CC_EDMA_INCLUDE_RBYP


// Name:         CC_EDMA_SINGLE_CHANNEL
// Default:      true ((CC_NUM_DMA_WR_CHAN==1) && (CC_NUM_DMA_RD_CHAN==1))
// Values:       false (0), true (1)
// 
// Single channel DMA macro, to enable/disable internal logic
`define CC_EDMA_SINGLE_CHANNEL


// Name:         CC_CRGB_ADDR_WIDTH
// Default:      16 (((CC_UNROLL_EN==0)? 0: 1)?16:12)
// Values:       -2147483648, ..., 2147483647
// 
// CRGB interface address width
`define CC_CRGB_ADDR_WIDTH 16


// Name:         UNROLL_DMA_SIZE
// Default:      0x400 (CC_UNROLL_EN==1? ([<functionof> CC_NUM_DMA_RD_CHAN 
//               CC_NUM_DMA_WR_CHAN]+512):0)
// Values:       0x0, ..., 0xffffffffffffffff
// Enabled:      ENABLE_MEM_MAP_UNROLL_DMA_REG==1
// 
// Indicates the size of UNROLL DMA configuration registers into memory space.
`define UNROLL_DMA_SIZE 64'h400


// `define CC_EDMA_CHANNEL_CONTROL_2_REG_ENABLE


`define CC_DMA_BA_ENABLE


`define CX_NW_LOG2 2


//  ------------------------------------------------------------------------
//
//                    (C) COPYRIGHT 2002 - 2016 SYNOPSYS, INC.
//                            ALL RIGHTS RESERVED
//
//  This software and the associated documentation are confidential and
//  proprietary to Synopsys, Inc.  Your use or disclosure of this
//  software is subject to the terms and conditions of a written
//  license agreement between you, or your company, and Synopsys, Inc.
//
// The entire notice above must be reproduced on all authorized copies.
//
//  ------------------------------------------------------------------------

//-------------------------------------------------------------------------
//---  RCS information:
//---    $DateTime: 2016/07/15 10:25:45 $
//---    $Revision: #93 $
//---    $Id: //dwh/pcie_iip/main/DWC_pcie/DWC_pcie_common/src/DWC_pcie_amba_cc_constants.v#93 $
//-------------------------------------------------------------------------

//-/ =================================================================
//-/ AMBA Section
//-/ =================================================================


// Name:           AHB_ENDIANNESS
// Default:        Little
// Values:         Little (0), Big (1), Dynamic (2)
// Enabled:        AMBA_INTERFACE==1
// Parameter Type: Feature Setting
// 
// Selects Endianness for the AHB interface. 
//  - Little: Static Little Endian 
//  - Big: Static Big Endian 
//  - Dynamic: Pin Selectable 
// For more details, see 'Endianess Support' in the AHB section of the Databook.
`define AHB_ENDIANNESS 0


// `define ENDIAN_PIN_ENABLE


// `define AHB_BIG_ENDIAN


`define AHB_ENABLED 0


// Name:           AHB_CLK_DIFF_ENABLE
// Default:        0 (AMBA_INTERFACE==1)
// Values:         0, 1
// Enabled:        AMBA_INTERFACE==1
// Parameter Type: Feature Setting
// 
// Include asynchronous clock crossing circuitry in AHB bridge. The AHB bridge assumes that hclk is asynchronous to 
// core_clk and it implements the appropriate clock crossings using pre-existing FIFOs and inserting extra FIFOs when necessary. 
//  - When your AHB clock is synchronous to core_clk then you can eliminate all unnecessary clock crossing circuitry by 
//  unsetting this parameter. 
//  - When you are using a dynamic frequency controller (Gen/Gear 2/3), the frequency of core_clk changes across speed 
//  modes. In this case, your AHB clock cannot be synchronous to core_clk and you cannot set AHB_CLK_DIFF_ENABLE to "0". 
//  - In addition, M-PCIe mode doesn't support synchronous core_clk  and bridge clock frequencies because the M-PCIe 
//  core_clk  frequency regularly changes between rate A and B frequencies.
// `define AHB_CLK_DIFF_ENABLE


// Name:           CC_RESPONSE_MODE
// Default:        Normal
// Values:         Normal (0), SPLIT_RETRY (1)
// Enabled:        AMBA_INTERFACE==1
// Parameter Type: Feature Setting
// 
// Selects Normal or SPLIT-RETRY response for the AHB slave interface. When the normal data slave is configured for 
// SPLIT-RETRY response mode, the dedicated DBI slave (if present) will still operate in NORMAL response mode by keeping 
// dbi_hready_resp low. For more details, see the AHB section of the Databook. 
//  
// Note: There is no SPLIT-RETRY support for the DBI slave.
`define CC_RESPONSE_MODE 0



// `define SPLIT_SUPPORT


`define AXI_ENABLED 1


// `define CC_AXI4_ENABLE


`define CC_AXI4_ENABLE_VALUE 0


// Name:           CC_ACELITE_ENABLE
// Default:        0
// Values:         0, 1
// Enabled:        AMBA_INTERFACE==3
// Parameter Type: Feature Setting
// 
// Enables ACE Lite.
// `define CC_ACELITE_ENABLE

//-/ =================================================================
//-/ AMBA Master/Slave Populated
//-/ =================================================================

// Name:           MASTER_POPULATED
// Default:        1 ((AMBA_INTERFACE!=0))
// Values:         0, 1
// Enabled:        AHB_POPULATED || AXI_POPULATED
// Parameter Type: Feature Setting
// 
// Enables the AXI master interface. This parameter cannot be set to "0" for the DM,RC products and in the EP when the 
// receive queue architecture (CX_RADMQ_MODE) is "Segmented Buffer" or when the DMA is present.
`define MASTER_POPULATED

//-/ =================================================================
//-/ AMBA Master Section
//-/ =================================================================

// Name:           MSTR_CLK_DIFF_ENABLE
// Default:        1 ((AXI_POPULATED && MASTER_POPULATED) || AHB_CLK_DIFF_ENABLE)
// Values:         0, 1
// Enabled:        AXI_POPULATED && MASTER_POPULATED
// Parameter Type: Feature Setting
// 
// Include master asynchronous clock crossing circuitry in AXI bridge. The AXI bridge assumes that mstr_aclk is 
// asynchronous to core_clk and it implements the appropriate clock crossings using pre-existing FIFOs and inserting extra FIFOs when 
// necessary. 
//  - When your AXI clock is synchronous to core_clk then you can eliminate all unnecessary clock crossing circuitry by 
//  unsetting the MSTR_CLK_DIFF_ENABLE configuration parameter. 
//  - When you are using a dynamic frequency Gen/Gear 2/3 core, the frequency of core_clk changes across speed modes. In 
//  this case, your AXI clock cannot be synchronous to core_clk and you cannot set MSTR_CLK_DIFF_ENABLE to "0". 
//  - In addition, M-PCIe mode doesn't support synchronous core_clk  and bridge clock frequencies because the M-PCIe 
//  core_clk  frequency regularly changes between rate A and B frequencies.
`define MSTR_CLK_DIFF_ENABLE


// Name:         CC_SLV_RESP_TLP_PREFIX_ENABLE
// Default:      0
// Values:       0, 1
// Enabled:      CX_TLP_PREFIX_ENABLE
// 
// Enable TLP Prefix in AMBA response paths
// `define CC_SLV_RESP_TLP_PREFIX_ENABLE


// Name:         CC_MSTR_RESP_TLP_PREFIX_ENABLE
// Default:      0
// Values:       0, 1
// Enabled:      CX_TLP_PREFIX_ENABLE && MASTER_POPULATED
// 
// Enable TLP Prefix in AMBA response paths
// `define CC_MSTR_RESP_TLP_PREFIX_ENABLE


`define CC_MAX_MSTR_TAG_PW 5


`define CC_MAX_MSTR_TAG_CW 6


`define CX_REMOTE_MAX_TAGS_WD 5


`define CX_REMOTE_RD_REQ_SIZE 4096


`define CX_REMOTE_RD_REQ_SIZE_PW 13


`define C_M_SYNC_DEPTH 2


`define M_C_SYNC_DEPTH 2


// Name:           CC_MSTR_BURST_TYPE
// Default:        Unspecified
// Values:         Fixed (0), Unspecified (1)
// Enabled:        MASTER_POPULATED && AHB_POPULATED
// Parameter Type: Feature Setting
// 
// Specifies whether the master interface will generate defined (SINGLE/INCR4/INCR8/INCR16) or undefined length INCR 
// bursts. For more details, see the AHB section of the Databook. Value range: 
//  - 0 : Fixed (Defined Length) 
//  - 1 : Unspecified (Undefined Length) 
// Note: AHB only.
`define CC_MSTR_BURST_TYPE 1

//AHB Master Fixed Length Burst Type Only

// `define CC_FIXED_BURST_ONLY


// Name:           CC_MSTR_BURST_LEN
// Default:        16
// Values:         8 16 32 64 128 256
// Enabled:        (MASTER_POPULATED && !(AHB_POPULATED && (CC_MSTR_BURST_TYPE == 0)))
// Parameter Type: Performance Setting
// 
// Specifies the maximum burst length (in beats) of an AXI transfer at the master interface. 
//  - A value < MASTER_BUS_DATA_WIDTH/8 forces MSTR_FIXED_SIZE_ENABLE=1 because the master cannot produce a sufficiently 
//  long burst of bytes. Therefore the master uses dword access and not byte access for narrow or NCBE reads; which means that 
//  such accesses to non-prefetchable memory might result in corrupting not-to-be-read data. 
//  - A value of 8 also forces MSTR_FIXED_SIZE_ENABLE=1. 
// AXI Note: The value of 8 is only possible if MASTER_BUS_DATA_WIDTH > 32 because the minimum allowable master burst 
// transfer size (CC_MSTR_MTU) is 64 bytes.
`define CC_MSTR_BURST_LEN 16


`define CC_MSTR_BURST_LEN_PW 4


// Name:         RADMX_DECOMPOSER_POPULATED
// Default:      1 (MASTER_POPULATED)
// Values:       0, 1
// Enabled:      MASTER_POPULATED
// 
// Indicates that master interface requires a decomposer
`define RADMX_DECOMPOSER_POPULATED


`define CC_SLV_BUS_DATA_WIDTH 128


`define CC_SLV_BUS_DATAP_WIDTH 1

`define SLV_DW_128BITS


`define SLV_DW_GREATER_THAN_32


`define SLV_DW_GREATER_THAN_64


// Name:           SHARED_DBI_ENABLED
// Default:        0
// Values:         0, 1
// Enabled:        AXI_POPULATED && !CX_AMBA_ARI_OR_IOV
// Parameter Type: Feature Setting
// 
// Indicates that the slave interface for PCIe outbound traffic is also used for DBI access. For more details, see the 
// "Local Bus Controller (LBC)" section in the "Controller Operations" chapter of the Databook. 
// >Note: Valid for AXI only but cannot be enabled in EP/DM when (CX_ARI_ENABLE=1 or CX_SRIOV_ENABLE=1)
// `define SHARED_DBI_ENABLED


// `define SLAVE_BUS_ADDR_WIDTH_IS_64


// Name:           MASTER_BUS_ADDR_WIDTH
// Default:        32 (AHB_POPULATED ? SLAVE_BUS_ADDR_WIDTH : 32)
// Values:         32 64
// Enabled:        (MASTER_POPULATED && (AXI_POPULATED || AHB_POPULATED))
// Parameter Type: Feature Setting
// 
// Specifies the width of the AXI master address bus (excluding parity bits [AXI only] if any)
`define MASTER_BUS_ADDR_WIDTH 32


// `define MASTER_BUS_ADDR_WIDTH_IS_64


`define CC_MSTR_BUS_ADDR_WIDTH 32


`define CC_MSTR_BUS_ADDRP_WIDTH 1



`define DBUS_PAR_WD_PER_DW 0


`define CC_DBUS_DWORD_WD_WITH_PAR 32


// Name:           MASTER_BUS_DATA_WIDTH
// Default:        64 (AHB_POPULATED ? SLAVE_BUS_DATA_WIDTH : 64)
// Values:         32 64 128 256 512
// Enabled:        MASTER_POPULATED
// Parameter Type: Feature Setting
// 
// Specifies the width of the AXI master databus (excluding parity bits [AXI only] if any)
`define MASTER_BUS_DATA_WIDTH 128


`define CC_MSTR_BUS_DATA_WIDTH 128


`define CC_MSTR_BUS_DATAP_WIDTH 1


`define MSTR_DW_128BITS


`define MSTR_DW_GREATER_THAN_32


`define MSTR_DW_GREATER_THAN_64


// `define MSTR_DW_GREATER_THAN_128


// `define AXI_BUS_DATA_WIDTH_32_OR_36


// `define AXI_BUS_DATA_WIDTH_64_OR_72


`define AXI_BUS_DATA_WIDTH_128_OR_144


// `define AXI_BUS_DATA_WIDTH_256_OR_288


// `define AXI_BUS_DATA_WIDTH_512_OR_576




`define CC_MSTR_NW 4

`define CC_MSTR_NW_4


`define CC_MSTR_BUS_WSTRB_WIDTH 16


`define CC_MSTR_BUS_WSTRB_WIDTH_PW 4


`define CC_MASTER_BUS_DATA_SIZE_ENC 4


`define CC_MSTR_BE_CTRL_WIDTH 8


`define CC_GM_CORE_SIZE 4


`define CC_GM_AMBA_SIZE 4


// `define PCIE_CORE_DATA_BUS_WD_IS_32


`define CC_CORE_DATA_BUS_WD 128


`define CC_CORE_ADDR_BUS_WD 64

//Core Write Strobe Width

`define CC_CORE_DATA_BUS_WSTRB_WD 16


`define CC_CORE_DATA_BUS_WSTRB_WD_PW 5

//Slave down and up conversion Ratio

`define SLV_DWN_AND_UP_CVRT_RATIO 1

//Master down and up conversion Ratio

`define MSTR_DWN_AND_UP_CVRT_RATIO 1

//Log2 of Slave DWNCVRT_RATIO

`define SLV_DWNCVRT_RATIO_WD 1

//Log2 of Master DWNCVRT_RATIO

`define MSTR_DWNCVRT_RATIO_WD 1


// `define SLV_UPCNVRT_RATIO_4_1


// `define MSTR_UPCNVRT_RATIO_4_1


// Name:         CC_MSTR_DATA_WD_GT_CORE_DATA_WD
// Default:      0 (MASTER_BUS_DATA_WIDTH > PCIE_CORE_DATA_BUS_WD)
// Values:       0, 1
// 
// Include AMBA/Core Data Converters
// `define CC_MSTR_DATA_WD_GT_CORE_DATA_WD


// Name:         CC_MSTR_DATA_WD_LT_CORE_DATA_WD
// Default:      0 (MASTER_BUS_DATA_WIDTH < PCIE_CORE_DATA_BUS_WD)
// Values:       0, 1
// 
// Include AMBA/Core Data Converters
// `define CC_MSTR_DATA_WD_LT_CORE_DATA_WD


// Name:         CC_MSTR_CONV_FAC_WIDTH
// Default:      4 (( ((MASTER_BUS_DATA_WIDTH==512) && (PCIE_CORE_DATA_BUS_WD ==256)) 
//               || ((MASTER_BUS_DATA_WIDTH==256) && (PCIE_CORE_DATA_BUS_WD ==128)) 
//               || ((MASTER_BUS_DATA_WIDTH==128) && (PCIE_CORE_DATA_BUS_WD ==64)) 
//               || ((MASTER_BUS_DATA_WIDTH==64) && (PCIE_CORE_DATA_BUS_WD ==32)) 
//               || ((MASTER_BUS_DATA_WIDTH==32) && (PCIE_CORE_DATA_BUS_WD ==64)) 
//               || ((MASTER_BUS_DATA_WIDTH==64) && (PCIE_CORE_DATA_BUS_WD ==128)) 
//               || ((MASTER_BUS_DATA_WIDTH==128) && (PCIE_CORE_DATA_BUS_WD ==256)) 
//               || ((MASTER_BUS_DATA_WIDTH==256) && (PCIE_CORE_DATA_BUS_WD ==512))) ? 1 
//               :  (((MASTER_BUS_DATA_WIDTH==512) && (PCIE_CORE_DATA_BUS_WD ==128)) 
//               || ((MASTER_BUS_DATA_WIDTH==256) && (PCIE_CORE_DATA_BUS_WD ==64)) 
//               || ((MASTER_BUS_DATA_WIDTH==128) && (PCIE_CORE_DATA_BUS_WD ==32)) 
//               || ((MASTER_BUS_DATA_WIDTH==32) && (PCIE_CORE_DATA_BUS_WD ==128)) 
//               || ((MASTER_BUS_DATA_WIDTH==64) && (PCIE_CORE_DATA_BUS_WD ==256)) 
//               || ((MASTER_BUS_DATA_WIDTH==128) && (PCIE_CORE_DATA_BUS_WD ==512))) ? 2 
//               :  (((MASTER_BUS_DATA_WIDTH==512) && (PCIE_CORE_DATA_BUS_WD ==64)) 
//               || ((MASTER_BUS_DATA_WIDTH==256) && (PCIE_CORE_DATA_BUS_WD ==32)) 
//               || ((MASTER_BUS_DATA_WIDTH==32) && (PCIE_CORE_DATA_BUS_WD ==256)) 
//               || ((MASTER_BUS_DATA_WIDTH==64) && (PCIE_CORE_DATA_BUS_WD ==512))) ? 3 
//               : 4)
// Values:       -2147483648, ..., 2147483647
// 
// Master Conversion Factor Width.
`define CC_MSTR_CONV_FAC_WIDTH 4


// Name:         MSTR_RESP_UPCNV_AFTER_COMP
// Default:      0 (CC_MSTR_DATA_WD_LT_CORE_DATA_WD && AXI_POPULATED && 
//               MASTER_POPULATED)
// Values:       0, 1
// 
// Perform up conversion after the response composer
// `define MSTR_RESP_UPCNV_AFTER_COMP


// Name:         MSTR_RESP_UPCNV_BEFORE_COMP
// Default:      0 (CC_MSTR_DATA_WD_LT_CORE_DATA_WD && AHB_POPULATED && 
//               MASTER_POPULATED)
// Values:       0, 1
// 
// Perform up conversion before the response composer
// `define MSTR_RESP_UPCNV_BEFORE_COMP


// Name:           CC_MSTR_MTU
// Default:        256 (((CC_MSTR_BURST_LEN*MASTER_BUS_DATA_WIDTH/8) >= 64) ? 
//                 (CC_MSTR_BURST_LEN*MASTER_BUS_DATA_WIDTH/8) : 64)
// Values:         64, ..., 4096
// Enabled:        0
// Parameter Type: Feature Setting
// 
// Master Maximum Transfer Unit. The bridge master will not request or write more than CC_MSTR_MTU bytes in a single AXI 
// burst. This parameter is derived automatically as max. {64, CC_MSTR_BURST_LEN * (MASTER_BUS_DATA_WIDTH / 8) } and is 
// read-only.
`define CC_MSTR_MTU 256


// `define MAX_MTU_GREATER_THAN_MSTR_MTU


`define CC_MSTR_MTU_PW 9


`define CC_MSTR_RD_REQ_SIZE 256


`define CC_MSTR_RD_REQ_SIZE_PW 9


// Name:           CC_MSTR_PAGE_BOUNDARY_PW
// Default:        13 (((AMBA_INTERFACE==2) || (AMBA_INTERFACE==3)) ? 13 : 11)
// Values:         8, ..., 13
// Enabled:        MASTER_POPULATED
// Parameter Type: Performance Setting
// 
// Specifies an address page boundary of 128, 256, 512, 1K, 2K or 4K (bytes). 
//  - The AXI bridge ensures that the inbound request will not cross the selected page boundary when driven onto the AXI 
//  master interface. 
//  - The Master Page Boundary (CC_MSTR_PAGE_BOUNDARY_BYTES) is calculated as 2 ^ (CC_MSTR_PAGE_BOUNDARY_PW-1). 
//  - For more details, see "Decomposition" in the Databook. 
// Note: The Master Page Boundary { 2 ^ (CC_MSTR_PAGE_BOUNDARY_PW-1) } must be >= max{ CC_MSTR_MTU , CC_MSTR_RD_REQ_SIZE}
`define CC_MSTR_PAGE_BOUNDARY_PW 13


// Name:           CC_MSTR_PAGE_BOUNDARY_BYTES
// Default:        4096 ([calc_inv_log2 [<functionof> CC_MSTR_PAGE_BOUNDARY_PW -1]])
// Values:         -2147483648, ..., 2147483647
// Parameter Type: Performance Setting
// 
// For more details, see description of Master Page Boundary Bit (CC_MSTR_PAGE_BOUNDARY_PW). 
//  
// Note: This parameter is derived automatically as 2 ^ (CC_MSTR_PAGE_BOUNDARY_PW-1) and is read-only.
`define CC_MSTR_PAGE_BOUNDARY_BYTES 4096


`define CC_MSTR_MAX_SPLIT_PACK 17


`define CC_MSTR_MAX_SPLIT_PACK_PW 5



`define CC_MSTR_MAX_SPLIT_PACK_NARROW_RD 17


`define CC_MSTR_MAX_SPLIT_PACK_NARROW_RD_PW 5

//-/ =================================================================
//-/ AMBA Slave Section
//-/ =================================================================



// Name:           RETURN_ERR_RESP
// Default:        True
// Values:         False (0), True (1)
// Enabled:        AHB_POPULATED && SLAVE_POPULATED
// Parameter Type: Feature Setting
// 
// Enables an immediate error response from the slave and DBI slave for an illegal AHB access. For more details see the 
// slv_hresp signal description in the Databook. If the parameter RETURN_ERR_RESP is set then the bridge slave interface will 
// perform immediate error checking on the slave interface protocol signals (slv_hsize, slv_haddr, slv_req_misc_info[25:22]) 
// and return an ERROR status on slv_hresp immediately. It will not transmit the outbound request TLP. The following two checks 
// are done: 
//  - HSIZE check. For example, for a data width of 32-bits you will get an immediate ERROR response if slv_hsize is not 
//  0,1 or 2. 
//  - CFG & I/O transfers are checked for byte enable, hsize and address alignment. 
// For more details, see the "Zero-Byte Transfers Over the AHB Bridge (Flush Semantics)2 section of the Databook. The 
// recommended setting for this parameter is "True".
`define RETURN_ERR_RESP 1


// `define IMMED_ERR_RESP_OFF


// Name:           SLV_CLK_DIFF_ENABLE
// Default:        1 (((AXI_POPULATED && SLAVE_POPULATED) || AHB_CLK_DIFF_ENABLE))
// Values:         0, 1
// Enabled:        AXI_POPULATED && SLAVE_POPULATED
// Parameter Type: Feature Setting
// 
// Include slave asynchronous clock crossing circuitry in AXI bridge. The AXI bridge assumes that slv_aclk and dbislv_aclk 
// are asynchronous to core_clk and it implements the appropriate clock crossings using pre-existing FIFOs and inserting 
// extra FIFOs when necessary. 
//  - When your AXI clocks are synchronous to core_clk then you can eliminate all unnecessary clock crossing circuitry by 
//  unsetting the SLV_CLK_DIFF_ENABLE configuration parameter. 
//  - When you are using a dynamic frequency Gen/Gear 2/3 core, the frequency of core_clk changes across speed modes. In 
//  this case, your AXI clock cannot be synchronous to core_clk and you cannot set SLV_CLK_DIFF_ENABLE to "0". 
//  - In addition, M-PCIe mode doesn't support synchronous core_clk  and bridge clock frequencies because the M-PCIe 
//  core_clk  frequency regularly changes between rate A and B frequencies.
`define SLV_CLK_DIFF_ENABLE


`define C_S_SYNC_DEPTH 2


`define S_C_SYNC_DEPTH 2


`define RADMX_CPL_BUS_CLK_CROSSING_EN


`define CC_RADMX_ASYN_FIFO_DP 16


`define CC_RADMX_ASYN_FIFO_PW 4


// Name:           CC_SLV_NUM_MASTERS
// Default:        4
// Values:         4 8 16
// Enabled:        AHB_POPULATED && SLAVE_POPULATED && SPLIT_SUPPORT
// Parameter Type: Feature Setting
// 
// Indicates the number of AHB masters that  access the PCIe bridge slave. This is used to determine the number of internal 
// bridge tags to support SPLIT_RETRY response. For more details, see the AHB section of the Databook. 
//  
// Note: AHB only.
`define CC_SLV_NUM_MASTERS 4



`define CC_AHB_SNUM_MASTERS 1


`define CC_SLV_NUM_MSTRS_WD 1


`define CC_SLV_BURST_LEN_PW 4


// Name:         RADMX_COMPOSER_POPULATED
// Default:      1 (SLAVE_POPULATED)
// Values:       0, 1
// Enabled:      0
// 
// Indicates that slave interface requires a composer
`define RADMX_COMPOSER_POPULATED



// Name:           CC_MAX_SLV_TAG
// Default:        16 (((AHB_ENABLED==1) && (CC_AHB_SNUM_MASTERS<=2)) ? 2 : 
//                 ((AHB_ENABLED==1) && (CC_AHB_SNUM_MASTERS<=4)) ? 4 : 
//                 ((AHB_ENABLED==1) && (CC_AHB_SNUM_MASTERS<=8)) ? 8 : 
//                 ((AHB_ENABLED==1) && (CC_AHB_SNUM_MASTERS<=16)) ? 16 : 
//                 (CC_DMA_ENABLE_VALUE==1) ? ((CX_MAX_TAG==3) ? 2 : 
//                 (CX_MAX_TAG==7)   ? 4   : 
//                 (CX_MAX_TAG==15)  ? 8   : 
//                 (CX_MAX_TAG==31)  ? 16  : 
//                 (CX_MAX_TAG==63)  ? 32  : 
//                 (CX_MAX_TAG==127) ? 64  : 
//                 (CX_MAX_TAG>=255) ? 128 : 2) : 
//                 ((CX_MAX_TAG<=255) ? CX_MAX_TAG + 1 : 256))
// Values:         2 4 8 16 32 64 128 256
// Enabled:        SLAVE_POPULATED && (AHB_ENABLED==0)
// Parameter Type: Performance Setting
// 
// The maximum number of non-posted AXI requests issued to the bridge slave that are outstanding at one time over the PCIe 
// link. For more details, see "Outbound Bridge Tag Management" in the "AXI Bridge Module" chapter of the Databook. 
//  - For AXI, the default value is CX_MAX_TAG+1. Note that CX_MAX_TAG represents the number of PCIe TAGs minus 1. 
//  - When DMA is enabled, the default value for AXI is (CX_MAX_TAG +1)/2. 
// AHB Note: This parameter is derived automatically and is read-only.
`define CC_MAX_SLV_TAG 16


`define CC_MAX_SLV_TAG_PW 4


`define CC_SLV_BUS_ADDR_WIDTH 32


`define CC_SLV_BUS_ADDRP_WIDTH 1


`define CC_SLV_BUS_WSTRB_WIDTH 16


`define CC_SLV_INTBYTECNT_PW 8


`define CC_SLV_BUS_WSTRB_PW 4

//AMBA Slave Response Byte Count

`define CC_SLV_MAX_BYTES 256


`define CC_SLV_MAX_BYTES_PW 9


`define CC_SLV_NW 4

`define CC_SLV_NW_4

//AMBA Slave Bus ID Width

// Name:           CC_SLV_BUS_ID_WIDTH
// Default:        4 ([calc_log2 CC_MAX_SLV_TAG])
// Values:         1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
// Enabled:        SLAVE_POPULATED && AXI_POPULATED
// Parameter Type: Performance Setting
// 
// Specifies the width of the AXI slave interface ID bus. You can increase or decrease CC_SLV_BUS_ID_WIDTH but your 
// application master must never issue more than CC_MAX_SLV_TAG different AXI ID's (for non-posted requests) because the bridge is 
// still only configured to handle CC_MAX_SLV_TAG different AXI ID's. CC_SLV_BUS_ID_WIDTH sets the width of each entry in the 
// Slave Response Application-Tag Look Up Table, but it does not determine the number of available TAGs. Default value is 
// ceil [log2{CC_MAX_SLV_TAG}]. 
// For more details, see "Increasing Size of AXI Slave ID Bus" in the AXI chapter of the Databook.)
`define CC_SLV_BUS_ID_WIDTH 12


`define CC_SLV_BUS_ID_DP 4096


// Name:         CC_SLV_DATA_WD_GT_CORE_DATA_WD
// Default:      0 (SLAVE_BUS_DATA_WIDTH > PCIE_CORE_DATA_BUS_WD)
// Values:       0, 1
// 
// Include AMBA/Core Data Converters
// `define CC_SLV_DATA_WD_GT_CORE_DATA_WD


// Name:         CC_SLV_DATA_WD_LT_CORE_DATA_WD
// Default:      0 (SLAVE_BUS_DATA_WIDTH < PCIE_CORE_DATA_BUS_WD)
// Values:       0, 1
// 
// Include AMBA/Core Data Converters
// `define CC_SLV_DATA_WD_LT_CORE_DATA_WD


// Name:         CC_SLV_CONV_FAC_WIDTH
// Default:      4 (( ((SLAVE_BUS_DATA_WIDTH==512) && (PCIE_CORE_DATA_BUS_WD==256)) 
//               || ((SLAVE_BUS_DATA_WIDTH==256) && (PCIE_CORE_DATA_BUS_WD==128)) 
//               || ((SLAVE_BUS_DATA_WIDTH==128) && (PCIE_CORE_DATA_BUS_WD==64)) 
//               || ((SLAVE_BUS_DATA_WIDTH==64) && (PCIE_CORE_DATA_BUS_WD==32)) 
//               || ((SLAVE_BUS_DATA_WIDTH==32) && (PCIE_CORE_DATA_BUS_WD==64)) 
//               || ((SLAVE_BUS_DATA_WIDTH==64) && (PCIE_CORE_DATA_BUS_WD==128)) 
//               || ((SLAVE_BUS_DATA_WIDTH==128) && (PCIE_CORE_DATA_BUS_WD==256)) 
//               || ((SLAVE_BUS_DATA_WIDTH==256) && (PCIE_CORE_DATA_BUS_WD==512))) ? 1 
//               :  (((SLAVE_BUS_DATA_WIDTH==512) && (PCIE_CORE_DATA_BUS_WD==128)) 
//               || ((SLAVE_BUS_DATA_WIDTH==256) && (PCIE_CORE_DATA_BUS_WD==64)) 
//               || ((SLAVE_BUS_DATA_WIDTH==128) && (PCIE_CORE_DATA_BUS_WD==32)) 
//               || ((SLAVE_BUS_DATA_WIDTH==32) && (PCIE_CORE_DATA_BUS_WD==128)) 
//               || ((SLAVE_BUS_DATA_WIDTH==64) && (PCIE_CORE_DATA_BUS_WD==256)) 
//               || ((SLAVE_BUS_DATA_WIDTH==128) && (PCIE_CORE_DATA_BUS_WD==512))) ? 2 
//               :  (((SLAVE_BUS_DATA_WIDTH==512) && (PCIE_CORE_DATA_BUS_WD==64)) 
//               || ((SLAVE_BUS_DATA_WIDTH==256) && (PCIE_CORE_DATA_BUS_WD==32)) 
//               || ((SLAVE_BUS_DATA_WIDTH==32) && (PCIE_CORE_DATA_BUS_WD==256)) 
//               || ((SLAVE_BUS_DATA_WIDTH==64) && (PCIE_CORE_DATA_BUS_WD==512))) ? 3 
//               : 4)
// Values:       -2147483648, ..., 2147483647
// 
// Slave Conversion Factor Width.
`define CC_SLV_CONV_FAC_WIDTH 4


`define CC_SLV_MTU_PW 9


`define CC_SLV_RD_REQ_SIZE 256


`define CC_SLV_RD_REQ_SIZE_PW 9


// Name:         DIRECT_AMBA_ID_MAP
// Default:      0
// Values:       0, 1
// 
// Indicates that a slave interface has ID that is directed mapped to PCIe TAG
// `define DIRECT_AMBA_ID_MAP


// Name:         SLAVE_IN_ORDER_EN
// Default:      0
// Values:       0, 1
// Enabled:      0
// 
// This parameter has currently no effects and it will be no longer visible in future releases. The (re)ordering of the 
// slave requests is now provided by default without impacting IP performance.
// `define SLAVE_IN_ORDER_EN



// Name:         CC_GIF_CORE_GS_STRBCALC_PIPELINE
// Default:      0
// Values:       0, 1
// Enabled:      CX_CUSTOM_PIPELINING && SLAVE_POPULATED
// 
// AMBA GIF control Slave byte strobe count calculation, 
//  providing tradeoff of gates for ease of timing closure.
// `define CC_GIF_CORE_GS_STRBCALC_PIPELINE


// Name:         CC_GIF_CORE_GS_RESPONSE_PIPELINE
// Default:      0
// Values:       0, 1
// Enabled:      CX_CUSTOM_PIPELINING && SLAVE_POPULATED
// 
// AMBA GIF control Slave response channel, 
//  providing tradeoff of gates for ease of timing closure.
`define CC_GIF_CORE_GS_RESPONSE_PIPELINE 0


// Name:         CC_SLV_RDATA_REGOUT
// Default:      0
// Values:       0, 1
// Enabled:      CX_CUSTOM_PIPELINING && SLAVE_POPULATED
// 
// AXI slave rdata interface pipeline, 
//  providing tradeoff of gates for ease of timing closure.
`define CC_SLV_RDATA_REGOUT 0


// Name:         CC_MSTR_AXI_RCHAN_PIPELINE
// Default:      1
// Values:       0, 1
// Enabled:      MASTER_POPULATED
// 
// AXI master rdata interface pipeline, 
//  providing tradeoff of gates for ease of timing closure.
`define CC_MSTR_AXI_RCHAN_PIPELINE


// Name:         CC_MSTR_AXI_AWARW_PIPELINE
// Default:      1
// Values:       0, 1
// Enabled:      MASTER_POPULATED
// 
// AXI master AW/AR/W channels pipeline, 
//  providing tradeoff of gates for ease of timing closure.
`define CC_MSTR_AXI_AWARW_PIPELINE


`define CC_MSTR_NUM_CONV_WD 1


`define CC_SLV_NUM_CONV_WD 1


`define CC_CORE_NUM_CONV_WD 1


// `define CORE_NUM_COV_WD_IS_2

//-/ =================================================================
//-/ AMBA DBI Slave Section
//-/ =================================================================


// Name:           DBI_4SLAVE_POPULATED
// Default:        1 (AMBA_POPULATED && !SHARED_DBI_ENABLED)
// Values:         0, 1
// Enabled:        AMBA_POPULATED && !SHARED_DBI_ENABLED
// Parameter Type: Feature Setting
// 
// Enables the AXI Slave DBI interface. For more details, see the "Local Bus Controller (LBC)" section of the Databook.
`define DBI_4SLAVE_POPULATED


`define DBISLV_CLK_DIFF_ENABLE


`define C_D_SYNC_DEPTH 2


`define D_C_SYNC_DEPTH 2


`define S_A_SYNC_DEPTH 2


`define A_S_SYNC_DEPTH 2


`define CC_DBI_NUM_MASTERS 1


`define CC_DBI_BURST_LEN 16


`define CC_DBISLV_BURST_LEN_PW 4


// Name:           CC_DBI_SLV_BUS_ADDR_WIDTH
// Default:        33 (CX_ARI_ENABLE ? 33 : 32)
// Values:         32 33
// Parameter Type: Feature Setting
// 
// Specifies the width of the dedicated DBI slave address bus. This is a read-only parameter.
`define CC_DBI_SLV_BUS_ADDR_WIDTH 33



// Name:           CC_DBI_SLV_BUS_DATA_WIDTH
// Default:        32
// Values:         32 64 128
// Enabled:        ((AMBA_INTERFACE==1))
// Parameter Type: Feature Setting
// 
// Specifies the width of the dedicated DBI slave databus.
`define CC_DBI_SLV_BUS_DATA_WIDTH 32

`define DBI_DW_32BITS


`define DBI_DW_LT_SLV_DW


`define CC_DBI_SLV_BUS_WSTRB_WIDTH 4

//AMBA DBI Slave Bus ID Width

// Name:         CC_DBI_SLV_ID_WD
// Default:      4 ((AHB_ENABLED==1) ? CC_MAX_SLV_TAG_PW : 4)
// Values:       1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
// Enabled:      DBI_4SLAVE_POPULATED && AXI_POPULATED
// 
// Specify the DBI Slave ID width on AMBA.
`define CC_DBI_SLV_ID_WD 4


`define CC_DBI_SLV_ID_DP 16


`define CC_DBI_SLV_BUS_WSTRB_PW 2

//AMBA DBI Response Byte Count

`define CC_DBI_SLV_MAX_BYTES 64


`define CC_DBI_SLV_MAX_BYTES_PW 6

//-/ =================================================================
//-/ Bridge Master Queue Parameter Setting Section
//-/ =================================================================

// Name:         MSTR_COMPOSER_POPULATED
// Default:      1 (MASTER_POPULATED)
// Values:       0, 1
// Enabled:      MASTER_POPULATED
// 
// Indicates that inbound request is composed if this parameter is turned on
`define MSTR_COMPOSER_POPULATED


// Name:         CC_XADMX_CLIENT0_QUEUE_HDP
// Default:      4
// Values:       4 8 16 32 64 128 256
// Enabled:      MASTER_POPULATED
// 
// Indicates that bridge's master response HEADER FIFO queue size
`define CC_XADMX_CLIENT0_QUEUE_HDP 4


`define CC_XADMX_CLIENT0_QUEUE_HPW 2


`define CC_XADMX_CLIENT0_QUEUE_HCW 3


`define AMBA_DECOMPOSER_DEF_DEPTH_FACTOR 2


// Name:         CC_XADMX_CLIENT0_QUEUE_DDP
// Default:      34 ((MASTER_BUS_DATA_WIDTH <= PCIE_CORE_DATA_BUS_WD) ? 
//               (((AMBA_DECOMPOSER_DEF_DEPTH_FACTOR*CX_MAX_MTU)/(CX_NW*4))+2) : 
//               (((AMBA_DECOMPOSER_DEF_DEPTH_FACTOR*CX_MAX_MTU)/(CC_MSTR_NW*4))+2))
// Values:       -2147483648, ..., 2147483647
// Enabled:      MASTER_POPULATED
// 
// Indicates that bridge's master response DATA FIFO queue size
`define CC_XADMX_CLIENT0_QUEUE_DDP 34


`define CC_XADMX_CLIENT0_QUEUE_DPW 6


`define CC_XADMX_CLIENT0_QUEUE_DCW 6


`define CC_MSTR_MTU_ENCODED 3'h1


`define CC_MSTR_RDREQ_ENCODED 3'h1


// `define AHB_MULTIFUNCTION_ENABLED


`define AXI_MULTIFUNCTION_ENABLED


`define AMBA_MULTIFUNCTION_ENABLED


// Name:         CC_AMBA_ATS_NW
// Default:      0 (CX_ATS_ENABLE)
// Values:       0, 1
// Enabled:      CX_ATS_ENABLE
// 
// Support ATS NW bit with AMBA
// `define CC_AMBA_ATS_NW


// Name:         CC_MSTR_MISC_INFO_REQID
// Default:      1
// Values:       0, 1
// 
// Include ReqID in Misc Info
`define CC_MSTR_MISC_INFO_REQID


// Name:         CC_MSTR_MISC_INFO_TAG
// Default:      1
// Values:       0, 1
// 
// Include Tag in Misc Info
`define CC_MSTR_MISC_INFO_TAG


// Name:         MSTR_EXT_MISC_INFO_WD
// Default:      25 ((CC_MSTR_MISC_INFO_REQID || CC_MSTR_MISC_INFO_TAG || 
//               CX_AMBA_ARI_OR_IOV || CC_AMBA_ATS_NW) ? CC_MSTR_MISC_INFO_REQID*16 + 
//               CC_MSTR_MISC_INFO_TAG*8 + CX_AMBA_ARI_OR_IOV*CX_NFUNC_WD + 
//               CX_SRIOV_ENABLE*CX_NVFUNC_WD + CC_AMBA_ATS_NW : 24)
// Values:       -2147483648, ..., 2147483647
// 
// extended misc_info port width. This parameter determines the amount of 
//  extended misc_info transported to the AMBA master interface. 
//  Used for ReqID and iTAG, in all configurations. 
//  Used for pf in IOV/ARI configurations. 
//  Used for vf,vfactive in IOV configurations.
`define MSTR_EXT_MISC_INFO_WD 25


`define CC_XADMX_MSTR_DECOMPOSER_DATAQ_WD 129


`define CC_XADMX_SLV_DECOMPOSER_DATAQ_WD 129


`define CC_RADMX_TRGT1_REQ_HDR_WD 65
// AXI_POPULATED    -> mem_type
// CX_TPH_ENABLE    -> TPH
// FLT_Q_PRFX_WIDTH -> TLP Prefix


`define CC_RADMX_DECOMPOSER_HDRQ_WD 150
//parameter HDRQ_WIDTH            = REQ_PKT_HDR_WD +              // pkt_hdr
//REQ_PKT_ADDR_WD +             // pkt_addr,
//OUT_TAG_PW +                  // pkt_hdr_tid,
//OUT_PKT_LEN_PW +              // pkt_hdr_byte_len,
//1 +                           // pkt_hdr_ep,
//8 +                           // pkt_hdr_byte_en,
//1 +                           // pkt_bad_eot,
//8 +                           // pkt_be_ctrl
//11+                           // pkt_data_len
//3;                            // Virtual Channel


`define CC_RADMX_DECOMPOSER_DATAQ_WD 129


// Name:           CC_RADMX_DECOMPOSER_HDRQ_DP
// Default:        4
// Values:         4, ..., 512
// Enabled:        MASTER_POPULATED
// Parameter Type: Performance Setting
// 
// Specifies AHB Master Request Header FIFO Queue depth in words. 
//  The word width is approximately CC_MSTR_BUS_ADDR_WIDTH + log2[CC_MAX_MSTR_TAGS] + log2[CC_MSTR_MTU] + 60 + 2 (if 
//  multifunction enabled) 
//  For more details, see the "AHB Bridge Module" chapter in the Databook.
`define CC_RADMX_DECOMPOSER_HDRQ_DP 4


`define CC_RADMX_DECOMPOSER_HDRQ_PW 2


`define CC_RADMX_DECOMPOSER_HDRQ_CW 3


// Name:           CC_RADMX_DECOMPOSER_DATAQ_DP
// Default:        34 ((MASTER_POPULATED) ? (MASTER_BUS_DATA_WIDTH > 
//                 PCIE_CORE_DATA_BUS_WD ? 
//                 ((AMBA_DECOMPOSER_DEF_DEPTH_FACTOR*CC_MSTR_MTU)/(CC_MSTR_NW*4)+2) : ((AMBA_DECOMPOSER_DEF_DEPTH_FACTOR*CC_MSTR_MTU)/(CX_NW*4)+2)) : 
//                 4)
// Values:         -2147483648, ..., 2147483647
// Enabled:        AHB_POPULATED && MASTER_POPULATED
// Parameter Type: Performance Setting
// 
// Specifies AHB Master Request Data FIFO Queue depth in words. The word width is either CC_CORE_DATA_BUS_WD+1 or 
// CC_MSTR_BUS_DATA_WIDTH+1. The default value is sufficient for most applications.
`define CC_RADMX_DECOMPOSER_DATAQ_DP 34


`define CC_RADMX_DECOMPOSER_DATAQ_PW 6


`define CC_RADMX_DECOMPOSER_DATAQ_CW 6


`define CC_RADMX_TS_FIFO_DP 31


`define CC_RADMX_TS_DATAQ_DP 32


`define CC_RADMX_TS_DATAQ_PW 5


`define CC_RADMX_TS_DATAQ_CW 6


`define CC_RADMX_TS_DATAQ_WD 45

//-/ =================================================================
//-/ Bridge Slave Queue Parameter Setting Section
//-/ =================================================================


// Name:           CC_XADMX_CLIENT1_QUEUE_HDP
// Default:        16 ((AMBA_DECOMPOSER_DEF_DEPTH_FACTOR==2) ? ((CC_MAX_SLV_TAG >= 4) 
//                 ? CC_MAX_SLV_TAG : 4) : 4)
// Values:         4, ..., 260
// Enabled:        SLAVE_POPULATED
// Parameter Type: Performance Setting
// 
// Specifies the AXI bridge slave request Header FIFO depth in words. 
//  The word width is approximately CC_SLV_BUS_ADDR_WIDTH + 104 + log2[CX_REMOTE_MAX_TAG].
`define CC_XADMX_CLIENT1_QUEUE_HDP 16


`define CC_XADMX_CLIENT1_QUEUE_HPW 4


`define CC_XADMX_CLIENT1_QUEUE_HCW 5


// Name:           CC_XADMX_CLIENT1_QUEUE_DDP
// Default:        34 ((SLAVE_BUS_DATA_WIDTH <= PCIE_CORE_DATA_BUS_WD) ? 
//                 ((AMBA_DECOMPOSER_DEF_DEPTH_FACTOR*CC_SLV_MTU)/(CX_NW*4)+2) : 
//                 ((AMBA_DECOMPOSER_DEF_DEPTH_FACTOR*CC_SLV_MTU)/(CC_SLV_NW*4)+2))
// Values:         -2147483648, ..., 2147483647
// Enabled:        SLAVE_POPULATED
// Parameter Type: Performance Setting
// 
// Specifies the AXI bridge slave request Data FIFO depth in words. 
//  The word width is either CC_CORE_DATA_BUS_WD+1 or CC_SLV_BUS_DATA_WIDTH+1. 
//  Default Value: Approximately CC_SLV_MTU/(word width).
`define CC_XADMX_CLIENT1_QUEUE_DDP 34


`define CC_XADMX_CLIENT1_QUEUE_DPW 6


`define TMP_XADMX_CLIENT1_QUEUE_DP1 35


`define CC_XADMX_CLIENT1_QUEUE_DCW 6


`define CC_RADMX_COMPOSER_HDR_WD 18


`define CC_RADMX_ASYN_FIFO_WD 169


// Name:         SLV_EXT_MISC_INFO
// Default:      1 (CX_AMBA_ARI_OR_IOV || CC_AMBA_ATS_NW)
// Values:       0, 1
// 
// extended misc_info internal bus existence
`define SLV_EXT_MISC_INFO


// Name:         SLV_EXT_MISC_INFO_WD
// Default:      1 (SLV_EXT_MISC_INFO ? CX_NFUNC_WD*CX_AMBA_ARI_OR_IOV + 
//               CX_NVFUNC_WD*CX_SRIOV_ENABLE + CC_AMBA_ATS_NW : 3)
// Values:       -2147483648, ..., 2147483647
// 
// extended misc_info internal bus width
`define SLV_EXT_MISC_INFO_WD 1


`define CC_XADMX_CLIENT_HDR_WD 55

//parameter HDR_WIDTH         =
//FLT_Q_PRFX_WIDTH +                              // client_tlp_misc_info_tlpprfx
//SLV_EXT_MISC_INFO_WD +                              // client_tlp_ext_misc_info
//1 +                              // client_addr_align_en,
//16 +                              // client_cpl_req_id,
//3 +                              // client_cpl_status,
//1 +                              // client_cpl_bcm,
//12 +                              // client_cpl_byte_cnt,
//16 +                              // client_req_id,
//2 +                              // client_tlp_fmt,
//5 +                              // client_tlp_type,
//3 +                              // client_tlp_tc,
//1 +                              // client_tlp_td,
//2+                               // client_tlp_attr};
//Additional DMA info signals
//3+                               // client_tlp_dma_rreq (@CC_DMA_ENABLE=1)
//3;                               // client_tlp_dma_rreq_chan (@CC_DMA_ENABLE=1)


`define CC_XADMX_CLIENT0_QUEUE_HWD 136


`define CC_XADMX_CLIENT0_QUEUE_DWD 129


//parameter HDRQ_WIDTH            = REQ_PKT_HDR_WD +              // pkt_hdr
//REQ_PKT_ADDR_WD +             // pkt_addr,
//OUT_TAG_PW +                  // pkt_hdr_tid,
//OUT_PKT_LEN_PW +              // pkt_hdr_byte_len, = 13 for client1, cx_maxMtu+1 for client0
//1 +                           // pkt_hdr_ep,
//8 +                           // pkt_hdr_byte_en,
//1 +                           // pkt_bad_eot,
//11;                           // pkt_data_len


`define CC_XADMX_CLIENT1_QUEUE_HWD 141
//parameter HDRQ_WIDTH            = REQ_PKT_HDR_WD +              // pkt_hdr
//REQ_PKT_ADDR_WD +             // pkt_addr,
//OUT_TAG_PW +                  // pkt_hdr_tid,
//OUT_PKT_LEN_PW +              // pkt_hdr_byte_len, = 13 for client1, cx_maxMtu+1 for client0
//1 +                           // pkt_hdr_ep,
//8 +                           // pkt_hdr_byte_en,
//1 +                           // pkt_bad_eot,
//11;                           // pkt_data_len


`define CC_XADMX_CLIENT1_QUEUE_DWD 129


`define CC_OB_NPDCMP_RAM_DP 16


`define CC_OB_NPDCMP_RAM_ADDR_WD 4


`define CC_OB_NPDCMP_RAM_ADDRP_WD 1


`define CC_OB_NPDCMP_RAM_PTR_WD 5

//`ifdef CX_LN_ENABLE
//  inq_pkt_tlp_ln,                        1
// `endif // CX_LN_ENABLE

`define CC_OB_NPDCMP_RAM_DATA_WD_NOECC 126
//`ifdef CX_TLP_PREFIX_ENABLE
//  inq_pkt_tlp_prfx,                      (32*`CX_NPRFX)+ `CX_PRFX_PAR_WD
// `endif // CX_TLP_PREFIX_ENABLE
// `ifdef CX_TPH_ENABLE
//  inq_pkt_th,                            1
//  inq_pkt_ph,                            2
//  inq_pkt_st,                            8
// `endif // CX_TPH_ENABLE
// `ifdef CX_ATU_CTRL_EN
//  inq_pkt_atu_bypass,                    1
// `endif // CX_ATU_CTRL_EN
// `ifdef ATS_TX_ENABLE
//  inq_pkt_ats,                           2
//  inq_pkt_nw,                            1
// `endif // ATS_TX_ENABLE
// `ifdef CX_SRIOV_ENABLE
//  inq_pkt_vfunc_num,                     `CX_NVFUNC_WD-1
//  inq_pkt_vfunc_active,                  1
// `endif // CX_SRIOV_ENABLE
// `ifdef AXI_MULTIFUNCTION_ENABLED
//  inq_pkt_func_num,                      `CX_NFUNC_WD
// `endif // AXI_MULTIFUNCTION_ENABLED
//  inq_pkt_last_tlp,                      1
//  inq_pkt_dcmp_rd                        1
//  inq_pkt_serial_req,                    1
//  inq_pkt_req_byte_len,                  `CC_SLV_MTU_PW
//  inq_pkt_in_tag,                        `CC_MAX_SLV_TAG_PW
//  inq_pkt_axi_id,                        `CC_SLV_BUS_ID_WIDTH+1
//  inq_pkt_byte_len,                      `CC_SLV_MTU_PW < `CC_SLV_RD_REQ_SIZE_PW ? `CC_SLV_MTU_PW : `CC_SLV_RD_REQ_SIZE_PW
//  inq_pkt_tc,                            3
//  inq_pkt_ep,                            1
//  inq_pkt_attr,                          2+`CX_IDO_ENABLE
//  inq_pkt_byte_en,                       8
//  inq_pkt_fmt,                           2
//  inq_pkt_type,                          5
//  inq_pkt_addr,                          `SLAVE_BUS_ADDR_WIDTH
//  inq_pkt_data                           32


`define CC_OB_NPDCMP_RAM_DATA_WD 126


// Name:         CC_RADMX_COMPOSER_SEG_DP
// Default:      18 (SLAVE_BUS_DATA_WIDTH <= PCIE_CORE_DATA_BUS_WD) ? 
//               ((CC_SLV_RD_REQ_SIZE/(4*CX_NW))+2) : ((CC_SLV_RD_REQ_SIZE/(4*CC_SLV_NW))+2)
// Values:       -2147483648, ..., 2147483647
// 
// Depth of each segment including 
//  extra 2 depth for ECRC pass through and alignment
`define CC_RADMX_COMPOSER_SEG_DP 18


`define CC_RADMX_COMPOSER_DATAQ_DP 288


`define CC_RADMX_COMPOSER_DATAQ_PW 9


`define CC_RADMX_COMPOSER_DATAQ_WD 133


`define CC_SLV_DECOMP_TAG_DP 16


`define CC_SLV_DECOMP_TAG_DP_PW 4


`define CC_SLV_DECOMP_TAG_DP_CW 5


`define CC_SLV_DECOMP_TAG_LOW 0


`define CC_SLV_DECOMP_TAG_HIGH 15


`define CC_CLIENT1_TS_DATAQ_DP 16


`define CC_CLIENT1_TS_DATAQ_PW 4


`define CC_CLIENT1_TS_DATAQ_CW 5


`define CC_CLIENT1_TS_DATAQ_WD 53

//`define CC_GMX_REQ_SIZE 2


`define AMBA_RAM_EXTERNAL


`define AMBA_RDDATA_ALIGNMENT_EN


`define AMBA_WRDATA_ALIGNMENT_EN


// Name:           MSTR_FIXED_SIZE_ENABLE
// Default:        0 ((((CC_MSTR_BURST_LEN==8) && (MASTER_BUS_DATA_WIDTH==64)) || 
//                 (CC_MSTR_BURST_LEN < MASTER_BUS_DATA_WIDTH/8)) ? 1 : 0)
// Values:         0, 1
// Enabled:        (AXI_POPULATED && MASTER_POPULATED && !((CC_MSTR_BURST_LEN==8) && 
//                 (MASTER_BUS_DATA_WIDTH==64)))
// Parameter Type: Performance Setting
// 
// Specifies that the AXI master interface will (under certain conditions) do a single bus-wide access when doing narrow 
// read transfers rather than multiple byte-wide accesses. When you set CC_MSTR_BURST_LEN to < MASTER_BUS_DATA_WIDTH/8, then 
// MSTR_FIXED_SIZE_ENABLE=1 because the master cannot produce a sufficiently long burst of bytes. Therefore the master uses 
// dword access and not byte access for narrow or NCBE reads; which means that such accesses to non-prefetchable memory might 
// result in corrupting not-to-be-read data. 
// For more details on this and other restrictions, see the description of the CC_MSTR_BURST_LEN parameter and the 
// 'Supported AXI Transfer Sizes' section in the AXI chapter of the Databook.
// `define MSTR_FIXED_SIZE_ENABLE


// `define CC_MSTR_BURST_LEN_IS_8


// `define CC_SLV_BURST_LEN_IS_8


// Name:           MSTR_SUB_BUS_SIZE_READ_ENABLE
// Default:        0
// Values:         0, 1
// Enabled:        AXI_POPULATED && MASTER_POPULATED
// Parameter Type: Performance Setting
// 
// Specifies that the master performs a narrow read transfer in one beat when the PCIe request size is a power of two and 
// the AXI address is AXI transfer-size aligned. 
// For more details, see "Supported AXI Transfer Sizes" section of the Databook. 
//  
// Note: AXI only.
// `define MSTR_SUB_BUS_SIZE_READ_ENABLE


// Name:           MSTR_SUB_BUS_SIZE_WRITE_ENABLE
// Default:        0
// Values:         0, 1
// Enabled:        AXI_POPULATED && MASTER_POPULATED
// Parameter Type: Performance Setting
// 
// Specifies that the master performs a narrow write transfer in one beat when the PCIe request size is a power of two and 
// the AXI address is AXI transfer-size aligned. For more details, see "Supported AXI Transfer Sizes" section of the 
// Databook. 
//  
// Note: AXI only.
// `define MSTR_SUB_BUS_SIZE_WRITE_ENABLE


// Name:         CC_RESPONSE_SIDEBAND_DRIVER_ENABLE
// Default:      1 (MASTER_POPULATED && AMBA_POPULATED)
// Values:       0, 1
// Enabled:      MASTER_POPULATED && AMBA_POPULATED
// 
// When this parameter is set the attr, TC, function number and 
//  posted/non-posted attributes of responses on the AMBA master interface are 
//  taken from the corresponding request. When it is clear the response 
//  information must be supplied on the response misc_info sideband bus
`define CC_RESPONSE_SIDEBAND_DRIVER_ENABLE



// Name:           CC_AXI_NCBE_NODECOMP
// Default:        0 (!MSTR_SUB_BUS_SIZE_READ_ENABLE && MSTR_FIXED_SIZE_ENABLE)
// Values:         0, 1
// Enabled:        MASTER_POPULATED && AXI_POPULATED
// Parameter Type: Performance Setting
// 
// Specifies that the master does not decompose NCBE read requests into a stream of single-byte requests. For more details, 
// see 'Non Contiguous Byte Enable (NCBE) Support' section of the Databook. 
//  - 0: Enables read NCBE decomposition into single-byte requests. 
//  - 1: Disables read NCBE decomposition into single-byte requests.
// `define CC_AXI_NCBE_NODECOMP


// `define CC_AXI_NCBE_PREFETCH


// Name:         PARERR_NULLIFY_ENABLE
// Default:      0
// Values:       0, 1
// Enabled:      0
// 
// Indicates that a parity error detected will nullify the transfer
// `define PARERR_NULLIFY_ENABLE


// Name:         DBI_MSB_SELECT
// Default:      1 (DBI_4SLAVE_POPULATED || SHARED_DBI_ENABLED)
// Values:       0, 1
// Enabled:      ((DBI_4SLAVE_POPULATED || SHARED_DBI_ENABLED))
// 
// Indicates that the bit that select CDM/ELBI access is the valid most significant one
`define DBI_MSB_SELECT


`define EXTRA_DBI_ADDR_BIT 1


// Name:         DMA_ATU_VIEWPORT_SEL_VAL
// Default:      0 (CC_UNROLL_EN?0:1)
// Values:       0, 1
// Enabled:      0
// 
// Indicates DMA/ATU has Viewport Register Access
`define DMA_ATU_VIEWPORT_SEL_VAL 0


// Name:         VALID_DBI_ADDR_WD
// Default:      33 (CX_ARI_ENABLE ? [<functionof> 32 + EXTRA_DBI_ADDR_BIT] : 
//               (!(DMA_ATU_VIEWPORT_SEL_VAL) || DBI_MULTI_FUNC_BAR_EN) ? [<functionof> 21 + 
//               EXTRA_DBI_ADDR_BIT] : ((CX_NFUNC == 1) ? [<functionof> 13 
//               +EXTRA_DBI_ADDR_BIT] : [<functionof> 20 + EXTRA_DBI_ADDR_BIT]))
// Values:       13, ..., 33
// Enabled:      0
// 
// Indicates the valid DBI address width
`define VALID_DBI_ADDR_WD 33


// Name:         RD_REQ_OVERSIZE_DETECT_EN
// Default:      1 ((AMBA_INTERFACE!=0))
// Values:       0, 1
// 
// Indicates that native controller is enabled to detect the oversize read for AXI bridge
`define RD_REQ_OVERSIZE_DETECT_EN


// Name:           CC_COMPOSER_RAM_LATENCY
// Default:        1 Cycle
// Values:         0 Cycles (0), 1 Cycle (1)
// Enabled:        AMBA_INTERFACE!=0
// Parameter Type: Performance Setting
// 
// Response Composer RAM latency value. This value represents the CYCLE delay that the RAM module requires.
`define CC_COMPOSER_RAM_LATENCY 1


// Name:           CC_DECOMPOSER_TAG_REGOUT
// Default:        1
// Values:         0, 1
// Enabled:        AMBA_INTERFACE!=0
// Parameter Type: Performance Setting
// 
// Decomposer TAG consume interface register output register.
`define CC_DECOMPOSER_TAG_REGOUT 1


// Name:           CC_COMPOSER_REGIN
// Default:        1
// Values:         0, 1
// Enabled:        AMBA_INTERFACE!=0
// Parameter Type: Performance Setting
// 
// Response Composer receive packet input interface register stage.
`define CC_COMPOSER_REGIN 1

//-/ =================================================================
//-/ AHB Section
//-/ =================================================================



`define CC_GM_AHB_SIZE 4


// Name:         DIRECT_AHB_ID_MAP
// Default:      0
// Values:       0, 1
// 
// Indicates that a slave interface has ID that is directed mapped to PCIe TAG
// `define DIRECT_AHB_ID_MAP



`define CC_MSTR_INTBEATCNT_PW 5


`define CC_MSTR_INT1K_CHK_PW 7


`define CC_MSTR_BEATCNT_PW 7


`define CC_DBI_NUM_MSTRS_WD 1


// Name:         CC_XORDER_RULE_ENFORCE_ENABLE
// Default:      false
// Values:       false (0), true (1)
// Enabled:      SLAVE_POPULATED
// 
// Indicates that AMBA bridge will enable the order rule of completion not bypass posted
// `define CC_XORDER_RULE_ENFORCE_ENABLE


// Name:         SLV_ODD_BYTE_CFG_ENABLE
// Default:      0 ((AHB_POPULATED && SLAVE_POPULATED) ? 1 : 0)
// Values:       -2147483648, ..., 2147483647
// 
// Enable support for CFG Writes of odd byte counts for 
//  INCR/Unspec in AHB Slave & DBI Slave
`define SLV_ODD_BYTE_CFG_ENABLE 0


// `define INC_SLV_ODD_BYTE_CFG


// Name:         SLV_MISC_INFO_PW
// Default:      25 ((AMBA_INTERFACE == 1) ? ((CX_NFUNC != 1) ? 29 : 26) : 
//               ((CX_NFUNC != 1) ? 25 : 22))
// Values:       -2147483648, ..., 2147483647
// 
// misc_info port width
`define SLV_MISC_INFO_PW 25


// Name:         SLV_MISC_INFO_WD
// Default:      26 (SLV_MISC_INFO_PW + 2*ATS_TX_ENABLE + 
//               SLV_EXT_MISC_INFO*SLV_EXT_MISC_INFO_WD)
// Values:       -2147483648, ..., 2147483647
// 
// misc_info internal bus width
`define SLV_MISC_INFO_WD 26


// Name:         SLV_RESP_MISC_INFO_PW
// Default:      14 ((AMBA_POPULATED && (CX_NFUNC != 1)) ?  14 : 11)
// Values:       -2147483648, ..., 2147483647
// 
// misc_info port width
`define SLV_RESP_MISC_INFO_PW 14


// Name:         SLV_RESP_MISC_INFO_WD
// Default:      14 ((ATS_RX_ENABLE_VALUE==1) ? [ <functionof> SLV_RESP_MISC_INFO_PW 
//               + 2 ] : SLV_RESP_MISC_INFO_PW)
// Values:       -2147483648, ..., 2147483647
// 
// misc_info internal bus width
`define SLV_RESP_MISC_INFO_WD 14


// Name:         MSTR_MISC_INFO_PW
// Default:      48 (CX_TAG_SIZE + 16 + CC_MSTR_MISC_INFO_REQID*16 + 
//               CC_MSTR_MISC_INFO_TAG*8)
// Values:       -2147483648, ..., 2147483647
// 
// misc_info port width
`define MSTR_MISC_INFO_PW 48

//ie. extended misc info signals that are not part of the main misc info bus.
//Since reqid and tag are defined width they are integrated into main misc
//info bus and are not included here

// Name:         MSTR_EXT_MISC_INFO_SPLIT
// Default:      1 (CX_AMBA_ARI_OR_IOV || CC_AMBA_ATS_NW)
// Values:       0, 1
// 
// master extended misc_info split busses exist,
`define MSTR_EXT_MISC_INFO_SPLIT


// Name:         MSTR_EXT_MISC_INFO
// Default:      1 (CC_MSTR_MISC_INFO_REQID || CC_MSTR_MISC_INFO_TAG || 
//               MSTR_EXT_MISC_INFO_SPLIT)
// Values:       0, 1
// 
// master extended misc_info internal bus existence
`define MSTR_EXT_MISC_INFO


// Name:         MSTR_MISC_INFO_WD
// Default:      50 (AXI_POPULATED + MSTR_MISC_INFO_PW + ATS_TX_ENABLE*2 + 
//               MSTR_EXT_MISC_INFO_WD - (CC_MSTR_MISC_INFO_REQID*16 + 
//               CC_MSTR_MISC_INFO_TAG*8))
// Values:       -2147483648, ..., 2147483647
// 
// misc_info internal bus width
`define MSTR_MISC_INFO_WD 50


// Name:         MSTR_RESP_MISC_INFO_PW
// Default:      13
// Values:       -2147483648, ..., 2147483647
// 
// misc_info port width
`define MSTR_RESP_MISC_INFO_PW 13


// Name:         MSTR_RESP_MISC_INFO_WD
// Default:      13 ((ATS_RX_ENABLE_VALUE==1) ? [ <functionof> 
//               MSTR_RESP_MISC_INFO_PW + 2 ]: MSTR_RESP_MISC_INFO_PW)
// Values:       -2147483648, ..., 2147483647
// 
// misc_info internal bus width
`define MSTR_RESP_MISC_INFO_WD 13


// `define DBI_EXTERNAL


// Name:         SHARED_DBI_ADDR_MASK
// Default:      0xffff0000
// Values:       0x0, ..., 0xffffffff
// Enabled:      (((AMBA_INTERFACE==2) || (AMBA_INTERFACE==3)))
// 
// a mask is defined to indicate the address range that an AXI address can be decoded as a DBI request instead of outbound 
// request 
//  This parameter is used in reference design
`define SHARED_DBI_ADDR_MASK 32'hffff0000


// Name:         SHARED_DBI_ADDR
// Default:      0x10000000
// Values:       0x0, ..., 0xffffffff
// Enabled:      (((AMBA_INTERFACE==2) || (AMBA_INTERFACE==3)))
// 
// This is the starting address location for shared DBI access 
//  This parameter is used in reference design
`define SHARED_DBI_ADDR 32'h10000000


// Name:         MULTI_FUNC_VC_ID_ENABLE
// Default:      1 ((CX_NFUNC >0) && (CX_NVC >0))
// Values:       0, 1
// Enabled:      (((AMBA_INTERFACE==2) || (AMBA_INTERFACE==3)))
// 
// This parameter is designed to enable the ID extension of multiple functions and multiple VC 
//  This parameter is used in reference design
`define MULTI_FUNC_VC_ID_ENABLE


// Name:         CX_FLT_Q_ADDR_GTR_MSTR
// Default:      1 ((AMBA_INTERFACE != 0) && (FLT_Q_ADDR_WIDTH > 
//               MASTER_BUS_ADDR_WIDTH))
// Values:       0, 1
// 
// Set when FLT_Q_ADDR_WIDTH is > MASTER_BUS_ADDR_WIDTH. Used to filter 
//  invalid addresses in RC
`define CX_FLT_Q_ADDR_GTR_MSTR


// Name:           CX_MAX_MTU_
// Default:        256 (CX_MAX_MTU)
// Values:         0, ..., 65535
// Enabled:        0
// Parameter Type: Feature Setting
// 
// This parameter is a read-only reflection of the CX_MAX_MTU parameter.
`define CX_MAX_MTU_ 16'd256


// Name:           CX_MAX_TAG_
// Default:        32 (CX_MAX_TAG)
// Values:         2 4 8 16 32 64 128 256 512 768
// Enabled:        0
// Parameter Type: Feature Setting
// 
// This parameter is a read-only reflection of the CX_MAX_TAG parameter.
`define CX_MAX_TAG_ 31


// `define GRACEFUL_RESET_ENABLE


`define DISABLE_DBI_WHEN_FLUSHING


// `define CC_AMBA_LINK_TIMEOUT_ENABLE


// `define GRACEFUL_RESET_LOGIC_ENABLE


`define LINK_TIMEOUT_PERIOD_WIDTH 8


`define CC_LINK_TIMEOUT_PERIOD_DEFAULT 8'h32


`define MPCIE_CC_LINK_TIMEOUT_PERIOD_DEFAULT 8'h19


`define CC_LINK_TIMEOUT_ENABLE_DEFAULT 1'h0


// `define SIM_DEBUG_ONLY_FAST_TIMEOUT_MODE

//-----------------------------------------------
//--- Master completion buffer parameters
//-----------------------------------------------

`define CC_MSTR_MAX_CPL_DATA_SEG_DP 258


`define CC_MSTR_MIN_CPL_DATA_SEG_DP 18


`define CC_MSTR_CPL_DATA_SEG_DP 18


`define CC_MSTR_CPL_SEG_BUF_DP 576


`define CC_MSTR_CPL_SEG_BUF_ADDR_WD 10


`define CC_MSTR_CPL_SEG_RAW_DATA_WD 128


`define CC_MSTR_CPL_SEG_DATA_WD_GT_32BITS


`define CC_MSTR_CPL_SEG_DATA_NUM_DWORDS 4


`define CC_MSTR_CPL_SEG_DATA_NUM_DWORDS_LOG2 2


`define CC_MSTR_CPL_SEG_DATA_NUM_BYTES 16


`define CC_MSTR_CPL_SEG_DATA_NUM_BYTES_LOG2 4


`define CC_MSTR_CPL_SEG_DATA_SIZE_ENC 4


// Name:         CC_MSTR_DATA_BUS_PAR_BITS
// Default:      0 (CX_RAS_EN ? (MASTER_BUS_DATA_WIDTH/CX_RAS_PROT_RANGE) : 0)
// Values:       -2147483648, ..., 2147483647
// 
// Number of master data parity bits
`define CC_MSTR_DATA_BUS_PAR_BITS 0


// Name:         CC_PCIE_CORE_DATA_BUS_PAR_BITS
// Default:      0 (CX_RAS_EN ? (PCIE_CORE_DATA_BUS_WD/CX_RAS_PROT_RANGE) : 0)
// Values:       -2147483648, ..., 2147483647
// 
// Number of PCIe controller data parity bits
`define CC_PCIE_CORE_DATA_BUS_PAR_BITS 0


// Name:         CC_MSTR_RSP_BYTE_WD
// Default:      8 (((CX_RASDP==0)&&(CX_RASDP_RAM_PROT==0))? 0: 1 ? 9 : 8)
// Values:       -2147483648, ..., 2147483647
// 
// Master response byte width with and without parity bit
`define CC_MSTR_RSP_BYTE_WD 8


// Name:         CC_MSTR_RSP_DATA_WD
// Default:      128 (CX_RAS_EN ? MASTER_BUS_DATA_WIDTH + CC_MSTR_DATA_BUS_PAR_BITS 
//               : MASTER_BUS_DATA_WIDTH)
// Values:       -2147483648, ..., 2147483647
// 
// Master completion data bus width with and without parity bits
`define CC_MSTR_RSP_DATA_WD 128


// Name:         CC_MSTR_CPL_DATA_WD
// Default:      128 (CX_RAS_EN ? PCIE_CORE_DATA_BUS_WD + 
//               CC_PCIE_CORE_DATA_BUS_PAR_BITS : PCIE_CORE_DATA_BUS_WD)
// Values:       -2147483648, ..., 2147483647
// 
// Master completion PCIe controller data bus width with and without parity bits
`define CC_MSTR_CPL_DATA_WD 128


// Name:         CC_MSTR_CPL_SEG_DATA_WD
// Default:      128 (CC_MSTR_DATA_WD_LT_CORE_DATA_WD ? CC_MSTR_CPL_DATA_WD : 
//               CC_MSTR_RSP_DATA_WD)
// Values:       -2147483648, ..., 2147483647
// 
// Master completion segment data bus width with and without parity bits
`define CC_MSTR_CPL_SEG_DATA_WD 128


// Name:         CC_MSTR_CPL_SEG_DATA_WD_NP
// Default:      128 (CC_MSTR_DATA_WD_LT_CORE_DATA_WD ? PCIE_CORE_DATA_BUS_WD : 
//               MASTER_BUS_DATA_WIDTH)
// Values:       -2147483648, ..., 2147483647
// 
// Master completion segment data bus width with and without parity bits
`define CC_MSTR_CPL_SEG_DATA_WD_NP 128


// Name:         CC_MSTR_CPL_SEG_BUF_DATA_WD_NOECC
// Default:      133 (CC_MSTR_DATA_WD_LT_CORE_DATA_WD ? (PCIE_CORE_DATA_BUS_WD + 
//               CX_NW + 1) : (MASTER_BUS_DATA_WIDTH + CC_MSTR_NW + 1))
// Values:       -2147483648, ..., 2147483647
// 
// Master completion segment data buffer data bus width
`define CC_MSTR_CPL_SEG_BUF_DATA_WD_NOECC 133


`define CC_MSTR_CPL_SEG_BUF_DATA_WD 133


// Name:         CC_MSTR_RSP_INTF_WD
// Default:      191 (1 +CC_MAX_MSTR_TAG_PW +CC_MSTR_CPL_SEG_DATA_NUM_BYTES + 
//               CC_MSTR_CPL_SEG_DATA_WD +2*(AXI_ENABLED) + 2 +4 
//               +CC_MSTR_RESP_TLP_PREFIX_ENABLE*((32*CX_NPRFX)+ CX_PRFX_PAR_WD) +1 +CC_MAX_MSTR_TAGS+ 
//               CX_LN_ENABLE)
// Values:       -2147483648, ..., 2147483647
// 
// Master response interface signal data width 
//  {svalid, sid, sbyte_en, sdata, sresp, cpl_stat, np_not_p, wr_not_rd, ep, bad_eot, slast, last_pkt}
`define CC_MSTR_RSP_INTF_WD 191


`define CC_MSTR_RSP_INTF_WD_NP 191


// Name:         CC_MCB_A2C_FIFO_DEPTH
// Default:      12 (AHB_POPULATED ? (4096/(4*CC_MSTR_NW)) : 12)
// Values:       -2147483648, ..., 2147483647
// Enabled:      MASTER_POPULATED && AHB_POPULATED
// 
// AMBA to Core Clock Crossing FIFO depth
`define CC_MCB_A2C_FIFO_DEPTH 12


// Name:         CC_MCB_A2C_FIFO_ADDR_WD
// Default:      4 ([calc_log2 CC_MCB_A2C_FIFO_DEPTH])
// Values:       -2147483648, ..., 2147483647
// Enabled:      MASTER_POPULATED && AHB_POPULATED
// 
// AMBA to Core Clock Crossing FIFO address width
`define CC_MCB_A2C_FIFO_ADDR_WD 4


// Name:         CC_AHB_MSTR_CPL_QUEUE_DP
// Default:      64 (AHB_CLK_DIFF_ENABLE ? 8 : (8192/128))
// Values:       -2147483648, ..., 2147483647
// Enabled:      MASTER_POPULATED
// 
// Master AHB completion header queue depth(2^n)
`define CC_AHB_MSTR_CPL_QUEUE_DP 64


// Name:         CC_AXI_MSTR_CPL_QUEUE_DP
// Default:      32 (CC_DMA_ENABLE ? CX_REMOTE_MAX_TAGS : ((CX_REMOTE_MAX_TAGS >= 8) 
//               ? 8 : ((CX_REMOTE_MAX_TAGS==1) ? 2 : CX_REMOTE_MAX_TAGS)))
// Values:       -2147483648, ..., 2147483647
// Enabled:      MASTER_POPULATED
// 
// Master AXI completion header queue depth (2^n)
`define CC_AXI_MSTR_CPL_QUEUE_DP 32


// Name:         CC_MSTR_CPL_QUEUE_DP
// Default:      32 (AHB_POPULATED ? CC_AHB_MSTR_CPL_QUEUE_DP : 
//               CC_AXI_MSTR_CPL_QUEUE_DP)
// Values:       -2147483648, ..., 2147483647
// Enabled:      MASTER_POPULATED
// 
// Master completion header queue depth 
//  For AHB only its set to greater than the max number of split completions to avoid back pressuring the master, i.e. 
//  prevents busy cycles on the master interface. 
//  To avoid back pressuring the master for AHB + DMA configurations it is set to the greater of the max number of 
//  outstanding DMA NP requests(LL elements pushed to CPL header queue) or 
//  the max number of split completions. 
//  For AXI only it scales with the number of data segments, capped at a maximum depth of 8. A segment full condition may 
//  fire if multiple 
//  short packets are received while transmitting a long packet or if the fabric interleaves responses and multiple 
//  buffers fill while transmitting a completion. 
//  For AXI+DMA configurations it is set to the max number of outstanding DMA NP requests to prevent DMA CPLs blocking a 
//  Rx CPL when DMA P requests are blocked on Client0. 
//  Allowing at least one Rx CPL to be accepted triggers the DMA P watchdog timer, enabing Rx requests to progress to the 
//  application and avoid deadlock.
`define CC_MSTR_CPL_QUEUE_DP 32


// Name:         CC_MSTR_CPL_QUEUE_DP_LOG2
// Default:      5 ([calc_log2 CC_MSTR_CPL_QUEUE_DP])
// Values:       -2147483648, ..., 2147483647
// 
// log2(CC_MSTR_CPL_QUEUE_DP)
`define CC_MSTR_CPL_QUEUE_DP_LOG2 5


// Name:         CC_AXI_MSTR_MAX_OUTSTD_P_REQ
// Default:      64 (RADM_MAX_OUTSTD_P_REQ)
// Values:       -2147483648, ..., 2147483647
// Enabled:      MASTER_POPULATED
// 
// Maximum number of outstanding AXI master posted write requests 
// The max value is 2^n aligned.
`define CC_AXI_MSTR_MAX_OUTSTD_P_REQ 64


// Name:         CC_AXI_MSTR_MAX_OUTSTD_P_REQ_LOG2
// Default:      6 ([calc_log2 (RADM_MAX_OUTSTD_P_REQ)])
// Values:       -2147483648, ..., 2147483647
// 
// log2 (CC_AXI_MSTR_MAX_OUTSTD_P_REQ)
`define CC_AXI_MSTR_MAX_OUTSTD_P_REQ_LOG2 6


// Name:         CC_SLV_DATA_BUS_PAR_BITS
// Default:      0 (CX_RAS_EN ? (SLAVE_BUS_DATA_WIDTH/CX_RAS_PROT_RANGE) : 0)
// Values:       -2147483648, ..., 2147483647
// 
// Number of slave data parity bits
`define CC_SLV_DATA_BUS_PAR_BITS 0


// Name:         CC_SLV_ADDR_BUS_PAR_BITS
// Default:      0 (CX_RAS_EN ? (SLAVE_BUS_ADDR_WIDTH/CX_RAS_PROT_RANGE) : 0)
// Values:       -2147483648, ..., 2147483647
// 
// Number of slave address parity bits
`define CC_SLV_ADDR_BUS_PAR_BITS 0


// Name:           CC_SLV_NUM_OUTSTND_CPU_WR_REQ
// Default:        32
// Values:         2 4 8 16 32 64
// Enabled:        ((AMBA_INTERFACE==2) || (AMBA_INTERFACE==3))
// Parameter Type: Feature Setting
// 
// Specifies the maximum number of outstanding AXI Slave NP Write Requests. 
//  
// To enable P writes to pass NP writes (and avoid deadlocks by allowing peer-to-peer posted traffic to flow freely 
// through the RC); the controller uses a "Slave Non-Posted Write Set-Aside Buffer" to offload the NP writes from the AXI Write 
// Channel when NP reads are stalled. Offloading NP writes thereby avoids blocking of P on the AXI Write Channel. You configure 
// the maximum number of offloaded NP writes using this parameter.
`define CC_SLV_NUM_OUTSTND_CPU_WR_REQ 32


// Name:         CC_SLV_NUM_OUTSTND_CPU_WR_REQ_LOG2
// Default:      5 ([calc_log2 CC_SLV_NUM_OUTSTND_CPU_WR_REQ])
// Values:       -2147483648, ..., 2147483647
// Enabled:      ((AMBA_INTERFACE==2) || (AMBA_INTERFACE==3))
// 
// log2 (CC_SLV_NUM_OUTSTND_CPU_WR_REQ)
`define CC_SLV_NUM_OUTSTND_CPU_WR_REQ_LOG2 5


// Name:         CC_SLV_NUM_OUTSTND_WR_REQ
// Default:      32 ((CC_SLV_NUM_OUTSTND_CPU_WR_REQ<=32) ? 32 : 64)
// Values:       2 4 8 16 32 64
// Enabled:      ((AMBA_INTERFACE==2) || (AMBA_INTERFACE==3))
// 
// 2^n maximum number of outstanding AXI Slave write requests
`define CC_SLV_NUM_OUTSTND_WR_REQ 32


// Name:         CC_SLV_NUM_OUTSTND_WR_REQ_LOG2
// Default:      5 ([calc_log2 CC_SLV_NUM_OUTSTND_WR_REQ])
// Values:       -2147483648, ..., 2147483647
// 
// log2 (CC_SLV_NUM_OUTSTND_WR_REQ)
`define CC_SLV_NUM_OUTSTND_WR_REQ_LOG2 5


// Name:         CC_WR_CH_P_REQ_QUEUE_DP
// Default:      64 (RADM_MAX_OUTSTD_P_REQ)
// Values:       -2147483648, ..., 2147483647
// 
// Master AXI Posted Response header queue depth
`define CC_WR_CH_P_REQ_QUEUE_DP 64


// Name:         CC_WR_CH_P_REQ_QUEUE_DP_LOG2
// Default:      6 ([calc_log2 (CC_AXI_MSTR_MAX_OUTSTD_P_REQ)])
// Values:       -2147483648, ..., 2147483647
// 
// log2(CC_WR_CH_P_REQ_QUEUE_DP)
`define CC_WR_CH_P_REQ_QUEUE_DP_LOG2 6


// Name:         CC_WR_CH_NP_RSP_QUEUE_DP
// Default:      32 (AXI_POPULATED ? CC_MAX_MSTR_TAGS_AXI : CC_MAX_MSTR_TAGS_AHB)
// Values:       -2147483648, ..., 2147483647
// 
// Master AXI Non-Posted Write Response queue depth
`define CC_WR_CH_NP_RSP_QUEUE_DP 32


// Name:         CC_WR_CH_NP_RSP_QUEUE_DP_LOG2
// Default:      5 ([calc_log2 (CC_MAX_MSTR_TAGS)])
// Values:       -2147483648, ..., 2147483647
// 
// log2(CC_WR_CH_NP_RSP_QUEUE_DP)
`define CC_WR_CH_NP_RSP_QUEUE_DP_LOG2 5


// Name:         CC_DEVICE_TYPE_IS_RC
// Default:      0
// Values:       0, 1
// 
// Device type is RC
// `define CC_DEVICE_TYPE_IS_RC


// Name:         CC_PRESP_EN
// Default:      1 (CC_DMA_ENABLE || TRGT1_POPULATE || CX_MSI_CTRL_EN)
// Values:       0, 1
// 
// Enables the posted response tracker
`define CC_PRESP_EN


// Name:         CC_PRESP_RTIME_EN
// Default:      1 (MSTR_CLK_DIFF_ENABLE && (CC_DMA_ENABLE || TRGT1_POPULATE || 
//               CX_MSI_CTRL_EN))
// Values:       0, 1
// 
// Enables the retiming of the response tracker
`define CC_PRESP_RTIME_EN


// Name:         CC_AXI_LOCK_WIDTH
// Default:      2 ((AMBA_INTERFACE==3) ? 1 : 2)
// Values:       -2147483648, ..., 2147483647
// 
// Width of AXI LOCK bus
`define CC_AXI_LOCK_WIDTH 2


// Name:         CC_PRF_TLP_NUM_WSTRBS
// Default:      16 (CC_SLV_DATA_WD_LT_CORE_DATA_WD ? CC_CORE_DATA_BUS_WSTRB_WD: 
//               CC_SLV_BUS_WSTRB_WIDTH)
// Values:       -2147483648, ..., 2147483647
// 
// Number of byte strobes per Outbound Posted TLP Formation Data Beat
`define CC_PRF_TLP_NUM_WSTRBS 16


// Name:         CC_PRF_TLP_NUM_WSTRBS_GT_4
// Default:      1 ((CC_SLV_DATA_WD_LT_CORE_DATA_WD ? CC_CORE_DATA_BUS_WSTRB_WD: 
//               CC_SLV_BUS_WSTRB_WIDTH) > 4)
// Values:       -2147483648, ..., 2147483647
// 
// Outbound Posted TLP Formation Data Width Greater than 32 Bits
`define CC_PRF_TLP_NUM_WSTRBS_GT_4 1


// Name:         CC_PRF_TLP_DATA_WIDTH
// Default:      128 (CC_SLV_DATA_WD_LT_CORE_DATA_WD ? CC_CORE_DATA_BUS_WD : 
//               CC_SLV_BUS_DATA_WIDTH)
// Values:       -2147483648, ..., 2147483647
// 
// Outbound Posted TLP Formation Data Width 
//  Note: per byte parity bits included
`define CC_PRF_TLP_DATA_WIDTH 128


`define CC_PRF_TLP_DATA_WIDTH_NP 128



// Name:         CC_PRF_TLP_NUM_DWORDS
// Default:      4 (CC_SLV_DATA_WD_LT_CORE_DATA_WD ? CX_NW : CC_SLV_NW)
// Values:       -2147483648, ..., 2147483647
// 
// Number of DWORDS per Outbound Posted TLP Formation Data Beat
`define CC_PRF_TLP_NUM_DWORDS 4


// Name:         CC_PRF_HDRQ_WD
// Default:      27 (12 +CX_IDO_ENABLE +  ATS_TX_ENABLE*3 + CX_NFUNC_WD + 
//               CX_SRIOV_ENABLE*CX_NVFUNC_WD + CX_TPH_ENABLE*11 + 
//               CX_TLP_PREFIX_ENABLE*((32*CX_NPRFX)+CX_PRFX_PAR_WD) + CX_ATU_CTRL_EN + CC_SLV_BUS_ID_WIDTH + 
//               CC_SLV_WRAP_ENABLE)
// Values:       -2147483648, ..., 2147483647
// 
// Outbound Posted TLP Formation Header Info Width
`define CC_PRF_HDRQ_WD 27


// Name:         CC_OB_PDCMP_REQ
// Default:      1 ((CC_SLV_BURST_LEN*(CC_SLV_BUS_DATA_WIDTH/8))>128 ? 1 : 0)
// Values:       0, 1
// 
// SLV Outbound decomposition required - 1/ not req - 0
`define CC_OB_PDCMP_REQ


//  inq_pkt_p_tag                          `CX_TAG_SIZE
// `ifdef CX_LN_ENABLE
//  inq_pkt_ln,                            1
// `endif // CX_LN_ENABLE
// `ifdef CX_TLP_PREFIX_ENABLE
//  inq_pkt_prfx,                          (32*`CX_NPRFX)+ `CX_PRFX_PAR_WD
// `endif // CX_TLP_PREFIX_ENABLE
// `ifdef CX_TPH_ENABLE
//  inq_pkt_th,                            1
//  inq_pkt_ph,                            2
//  inq_pkt_st,                            8
// `endif // CX_TPH_ENABLE
// `ifdef CX_ATU_CTRL_EN
//  inq_pkt_atu_bypass,                    1
// `endif // CX_ATU_CTRL_EN
// `ifdef ATS_TX_ENABLE
//  inq_pkt_ats,                           2
//  inq_pkt_nw,                            1
// `endif // ATS_TX_ENABLE
// `ifdef CX_SRIOV_ENABLE
//  inq_pkt_vfunc_num,                     `CX_NVFUNC_WD-1
//  inq_pkt_vfunc_active,                  1
// `endif // CX_SRIOV_ENABLE
// `ifdef AXI_MULTIFUNCTION_ENABLED
//  inq_pkt_func_num,                      `CX_NFUNC_WD
// `endif // AXI_MULTIFUNCTION_ENABLED
//  inq_pkt_null,                          1
//  inq_pkt_last_tlp,                      1
//  inq_pkt_axi_id,                        `CC_SLV_BUS_ID_WIDTH
//  inq_pkt_byte_len,                      `CC_SLV_MTU_PW < (`CX_MAX_MTU_PW+1) ? `CC_SLV_MTU_PW : `CX_MAX_MTU_PW+1
//  inq_pkt_tc,                            3
//  inq_pkt_ep,                            1
//  inq_pkt_attr,                          2+`CX_IDO_ENABLE
//  inq_pkt_byte_en,                       8
//  inq_pkt_fmt,                           2
//  inq_pkt_type,                          5
//  inq_pkt_addr                           `SLAVE_BUS_ADDR_WIDTH

// Name:         CC_OB_PDCMP_HDR_RAM_DATA_WD_NOECC
// Default:      87 (CX_TAG_SIZE+CX_LN_ENABLE+CX_TLP_PREFIX_ENABLE*((32*CX_NPRFX)+ 
//               
//               
//               CX_PRFX_PAR_WD)+CX_TPH_ENABLE*(1+2+8)+CX_ATU_CTRL_EN+ATS_TX_ENABLE*(2+1)+CX_SRIOV_ENABLE*(CX_NVFUNC_WD-1+1)+AXI_MULTIFUNCTION_ENABLED*CX_NFUNC_WD+1+1+CC_SLV_BUS_ID_WIDTH+(CC_SLV_MTU_PW < (CX_MAX_MTU_PW+1) ? 
//               CC_SLV_MTU_PW : 
//               CX_MAX_MTU_PW+1)+3+1+2+CX_IDO_ENABLE+8+2+5+SLAVE_BUS_ADDR_WIDTH)
// Values:       -2147483648, ..., 2147483647
// 
// Outbound Posted TLP Header Queue Width
`define CC_OB_PDCMP_HDR_RAM_DATA_WD_NOECC 87


// Name:         CC_OB_PDCMP_HDR_RAM_DATA_WD
// Default:      87 (CX_RAS_EN==1 ? [<functionof> CC_OB_PDCMP_HDR_RAM_DATA_WD_NOECC 
//               CX_RAS_RAM_PROT_RANGE] + CC_OB_PDCMP_HDR_RAM_DATA_WD_NOECC : 
//               CC_OB_PDCMP_HDR_RAM_DATA_WD_NOECC)
// Values:       -2147483648, ..., 2147483647
// 
// Outbound Posted TLP Header Queue Width
`define CC_OB_PDCMP_HDR_RAM_DATA_WD 87


// Name:           CC_OB_PDCMP_HDR_RAM_DP
// Default:        16
// Values:         2, ..., 256
// Enabled:        SLAVE_POPULATED
// Parameter Type: Performance Setting
// 
// Specifies the AXI bridge Posted Request Header FIFO depth.
`define CC_OB_PDCMP_HDR_RAM_DP 16


`define CC_OB_PDCMP_HDR_RAM_ADDR_WD 4


`define CC_OB_PDCMP_HDR_RAM_ADDRP_WD 1


`define CC_OB_PDCMP_HDR_RAM_PTR_WD 5


`define CC_OB_PDCMP_DATA_RAM_DATA_WD_NOECC 128


`define CC_OB_PDCMP_DATA_RAM_DATA_WD 128


// Name:           CC_OB_PDCMP_DATA_RAM_DP
// Default:        34 ((SLAVE_BUS_DATA_WIDTH <= PCIE_CORE_DATA_BUS_WD) ? 
//                 ((AMBA_DECOMPOSER_DEF_DEPTH_FACTOR*CC_SLV_MTU)/(CX_NW*4)+2+CX_RASDP_EN*2) : 
//                 
//                 ((AMBA_DECOMPOSER_DEF_DEPTH_FACTOR*CC_SLV_MTU)/(CC_SLV_NW*4)+2+CX_RASDP_EN*2))
// Values:         -2147483648, ..., 2147483647
// Enabled:        SLAVE_POPULATED
// Parameter Type: Performance Setting
// 
// Specifies the AXI bridge Posted request Data FIFO depth in words. 
//  The word width is either CC_CORE_DATA_BUS_WD or CC_SLV_BUS_DATA_WIDTH. 
//  Default Value: Approximately CC_SLV_MTU/(word width).
`define CC_OB_PDCMP_DATA_RAM_DP 34


`define CC_OB_PDCMP_DATA_RAM_ADDR_WD 6


`define CC_OB_PDCMP_DATA_RAM_ADDRP_WD 1


`define CC_OB_PDCMP_DATA_RAM_PTR_WD 6


`define CC_OB_CPL_C2A_CDC_RAM_DP 16


`define CC_OB_CPL_C2A_CDC_RAM_ADDR_WD 4


`define CC_OB_CPL_C2A_CDC_RAM_ADDRP_WD 1


`define CC_OB_CPL_C2A_CDC_RAM_DATA_WD_NOECC 169


`define CC_OB_CPL_C2A_CDC_RAM_DATA_WD 169


`define CC_OB_CCMP_DATA_RAM_DP 288


`define CC_OB_CCMP_DATA_RAM_ADDR_WD 9


`define CC_OB_CCMP_DATA_RAM_ADDRP_WD 1


`define CC_OB_CCMP_DATA_RAM_DATA_WD_NOECC 133


`define CC_OB_CCMP_DATA_RAM_DATA_WD 133



// Name:         CC_SLV_NPW_SAB_RAM_DATA_WD_NOECC
// Default:      100 (CX_LN_ENABLE+ CC_SLV_BUS_ID_WIDTH + SLAVE_BUS_ADDR_WIDTH + 
//               CC_SLV_BURST_LEN_PW + 8 + 32 + 10 + SHARED_DBI_ENABLED*2 + CX_NFUNC_WD + 
//               CX_SRIOV_ENABLE*CX_NVFUNC_WD + 
//               CX_TLP_PREFIX_ENABLE*((32*CX_NPRFX)+CX_PRFX_PAR_WD) + CX_ATU_CTRL_EN)
// Values:       -2147483648, ..., 2147483647
// 
// Slave Non-Posted Write Set-Aside Buffer Width 
//  {wid,addr,len,size,last,strb,data,type,snp,tc,ep,db,func_num,vfunc_num,vfunc_act 
//   tlpprfx, atu_byp}
`define CC_SLV_NPW_SAB_RAM_DATA_WD_NOECC 100


`define CC_SLV_NPW_SAB_RAM_DATA_WD 100


// Name:           CC_SLV_NPW_SAB_RAM_DP
// Default:        32 (CX_IS_EP ? 2 : CC_SLV_NUM_OUTSTND_CPU_WR_REQ)
// Values:         2 4 8 16 32 64
// Enabled:        ((AMBA_INTERFACE==2) || (AMBA_INTERFACE==3))
// Parameter Type: Performance Setting
// 
// Slave Non-Posted Write Set-Aside Buffer Depth
`define CC_SLV_NPW_SAB_RAM_DP 32


`define CC_SLV_NPW_SAB_RAM_ADDR_WD 5


`define CC_SLV_NPW_SAB_RAM_ADDRP_WD 1



// Name:         CC_SLV_WRP_RSP_ROB_RAM_DATA_WD_NOECC
// Default:      128 (SLAVE_BUS_DATA_WIDTH)
// Values:       -2147483648, ..., 2147483647
// Enabled:      AXI_POPULATED && CC_SLV_WRAP_ENABLE && CX_RAM_AT_TOP_IF
// 
// Slave Wrap Response Re-order Buffer Width
`define CC_SLV_WRP_RSP_ROB_RAM_DATA_WD_NOECC 128


`define CC_SLV_WRP_RSP_ROB_RAM_DATA_WD 128


// Name:         CC_SLV_WRP_RSP_ROB_RAM_DP
// Default:      16
// Values:       -2147483648, ..., 2147483647
// Enabled:      AXI_POPULATED && CC_SLV_WRAP_ENABLE && CX_RAM_AT_TOP_IF
// 
// Slave Wrap Response Re-order Buffer Depth
`define CC_SLV_WRP_RSP_ROB_RAM_DP 16


// Name:         CC_SLV_WRP_RSP_ROB_RAM_ADDR_WD
// Default:      4 ([calc_log2 CC_SLV_WRP_RSP_ROB_RAM_DP])
// Values:       -2147483648, ..., 2147483647
// Enabled:      AXI_POPULATED && CC_SLV_WRAP_ENABLE && CX_RAM_AT_TOP_IF
// 
// Slave Wrap Response Re-order Buffer Address Width
`define CC_SLV_WRP_RSP_ROB_RAM_ADDR_WD 4


`define CC_SLV_WRP_RSP_ROB_RAM_ADDRP_WD 1



// Name:         CC_SLV_WRP_RSP_HDB_DP
// Default:      8
// Values:       -2147483648, ..., 2147483647
// Enabled:      AXI_POPULATED && CC_SLV_WRAP_ENABLE
// 
// Slave Wrap Response Header Buffer Depth
`define CC_SLV_WRP_RSP_HDB_DP 8


// Name:         CC_SLV_WRP_RSP_HDB_ADDR_WD
// Default:      3 ([calc_log2 CC_SLV_WRP_RSP_HDB_DP])
// Values:       -2147483648, ..., 2147483647
// Enabled:      AXI_POPULATED && CC_SLV_WRAP_ENABLE
// 
// Slave Wrap Response Header Buffer Address Width
`define CC_SLV_WRP_RSP_HDB_ADDR_WD 3


// Name:         CC_SLV_WRP_RSP_NUM_OUTSTD_WD
// Default:      4 ([calc_log2 [<functionof> CC_SLV_WRP_RSP_HDB_DP+2]])
// Values:       -2147483648, ..., 2147483647
// Enabled:      AXI_POPULATED && CC_SLV_WRAP_ENABLE
// 
// Counter width of the maximum outstanding transactions allowed in the slave wrap response buffers
`define CC_SLV_WRP_RSP_NUM_OUTSTD_WD 4


// Name:         CC_NPRSPF_TLP_DATA_WIDTH
// Default:      128 (CC_SLV_DATA_WD_LT_CORE_DATA_WD ? CC_CORE_DATA_BUS_WD : 
//               CC_SLV_BUS_DATA_WIDTH)
// Values:       -2147483648, ..., 2147483647
// 
// Outbound Completion TLP Formation Data Width 
//  Note: per byte parity bits included
`define CC_NPRSPF_TLP_DATA_WIDTH 128



// Name:         CC_NPRSPF_TLP_DATA_WIDTH_NP
// Default:      128 (CC_SLV_DATA_WD_LT_CORE_DATA_WD ? PCIE_CORE_DATA_BUS_WD : 
//               SLAVE_BUS_DATA_WIDTH)
// Values:       -2147483648, ..., 2147483647
// 
// Outbound Completion TLP Formation Data Width Without Parity Bits 
//  Note: per byte parity bits included
`define CC_NPRSPF_TLP_DATA_WIDTH_NP 128


// Name:         CC_NPRSPF_TLP_NUM_STRBS
// Default:      16 (CC_SLV_DATA_WD_LT_CORE_DATA_WD ? CC_CORE_DATA_BUS_WSTRB_WD : 
//               CC_SLV_BUS_WSTRB_WIDTH)
// Values:       -2147483648, ..., 2147483647
// 
// Number of byte lanes per Outbound Completion TLP Formation Data Beat
`define CC_NPRSPF_TLP_NUM_STRBS 16


// Name:         CC_NPRSPF_TLP_NUM_DWORDS
// Default:      4 (CC_SLV_DATA_WD_LT_CORE_DATA_WD ? CX_NW : CC_SLV_NW)
// Values:       -2147483648, ..., 2147483647
// 
// Number of DWORDS per Outbound Completion TLP Formation Data Beat
`define CC_NPRSPF_TLP_NUM_DWORDS 4


/////////////////////////////////////////////////////////////////////////
/// AXI Bridge Inbound
////////////////////////////////////////////////////////////////////////


`define DC_DMA_TYPE_WIDTH 3


// Name:         CC_IB_RD_REQ_CDC_RAM_DP
// Default:      12
// Values:       12, ..., 2147483647
// Enabled:      ((AMBA_INTERFACE==2) || (AMBA_INTERFACE==3))
// 
// Inbound Read Request Ram Depth of CDC FIFO core_clk  -> amba clock
`define CC_IB_RD_REQ_CDC_RAM_DP 12


// Name:         CC_IB_WR_REQ_CDC_RAM_DP
// Default:      12
// Values:       12, ..., 2147483647
// Enabled:      ((AMBA_INTERFACE==2) || (AMBA_INTERFACE==3))
// 
// Inbound Write Request Ram Depth of CDC FIFO core_clk  -> amba clock
`define CC_IB_WR_REQ_CDC_RAM_DP 12


// Name:         CC_P_REQ_MAX
// Default:      127 (AXI_POPULATED ? (RADM_MAX_OUTSTD_P_REQ * 2)-1  : 
//               CC_RADMX_DECOMPOSER_HDRQ_DP + (CX_NVC*4) + 46)
// Values:       -2147483648, ..., 2147483647
// 
// Maximum number of posted requests bridge can accept before driving posted packet halt
`define CC_P_REQ_MAX 127


// Name:         CC_P_REQ_MAX_LOG2
// Default:      7 ([calc_log2 (AXI_POPULATED ? (RADM_MAX_OUTSTD_P_REQ * 2)-1  : 
//               CC_RADMX_DECOMPOSER_HDRQ_DP + (CX_NVC*4) + 46)])
// Values:       -2147483648, ..., 2147483647
// 
// Maximum number of posted requests bridge can accept before driving posted packet halt (counter width)
`define CC_P_REQ_MAX_LOG2 7


// Name:         CC_AMBA_TLP_SEQ_WD
// Default:      8 ([calc_log2 [<functionof> CC_WR_CH_P_REQ_QUEUE_DP + 
//               (CC_IB_RD_REQ_CDC_RAM_DP+CC_IB_WR_REQ_CDC_RAM_DP) + CX_REMOTE_MAX_TAG + 1+8]] + 1)
// Values:       -2147483648, ..., 2147483647
// 
// Width of AXI TLP sequence number
`define CC_AMBA_TLP_SEQ_WD 8



`define DC_INBD_HEADER_PNP_WD 183


`define DC_INBD_HEADER_PNP_WD_NP 183



`define DC_INBD_HEADER_PNP_1STG_WD 161


`define DC_INBD_HEADER_PNP_1STG_WD_NP 161


`define CC_IB_RD_REQ_ORDR_RAM_DATA_WD_NOECC 161



`define CC_IB_RD_REQ_ORDR_RAM_DATA_WD 161


`define CC_IB_RD_REQ_ORDR_RAM_ADDR_WD 5


`define CC_IB_RD_REQ_ORDR_RAM_ADDRP_WD 1


`define CC_IB_RD_REQ_ORDR_RAM_DP 32


// Name:         CC_IB_RD_REQ_CDC_RAM_ADDR_WD
// Default:      4 ([calc_log2 CC_IB_RD_REQ_CDC_RAM_DP])
// Values:       -2147483648, ..., 2147483647
// 
// Inbound Read Request Ram  Address width of CDC FIFO core_clk  -> amba clock
`define CC_IB_RD_REQ_CDC_RAM_ADDR_WD 4


`define CC_IB_RD_REQ_CDC_RAM_ADDRP_WD 1



// Name:         CC_IB_RD_REQ_CDC_RAM_DATA_WD_NOECC
// Default:      183 (CX_LN_ENABLE + 3*ATS_RX_ENABLE_VALUE + CC_AMBA_TLP_SEQ_WD + 
//               FLT_Q_ADDR_WIDTH + CC_DMA_ENABLE_VALUE*(DC_DMA_TYPE_WIDTH - 1) + 
//               4*CC_DMA_ENABLE_VALUE + CC_MSTR_BE_CTRL_WIDTH + CX_MSI_CTRL_EN_VALUE + 
//               CX_NFUNC_WD + CX_NW + CX_SRIOV_ENABLE_VALUE*(CX_NVFUNC_EWD - 1) + 
//               2*CX_SRIOV_ENABLE_VALUE + CX_TLP_PREFIX_ENABLE_VALUE*(FLT_Q_PRFX_WIDTH - 1) 
//               + CX_TLP_PREFIX_ENABLE_VALUE + 11*CX_TPH_ENABLE_VALUE + 
//               RADM_SEG_BUF_VALUE*DC_MULTI_VC*(CX_NVC_LOG2 - 1) + RADM_SEG_BUF_VALUE*DC_MULTI_VC 
//               + FLT_Q_ATTR_WIDTH + RADM_SEG_BUF_VALUE + CX_TAG_SIZE + 73 + 
//               (CX_INTERNAL_ATU_ENABLE*RADM_SEG_BUF_VALUE)+ CX_REMOTE_MAX_TAGS_WD)
// Values:       -2147483648, ..., 2147483647
// 
// Inbound Read Request Ram DATA width of CDC FIFO core_clk  -> amba clock
`define CC_IB_RD_REQ_CDC_RAM_DATA_WD_NOECC 183


// Name:         CC_IB_RD_REQ_CDC_RAM_DATA_WD
// Default:      183 (CX_RAS_EN==1 ? [<functionof> 
//               CC_IB_RD_REQ_CDC_RAM_DATA_WD_NOECC CX_RAS_RAM_PROT_RANGE] + CC_IB_RD_REQ_CDC_RAM_DATA_WD_NOECC : 
//               CC_IB_RD_REQ_CDC_RAM_DATA_WD_NOECC)
// Values:       -2147483648, ..., 2147483647
// 
// Inbound Read Request Ram DATA width of CDC FIFO core_clk  -> amba clock
`define CC_IB_RD_REQ_CDC_RAM_DATA_WD 183


// Name:         CC_IB_WR_REQ_CDC_RAM_ADDR_WD
// Default:      4 ([calc_log2 CC_IB_WR_REQ_CDC_RAM_DP])
// Values:       -2147483648, ..., 2147483647
// Enabled:      ((AMBA_INTERFACE==2) || (AMBA_INTERFACE==3))
// 
// Inbound Write Request Ram  Address width of CDC FIFO core_clk  -> amba clock
`define CC_IB_WR_REQ_CDC_RAM_ADDR_WD 4


`define CC_IB_WR_REQ_CDC_RAM_ADDRP_WD 1


`define CC_IB_WR_REQ_CDC_RAM_DATA_WD_NOECC 311



// Name:         CC_IB_WR_REQ_CDC_RAM_DATA_WD
// Default:      311 (CX_RAS_EN==1 ? [<functionof> 
//               CC_IB_WR_REQ_CDC_RAM_DATA_WD_NOECC CX_RAS_RAM_PROT_RANGE] + CC_IB_WR_REQ_CDC_RAM_DATA_WD_NOECC : 
//               CC_IB_WR_REQ_CDC_RAM_DATA_WD_NOECC)
// Values:       -2147483648, ..., 2147483647
// Enabled:      ((AMBA_INTERFACE==2) || (AMBA_INTERFACE==3))
// 
// Inbound write Request Ram DATA width of CDC FIFO core_clk  -> amba clock
`define CC_IB_WR_REQ_CDC_RAM_DATA_WD 311


// Name:         CC_IB_MCPL_CDC_RAM_DP
// Default:      12 (AHB_POPULATED ? (4096/(4*CC_MSTR_NW)) : 12)
// Values:       -2147483648, ..., 2147483647
// Enabled:      MASTER_POPULATED && AXI_POPULATED
// 
// AMBA to Core Clock Crossing FIFO depth
`define CC_IB_MCPL_CDC_RAM_DP 12


// Name:         CC_IB_MCPL_CDC_RAM_ADDR_WD
// Default:      4 ([calc_log2 CC_IB_MCPL_CDC_RAM_DP])
// Values:       -2147483648, ..., 2147483647
// Enabled:      MASTER_POPULATED && AXI_POPULATED
// 
// AMBA to Core Clock Crossing FIFO address width
`define CC_IB_MCPL_CDC_RAM_ADDR_WD 4


`define CC_IB_MCPL_CDC_RAM_ADDRP_WD 1


// Name:         CC_IB_MCPL_CDC_RAM_DATA_WD
// Default:      191 (CX_RAS_EN==1 ? [<functionof> CC_MSTR_RSP_INTF_WD_NP 
//               CX_RAS_RAM_PROT_RANGE] + CC_MSTR_RSP_INTF_WD_NP : CC_MSTR_RSP_INTF_WD)
// Values:       -2147483648, ..., 2147483647
// Enabled:      MASTER_POPULATED && AXI_POPULATED
// 
// AMBA to Core Clock Crossing FIFO data width
`define CC_IB_MCPL_CDC_RAM_DATA_WD 191



// Name:         CC_IB_MCPL_SEG_BUF_RAM_ADDR_WD
// Default:      10 (CC_MSTR_CPL_SEG_BUF_ADDR_WD)
// Values:       -2147483648, ..., 2147483647
// Enabled:      MASTER_POPULATED && AXI_POPULATED
// 
// Master Completion Buffer Segmented Buffer RAM
`define CC_IB_MCPL_SEG_BUF_RAM_ADDR_WD 10


`define CC_IB_MCPL_SEG_BUF_RAM_ADDRP_WD 1


// Name:         CC_IB_MCPL_SEG_BUF_RAM_DATA_WD
// Default:      133 (CC_MSTR_CPL_SEG_BUF_DATA_WD)
// Values:       -2147483648, ..., 2147483647
// Enabled:      MASTER_POPULATED && AXI_POPULATED
// 
// Master Completion Buffer Segmented Buffer RAM
`define CC_IB_MCPL_SEG_BUF_RAM_DATA_WD 133


// Name:         CC_IB_MCPL_SEG_BUF_RAM_DP
// Default:      576 (CC_MSTR_CPL_DATA_SEG_DP*(CX_REMOTE_MAX_TAGS))
// Values:       -2147483648, ..., 2147483647
// Enabled:      MASTER_POPULATED && AXI_POPULATED
// 
// Master Completion Buffer Segmented Buffer RAM
`define CC_IB_MCPL_SEG_BUF_RAM_DP 576


`define CC_MSTR_CPL_C2A_FIFO_DEPTH 14


// Name:         CC_MSTR_CPL_C2A_FIFO_WD
// Default:      4 ([calc_log2 (MSTR_CLK_DIFF_ENABLE ? (CC_IB_WR_REQ_CDC_RAM_DP + 2) 
//               : 2)])
// Values:       -2147483648, ..., 2147483647
// 
// Log2 of CC_MSTR_CPL_C2A_FIFO_DEPTH
`define CC_MSTR_CPL_C2A_FIFO_WD 4


`define CC_MCPLB_PRV_SMALL 3


// Name:         DBI_POPULATED
// Default:      1 ((DBI_4SLAVE_POPULATED) || (SHARED_DBI_ENABLED))
// Values:       0, 1
// 
// DBI slave logic is present (shared or dedicated slave)
`define DBI_POPULATED


`define CX_RAS_BRIDGE_ERROR_WD 0


// Name:         CX_RAS_DMA_ERROR_WD
// Default:      0 ((CX_RAS_EN==1) ? ((CC_DMA_ENABLE==1) ? 17 : 0) : 0)
// Values:       -2147483648, ..., 2147483647
// 
// Maximum number of correctable or uncorrectable pulses passed in a bus to CDM interface
`define CX_RAS_DMA_ERROR_WD 0


// Name:         CX_RAS_APP_ERROR_WD
// Default:      52 ((CX_RAS_EN==1) ? (CX_RAS_BRIDGE_ERROR_WD + CX_RAS_DMA_ERROR_WD) 
//               : 52)
// Values:       -2147483648, ..., 2147483647
// 
// Maximum number of correctable or uncorrectable pulses passed in a bus to CDM interface
`define CX_RAS_APP_ERROR_WD 52


`define CX_RAS_BRIDGE_ERROR_ADDR_WD 54


`define CX_RAS_DMA_ERROR_ADDR_WD 12


// Name:         CX_RAS_APP_ERROR_ADDR_WD
// Default:      54 ((CX_RAS_EN==1) ? (CX_RAS_BRIDGE_ERROR_ADDR_WD + 
//               CX_RAS_DMA_ERROR_ADDR_WD) : 54)
// Values:       -2147483648, ..., 2147483647
// 
// Maximum number of correctable or uncorrectable pulses passed in a bus to CDM interface
`define CX_RAS_APP_ERROR_ADDR_WD 54


// Name:         CC_IN64
// Default:      0 (AMBA_INTERFACE != 0) ? (MASTER_BUS_ADDR_WIDTH > 32) : 
//               (FLT_Q_ADDR_WIDTH > 32)
// Values:       0, 1
// Enabled:      0
// 
// When we do not want IN64
// `define CC_IN64


// `define CC_GM_AMBA_SUB_BUS_SIZE_32


// Name:         CC_REG_ASYNC_FIFO_POP_ADDR
// Default:      1
// Values:       -2147483648, ..., 2147483647
// 
// Register the pop address on asynchronous FIFO controllers before it is passed to the push side (0-address not 
// registered; 1-registered address) 
// Needs to be set to 1 to support RAMs that register the read address
`define CC_REG_ASYNC_FIFO_POP_ADDR 1


// Name:         CC_REG_ASYNC_FIFO_PUSH_ADDR
// Default:      1
// Values:       -2147483648, ..., 2147483647
// 
// Register the push address on asynchronous FIFO controllers before it is passed to the pop side (0-address not 
// registered; 1-registered address) 
// Needs to be set to 1 to support RAMs that register the write address
`define CC_REG_ASYNC_FIFO_PUSH_ADDR 1
//  ------------------------------------------------------------------------
//
//                    (C) COPYRIGHT 2002 - 2016 SYNOPSYS, INC.
//                            ALL RIGHTS RESERVED
//
//  This software and the associated documentation are confidential and
//  proprietary to Synopsys, Inc.  Your use or disclosure of this
//  software is subject to the terms and conditions of a written
//  license agreement between you, or your company, and Synopsys, Inc.
//
// The entire notice above must be reproduced on all authorized copies.
//
//  ------------------------------------------------------------------------

//-------------------------------------------------------------------------
//---  RCS information:
//---    $DateTime: 2016/07/06 09:08:22 $
//---    $Revision: #56 $
//---    $Id: //dwh/pcie_iip/main/DWC_pcie/DWC_pcie_common/src/DWC_pcie_aux_cc_constants.v#56 $
//-------------------------------------------------------------------------



// Name:         CX_GATE_LEVEL_SIMS
// Default:      0
// Values:       0, 1
// 
// Gate Level Sims
// `define CX_GATE_LEVEL_SIMS



// `define CX_SV_FOR_SYNTH


// Name:         RAM_TIMING_MODEL
// Default:      Synthesize using black box RAM timing model
// Values:       Synthesize using black box RAM timing model (0), Synthesize using 
//               physical RAM timing model (1)
// Enabled:      0
// 
// Specifies if to use black box timing or physical RAM timing model. 
//  - 1: Physical RAM timing model: timing is specified by your physical RAM model. 
//  - 0: Black box timing:  black box RAMs is used for synthesis, and timing constraints for RAM interfaces is derived 
//  from the RAM*P_RD_ACCESS and RAM*P_ADDR_SU configuration parameters.
`define RAM_TIMING_MODEL 0


// Name:           RAM1P_RD_ACCESS
// Default:        800
// Values:         -2147483648, ..., 2147483647
// Parameter Type: Performance Setting
// 
// Specifies the single port RAM read access time. Used by the synthesis.
`define RAM1P_RD_ACCESS 800


// Name:           RAM1P_ADDR_SU
// Default:        700
// Values:         -2147483648, ..., 2147483647
// Parameter Type: Performance Setting
// 
// Specifies the single port RAM data setup. Used by the synthesis".
`define RAM1P_ADDR_SU 700


// Name:           RAM2P_RD_ACCESS
// Default:        900
// Values:         -2147483648, ..., 2147483647
// Parameter Type: Performance Setting
// 
// Specifies the dual port RAM read access time. Used by the synthesis.
`define RAM2P_RD_ACCESS 900


// Name:           RAM2P_ADDR_SU
// Default:        600
// Values:         -2147483648, ..., 2147483647
// Parameter Type: Performance Setting
// 
// Specifies the dual port RAM data setup. Used by the synthesis.
`define RAM2P_ADDR_SU 600

///reuse-pragma attr MinValue 0

// Name:         EASE_GEN3_FPGA_TIMING
// Default:      0
// Values:       0, 1
// 
// Improve timing on gen3 logic by disabling features 
// and/or inserting pipeline stages 
// This parameter is shared for Gen3 mode.
// `define EASE_GEN3_FPGA_TIMING

///reuse-pragma attr MinValue 0

// Name:         DISABLE_MAC_IN_P2
// Default:      0 (EASE_GEN3_FPGA_TIMING)
// Values:       0, 1
// 
// in FPGAs P2 is not supported, hence 
// we can drive to zero that logic
// `define DISABLE_MAC_IN_P2


// Name:         UNIFIED_RX_CRC_ARCH
// Default:      true
// Values:       false (0), true (1)
// 
// Use a common LCRC/ECRC module across all controller architectures
`define UNIFIED_RX_CRC_ARCH


// Name:         CX_CRC_LATENCY_XTLH
// Default:      1 (1 + ((CX_NW > 1) ? ((CX_TECHNOLOGY == 0) || ((CX_GEN4_MODE == 
//               GEN4_DF) && CX_NW==16) || ((CX_GEN4_MODE == GEN4_DF) && (CX_FREQ == 
//               FREQ_125)) || ((CX_GEN3_MODE == GEN3_DF) && (CX_FREQ == FREQ_250))) : 
//               0))
// Values:       1 2
// Enabled:      CX_CUSTOM_PIPELINING && (CX_NW > 1)
// 
// CRC Pipeline Latency value for xtlh.  This value represents the 
// number of pipeline stages needed to calculate and compare ECRC. 
// core supported latencies:  1,2
`define CX_CRC_LATENCY_XTLH 1


// Name:         CX_CRC_LATENCY_RTLH
// Default:      1 (1 + ((CX_NW > 1) ? ((CX_TECHNOLOGY == 0) || ((CX_GEN4_MODE == 
//               GEN4_DF) && CX_NW==16) || ((CX_GEN4_MODE == GEN4_DF) && (CX_FREQ == 
//               FREQ_125)) || ((CX_GEN3_MODE == GEN3_DF) && (CX_FREQ == FREQ_250))) : 
//               0))
// Values:       1 2
// Enabled:      CX_CUSTOM_PIPELINING && (CX_NW > 1)
// 
// CRC Pipeline Latency value for rtlh.  This value represents the 
// number of pipeline stages needed to calculate and compare ECRC. 
// core supported latencies:  1,2
`define CX_CRC_LATENCY_RTLH 1


// Name:         CX_CRC_LATENCY_XDLH
// Default:      1 (1 + ((CX_NW > 1) ? ((CX_TECHNOLOGY == 0) || ((CX_GEN4_MODE == 
//               GEN4_DF) && CX_NW==16) || ((CX_GEN4_MODE == GEN4_DF) && (CX_FREQ == 
//               FREQ_125)) || ((CX_GEN3_MODE == GEN3_DF) && (CX_FREQ == FREQ_250)) || 
//               (CX_NW > 2 && (CX_GEN3_MODE == GEN3_DF && CX_FREQ == FREQ_125 
//               ||CX_GEN2_MODE == GEN2_DF && CX_FREQ == FREQ_250) && CX_RASDP > 0)) : 0))
// Values:       1 2
// Enabled:      CX_CUSTOM_PIPELINING && (CX_NW > 1)
// 
// CRC Pipeline Latency value for xdlh.  This value represents the 
// number of pipeline stages needed to calculate and compare LCRC. 
// core supported latencies:  1,2
`define CX_CRC_LATENCY_XDLH 1


// Name:         CX_CRC_LATENCY_RDLH
// Default:      1 (1 + ((CX_NW > 1) ? ((CX_TECHNOLOGY == 0) || ((CX_GEN4_MODE == 
//               GEN4_DF) && CX_NW==16) || ((CX_GEN4_MODE == GEN4_DF) && (CX_FREQ == 
//               FREQ_125)) || ((CX_GEN3_MODE == GEN3_DF) && (CX_FREQ == FREQ_250))) : 
//               0))
// Values:       1 2
// Enabled:      CX_CUSTOM_PIPELINING && (CX_NW > 1)
// 
// CRC Pipeline Latency value for rdlh.  This value represents the 
// number of pipeline stages needed to calculate and compare LCRC. 
// core supported latencies:  1,2
`define CX_CRC_LATENCY_RDLH 1


// Name:           CX_RDLH_REGIN
// Default:        1
// Values:         0 1
// Enabled:        CX_CUSTOM_PIPELINING
// Parameter Type: Performance Setting
// 
// Input pipeline stage to RDLH TLP extraction module
`define CX_RDLH_REGIN 1


// Name:           CX_SMLH_PIPELINE_LTSSM
// Default:        0 ((CX_TECHNOLOGY == 0) && !CX_MPCIE_ENABLE)
// Values:         0, 1
// Enabled:        CX_CUSTOM_PIPELINING && !CX_MPCIE_ENABLE
// Parameter Type: Performance Setting
// 
// This parameter adds selected pipelines in the LTSSM, providing trade-off of latency and gates for ease of timing 
// closure. This parameter is for Conventional PCIe mode only; M-PCIe doesn't use this parameter.
// `define CX_SMLH_PIPELINE_LTSSM


// Name:           CX_XDLH_PIPELINE_RBUF
// Default:        0 ((CX_TECHNOLOGY == 0) || ((CX_GEN2_MODE == 0) && (CX_FREQ == 1) 
//                 && (ARC_WIDTH < 128)))
// Values:         0, 1
// Enabled:        CX_CUSTOM_PIPELINING
// Parameter Type: Performance Setting
// 
// Retry Buffer Pipeline Latency value.  This value represents the number of pipeline stages used in retry buffer, 
// providing trade-off of latency and gates for ease of timing closure.
// `define CX_XDLH_PIPELINE_RBUF


// Name:           CX_XADM_FC_PIPELINE
// Default:        0 ((CX_TECHNOLOGY == 0) || ((CX_GEN2_MODE == 0) && (CX_FREQ == 1) 
//                 && (ARC_WIDTH == 32)))
// Values:         0, 1
// Enabled:        CX_CUSTOM_PIPELINING
// Parameter Type: Performance Setting
// 
// Transmit Flow Control Calculations Pipeline Enable, providing trade-off of latency and gates for ease of timing closure.
// `define CX_XADM_FC_PIPELINE


// Name:           CX_XDLH_CRC_REG_OUTPUTS
// Default:        1 (([<functionof> CX_NB CX_NL] == 32)  ? 0 : 1)
// Values:         0, 1
// Enabled:        0
// Parameter Type: Performance Setting
// 
// Specifies insertion of register pipeline at the Outputs of XDLH, providing trade-off of latency and gates for ease of 
// timing closure.
`define CX_XDLH_CRC_REG_OUTPUTS 1


// Name:           CX_RMLH_PKT_FINDER_REGIN
// Default:        0 (([<functionof> CX_NB CX_NL] >= 128) ? (CX_GEN3_MODE == 0) ? 1 : 
//                 ((CX_TECHNOLOGY == 0) ? 1 : 0) : 0)
// Values:         0, 1
// Enabled:        CX_CUSTOM_PIPELINING
// Parameter Type: Performance Setting
// 
// Specifies insertion of register pipeline at the inputs of RMLH Packet finder, providing trade-off of latency and gates 
// for ease of timing closure.
`define CX_RMLH_PKT_FINDER_REGIN 0


// Name:           CX_RMLH_SCRAMBLE_REGOUT
// Default:        1 (((CX_TECHNOLOGY == 0)) ? 1 : 1)
// Values:         0, 1
// Enabled:        CX_CUSTOM_PIPELINING && !CX_MPCIE_ENABLE
// Parameter Type: Performance Setting
// 
// Specifies insertion of register pipeline at the outputs of RMLH Scrambler, providing trade-off of latency and gates for 
// ease of timing closure.
`define CX_RMLH_SCRAMBLE_REGOUT 1


// Name:           CX_RMLH_PIPE_REGOUT
// Default:        1 ((CX_MPCIE_ENABLE) ? 1 : (CX_TECHNOLOGY == 2) ? ((((CX_NB == 1) 
//                 || (CX_GEN2_SPEED)) & (CX_NL > 1)) ? 1:0) : 1)
// Values:         0, 1
// Enabled:        CX_CUSTOM_PIPELINING && !CX_MPCIE_ENABLE
// Parameter Type: Performance Setting
// 
// Specifies insertion of register pipeline at the outputs of RMLH PIPE, providing trade-off of latency and gates for ease 
// of timing closure.
`define CX_RMLH_PIPE_REGOUT 1

///reuse-pragma attr MinValue 0

// Name:         DISABLE_SEQ_FINDER_PAR_CHK
// Default:      0 (EASE_GEN3_FPGA_TIMING)
// Values:       0, 1
// Enabled:      (CX_SEL_PHY_MODE  ? (CX_MAX_CPCIE_SPEED >= 3) : CX_S_CPCIE_MODE ? 
//               (CX_GEN3_MODE != GEN3_DISABLED) : 0)
// 
// Remove parity check on ts1 ordered set
// `define DISABLE_SEQ_FINDER_PAR_CHK


// Name:           CX_RDLH_TLP_EXTRACT_REGOUT
// Default:        0 (((CX_TECHNOLOGY == 0)) ? 1 : 
//                 ((((CX_NB == 1) || (CX_2ND_SPEED)) & (CX_NL > 4)) ? 1: 
//                 0))
// Values:         0, 1
// Enabled:        CX_CUSTOM_PIPELINING
// Parameter Type: Performance Setting
// 
// Specifies insertion of register pipeline at the outputs of RDLH TLP Extract, providing trade-off of latency and gates 
// for ease of timing closure.
`define CX_RDLH_TLP_EXTRACT_REGOUT 0


// Name:           CX_RADM_TRGT1_REGOUT
// Default:        0 ((CX_GEN2_MODE == 0) && (CX_FREQ == 1))
// Values:         0, 1
// Enabled:        TRGT1_POPULATE==1 && CX_CUSTOM_PIPELINING
// Parameter Type: Performance Setting
// 
// Specifies insertion of register pipeline at the outputs of RADM_TRGT1 outputs, providing trade-off of latency and gates 
// for ease of timing closure.
`define CX_RADM_TRGT1_REGOUT 0


// Name:           CX_RADM_CPL_REGOUT
// Default:        1 (AMBA_POPULATED || ((CX_GEN2_MODE == 0) && (CX_FREQ == 1)))
// Values:         0, 1
// Enabled:        (RADM_LEGACY_BUF==1 || AMBA_POPULATED==1) && CX_CUSTOM_PIPELINING
// Parameter Type: Performance Setting
// 
// Specifies insertion of register pipeline at the outputs of RADM_CPL outputs, providing trade-off of latency and gates 
// for ease of timing closure.
`define CX_RADM_CPL_REGOUT 1


// Name:           CX_RADM_RAM_WR_REGOUT
// Default:        0 (CX_TECHNOLOGY == 0)
// Values:         0, 1
// Enabled:        CX_RADMQ_MODE==2 && CX_CUSTOM_PIPELINING
// Parameter Type: Performance Setting
// 
// Specifies the insertion of a register pipeline at the RADM Header and Data Queue RAM write interface signals, providing 
// trade-off of latency and gates for ease of timing closure.
`define CX_RADM_RAM_WR_REGOUT 0


// Name:           CX_RADM_RAM_RD_CTL_REGOUT
// Default:        0 (CX_TECHNOLOGY == 0) || ((CX_GEN4_MODE == GEN4_DF) && (CX_FREQ == 
//                 FREQ_62_5)) || ((CX_GEN3_MODE == GEN3_DF) && (CX_FREQ == FREQ_125)) 
//                 || ((CX_GEN2_MODE == GEN2_DF) && (CX_FREQ == FREQ_250))
// Values:         0, 1
// Enabled:        CX_RADMQ_MODE==2 && CX_CUSTOM_PIPELINING
// Parameter Type: Performance Setting
// 
// Specifies the insertion of a register pipeline at the RADM Header and Data Queue RAM read control interface signals, 
// providing trade-off of latency and gates for ease of timing closure.
`define CX_RADM_RAM_RD_CTL_REGOUT 0


// Name:           CX_RADM_INQ_MGR_REGOUT
// Default:        1
// Values:         0, 1
// Enabled:        CX_RADMQ_MODE==2
// Parameter Type: Performance Setting
// 
// Specifies insertion of register pipeline at the output of the receive queue input queue manager before the receive queue 
// RAM inputs, providing trade-off of latency and gates for ease of timing closure.
`define CX_RADM_INQ_MGR_REGOUT 1


// Name:           CX_RADM_ORDER_MGR_REGOUT
// Default:        1
// Values:         0, 1
// Enabled:        0
// Parameter Type: Performance Setting
// 
// Specifies insertion of register pipeline at the outputs of SEGBUF RADM order manager outputs, providing trade-off of 
// latency and gates for ease of timing closure.
`define CX_RADM_ORDER_MGR_REGOUT


// Name:           CX_XTLH_CTRL_REGOUT
// Default:        1 (((CX_ECRC_ENABLE == 1) || ((CX_RASDP > 0) && (CX_NW <= 2))) ? 1 : 
//                 ((((CX_NB == 1) || (CX_2ND_SPEED)) & (CX_NL > 1)) ? 1: 
//                 0))
// Values:         0, 1
// Enabled:        (CX_CUSTOM_PIPELINING && !CX_ECRC_ENABLE && !((CX_RASDP>0) && 
//                 (CX_NW <= 2)))
// Parameter Type: Performance Setting
// 
// Specifies insertion of register pipeline at the outputs of XTLH, providing trade-off of latency and gates for ease of 
// timing closure.
`define CX_XTLH_CTRL_REGOUT 1


// Name:           CX_XDLH_TLP_REGOUT
// Default:        1 (((CX_TECHNOLOGY == 0)) ? 1 : 1)
// Values:         0, 1
// Enabled:        CX_CUSTOM_PIPELINING
// Parameter Type: Performance Setting
// 
// Specifies insertion of register pipeline at the outputs of XDLH, providing trade-off of latency and gates for ease of 
// timing closure.
`define CX_XDLH_TLP_REGOUT 1

///reuse-pragma attr MinValue 0

// Name:         XDLH_PKT_PENDING_REG
// Default:      0 (EASE_GEN3_FPGA_TIMING)
// Values:       -2147483648, ..., 1
// Enabled:      (CX_SEL_PHY_MODE  ? (CX_MAX_CPCIE_SPEED >= 3) : CX_S_CPCIE_MODE ? 
//               (CX_GEN3_MODE != GEN3_DISABLED) : 0)
// 
// Register calculation of pkt pending bit 
// at the cost of a cycle latency
`define XDLH_PKT_PENDING_REG 0



// Name:           CX_XMLH_SCRAMBLE_REGOUT
// Default:        1 (((CX_TECHNOLOGY == 0)) ? 1 : 1)
// Values:         0, 1
// Enabled:        CX_CUSTOM_PIPELINING && !CX_MPCIE_ENABLE
// Parameter Type: Performance Setting
// 
// Specifies insertion of register pipeline at the outputs of XMLH Scrambler, providing trade-off of latency and gates for 
// ease of timing closure.
`define CX_XMLH_SCRAMBLE_REGOUT 1


// Name:           CX_XMLH_PIPE_REGOUT
// Default:        0 ((CX_MPCIE_ENABLE)? 0 : ((CX_TECHNOLOGY == 0)) ? 1 : 0)
// Values:         0, 1
// Enabled:        CX_CUSTOM_PIPELINING && !CX_MPCIE_ENABLE
// Parameter Type: Performance Setting
// 
// Specifies insertion of register pipeline at the outputs of XMLH PIPE, providing trade-off of latency and gates for ease 
// of timing closure. For M-PCIe, applies to the Layer1 to PIPE RMMI adapter interface.
`define CX_XMLH_PIPE_REGOUT 0


// Name:           CX_ERROR_LOG_REGOUT
// Default:        0 (((CX_TECHNOLOGY == 0) || (CX_SRIOV_ENABLE && CX_NVFUNC>32)) ? 1 
//                 : 0)
// Values:         0, 1
// Enabled:        CX_CUSTOM_PIPELINING
// Parameter Type: Performance Setting
// 
// Specifies insertion of register pipeline at the Outputs Error Log, providing trade-off of latency and gates for ease of 
// timing closure.
`define CX_ERROR_LOG_REGOUT 0


// Name:           CX_FLT_Q_REGOUT
// Default:        1 ((CX_INTERNAL_ATU_ENABLE && CX_ATU_NUM_INBOUND_REGIONS > 32) ? 2 
//                 : ADDR_TRANSLATION_SUPPORT_EN||SATA_CAP_ENABLE||CX_GEN3_DYNAMIC_FREQ)
// Values:         0, ..., 2
// Enabled:        (CX_CUSTOM_PIPELINING==1 && (ADDR_TRANSLATION_SUPPORT_EN==0 && 
//                 SATA_CAP_ENABLE==0 || CX_INTERNAL_ATU_ENABLE))
// Parameter Type: Performance Setting
// 
// Specifies insertion of register pipeline between receive filter and receive queue input manager, providing trade-off of 
// latency and gates for ease of timing closure.
`define CX_FLT_Q_REGOUT 1


// Name:           CX_XADM_FORMATION_REGIN
// Default:        0 ((CX_INTERNAL_ATU_ENABLE && CX_ATU_NUM_OUTBOUND_REGIONS > 32) || 
//                 (CX_RAS_DES_EINJ_ENABLE))
// Values:         0, 1
// Enabled:        CX_CUSTOM_PIPELINING==1
// Parameter Type: Performance Setting
// 
// Specifies insertion of register pipeline before XADM output formation providing trade-off of latency and gates for ease 
// of timing closure.
`define CX_XADM_FORMATION_REGIN 0


// Name:           CX_FLT_Q_PIPELINE_WD
// Default:        146 (((RADM_SEG_BUF==1) ?  (CX_SEG_WIDTH + 3 +  (32 * CX_NW) + CX_NVC + CX_NW + CX_NVC  + CX_NVC + 3 + 1 + 1 + 1 + ((CX_NW==8) ? 1 : 0)) : 
//                 ((32 * CX_NW) + CX_NVC + CX_NW + CX_NVC  + CX_NVC + 3 + 1 + 1 + 1 + ((CX_NW==8) ? 1 : 0))))
// Values:         0, ..., 2147483647
// Parameter Type: Performance Setting
// 
// Specifies insertion of register pipeline at the Outputs Error Log, providing trade-off of latency and gates for ease of 
// timing closure.
`define CX_FLT_Q_PIPELINE_WD 146


// Name:           VFINDEX_CALC_REGOUT
// Default:        0 (CX_CRC_LATENCY_RTLH && CX_SRIOV_ENABLE && CX_NVFUNC>32)
// Values:         0, 1
// Enabled:        CX_CRC_LATENCY_RTLH && CX_SRIOV_ENABLE
// Parameter Type: Performance Setting
// 
// Specifies insertion of a local register pipeline for the pfvf_to_vfindex output in the RADM_FILTER providing area trade 
// off for ease of timing closure.
// `define VFINDEX_CALC_REGOUT


// Name:           RADM_VFINDEX_REGOUT
// Default:        0 (VFINDEX_CALC_REGOUT)
// Values:         0, 1
// Enabled:        VFINDEX_CALC_REGOUT
// Parameter Type: Performance Setting
// 
// Specifies insertion of a local register pipeline for the pfvf_to_vfindex output 
// in the radm_filter providing area trade-off for ease of timing closure.
// `define RADM_VFINDEX_REGOUT


// Name:           CPL_LUT_VFINDEX_REGOUT
// Default:        0 (VFINDEX_CALC_REGOUT)
// Values:         0, 1
// Enabled:        VFINDEX_CALC_REGOUT
// Parameter Type: Performance Setting
// 
// THIS LINE INTENIONALLY LEFT BLANK
// `define CPL_LUT_VFINDEX_REGOUT


// Name:           CX_RID_REGIN
// Default:        0 (CX_SRIOV_ENABLE && FPGA)
// Values:         0, 1
// Enabled:        CX_CUSTOM_PIPELINING==1 && CX_SRIOV_ENABLE
// Parameter Type: Performance Setting
// 
// Specifies insertion of register pipeline for the rid_to_pfvf module inputs in the RADM_FILTER and RADM_CPL_LUT blocks, 
// providing trade-off of latency and gates for ease of timing closure.
`define CX_RID_REGIN 0


// Name:           CX_RID_REGOUT
// Default:        0 (CX_SRIOV_ENABLE || RADM_VFINDEX_REGOUT)
// Values:         0, 1
// Enabled:        CX_CUSTOM_PIPELINING==1 && CX_ARI_ENABLE && !RADM_VFINDEX_REGOUT
// Parameter Type: Performance Setting
// 
// Specifies insertion of register pipeline for the rid_to_pfvf module output in the RADM_FILTER and RADM_CPL_LUT blocks, 
// providing trade-off of latency and gates for ease of timing closure.
// `define CX_RID_REGOUT


`define CX_RID_DELAY 0


// Name:           CX_VEN_MSI_REGIN
// Default:        0 (((CX_TECHNOLOGY == 0) || (CX_SRIOV_ENABLE ==1)) ? 1 : 0)
// Values:         0, 1
// Enabled:        CX_CUSTOM_PIPELINING
// Parameter Type: Performance Setting
// 
// Specifies insertion of an input register pipeline for the Vendor MSI interface
`define CX_VEN_MSI_REGIN 0


// Name:           MSG_FORM_VFINDEX_REGOUT
// Default:        0 (VFINDEX_CALC_REGOUT)
// Values:         0, 1
// Enabled:        VFINDEX_CALC_REGOUT
// Parameter Type: Performance Setting
// 
// Specifies insertion of an output register pipeline for the msg formation pfvf_to_vfindex block
`define MSG_FORM_VFINDEX_REGOUT 0


// Name:           CX_APP_ERR_REGIN
// Default:        0 (((CX_TECHNOLOGY == 0) || (CX_SRIOV_ENABLE ==1)) ? 1 : 0)
// Values:         0, 1
// Enabled:        CX_CUSTOM_PIPELINING
// Parameter Type: Performance Setting
// 
// Specifies insertion of an input register pipeline for the Application Error Return interface
`define CX_APP_ERR_REGIN 0


// Name:           CX_PIPELINE_DIAG_STATUS_BUS
// Default:        0
// Values:         0, 1
// Enabled:        CX_CUSTOM_PIPELINING
// Parameter Type: Performance Setting
// 
// Diagnostic Status Bus Output Pipeline Enable, 
//  providing trade-off of latency and gates for ease of timing closure.
// `define CX_PIPELINE_DIAG_STATUS_BUS

//Define the inclusion parameters for the various BCM modules.
//Each library component (BCM) has a unique parameter, RM_BCMxx, which controls whether it is included in the design.
//Setting these flags to 0 indicates the file is needed, a one indicates it is not needed and should be ReMoved.


// Name:         USE_FOUNDATION
// Default:      true ([<functionof>])
// Values:       false (0), true (1)
// 
// The component code utilizes DesignWare Foundation parts for optimal 
// Synthesis QoR. Customers with only a DesignWare license MUST use 
// Foundation parts. Customers with only a Source license, CANNOT use 
// Foundation parts. Customers with both Source and DesignWare licenses 
// have the option of using Foundation parts.
`define USE_FOUNDATION 1




`define RM_BCM01 0


`define RM_BCM21 0


`define RM_BCM22 0


`define RM_BCM23 0


`define RM_BCM25 0


`define RM_BCM36 0


`define RM_BCM41 0


`define RM_BCM46_A 1


`define RM_BCM46_B 1


`define RM_BCM46_C 1


`define RM_BCM46_D 1


`define RM_BCM46_E 1


`define RM_BCM48 0


`define RM_BCM55 0


`define RM_BCM60 1


`define RM_BCM62 1


`define RM_BCM64_TD 0


`define RM_BCM65_TD 0


`define RM_BCM57 0


`define RM_BCM85 0


`define RM_BCM86 0


`define RM_BCM87 0


`define DWC_NO_CDC_INIT


`define DWC_NO_TST_MODE


`define CX_RST_HOLD 1


// `define CX_TKN_FRM_ERR_UNREG

//This parameter is used undefined to remove logic needed in x1 link mode only
//for detecting Gen3 token alignemnt on a byte boundary. This can be used to
//improve timing (for example on 8sx2 fpga configs) if runtime support for x1 link
//mode at Gen3 speed is not required.
//This parameter is shared for Gen3/4 mode.

`define CX_GEN3_X1_ENABLE

//This parameter is used defined to improve timing in the token finder logic when
//CX_GEN3_X1_ENABLE undefined alone is not sufficient.

// `define CX_RMLH_TLP_CNT_REG


// `define CX_LINK_CAPABILITIES2_REG_BACKWARD_COMPATIBLE_WITH_2_1


// `define CX_LINK_CONTROL2_REG_BACKWARD_COMPATIBLE_WITH_2_1


// `define CX_CORE_BACKWARD_COMPATIBLE_WITH_REV_3_0_VER_0_7


// `define CX_UNCORR_ERR_SEVERITY_REG_BACKWARD_COMPATIBLE_WITH_2_0


// `define CX_LINK_CAPABILITIES_REG_BACKWARD_COMPATIBLE_WITH_2_1




// Name:         CX_MEMORY_MAP_VIEW
// Default:      DBI
// Values:       DBI (0), WIRE (1), RsvD (2)
// 
// Specifies the current memory map view. There are two buses that can access the core's register space: DBI and WIRE (over 
// PCIe protocol). When generating register, RALF, or IP-XACT reports, 
//  coreConsultant will use this parameter to determine which memory map view to generate. The register map as perceived 
//  from the remote link partner (wire view) is different to that of the local application (DBI view). For example, many 
//  registers that are RO over the wire are also RW over the DBI. It has no effect on the RTL implementation. 
//  - 0: DBI 
//  - 1: WIRE
`define CX_MEMORY_MAP_VIEW 0


// Name:         CX_MEMORY_MAP_POSITION
// Default:      Downstream Port
// Values:       Upstream Port (0), Downstream Port (1)
// Enabled:      Always
// 
// The register map of an upstream port (as determined by device_type[3:0]) is different to that of a downstream port.When 
// generating register, RALF, or IP-XACT reports, coreConsultant will use this parameter to determine which memory map to 
// generate. It has no effect on the RTL implementation. 
//  - 0: Upstream Port 
//  - 1: Downstream Port
`define CX_MEMORY_MAP_POSITION


// Name:         CX_MEMORY_MAP_PCIE_TYPE
// Default:      C-PCIe Port ((CX_PCIE_MODE==1)? 1 : 0)
// Values:       C-PCIe Port (0), M-PCIe Port (1)
// Enabled:      CX_PCIE_MODE==2
// 
// The register map of an M-PCIe device (as determined by phy_type when CX_PCIE_MODE=2 or CX_PCIE_MODE otherwise) is 
// different to that of a standard PCIe (C-PCIe) device. When generating register, RALF, or IP-XACT reports, coreConsultant will 
// use this parameter to determine which memory map to generate. It has no effect on the RTL implementation. 
//  - 0: C-PCIe Port 
//  - 1: M-PCIe Port
// `define CX_MEMORY_MAP_PCIE_TYPE


// Name:         AXI_INTERFACE_TYPE
// Default:      0 ((AMBA_INTERFACE == 3) ? 1 : 0)
// Values:       -2147483648, ..., 2147483647
// Enabled:      AMBA_INTERFACE>=2
// 
// DO NOT USE IN THE DESIGN, this parameter is used to resolve AXI cA interface binding
`define AXI_INTERFACE_TYPE 0


// Name:           RAM1P_ARCH
// Default:        Registered Read Port Data Output
// Values:         Registered Read Port Data Output (0), Registered Read Port Address 
//                 Input (1)
// Enabled:        !(CX_RAM_TYPE==1)
// Parameter Type: Feature Setting
// 
// There are two possible architectures for the single-port RAMs used in the PCIe core: a) with a registered read port data 
// output and b) with a registered read port address input. coreConsultant will use this parameter to select the 
// architecture used in the single-port RAM models. It has no effect on the RTL implementation. Note: when DesignWare RAMs are selected 
// only registered read port data architecture is supported for single-port RAMs 
//  - 0: Registered read port data output RAM model 
//  - 1: Registered read port address input RAM model
`define RAM1P_ARCH 0


// Name:           RAM2P_ARCH
// Default:        Registered Read Port Data Output
// Values:         Registered Read Port Data Output (0), Registered Read Port Address 
//                 Input (1)
// Parameter Type: Feature Setting
// 
// There are two possible architectures for the dual-port RAMs used in the PCIe core: a) with a registered read port data 
// output and b) with a registered read port address input. coreConsultant will use this parameter to select the architecture 
// used in the dual-port RAM models. It has no effect on the RTL implementation. 
//  - 0: Registered read port data output RAM model 
//  - 1: Registered read port address input RAM model
`define RAM2P_ARCH 0


// Name:           CX_RADM_RAM_RD_LATENCY
// Default:        1 Cycle
// Values:         1 Cycle (1), 2 Cycles (2), 3 Cycles (3), 4 Cycles (4)
// Enabled:        CX_RADMQ_MODE==2
// Parameter Type: Performance Setting
// 
// Specifies the Receive Queue Header and Data RAM read cycle latency. The controller samples the read data 
// CX_RADM_RAM_RD_LATENCY clock cycles after the read address is valid at the Header/Data RADM RAM interface. 
//  
// Note: The RAM read data is always retimed/registered.
`define CX_RADM_RAM_RD_LATENCY 1


// Name:           CX_RAMQRAM_REGOUT_
// Default:        Yes
// Values:         No (0), Yes (1)
// Enabled:        0
// Parameter Type: Performance Setting
// 
// Specifies if a pipeline is inserted for the Receive Data/Header Queue RAM output signals. 
//  
//  This is a read-only signal for informational purposes. A non-optional read data retiming register is always inserted 
//  on the RAM outputs.
`define CX_RAMQRAM_REGOUT_ 1




// Name:           CX_RETRYSOTRAM_REGOUT
// Default:        No ((CX_GEN3_MODE == GEN3_DF && CX_FREQ == FREQ_125 || CX_GEN2_MODE 
//                 == GEN2_DF && CX_FREQ == FREQ_250) && CX_RASDP > 0)
// Values:         No (0), Yes (1)
// Parameter Type: Performance Setting
// 
// Specifies if a pipeline is inserted for the SOT RAM output signals.
`define CX_RETRYSOTRAM_REGOUT 0


// Name:           CX_RETRYRAM_REGOUT
// Default:        No ((CX_GEN3_MODE == GEN3_DF && CX_FREQ == FREQ_125 || CX_GEN2_MODE 
//                 == GEN2_DF && CX_FREQ == FREQ_250) && CX_RASDP > 0)
// Values:         No (0), Yes (1)
// Parameter Type: Performance Setting
// 
// Specifies if a pipeline is inserted for the Retry RAM output signals.
`define CX_RETRYRAM_REGOUT 0


// Name:           CX_RETRY_RAM_RD_LATENCY
// Default:        1 Cycle
// Values:         1 Cycle (1), 2 Cycles (2)
// Parameter Type: Performance Setting
// 
// Specifies the Retry RAM read cycle latency. The controller samples the read data CX_RETRY_RAM_RD_LATENCY clock cycles 
// after the read address is valid. The default of '1' corresponds to the typical read cycle access time for synchronous 
// memories.
`define CX_RETRY_RAM_RD_LATENCY 1


// Name:           CX_RETRY_SOT_RAM_RD_LATENCY
// Default:        1 Cycle
// Values:         1 Cycle (1), 2 Cycles (2)
// Parameter Type: Performance Setting
// 
// Specifies the Retry SOT RAM read cycle latency. The controller samples the read data CX_RETRY_SOT_RAM_RD_LATENCY clock 
// cycles after the read address is valid. The default of '1' corresponds to the typical read cycle access time for 
// synchronous memories.
`define CX_RETRY_SOT_RAM_RD_LATENCY 1


// Name:         CX_RAS_XDLH_COUNTERS
// Default:      6
// Values:       -2147483648, ..., 2147483647
// Enabled:      (((CX_RASDP==0)&&(CX_RASDP_RAM_PROT==0))? 0: 1==1)
// 
// Determines the width of the RAS statistics counters for the XDLH regions
`define CX_RAS_XDLH_COUNTERS 6


// Name:         CX_RAS_XDLH_COUNTERS_MASK
// Default:      0x29 ([<functionof> ((CX_RASDP==0)? 0: 1)])
// Values:       0x0, ..., 0x3f
// Enabled:      (((CX_RASDP==0)&&(CX_RASDP_RAM_PROT==0))? 0: 1==1)
// 
// Per counter mask to determine if the counter exists for the XDLH regions
`define CX_RAS_XDLH_COUNTERS_MASK 6'h29



// Name:         CX_RAS_XTLH_COUNTERS
// Default:      5
// Values:       -2147483648, ..., 2147483647
// Enabled:      (((CX_RASDP==0)&&(CX_RASDP_RAM_PROT==0))? 0: 1==1)
// 
// Determines the width of the RAS statistics counters for the XTLH regions
`define CX_RAS_XTLH_COUNTERS 5


// Name:         CX_RAS_XTLH_COUNTERS_MASK
// Default:      19 ([<functionof> CX_NW RAS_PROT_TYPE_IS_PAR CX_TLP_PREFIX_ENABLE 
//               CX_ECRC_ENABLE])
// Values:       -2147483648, ..., 2147483647
// Enabled:      (((CX_RASDP==0)&&(CX_RASDP_RAM_PROT==0))? 0: 1==1)
// 
// Per counter mask to determine if the counter exists for the XTLH regions
`define CX_RAS_XTLH_COUNTERS_MASK 19



// Name:         CX_RAS_RDLH_COUNTERS
// Default:      1
// Values:       -2147483648, ..., 2147483647
// Enabled:      (((CX_RASDP==0)&&(CX_RASDP_RAM_PROT==0))? 0: 1==1)
// 
// Determines the width of the RAS statistics counters for the RDLH regions
`define CX_RAS_RDLH_COUNTERS 1


// Name:         CX_RAS_RDLH_COUNTERS_MASK
// Default:      0x1 ([<functionof>])
// Values:       0x0, 0x1
// Enabled:      (((CX_RASDP==0)&&(CX_RASDP_RAM_PROT==0))? 0: 1==1)
// 
// Per counter mask to determine if the counter exists for the RDLH regions
`define CX_RAS_RDLH_COUNTERS_MASK 1'h1



// Name:         CX_RAS_RTLH_COUNTERS
// Default:      15
// Values:       -2147483648, ..., 2147483647
// Enabled:      (((CX_RASDP==0)&&(CX_RASDP_RAM_PROT==0))? 0: 1==1)
// 
// Determines the width of the RAS statistics counters for the RTLH regions
`define CX_RAS_RTLH_COUNTERS 15


// Name:         CX_RAS_RTLH_COUNTERS_MASK
// Default:      0xb ([<functionof> CX_ECRC_ENABLE CX_NW CX_NW_GTR_1 
//               CX_TLP_PREFIX_ENABLE ARC_256_P2])
// Values:       0x0, ..., 0x7fff
// Enabled:      (((CX_RASDP==0)&&(CX_RASDP_RAM_PROT==0))? 0: 1==1)
// 
// Per counter mask to determine if the counter exists for the RTLH regions
`define CX_RAS_RTLH_COUNTERS_MASK 15'hb



// Name:         CX_RAS_XADM_COUNTERS
// Default:      12
// Values:       -2147483648, ..., 2147483647
// Enabled:      (((CX_RASDP==0)&&(CX_RASDP_RAM_PROT==0))? 0: 1==1)
// 
// Determines the width of the RAS statistics counters for the XADM regions
`define CX_RAS_XADM_COUNTERS 12



// Name:         CX_RAS_XADM_COUNTERS_MASK
// Default:      0x4008 ([<functionof> GLOB_ADDR_ALIGN_EN CX_NW_GTR_2 
//               ADDR_TRANSLATION_SUPPORT_EN CX_TLP_PREFIX_ENABLE])
// Values:       0x0, ..., 0x7fff
// Enabled:      (((CX_RASDP==0)&&(CX_RASDP_RAM_PROT==0))? 0: 1==1)
// 
// Per counter mask to determine if the counter exists for the XADM region
`define CX_RAS_XADM_COUNTERS_MASK 15'h4008



// Name:         CX_RAS_STAT_FILTER_EP_WD
// Default:      5
// Values:       -2147483648, ..., 2147483647
// Enabled:      (((CX_RASDP==0)&&(CX_RASDP_RAM_PROT==0))? 0: 1==1)
// 
// Determines the width of the RAS statistics counters for the RADM_FILTER_EP
`define CX_RAS_STAT_FILTER_EP_WD 5


// Name:         CX_RAS_STAT_FILTER_RC_WD
// Default:      5
// Values:       -2147483648, ..., 2147483647
// Enabled:      (((CX_RASDP==0)&&(CX_RASDP_RAM_PROT==0))? 0: 1==1)
// 
// Determines the width of the RAS statistics counters for the RADM_FILTER_RC
`define CX_RAS_STAT_FILTER_RC_WD 5


// Name:         CX_RAS_STAT_FILTER_SW_WD
// Default:      5
// Values:       -2147483648, ..., 2147483647
// Enabled:      (((CX_RASDP==0)&&(CX_RASDP_RAM_PROT==0))? 0: 1==1 && 0)
// 
// Determines the width of the RAS statistics counters for the RADM_FILTER_SW
`define CX_RAS_STAT_FILTER_SW_WD 5


// Name:         CX_RAS_STAT_SEGBUF_WD
// Default:      7
// Values:       -2147483648, ..., 2147483647
// Enabled:      (((CX_RASDP==0)&&(CX_RASDP_RAM_PROT==0))? 0: 1==1)
// 
// Determines the width of the RAS statistics counters for the RADM_SEGBUF
`define CX_RAS_STAT_SEGBUF_WD 7


// Name:         CX_RADM_FORMATION_QUEUE_COUNTER_WIDTH
// Default:      7
// Values:       -2147483648, ..., 2147483647
// Enabled:      CX_RAS_EN==1 && ARC_512
// 
// Determines the width of the RAS statistics counters for the RADM FORMATION QUEUE
`define CX_RADM_FORMATION_QUEUE_COUNTER_WIDTH 7


// Name:         CX_RAS_RADM_COUNTERS
// Default:      31 ([<functionof> ARC_512 CX_RADM_FORMATION_QUEUE_COUNTER_WIDTH 
//               CX_IS_EP CX_IS_DM CX_IS_RC CX_IS_SW CX_RAS_STAT_FILTER_EP_WD 
//               CX_RAS_STAT_FILTER_RC_WD CX_RAS_STAT_FILTER_SW_WD CX_RAS_STAT_SEGBUF_WD ])
// Values:       -2147483648, ..., 2147483647
// Enabled:      (((CX_RASDP==0)&&(CX_RASDP_RAM_PROT==0))? 0: 1==1)
// 
// Determines the width of the RAS statistics counters for the RADM regions
`define CX_RAS_RADM_COUNTERS 31


// Name:         CX_RAS_RADM_COUNTERS_MASK
// Default:      0x160420c ([<functionof> RAS_PROT_TYPE_IS_PAR ARC_512 
//               TRGT1_POPULATE CX_NW ARC_256_P2 CX_NW_GTR_2 CX_FLT_Q_REGOUT CX_TLP_PREFIX_ENABLE 
//               CX_IS_DM CX_RASDP_EN])
// Values:       0x0, ..., 0xffffffffff
// Enabled:      (((CX_RASDP==0)&&(CX_RASDP_RAM_PROT==0))? 0: 1==1)
// 
// Per counter mask to determine if the counter exists for the RADM regions
`define CX_RAS_RADM_COUNTERS_MASK 40'h160420c


// Name:         CX_GEN3_OR_TLP_PRFX
// Default:      0 (CX_GEN3_SPEED || CX_TLP_PREFIX_ENABLE)
// Values:       0, 1
// Enabled:      0
// 
// Aux constant to indicate if PRFX or gen3 speed is selected
// `define CX_GEN3_OR_TLP_PRFX


`define MPCIE_SYNC_TYPE 3


// Name:         PHY_CLKREQ_SUPPORT
// Default:      0 (!(RIO_POPULATED==1 || CX_PCIE_MODE==1 || CX_PIPE43_SUPPORT==1))
// Values:       0, 1
// Enabled:      CX_PCIE_MODE!=1 && PHY_TYPE==CC_CUSTOM_PHY
// 
// This parameter indicates that the PHY does support the outputing of phy_clk_req_n signal
// `define PHY_CLKREQ_SUPPORT


// Name:         CX_NCLIENTS
// Default:      3 ((CLIENT2_POPULATED==1)? 3: 2)
// Values:       -2147483648, ..., 2147483647
// Enabled:      0
// 
// Aux constant to define the number of client interfaces
`define CX_NCLIENTS 3


// Name:         FPGA_PROTOTYPE
// Default:      0
// Values:       0, 1
// 
// This parameter results in the inclusion of FPGA specific modifications to the clk_rst module
// `define FPGA_PROTOTYPE


// Name:         CORE_CLK_PASS_THROUGH
// Default:      0
// Values:       0, 1
// Enabled:      FPGA_PROTOTYPE==1
// 
// If clock-generation is performed outside of the provided clk_rst module 
//  this feeds the clock directly through the clk_rst.
// `define CORE_CLK_PASS_THROUGH


// Name:           CX_LANEFLIP_RX_REGIN
// Default:        0
// Values:         0, 1
// Enabled:        CX_CUSTOM_PIPELINING
// Parameter Type: Performance Setting
// 
// Specifies insertion of register pipeline at the inputs of Lane Flip block signals from PHY, providing trade-off of 
// latency and gates for ease of timing closure.
`define CX_LANEFLIP_RX_REGIN 0


// Name:           CX_LANEFLIP_TX_REGOUT
// Default:        0
// Values:         0, 1
// Enabled:        CX_CUSTOM_PIPELINING
// Parameter Type: Performance Setting
// 
// Specifies insertion of register pipeline at the outputs of Lane Flip block signals to PHY, providing trade-off of 
// latency and gates for ease of timing closure.
`define CX_LANEFLIP_TX_REGOUT 0


// Name:         CX_RBARS_INCLUDED
// Default:      0 ([ <functionof> ])
// Values:       0, 1
// Enabled:      0
// 
// Indication that at least 1 PF has at least 1 resizable BAR. 
//  if there are no resizable BARs, the macro is not defined
// `define CX_RBARS_INCLUDED

