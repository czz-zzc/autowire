// -----------------------------------------------------------------------------
// File      : dma_top.v
// Brief     : Auto-generated by autowire.py v2.0
// Author    : czz
// Date      : 2025-09-03 19:54:31
// -----------------------------------------------------------------------------

module dma_top(
    // u_dma_csr ports
    input           pclk,
    input           presetn,
    input           dma_apbs_psel,
    input           dma_apbs_penable,
    input           dma_apbs_pwrite,
    input   [11:0]  dma_apbs_paddr,
    input   [31:0]  dma_apbs_pwdata,
    output  [31:0]  dma_apbs_prdata,
    output          dma_apbs_pready,

    // u_dma_core ports
    input           clk,
    input           rst_n,
    output          dma_axi4m_awlock,
    output  [3:0]   dma_axi4m_awcache,
    output  [2:0]   dma_axi4m_awprot,
    output  [3:0]   dma_axi4m_awqos,
    output  [31:0]  dma_axi4m_awaddr,
    output  [7:0]   dma_axi4m_awlen,
    output  [2:0]   dma_axi4m_awsize,
    output  [1:0]   dma_axi4m_awburst,
    output          dma_axi4m_awvalid,
    input           dma_axi4m_awready,
    output  [63:0]  dma_axi4m_wdata,
    output  [7:0]   dma_axi4m_wstrb,
    output          dma_axi4m_wlast,
    output          dma_axi4m_wvalid,
    input           dma_axi4m_wready,
    input   [1:0]   dma_axi4m_bresp,
    input           dma_axi4m_bvalid,
    output          dma_axi4m_bready,
    output          dma_axi4m_arlock,
    output  [3:0]   dma_axi4m_arcache,
    output  [2:0]   dma_axi4m_arprot,
    output  [3:0]   dma_axi4m_arqos,
    output  [31:0]  dma_axi4m_araddr,
    output  [7:0]   dma_axi4m_arlen,
    output  [2:0]   dma_axi4m_arsize,
    output  [1:0]   dma_axi4m_arburst,
    output          dma_axi4m_arvalid,
    input           dma_axi4m_arready,
    input   [63:0]  dma_axi4m_rdata,
    input   [1:0]   dma_axi4m_rresp,
    input           dma_axi4m_rlast,
    input           dma_axi4m_rvalid,
    output          dma_axi4m_rready,
    output  [3:0]   dma_axi4m_awid,
    input   [3:0]   dma_axi4m_bid,
    output  [3:0]   dma_axi4m_arid,
    input   [3:0]   dma_axi4m_rid
);

wire  [31:0]  csr_desc_dst_addr [1:0]        ;
wire  [1:0]   csr_desc_enable                ;
wire  [31:0]  csr_desc_num_bytes [1:0]       ;
wire  [31:0]  csr_desc_read_jump_bytes [1:0] ;
wire  [1:0]   csr_desc_read_mode             ;
wire  [31:0]  csr_desc_src_addr [1:0]        ;
wire  [31:0]  csr_desc_write_jump_bytes [1:0];
wire  [1:0]   csr_desc_write_mode            ;
wire          csr_dma_done                   ;
wire          csr_dma_err                    ;
wire  [31:0]  csr_dma_err_addr               ;
wire          csr_dma_err_clr                ;
wire  [1:0]   csr_dma_err_type               ;
wire  [7:0]   csr_dma_maxburst               ;
wire          csr_dma_start                  ;
wire  [1:0]   csr_dma_status                 ;

// Instance: u_dma_csr (dma_csr)
dma_csr u_dma_csr (
    .pclk                      (pclk                     ),    // input 
    .presetn                   (presetn                  ),    // input 
    .psel                      (dma_apbs_psel            ),    // input 
    .penable                   (dma_apbs_penable         ),    // input 
    .pwrite                    (dma_apbs_pwrite          ),    // input 
    .paddr                     (dma_apbs_paddr           ),    // input  [11:0]
    .pwdata                    (dma_apbs_pwdata          ),    // input  [31:0]
    .prdata                    (dma_apbs_prdata          ),    // output [31:0]
    .pready                    (dma_apbs_pready          ),    // output
    .csr_dma_maxburst          (csr_dma_maxburst         ),    // output [7:0]
    .csr_dma_start             (csr_dma_start            ),    // output
    .csr_dma_version           (16'habcd                 ),    // input  [15:0]
    .csr_dma_status            (csr_dma_status           ),    // input  [1:0]
    .csr_dma_err               (csr_dma_err              ),    // input 
    .csr_dma_done              (csr_dma_done             ),    // input 
    .csr_dma_err_clr           (csr_dma_err_clr          ),    // output
    .csr_dma_err_type          (csr_dma_err_type         ),    // input  [1:0]
    .csr_dma_err_addr          (csr_dma_err_addr         ),    // input  [31:0]
    .csr_desc_read_mode        (csr_desc_read_mode       ),    // output [1:0]
    .csr_desc_write_mode       (csr_desc_write_mode      ),    // output [1:0]
    .csr_desc_enable           (csr_desc_enable          ),    // output [1:0]
    .csr_desc_num_bytes        (csr_desc_num_bytes       ),    // output [31:0] [1:0]
    .csr_desc_src_addr         (csr_desc_src_addr        ),    // output [31:0] [1:0]
    .csr_desc_dst_addr         (csr_desc_dst_addr        ),    // output [31:0] [1:0]
    .csr_desc_read_jump_bytes  (csr_desc_read_jump_bytes ),    // output [31:0] [1:0]
    .csr_desc_write_jump_bytes (csr_desc_write_jump_bytes)     // output [31:0] [1:0]
);

// Instance: u_dma_core (dma_core)
dma_core #(
    .DMA_NUM_DESC(2)
) u_dma_core (
    .clk                       (clk                      ),    // input 
    .rst_n                     (rst_n                    ),    // input 
    .csr_desc_enable           (csr_desc_enable          ),    // input  [1:0]
    .csr_desc_src_addr         (csr_desc_src_addr        ),    // input  [31:0] [1:0]
    .csr_desc_dst_addr         (csr_desc_dst_addr        ),    // input  [31:0] [1:0]
    .csr_desc_num_bytes        (csr_desc_num_bytes       ),    // input  [31:0] [1:0]
    .csr_desc_write_mode       (csr_desc_write_mode      ),    // input  [1:0]
    .csr_desc_read_mode        (csr_desc_read_mode       ),    // input  [1:0]
    .csr_desc_write_jump_bytes (csr_desc_write_jump_bytes),    // input  [31:0] [1:0]
    .csr_desc_read_jump_bytes  (csr_desc_read_jump_bytes ),    // input  [31:0] [1:0]
    .csr_dma_maxburst          (csr_dma_maxburst         ),    // input  [7:0]
    .csr_dma_start             (csr_dma_start            ),    // input 
    .csr_dma_done              (csr_dma_done             ),    // output
    .csr_dma_status            (csr_dma_status           ),    // output [1:0]
    .csr_dma_err_clr           (csr_dma_err_clr          ),    // input 
    .csr_dma_err               (csr_dma_err              ),    // output
    .csr_dma_err_type          (csr_dma_err_type         ),    // output [1:0]
    .csr_dma_err_addr          (csr_dma_err_addr         ),    // output [31:0]
    .axim_awlock               (dma_axi4m_awlock         ),    // output
    .axim_awcache              (dma_axi4m_awcache        ),    // output [3:0]
    .axim_awprot               (dma_axi4m_awprot         ),    // output [2:0]
    .axim_awqos                (dma_axi4m_awqos          ),    // output [3:0]
    .axim_awaddr               (dma_axi4m_awaddr         ),    // output [31:0]
    .axim_awlen                (dma_axi4m_awlen          ),    // output [7:0]
    .axim_awsize               (dma_axi4m_awsize         ),    // output [2:0]
    .axim_awburst              (dma_axi4m_awburst        ),    // output [1:0]
    .axim_awvalid              (dma_axi4m_awvalid        ),    // output
    .axim_awready              (dma_axi4m_awready        ),    // input 
    .axim_wdata                (dma_axi4m_wdata          ),    // output [63:0]
    .axim_wstrb                (dma_axi4m_wstrb          ),    // output [7:0]
    .axim_wlast                (dma_axi4m_wlast          ),    // output
    .axim_wvalid               (dma_axi4m_wvalid         ),    // output
    .axim_wready               (dma_axi4m_wready         ),    // input 
    .axim_bresp                (dma_axi4m_bresp          ),    // input  [1:0]
    .axim_bvalid               (dma_axi4m_bvalid         ),    // input 
    .axim_bready               (dma_axi4m_bready         ),    // output
    .axim_arlock               (dma_axi4m_arlock         ),    // output
    .axim_arcache              (dma_axi4m_arcache        ),    // output [3:0]
    .axim_arprot               (dma_axi4m_arprot         ),    // output [2:0]
    .axim_arqos                (dma_axi4m_arqos          ),    // output [3:0]
    .axim_araddr               (dma_axi4m_araddr         ),    // output [31:0]
    .axim_arlen                (dma_axi4m_arlen          ),    // output [7:0]
    .axim_arsize               (dma_axi4m_arsize         ),    // output [2:0]
    .axim_arburst              (dma_axi4m_arburst        ),    // output [1:0]
    .axim_arvalid              (dma_axi4m_arvalid        ),    // output
    .axim_arready              (dma_axi4m_arready        ),    // input 
    .axim_rdata                (dma_axi4m_rdata          ),    // input  [63:0]
    .axim_rresp                (dma_axi4m_rresp          ),    // input  [1:0]
    .axim_rlast                (dma_axi4m_rlast          ),    // input 
    .axim_rvalid               (dma_axi4m_rvalid         ),    // input 
    .axim_rready               (dma_axi4m_rready         ),    // output
    .axim_awid                 (dma_axi4m_awid           ),    // output [3:0]
    .axim_bid                  (dma_axi4m_bid            ),    // input  [3:0]
    .axim_arid                 (dma_axi4m_arid           ),    // output [3:0]
    .axim_rid                  (dma_axi4m_rid            )     // input  [3:0]
);

endmodule