# AutoWire 使用说明

## 简介

AutoWire 是一个基于 pyverilog 的 Verilog SOC 自动连线工具，用于简化大型 SOC 设计中模块间的连线工作。它可以根据 YAML 配置文件自动完成模块实例化、端口连接、协议总线连线等工作，大幅减少手动连线的工作量和出错率。

## 连线原理
1. 工具会为不同模块的端口创建一个集合，集合中同名的输入输出进行自动连线。
2. 可通过手动(批量)更改使想连接的端口同名以适配自动连线
3. 当集合中的端口只有输入，或只有输出，会自动扩展为top端口
4. 优先级: 手动连线(`connections`)  > 协议连线(`bundle_con`) > 自动连线


## 基本用法
```bash
python autowire.py -i vcn.yaml -o output/ 
```

如需调试可增加 '-d' 参数，输出更详细的日志信息：
```bash
python autowire.py -i vcn.yaml -o output/ -d
```
## vcn.yaml 配置文件详解

### 完整示例及注释

```yaml
# ============================================
# 1. 顶层模块名称（必选）
# ============================================
top_module: soc_top

# ============================================
# 2. 全局宏定义文件（可选）
# ============================================
# 如果 RTL 文件中使用了 `define，需要在这里指定定义文件
define_files: 
  - ./rtl/define.vh
  - ./rtl/global_define.vh

# ============================================
# 3. RTL 文件路径（必选）
# ============================================
# 列出所有需要实例化的模块的 RTL 文件
rtl_path:
  - ./rtl/cpu_core.v
  - ./rtl/uart_controller.v
  - ./rtl/irq_controller.sv

# ============================================
# 4. 模块实例化配置（必选）
# ============================================
instances:
  # 基本实例化（无参数）
  - module: cpu_core              # 模块名（必须与 RTL 中的 module 名匹配）
    name: u_cpu                   # 实例名（自定义）
    
  # 带参数的实例化
  - module: uart_controller
    name: u_uart
    parameters:                   # 参数列表（可选）
      BAUD_RATE: 9600            # 参数名: 参数值
      DATA_BITS: 8
      PARITY_EN: 1
      
  # 多个相同模块的实例
  - module: irq_controller
    name: u_irq_0
  - module: irq_controller
    name: u_irq_1

# ============================================
# 5. 手动连线配置（可选）
# ============================================
# 格式：实例名.端口名 : 目标信号/表达式
connections:
  # 基本连线：端口 → wire
  u_cpu.clk: sys_clk
  u_uart.clk: sys_clk
  
  # 连接到常量
  u_uart.hsel_ahb: 1'b1
  u_cpu.test_mode: 1'b0
  
  # 信号拼接
  u_cpu.irq: "{6'b0, irq[0], uart_irq}"
  
  # 位宽选择
  u_cpu.test_in: irq[1:0]
  
  # 输出悬空
  u_uart.tx_data:

# ============================================
# 6. 协议总线连线（可选）
# ============================================
# 用于批量处理标准协议接口
bundle_con:
  # 格式 1：列表格式（推荐）
  - ahb:                          # 协议名（必须在 bundle.yaml 中定义）
      u_cpu.a_*: cpu_ahbm_*       # 实例.端口模式 : 目标信号模式
      u_uart.*_ahb: cpu_ahbm_*
      
  - axi:
      u_dma.m_axi_*: ddr_axi_*
      u_ddr_ctrl.s_axi_*: ddr_axi_*

# ============================================
# 7. 外扩到TOP输出信号（可选）
# ============================================
# 把内部的wire拓展到top的输出端口
top_add:
  - rst_clk_hsi

```

---


## 常见问题

### Q1: 端口连接冲突怎么办？
A: 手动连线优先级最高，会覆盖协议和自动连线。

### Q2: 如何确认协议连线是否生效？
A: 使用 `-d` 调试模式，查看日志中的协议匹配信息。

### Q3: 怎么增加总线协议类型？
A: 在boundle.yaml按原有格式增加


---
